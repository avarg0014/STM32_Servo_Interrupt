
INTERRUPTS PT3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b2c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003be8  08003be8  00004be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc4  08003cc4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003cc4  08003cc4  00004cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ccc  08003ccc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ccc  08003ccc  00004ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cd0  08003cd0  00004cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003cd4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003ce0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003ce0  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001035d  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002249  00000000  00000000  00015391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000175e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aff  00000000  00000000  000183d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019329  00000000  00000000  00018ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112d4  00000000  00000000  00032200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009df28  00000000  00000000  000434d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e13fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003298  00000000  00000000  000e1440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e46d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003bd0 	.word	0x08003bd0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003bd0 	.word	0x08003bd0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <maincpp>:

#define SERVO_TIMER htim15

void maincpp(void)

{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&SERVO_TIMER, TIM_CHANNEL_1);
 8000622:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <maincpp+0x74>)
 8000624:	2100      	movs	r1, #0
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fdda 	bl	80021e0 <HAL_TIM_PWM_Start>

	uint16_t pos = 500;
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	22fa      	movs	r2, #250	@ 0xfa
 8000630:	0052      	lsls	r2, r2, #1
 8000632:	801a      	strh	r2, [r3, #0]
	int8_t dir = +1;
 8000634:	1d7b      	adds	r3, r7, #5
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		SERVO_TIMER.Instance->CCR1 = pos;
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <maincpp+0x74>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	1dba      	adds	r2, r7, #6
 8000640:	8812      	ldrh	r2, [r2, #0]
 8000642:	635a      	str	r2, [r3, #52]	@ 0x34
		pos += dir;
 8000644:	1d7b      	adds	r3, r7, #5
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b25b      	sxtb	r3, r3
 800064a:	b299      	uxth	r1, r3
 800064c:	1dbb      	adds	r3, r7, #6
 800064e:	1dba      	adds	r2, r7, #6
 8000650:	8812      	ldrh	r2, [r2, #0]
 8000652:	188a      	adds	r2, r1, r2
 8000654:	801a      	strh	r2, [r3, #0]

		if(pos >= 2500)
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <maincpp+0x78>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d906      	bls.n	800066e <maincpp+0x52>
		{
			pos = 2500;
 8000660:	1dbb      	adds	r3, r7, #6
 8000662:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <maincpp+0x7c>)
 8000664:	801a      	strh	r2, [r3, #0]
			dir = -1;
 8000666:	1d7b      	adds	r3, r7, #5
 8000668:	22ff      	movs	r2, #255	@ 0xff
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	e00c      	b.n	8000688 <maincpp+0x6c>
		}
		else if( pos <= 500)
 800066e:	1dbb      	adds	r3, r7, #6
 8000670:	881a      	ldrh	r2, [r3, #0]
 8000672:	23fa      	movs	r3, #250	@ 0xfa
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	429a      	cmp	r2, r3
 8000678:	d806      	bhi.n	8000688 <maincpp+0x6c>
		{
			pos = 500;
 800067a:	1dbb      	adds	r3, r7, #6
 800067c:	22fa      	movs	r2, #250	@ 0xfa
 800067e:	0052      	lsls	r2, r2, #1
 8000680:	801a      	strh	r2, [r3, #0]
			dir = +1;
 8000682:	1d7b      	adds	r3, r7, #5
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fbdb 	bl	8000e44 <HAL_Delay>
		SERVO_TIMER.Instance->CCR1 = pos;
 800068e:	e7d4      	b.n	800063a <maincpp+0x1e>
 8000690:	20000030 	.word	0x20000030
 8000694:	000009c3 	.word	0x000009c3
 8000698:	000009c4 	.word	0x000009c4

0800069c <HAL_GPIO_EXTI_Rising_Callback>:
	}
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)

{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	0002      	movs	r2, r0
 80006a4:	1dbb      	adds	r3, r7, #6
 80006a6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_INT13_Pin)
 80006a8:	1dbb      	adds	r3, r7, #6
 80006aa:	881a      	ldrh	r2, [r3, #0]
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	019b      	lsls	r3, r3, #6
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d104      	bne.n	80006be <HAL_GPIO_EXTI_Rising_Callback+0x22>
	{
		button_releases++;
 80006b4:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	4b03      	ldr	r3, [pc, #12]	@ (80006c8 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 80006bc:	601a      	str	r2, [r3, #0]
		}
	}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	2000002c 	.word	0x2000002c

080006cc <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)

{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	0002      	movs	r2, r0
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_INT13_Pin)
 80006d8:	1dbb      	adds	r3, r7, #6
 80006da:	881a      	ldrh	r2, [r3, #0]
 80006dc:	2380      	movs	r3, #128	@ 0x80
 80006de:	019b      	lsls	r3, r3, #6
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d104      	bne.n	80006ee <HAL_GPIO_EXTI_Falling_Callback+0x22>
	{

		button_pressed++;
 80006e4:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	4b03      	ldr	r3, [pc, #12]	@ (80006f8 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 80006ec:	601a      	str	r2, [r3, #0]
	}
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	20000028 	.word	0x20000028

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 fb1a 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f80a 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f000 f94e 	bl	80009a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800070c:	f000 f8fe 	bl	800090c <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8000710:	f000 f862 	bl	80007d8 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  maincpp();
 8000714:	f7ff ff82 	bl	800061c <maincpp>
  while (1)
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	e7fd      	b.n	8000718 <main+0x1c>

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b093      	sub	sp, #76	@ 0x4c
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	2410      	movs	r4, #16
 8000724:	193b      	adds	r3, r7, r4
 8000726:	0018      	movs	r0, r3
 8000728:	2338      	movs	r3, #56	@ 0x38
 800072a:	001a      	movs	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	f003 fa23 	bl	8003b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000732:	003b      	movs	r3, r7
 8000734:	0018      	movs	r0, r3
 8000736:	2310      	movs	r3, #16
 8000738:	001a      	movs	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	f003 fa1c 	bl	8003b78 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	0018      	movs	r0, r3
 8000746:	f000 fe2b 	bl	80013a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2202      	movs	r2, #2
 800074e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2280      	movs	r2, #128	@ 0x80
 8000754:	0052      	lsls	r2, r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000758:	0021      	movs	r1, r4
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2240      	movs	r2, #64	@ 0x40
 8000764:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2202      	movs	r2, #2
 800076a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2202      	movs	r2, #2
 8000770:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2208      	movs	r2, #8
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2280      	movs	r2, #128	@ 0x80
 8000782:	0292      	lsls	r2, r2, #10
 8000784:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	22c0      	movs	r2, #192	@ 0xc0
 800078a:	04d2      	lsls	r2, r2, #19
 800078c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2280      	movs	r2, #128	@ 0x80
 8000792:	0592      	lsls	r2, r2, #22
 8000794:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	187b      	adds	r3, r7, r1
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fe4d 	bl	8001438 <HAL_RCC_OscConfig>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007a2:	f000 f979 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	003b      	movs	r3, r7
 80007a8:	2207      	movs	r2, #7
 80007aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	003b      	movs	r3, r7
 80007ae:	2202      	movs	r2, #2
 80007b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007be:	003b      	movs	r3, r7
 80007c0:	2102      	movs	r1, #2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 f952 	bl	8001a6c <HAL_RCC_ClockConfig>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007cc:	f000 f964 	bl	8000a98 <Error_Handler>
  }
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b013      	add	sp, #76	@ 0x4c
 80007d6:	bd90      	pop	{r4, r7, pc}

080007d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b098      	sub	sp, #96	@ 0x60
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	2354      	movs	r3, #84	@ 0x54
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	0018      	movs	r0, r3
 80007e4:	230c      	movs	r3, #12
 80007e6:	001a      	movs	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	f003 f9c5 	bl	8003b78 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ee:	2338      	movs	r3, #56	@ 0x38
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	0018      	movs	r0, r3
 80007f4:	231c      	movs	r3, #28
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f003 f9bd 	bl	8003b78 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	0018      	movs	r0, r3
 8000802:	2334      	movs	r3, #52	@ 0x34
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f003 f9b6 	bl	8003b78 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800080c:	4b3c      	ldr	r3, [pc, #240]	@ (8000900 <MX_TIM15_Init+0x128>)
 800080e:	4a3d      	ldr	r2, [pc, #244]	@ (8000904 <MX_TIM15_Init+0x12c>)
 8000810:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 8000812:	4b3b      	ldr	r3, [pc, #236]	@ (8000900 <MX_TIM15_Init+0x128>)
 8000814:	223f      	movs	r2, #63	@ 0x3f
 8000816:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b39      	ldr	r3, [pc, #228]	@ (8000900 <MX_TIM15_Init+0x128>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000;
 800081e:	4b38      	ldr	r3, [pc, #224]	@ (8000900 <MX_TIM15_Init+0x128>)
 8000820:	4a39      	ldr	r2, [pc, #228]	@ (8000908 <MX_TIM15_Init+0x130>)
 8000822:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000824:	4b36      	ldr	r3, [pc, #216]	@ (8000900 <MX_TIM15_Init+0x128>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800082a:	4b35      	ldr	r3, [pc, #212]	@ (8000900 <MX_TIM15_Init+0x128>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b33      	ldr	r3, [pc, #204]	@ (8000900 <MX_TIM15_Init+0x128>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000836:	4b32      	ldr	r3, [pc, #200]	@ (8000900 <MX_TIM15_Init+0x128>)
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fc79 	bl	8002130 <HAL_TIM_PWM_Init>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 f929 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2154      	movs	r1, #84	@ 0x54
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000854:	187a      	adds	r2, r7, r1
 8000856:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <MX_TIM15_Init+0x128>)
 8000858:	0011      	movs	r1, r2
 800085a:	0018      	movs	r0, r3
 800085c:	f002 fa20 	bl	8002ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000864:	f000 f918 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000868:	2138      	movs	r1, #56	@ 0x38
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2260      	movs	r2, #96	@ 0x60
 800086e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000894:	1879      	adds	r1, r7, r1
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_TIM15_Init+0x128>)
 8000898:	2200      	movs	r2, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fd8a 	bl	80023b4 <HAL_TIM_PWM_ConfigChannel>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 80008a4:	f000 f8f8 	bl	8000a98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	0192      	lsls	r2, r2, #6
 80008cc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80008da:	1d3a      	adds	r2, r7, #4
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_TIM15_Init+0x128>)
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 fa4b 	bl	8002d7c <HAL_TIMEx_ConfigBreakDeadTime>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 80008ea:	f000 f8d5 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80008ee:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <MX_TIM15_Init+0x128>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 f931 	bl	8000b58 <HAL_TIM_MspPostInit>

}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b018      	add	sp, #96	@ 0x60
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	20000030 	.word	0x20000030
 8000904:	40014000 	.word	0x40014000
 8000908:	00004e20 	.word	0x00004e20

0800090c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000912:	4a24      	ldr	r2, [pc, #144]	@ (80009a4 <MX_USART2_UART_Init+0x98>)
 8000914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000918:	22e1      	movs	r2, #225	@ 0xe1
 800091a:	0252      	lsls	r2, r2, #9
 800091c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000956:	0018      	movs	r0, r3
 8000958:	f002 faac 	bl	8002eb4 <HAL_UART_Init>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000960:	f000 f89a 	bl	8000a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000966:	2100      	movs	r1, #0
 8000968:	0018      	movs	r0, r3
 800096a:	f003 f825 	bl	80039b8 <HAL_UARTEx_SetTxFifoThreshold>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000972:	f000 f891 	bl	8000a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000978:	2100      	movs	r1, #0
 800097a:	0018      	movs	r0, r3
 800097c:	f003 f85c 	bl	8003a38 <HAL_UARTEx_SetRxFifoThreshold>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000984:	f000 f888 	bl	8000a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 800098a:	0018      	movs	r0, r3
 800098c:	f002 ffda 	bl	8003944 <HAL_UARTEx_DisableFifoMode>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000994:	f000 f880 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	2000007c 	.word	0x2000007c
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b08b      	sub	sp, #44	@ 0x2c
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	2414      	movs	r4, #20
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	0018      	movs	r0, r3
 80009b4:	2314      	movs	r3, #20
 80009b6:	001a      	movs	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	f003 f8dd 	bl	8003b78 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 80009c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009c2:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 80009c4:	2104      	movs	r1, #4
 80009c6:	430a      	orrs	r2, r1
 80009c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ca:	4b31      	ldr	r3, [pc, #196]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 80009cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ce:	2204      	movs	r2, #4
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 80009d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 80009dc:	2120      	movs	r1, #32
 80009de:	430a      	orrs	r2, r1
 80009e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 80009e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009e6:	2220      	movs	r2, #32
 80009e8:	4013      	ands	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 80009f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009fa:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 80009fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009fe:	2201      	movs	r2, #1
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 8000a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <MX_GPIO_Init+0xe8>)
 8000a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a16:	2202      	movs	r2, #2
 8000a18:	4013      	ands	r3, r2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a1e:	23a0      	movs	r3, #160	@ 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fc72 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INT13_Pin */
  GPIO_InitStruct.Pin = BUTTON_INT13_Pin;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2280      	movs	r2, #128	@ 0x80
 8000a30:	0192      	lsls	r2, r2, #6
 8000a32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	22c4      	movs	r2, #196	@ 0xc4
 8000a38:	0392      	lsls	r2, r2, #14
 8000a3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INT13_GPIO_Port, &GPIO_InitStruct);
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	4a13      	ldr	r2, [pc, #76]	@ (8000a94 <MX_GPIO_Init+0xec>)
 8000a46:	0019      	movs	r1, r3
 8000a48:	0010      	movs	r0, r2
 8000a4a:	f000 fafd 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a4e:	0021      	movs	r1, r4
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2220      	movs	r2, #32
 8000a54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2201      	movs	r2, #1
 8000a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2202      	movs	r2, #2
 8000a66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a68:	187a      	adds	r2, r7, r1
 8000a6a:	23a0      	movs	r3, #160	@ 0xa0
 8000a6c:	05db      	lsls	r3, r3, #23
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f000 fae9 	bl	8001048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2007      	movs	r0, #7
 8000a7c:	f000 fab2 	bl	8000fe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a80:	2007      	movs	r0, #7
 8000a82:	f000 fac4 	bl	800100e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b00b      	add	sp, #44	@ 0x2c
 8000a8c:	bd90      	pop	{r4, r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	40021000 	.word	0x40021000
 8000a94:	50000800 	.word	0x50000800

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	2201      	movs	r2, #1
 8000abc:	4013      	ands	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ac4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	0549      	lsls	r1, r1, #21
 8000acc:	430a      	orrs	r2, r1
 8000ace:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ad2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	055b      	lsls	r3, r3, #21
 8000ad8:	4013      	ands	r3, r2
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b091      	sub	sp, #68	@ 0x44
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	240c      	movs	r4, #12
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	0018      	movs	r0, r3
 8000afa:	2334      	movs	r3, #52	@ 0x34
 8000afc:	001a      	movs	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	f003 f83a 	bl	8003b78 <memset>
  if(htim_pwm->Instance==TIM15)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a11      	ldr	r2, [pc, #68]	@ (8000b50 <HAL_TIM_PWM_MspInit+0x64>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d11c      	bne.n	8000b48 <HAL_TIM_PWM_MspInit+0x5c>

    /* USER CODE END TIM15_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	03d2      	lsls	r2, r2, #15
 8000b14:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 f94e 	bl	8001dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	1e03      	subs	r3, r0, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000b28:	f7ff ffb6 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_TIM_PWM_MspInit+0x68>)
 8000b2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <HAL_TIM_PWM_MspInit+0x68>)
 8000b32:	2180      	movs	r1, #128	@ 0x80
 8000b34:	0249      	lsls	r1, r1, #9
 8000b36:	430a      	orrs	r2, r1
 8000b38:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_TIM_PWM_MspInit+0x68>)
 8000b3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b3e:	2380      	movs	r3, #128	@ 0x80
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	4013      	ands	r3, r2
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b011      	add	sp, #68	@ 0x44
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	40014000 	.word	0x40014000
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	240c      	movs	r4, #12
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	0018      	movs	r0, r3
 8000b66:	2314      	movs	r3, #20
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f003 f804 	bl	8003b78 <memset>
  if(htim->Instance==TIM15)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <HAL_TIM_MspPostInit+0x70>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d122      	bne.n	8000bc0 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM15_MspPostInit 0 */

    /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <HAL_TIM_MspPostInit+0x74>)
 8000b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <HAL_TIM_MspPostInit+0x74>)
 8000b80:	2102      	movs	r1, #2
 8000b82:	430a      	orrs	r2, r1
 8000b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_TIM_MspPostInit+0x74>)
 8000b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2280      	movs	r2, #128	@ 0x80
 8000b96:	01d2      	lsls	r2, r2, #7
 8000b98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	0021      	movs	r1, r4
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2205      	movs	r2, #5
 8000bb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	4a06      	ldr	r2, [pc, #24]	@ (8000bd0 <HAL_TIM_MspPostInit+0x78>)
 8000bb8:	0019      	movs	r1, r3
 8000bba:	0010      	movs	r0, r2
 8000bbc:	f000 fa44 	bl	8001048 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b009      	add	sp, #36	@ 0x24
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	40014000 	.word	0x40014000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	50000400 	.word	0x50000400

08000bd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b097      	sub	sp, #92	@ 0x5c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	2344      	movs	r3, #68	@ 0x44
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	0018      	movs	r0, r3
 8000be2:	2314      	movs	r3, #20
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f002 ffc6 	bl	8003b78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	2410      	movs	r4, #16
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	2334      	movs	r3, #52	@ 0x34
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f002 ffbe 	bl	8003b78 <memset>
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a22      	ldr	r2, [pc, #136]	@ (8000c8c <HAL_UART_MspInit+0xb8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d13e      	bne.n	8000c84 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	2202      	movs	r2, #2
 8000c0a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	0018      	movs	r0, r3
 8000c16:	f001 f8d3 	bl	8001dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c1e:	f7ff ff3b 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c22:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <HAL_UART_MspInit+0xbc>)
 8000c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <HAL_UART_MspInit+0xbc>)
 8000c28:	2180      	movs	r1, #128	@ 0x80
 8000c2a:	0289      	lsls	r1, r1, #10
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <HAL_UART_MspInit+0xbc>)
 8000c32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	029b      	lsls	r3, r3, #10
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <HAL_UART_MspInit+0xbc>)
 8000c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <HAL_UART_MspInit+0xbc>)
 8000c44:	2101      	movs	r1, #1
 8000c46:	430a      	orrs	r2, r1
 8000c48:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <HAL_UART_MspInit+0xbc>)
 8000c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c56:	2144      	movs	r1, #68	@ 0x44
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2202      	movs	r2, #2
 8000c62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2201      	movs	r2, #1
 8000c68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2201      	movs	r2, #1
 8000c74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	187a      	adds	r2, r7, r1
 8000c78:	23a0      	movs	r3, #160	@ 0xa0
 8000c7a:	05db      	lsls	r3, r3, #23
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f9e2 	bl	8001048 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c84:	46c0      	nop			@ (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b017      	add	sp, #92	@ 0x5c
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	40021000 	.word	0x40021000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	e7fd      	b.n	8000c98 <NMI_Handler+0x4>

08000c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	e7fd      	b.n	8000ca0 <HardFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f8a6 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT13_Pin);
 8000cca:	2380      	movs	r3, #128	@ 0x80
 8000ccc:	019b      	lsls	r3, r3, #6
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 fb3c 	bl	800134c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce4:	480d      	ldr	r0, [pc, #52]	@ (8000d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ce6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce8:	f7ff fff7 	bl	8000cda <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	@ (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	@ (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d12:	f002 ff39 	bl	8003b88 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d16:	f7ff fcf1 	bl	80006fc <main>

08000d1a <LoopForever>:

LoopForever:
  b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   r0, =_estack
 8000d1c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d28:	08003cd4 	.word	0x08003cd4
  ldr r2, =_sbss
 8000d2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d30:	20000114 	.word	0x20000114

08000d34 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_COMP_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <HAL_Init+0x3c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_Init+0x3c>)
 8000d4a:	2180      	movs	r1, #128	@ 0x80
 8000d4c:	0049      	lsls	r1, r1, #1
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 f810 	bl	8000d78 <HAL_InitTick>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e001      	b.n	8000d68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fe9e 	bl	8000aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	781b      	ldrb	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40022000 	.word	0x40022000

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	230f      	movs	r3, #15
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d88:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <HAL_InitTick+0x88>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d02b      	beq.n	8000de8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <HAL_InitTick+0x8c>)
 8000d92:	681c      	ldr	r4, [r3, #0]
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <HAL_InitTick+0x88>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	0019      	movs	r1, r3
 8000d9a:	23fa      	movs	r3, #250	@ 0xfa
 8000d9c:	0098      	lsls	r0, r3, #2
 8000d9e:	f7ff f9b1 	bl	8000104 <__udivsi3>
 8000da2:	0003      	movs	r3, r0
 8000da4:	0019      	movs	r1, r3
 8000da6:	0020      	movs	r0, r4
 8000da8:	f7ff f9ac 	bl	8000104 <__udivsi3>
 8000dac:	0003      	movs	r3, r0
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 f93d 	bl	800102e <HAL_SYSTICK_Config>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d112      	bne.n	8000dde <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d80a      	bhi.n	8000dd4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	425b      	negs	r3, r3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 f90c 	bl	8000fe4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <HAL_InitTick+0x90>)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e00d      	b.n	8000df0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e008      	b.n	8000df0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e003      	b.n	8000df0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de8:	230f      	movs	r3, #15
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	781b      	ldrb	r3, [r3, #0]
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b005      	add	sp, #20
 8000dfc:	bd90      	pop	{r4, r7, pc}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <HAL_IncTick+0x1c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	001a      	movs	r2, r3
 8000e16:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	18d2      	adds	r2, r2, r3
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000110 	.word	0x20000110

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b02      	ldr	r3, [pc, #8]	@ (8000e40 <HAL_GetTick+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	20000110 	.word	0x20000110

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff fff0 	bl	8000e30 <HAL_GetTick>
 8000e50:	0003      	movs	r3, r0
 8000e52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	001a      	movs	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	189b      	adds	r3, r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	f7ff ffe0 	bl	8000e30 <HAL_GetTick>
 8000e70:	0002      	movs	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	20000008 	.word	0x20000008

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	0002      	movs	r2, r0
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e9e:	d809      	bhi.n	8000eb4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	231f      	movs	r3, #31
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_EnableIRQ+0x30>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	4091      	lsls	r1, r2
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ed4:	d828      	bhi.n	8000f28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f94 <__NVIC_SetPriority+0xd4>)
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	33c0      	adds	r3, #192	@ 0xc0
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	589b      	ldr	r3, [r3, r2]
 8000ee6:	1dfa      	adds	r2, r7, #7
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	0011      	movs	r1, r2
 8000eec:	2203      	movs	r2, #3
 8000eee:	400a      	ands	r2, r1
 8000ef0:	00d2      	lsls	r2, r2, #3
 8000ef2:	21ff      	movs	r1, #255	@ 0xff
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	43d2      	mvns	r2, r2
 8000efa:	401a      	ands	r2, r3
 8000efc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	22ff      	movs	r2, #255	@ 0xff
 8000f04:	401a      	ands	r2, r3
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	4003      	ands	r3, r0
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f14:	481f      	ldr	r0, [pc, #124]	@ (8000f94 <__NVIC_SetPriority+0xd4>)
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	33c0      	adds	r3, #192	@ 0xc0
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f26:	e031      	b.n	8000f8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f28:	4a1b      	ldr	r2, [pc, #108]	@ (8000f98 <__NVIC_SetPriority+0xd8>)
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	0019      	movs	r1, r3
 8000f30:	230f      	movs	r3, #15
 8000f32:	400b      	ands	r3, r1
 8000f34:	3b08      	subs	r3, #8
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3306      	adds	r3, #6
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	18d3      	adds	r3, r2, r3
 8000f3e:	3304      	adds	r3, #4
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	1dfa      	adds	r2, r7, #7
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	0011      	movs	r1, r2
 8000f48:	2203      	movs	r2, #3
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	00d2      	lsls	r2, r2, #3
 8000f4e:	21ff      	movs	r1, #255	@ 0xff
 8000f50:	4091      	lsls	r1, r2
 8000f52:	000a      	movs	r2, r1
 8000f54:	43d2      	mvns	r2, r2
 8000f56:	401a      	ands	r2, r3
 8000f58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	019b      	lsls	r3, r3, #6
 8000f5e:	22ff      	movs	r2, #255	@ 0xff
 8000f60:	401a      	ands	r2, r3
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	0018      	movs	r0, r3
 8000f68:	2303      	movs	r3, #3
 8000f6a:	4003      	ands	r3, r0
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f70:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <__NVIC_SetPriority+0xd8>)
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	001c      	movs	r4, r3
 8000f78:	230f      	movs	r3, #15
 8000f7a:	4023      	ands	r3, r4
 8000f7c:	3b08      	subs	r3, #8
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	430a      	orrs	r2, r1
 8000f82:	3306      	adds	r3, #6
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	18c3      	adds	r3, r0, r3
 8000f88:	3304      	adds	r3, #4
 8000f8a:	601a      	str	r2, [r3, #0]
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b003      	add	sp, #12
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	1e5a      	subs	r2, r3, #1
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	045b      	lsls	r3, r3, #17
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d301      	bcc.n	8000fb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e010      	b.n	8000fd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <SysTick_Config+0x44>)
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	3a01      	subs	r2, #1
 8000fba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff ff7c 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <SysTick_Config+0x44>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <SysTick_Config+0x44>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	210f      	movs	r1, #15
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	1c02      	adds	r2, r0, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	0011      	movs	r1, r2
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	0002      	movs	r2, r0
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b25b      	sxtb	r3, r3
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ff33 	bl	8000e8c <__NVIC_EnableIRQ>
}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff ffaf 	bl	8000f9c <SysTick_Config>
 800103e:	0003      	movs	r3, r0
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	e147      	b.n	80012e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4091      	lsls	r1, r2
 8001062:	000a      	movs	r2, r1
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d100      	bne.n	8001070 <HAL_GPIO_Init+0x28>
 800106e:	e138      	b.n	80012e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2203      	movs	r2, #3
 8001076:	4013      	ands	r3, r2
 8001078:	2b01      	cmp	r3, #1
 800107a:	d005      	beq.n	8001088 <HAL_GPIO_Init+0x40>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2203      	movs	r2, #3
 8001082:	4013      	ands	r3, r2
 8001084:	2b02      	cmp	r3, #2
 8001086:	d130      	bne.n	80010ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	409a      	lsls	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	43da      	mvns	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	409a      	lsls	r2, r3
 80010aa:	0013      	movs	r3, r2
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010be:	2201      	movs	r2, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	2201      	movs	r2, #1
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d017      	beq.n	8001126 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2203      	movs	r2, #3
 800112c:	4013      	ands	r3, r2
 800112e:	2b02      	cmp	r3, #2
 8001130:	d123      	bne.n	800117a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	58d3      	ldr	r3, [r2, r3]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2207      	movs	r2, #7
 8001144:	4013      	ands	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2107      	movs	r1, #7
 800115e:	400b      	ands	r3, r1
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	6939      	ldr	r1, [r7, #16]
 8001178:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2203      	movs	r2, #3
 8001198:	401a      	ands	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	23c0      	movs	r3, #192	@ 0xc0
 80011b4:	029b      	lsls	r3, r3, #10
 80011b6:	4013      	ands	r3, r2
 80011b8:	d100      	bne.n	80011bc <HAL_GPIO_Init+0x174>
 80011ba:	e092      	b.n	80012e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80011bc:	4a50      	ldr	r2, [pc, #320]	@ (8001300 <HAL_GPIO_Init+0x2b8>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3318      	adds	r3, #24
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	589b      	ldr	r3, [r3, r2]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2203      	movs	r2, #3
 80011ce:	4013      	ands	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	220f      	movs	r2, #15
 80011d4:	409a      	lsls	r2, r3
 80011d6:	0013      	movs	r3, r2
 80011d8:	43da      	mvns	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	23a0      	movs	r3, #160	@ 0xa0
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x1ca>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a45      	ldr	r2, [pc, #276]	@ (8001304 <HAL_GPIO_Init+0x2bc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x1c6>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a44      	ldr	r2, [pc, #272]	@ (8001308 <HAL_GPIO_Init+0x2c0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x1c2>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a43      	ldr	r2, [pc, #268]	@ (800130c <HAL_GPIO_Init+0x2c4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x1be>
 8001202:	2303      	movs	r3, #3
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x1cc>
 8001206:	2305      	movs	r3, #5
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x1cc>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x1cc>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x1cc>
 8001212:	2300      	movs	r3, #0
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	2103      	movs	r1, #3
 8001218:	400a      	ands	r2, r1
 800121a:	00d2      	lsls	r2, r2, #3
 800121c:	4093      	lsls	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001224:	4936      	ldr	r1, [pc, #216]	@ (8001300 <HAL_GPIO_Init+0x2b8>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3318      	adds	r3, #24
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001232:	4b33      	ldr	r3, [pc, #204]	@ (8001300 <HAL_GPIO_Init+0x2b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43da      	mvns	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	2380      	movs	r3, #128	@ 0x80
 8001248:	035b      	lsls	r3, r3, #13
 800124a:	4013      	ands	r3, r2
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001256:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <HAL_GPIO_Init+0x2b8>)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800125c:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <HAL_GPIO_Init+0x2b8>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43da      	mvns	r2, r3
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	039b      	lsls	r3, r3, #14
 8001274:	4013      	ands	r3, r2
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <HAL_GPIO_Init+0x2b8>)
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001286:	4a1e      	ldr	r2, [pc, #120]	@ (8001300 <HAL_GPIO_Init+0x2b8>)
 8001288:	2384      	movs	r3, #132	@ 0x84
 800128a:	58d3      	ldr	r3, [r2, r3]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43da      	mvns	r2, r3
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	029b      	lsls	r3, r3, #10
 80012a0:	4013      	ands	r3, r2
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012ac:	4914      	ldr	r1, [pc, #80]	@ (8001300 <HAL_GPIO_Init+0x2b8>)
 80012ae:	2284      	movs	r2, #132	@ 0x84
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80012b4:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <HAL_GPIO_Init+0x2b8>)
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	58d3      	ldr	r3, [r2, r3]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43da      	mvns	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	025b      	lsls	r3, r3, #9
 80012ce:	4013      	ands	r3, r2
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012da:	4909      	ldr	r1, [pc, #36]	@ (8001300 <HAL_GPIO_Init+0x2b8>)
 80012dc:	2280      	movs	r2, #128	@ 0x80
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	40da      	lsrs	r2, r3
 80012f0:	1e13      	subs	r3, r2, #0
 80012f2:	d000      	beq.n	80012f6 <HAL_GPIO_Init+0x2ae>
 80012f4:	e6b0      	b.n	8001058 <HAL_GPIO_Init+0x10>
  }
}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b006      	add	sp, #24
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021800 	.word	0x40021800
 8001304:	50000400 	.word	0x50000400
 8001308:	50000800 	.word	0x50000800
 800130c:	50000c00 	.word	0x50000c00

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	0008      	movs	r0, r1
 800131a:	0011      	movs	r1, r2
 800131c:	1cbb      	adds	r3, r7, #2
 800131e:	1c02      	adds	r2, r0, #0
 8001320:	801a      	strh	r2, [r3, #0]
 8001322:	1c7b      	adds	r3, r7, #1
 8001324:	1c0a      	adds	r2, r1, #0
 8001326:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001328:	1c7b      	adds	r3, r7, #1
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001330:	1cbb      	adds	r3, r7, #2
 8001332:	881a      	ldrh	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e003      	b.n	8001342 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	1cbb      	adds	r3, r7, #2
 800133c:	881a      	ldrh	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	0002      	movs	r2, r0
 8001354:	1dbb      	adds	r3, r7, #6
 8001356:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001358:	4b10      	ldr	r3, [pc, #64]	@ (800139c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	1dba      	adds	r2, r7, #6
 800135e:	8812      	ldrh	r2, [r2, #0]
 8001360:	4013      	ands	r3, r2
 8001362:	d008      	beq.n	8001376 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001364:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001366:	1dba      	adds	r2, r7, #6
 8001368:	8812      	ldrh	r2, [r2, #0]
 800136a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800136c:	1dbb      	adds	r3, r7, #6
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff f993 	bl	800069c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	1dba      	adds	r2, r7, #6
 800137c:	8812      	ldrh	r2, [r2, #0]
 800137e:	4013      	ands	r3, r2
 8001380:	d008      	beq.n	8001394 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001384:	1dba      	adds	r2, r7, #6
 8001386:	8812      	ldrh	r2, [r2, #0]
 8001388:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800138a:	1dbb      	adds	r3, r7, #6
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	0018      	movs	r0, r3
 8001390:	f7ff f99c 	bl	80006cc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021800 	.word	0x40021800

080013a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a19      	ldr	r2, [pc, #100]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d11f      	bne.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80013c4:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	0013      	movs	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	189b      	adds	r3, r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4912      	ldr	r1, [pc, #72]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7fe fe96 	bl	8000104 <__udivsi3>
 80013d8:	0003      	movs	r3, r0
 80013da:	3301      	adds	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013de:	e008      	b.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e001      	b.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e009      	b.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	2380      	movs	r3, #128	@ 0x80
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	401a      	ands	r2, r3
 80013fc:	2380      	movs	r3, #128	@ 0x80
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	429a      	cmp	r2, r3
 8001402:	d0ed      	beq.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b004      	add	sp, #16
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	40007000 	.word	0x40007000
 8001414:	fffff9ff 	.word	0xfffff9ff
 8001418:	20000000 	.word	0x20000000
 800141c:	000f4240 	.word	0x000f4240

08001420 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001424:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	23e0      	movs	r3, #224	@ 0xe0
 800142a:	01db      	lsls	r3, r3, #7
 800142c:	4013      	ands	r3, r2
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e2fe      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2201      	movs	r2, #1
 8001450:	4013      	ands	r3, r2
 8001452:	d100      	bne.n	8001456 <HAL_RCC_OscConfig+0x1e>
 8001454:	e07c      	b.n	8001550 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001456:	4bc3      	ldr	r3, [pc, #780]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2238      	movs	r2, #56	@ 0x38
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001460:	4bc0      	ldr	r3, [pc, #768]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2203      	movs	r2, #3
 8001466:	4013      	ands	r3, r2
 8001468:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b10      	cmp	r3, #16
 800146e:	d102      	bne.n	8001476 <HAL_RCC_OscConfig+0x3e>
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d002      	beq.n	800147c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b08      	cmp	r3, #8
 800147a:	d10b      	bne.n	8001494 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	4bb9      	ldr	r3, [pc, #740]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	029b      	lsls	r3, r3, #10
 8001484:	4013      	ands	r3, r2
 8001486:	d062      	beq.n	800154e <HAL_RCC_OscConfig+0x116>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d15e      	bne.n	800154e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e2d9      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	025b      	lsls	r3, r3, #9
 800149c:	429a      	cmp	r2, r3
 800149e:	d107      	bne.n	80014b0 <HAL_RCC_OscConfig+0x78>
 80014a0:	4bb0      	ldr	r3, [pc, #704]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4baf      	ldr	r3, [pc, #700]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80014a6:	2180      	movs	r1, #128	@ 0x80
 80014a8:	0249      	lsls	r1, r1, #9
 80014aa:	430a      	orrs	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e020      	b.n	80014f2 <HAL_RCC_OscConfig+0xba>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	23a0      	movs	r3, #160	@ 0xa0
 80014b6:	02db      	lsls	r3, r3, #11
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d10e      	bne.n	80014da <HAL_RCC_OscConfig+0xa2>
 80014bc:	4ba9      	ldr	r3, [pc, #676]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4ba8      	ldr	r3, [pc, #672]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80014c2:	2180      	movs	r1, #128	@ 0x80
 80014c4:	02c9      	lsls	r1, r1, #11
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	4ba6      	ldr	r3, [pc, #664]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4ba5      	ldr	r3, [pc, #660]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80014d0:	2180      	movs	r1, #128	@ 0x80
 80014d2:	0249      	lsls	r1, r1, #9
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e00b      	b.n	80014f2 <HAL_RCC_OscConfig+0xba>
 80014da:	4ba2      	ldr	r3, [pc, #648]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4ba1      	ldr	r3, [pc, #644]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80014e0:	49a1      	ldr	r1, [pc, #644]	@ (8001768 <HAL_RCC_OscConfig+0x330>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	4b9f      	ldr	r3, [pc, #636]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b9e      	ldr	r3, [pc, #632]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80014ec:	499f      	ldr	r1, [pc, #636]	@ (800176c <HAL_RCC_OscConfig+0x334>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d014      	beq.n	8001524 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff fc99 	bl	8000e30 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fc94 	bl	8000e30 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	@ 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e298      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001516:	4b93      	ldr	r3, [pc, #588]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	029b      	lsls	r3, r3, #10
 800151e:	4013      	ands	r3, r2
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0xcc>
 8001522:	e015      	b.n	8001550 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fc84 	bl	8000e30 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152e:	f7ff fc7f 	bl	8000e30 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	@ 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e283      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001540:	4b88      	ldr	r3, [pc, #544]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0xf6>
 800154c:	e000      	b.n	8001550 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d100      	bne.n	800155c <HAL_RCC_OscConfig+0x124>
 800155a:	e099      	b.n	8001690 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800155c:	4b81      	ldr	r3, [pc, #516]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2238      	movs	r2, #56	@ 0x38
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001566:	4b7f      	ldr	r3, [pc, #508]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2203      	movs	r2, #3
 800156c:	4013      	ands	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d102      	bne.n	800157c <HAL_RCC_OscConfig+0x144>
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d002      	beq.n	8001582 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d135      	bne.n	80015ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001582:	4b78      	ldr	r3, [pc, #480]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	2380      	movs	r3, #128	@ 0x80
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4013      	ands	r3, r2
 800158c:	d005      	beq.n	800159a <HAL_RCC_OscConfig+0x162>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e256      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	4b72      	ldr	r3, [pc, #456]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4a74      	ldr	r2, [pc, #464]	@ (8001770 <HAL_RCC_OscConfig+0x338>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	0019      	movs	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	021a      	lsls	r2, r3, #8
 80015aa:	4b6e      	ldr	r3, [pc, #440]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d112      	bne.n	80015dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001774 <HAL_RCC_OscConfig+0x33c>)
 80015bc:	4013      	ands	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	4b67      	ldr	r3, [pc, #412]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80015ca:	4b66      	ldr	r3, [pc, #408]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	0adb      	lsrs	r3, r3, #11
 80015d0:	2207      	movs	r2, #7
 80015d2:	4013      	ands	r3, r2
 80015d4:	4a68      	ldr	r2, [pc, #416]	@ (8001778 <HAL_RCC_OscConfig+0x340>)
 80015d6:	40da      	lsrs	r2, r3
 80015d8:	4b68      	ldr	r3, [pc, #416]	@ (800177c <HAL_RCC_OscConfig+0x344>)
 80015da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015dc:	4b68      	ldr	r3, [pc, #416]	@ (8001780 <HAL_RCC_OscConfig+0x348>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff fbc9 	bl	8000d78 <HAL_InitTick>
 80015e6:	1e03      	subs	r3, r0, #0
 80015e8:	d051      	beq.n	800168e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e22c      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d030      	beq.n	8001658 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001774 <HAL_RCC_OscConfig+0x33c>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	4b57      	ldr	r3, [pc, #348]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800160a:	4b56      	ldr	r3, [pc, #344]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b55      	ldr	r3, [pc, #340]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001610:	2180      	movs	r1, #128	@ 0x80
 8001612:	0049      	lsls	r1, r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fc0a 	bl	8000e30 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fc05 	bl	8000e30 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e209      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001634:	4b4b      	ldr	r3, [pc, #300]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4013      	ands	r3, r2
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	4b48      	ldr	r3, [pc, #288]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a4a      	ldr	r2, [pc, #296]	@ (8001770 <HAL_RCC_OscConfig+0x338>)
 8001646:	4013      	ands	r3, r2
 8001648:	0019      	movs	r1, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	021a      	lsls	r2, r3, #8
 8001650:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001652:	430a      	orrs	r2, r1
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	e01b      	b.n	8001690 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001658:	4b42      	ldr	r3, [pc, #264]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b41      	ldr	r3, [pc, #260]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 800165e:	4949      	ldr	r1, [pc, #292]	@ (8001784 <HAL_RCC_OscConfig+0x34c>)
 8001660:	400a      	ands	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fbe4 	bl	8000e30 <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166e:	f7ff fbdf 	bl	8000e30 <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1e3      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001680:	4b38      	ldr	r3, [pc, #224]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4013      	ands	r3, r2
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x236>
 800168c:	e000      	b.n	8001690 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800168e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2208      	movs	r2, #8
 8001696:	4013      	ands	r3, r2
 8001698:	d047      	beq.n	800172a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800169a:	4b32      	ldr	r3, [pc, #200]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2238      	movs	r2, #56	@ 0x38
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b18      	cmp	r3, #24
 80016a4:	d10a      	bne.n	80016bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d03c      	beq.n	800172a <HAL_RCC_OscConfig+0x2f2>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d138      	bne.n	800172a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e1c5      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d019      	beq.n	80016f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016c4:	4b27      	ldr	r3, [pc, #156]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016c8:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fbae 	bl	8000e30 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fba9 	bl	8000e30 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1ad      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d0f1      	beq.n	80016da <HAL_RCC_OscConfig+0x2a2>
 80016f6:	e018      	b.n	800172a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	2101      	movs	r1, #1
 8001700:	438a      	bics	r2, r1
 8001702:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fb94 	bl	8000e30 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff fb8f 	bl	8000e30 <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e193      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001720:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d1f1      	bne.n	800170e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2204      	movs	r2, #4
 8001730:	4013      	ands	r3, r2
 8001732:	d100      	bne.n	8001736 <HAL_RCC_OscConfig+0x2fe>
 8001734:	e0c6      	b.n	80018c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001736:	231f      	movs	r3, #31
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2238      	movs	r2, #56	@ 0x38
 8001744:	4013      	ands	r3, r2
 8001746:	2b20      	cmp	r3, #32
 8001748:	d11e      	bne.n	8001788 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_RCC_OscConfig+0x32c>)
 800174c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d100      	bne.n	8001756 <HAL_RCC_OscConfig+0x31e>
 8001754:	e0b6      	b.n	80018c4 <HAL_RCC_OscConfig+0x48c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d000      	beq.n	8001760 <HAL_RCC_OscConfig+0x328>
 800175e:	e0b1      	b.n	80018c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e171      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
 8001764:	40021000 	.word	0x40021000
 8001768:	fffeffff 	.word	0xfffeffff
 800176c:	fffbffff 	.word	0xfffbffff
 8001770:	ffff80ff 	.word	0xffff80ff
 8001774:	ffffc7ff 	.word	0xffffc7ff
 8001778:	00f42400 	.word	0x00f42400
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004
 8001784:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001788:	4bb1      	ldr	r3, [pc, #708]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800178a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	055b      	lsls	r3, r3, #21
 8001790:	4013      	ands	r3, r2
 8001792:	d101      	bne.n	8001798 <HAL_RCC_OscConfig+0x360>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x362>
 8001798:	2300      	movs	r3, #0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d011      	beq.n	80017c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4bac      	ldr	r3, [pc, #688]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80017a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017a2:	4bab      	ldr	r3, [pc, #684]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80017a4:	2180      	movs	r1, #128	@ 0x80
 80017a6:	0549      	lsls	r1, r1, #21
 80017a8:	430a      	orrs	r2, r1
 80017aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017ac:	4ba8      	ldr	r3, [pc, #672]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80017ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	055b      	lsls	r3, r3, #21
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80017ba:	231f      	movs	r3, #31
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c2:	4ba4      	ldr	r3, [pc, #656]	@ (8001a54 <HAL_RCC_OscConfig+0x61c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	@ 0x80
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	d11a      	bne.n	8001804 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001a54 <HAL_RCC_OscConfig+0x61c>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4ba0      	ldr	r3, [pc, #640]	@ (8001a54 <HAL_RCC_OscConfig+0x61c>)
 80017d4:	2180      	movs	r1, #128	@ 0x80
 80017d6:	0049      	lsls	r1, r1, #1
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb28 	bl	8000e30 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fb23 	bl	8000e30 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e127      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f8:	4b96      	ldr	r3, [pc, #600]	@ (8001a54 <HAL_RCC_OscConfig+0x61c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2380      	movs	r3, #128	@ 0x80
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4013      	ands	r3, r2
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x3e2>
 800180c:	4b90      	ldr	r3, [pc, #576]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800180e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001810:	4b8f      	ldr	r3, [pc, #572]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001812:	2101      	movs	r1, #1
 8001814:	430a      	orrs	r2, r1
 8001816:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001818:	e01c      	b.n	8001854 <HAL_RCC_OscConfig+0x41c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x404>
 8001822:	4b8b      	ldr	r3, [pc, #556]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001824:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001826:	4b8a      	ldr	r3, [pc, #552]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001828:	2104      	movs	r1, #4
 800182a:	430a      	orrs	r2, r1
 800182c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800182e:	4b88      	ldr	r3, [pc, #544]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001830:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001832:	4b87      	ldr	r3, [pc, #540]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001834:	2101      	movs	r1, #1
 8001836:	430a      	orrs	r2, r1
 8001838:	65da      	str	r2, [r3, #92]	@ 0x5c
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0x41c>
 800183c:	4b84      	ldr	r3, [pc, #528]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800183e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001840:	4b83      	ldr	r3, [pc, #524]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001842:	2101      	movs	r1, #1
 8001844:	438a      	bics	r2, r1
 8001846:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001848:	4b81      	ldr	r3, [pc, #516]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800184a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800184c:	4b80      	ldr	r3, [pc, #512]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800184e:	2104      	movs	r1, #4
 8001850:	438a      	bics	r2, r1
 8001852:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d014      	beq.n	8001886 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fae8 	bl	8000e30 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001864:	e009      	b.n	800187a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff fae3 	bl	8000e30 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	4a79      	ldr	r2, [pc, #484]	@ (8001a58 <HAL_RCC_OscConfig+0x620>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e0e6      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187a:	4b75      	ldr	r3, [pc, #468]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800187c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x42e>
 8001884:	e013      	b.n	80018ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff fad3 	bl	8000e30 <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800188e:	e009      	b.n	80018a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f7ff face 	bl	8000e30 <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	4a6f      	ldr	r2, [pc, #444]	@ (8001a58 <HAL_RCC_OscConfig+0x620>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e0d1      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80018a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a8:	2202      	movs	r2, #2
 80018aa:	4013      	ands	r3, r2
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80018ae:	231f      	movs	r3, #31
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018b8:	4b65      	ldr	r3, [pc, #404]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80018ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018bc:	4b64      	ldr	r3, [pc, #400]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80018be:	4967      	ldr	r1, [pc, #412]	@ (8001a5c <HAL_RCC_OscConfig+0x624>)
 80018c0:	400a      	ands	r2, r1
 80018c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d100      	bne.n	80018ce <HAL_RCC_OscConfig+0x496>
 80018cc:	e0bb      	b.n	8001a46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ce:	4b60      	ldr	r3, [pc, #384]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2238      	movs	r2, #56	@ 0x38
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b10      	cmp	r3, #16
 80018d8:	d100      	bne.n	80018dc <HAL_RCC_OscConfig+0x4a4>
 80018da:	e07b      	b.n	80019d4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d156      	bne.n	8001992 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b59      	ldr	r3, [pc, #356]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80018ea:	495d      	ldr	r1, [pc, #372]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa9e 	bl	8000e30 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff fa99 	bl	8000e30 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e09d      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	4b50      	ldr	r3, [pc, #320]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	049b      	lsls	r3, r3, #18
 8001914:	4013      	ands	r3, r2
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001918:	4b4d      	ldr	r3, [pc, #308]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a51      	ldr	r2, [pc, #324]	@ (8001a64 <HAL_RCC_OscConfig+0x62c>)
 800191e:	4013      	ands	r3, r2
 8001920:	0019      	movs	r1, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1a      	ldr	r2, [r3, #32]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001944:	431a      	orrs	r2, r3
 8001946:	4b42      	ldr	r3, [pc, #264]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001948:	430a      	orrs	r2, r1
 800194a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b40      	ldr	r3, [pc, #256]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b3f      	ldr	r3, [pc, #252]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001952:	2180      	movs	r1, #128	@ 0x80
 8001954:	0449      	lsls	r1, r1, #17
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800195a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001960:	2180      	movs	r1, #128	@ 0x80
 8001962:	0549      	lsls	r1, r1, #21
 8001964:	430a      	orrs	r2, r1
 8001966:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff fa62 	bl	8000e30 <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff fa5d 	bl	8000e30 <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e061      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001984:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	049b      	lsls	r3, r3, #18
 800198c:	4013      	ands	r3, r2
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x53a>
 8001990:	e059      	b.n	8001a46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b2f      	ldr	r3, [pc, #188]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001998:	4931      	ldr	r1, [pc, #196]	@ (8001a60 <HAL_RCC_OscConfig+0x628>)
 800199a:	400a      	ands	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff fa47 	bl	8000e30 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff fa42 	bl	8000e30 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e046      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ba:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	049b      	lsls	r3, r3, #18
 80019c2:	4013      	ands	r3, r2
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80019c6:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80019cc:	4926      	ldr	r1, [pc, #152]	@ (8001a68 <HAL_RCC_OscConfig+0x630>)
 80019ce:	400a      	ands	r2, r1
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	e038      	b.n	8001a46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e033      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2203      	movs	r2, #3
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d126      	bne.n	8001a42 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2270      	movs	r2, #112	@ 0x70
 80019f8:	401a      	ands	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d11f      	bne.n	8001a42 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	23fe      	movs	r3, #254	@ 0xfe
 8001a06:	01db      	lsls	r3, r3, #7
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d116      	bne.n	8001a42 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	23f8      	movs	r3, #248	@ 0xf8
 8001a18:	039b      	lsls	r3, r3, #14
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d10e      	bne.n	8001a42 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	23e0      	movs	r3, #224	@ 0xe0
 8001a28:	051b      	lsls	r3, r3, #20
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	0f5b      	lsrs	r3, r3, #29
 8001a38:	075a      	lsls	r2, r3, #29
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b008      	add	sp, #32
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40007000 	.word	0x40007000
 8001a58:	00001388 	.word	0x00001388
 8001a5c:	efffffff 	.word	0xefffffff
 8001a60:	feffffff 	.word	0xfeffffff
 8001a64:	11c1808c 	.word	0x11c1808c
 8001a68:	eefefffc 	.word	0xeefefffc

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0e9      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b76      	ldr	r3, [pc, #472]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2207      	movs	r2, #7
 8001a86:	4013      	ands	r3, r2
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d91e      	bls.n	8001acc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2207      	movs	r2, #7
 8001a94:	4393      	bics	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	4b70      	ldr	r3, [pc, #448]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff f9c6 	bl	8000e30 <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa8:	e009      	b.n	8001abe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aaa:	f7ff f9c1 	bl	8000e30 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	4a6a      	ldr	r2, [pc, #424]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e0ca      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001abe:	4b67      	ldr	r3, [pc, #412]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1ee      	bne.n	8001aaa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d015      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2204      	movs	r2, #4
 8001adc:	4013      	ands	r3, r2
 8001ade:	d006      	beq.n	8001aee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ae0:	4b60      	ldr	r3, [pc, #384]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	21e0      	movs	r1, #224	@ 0xe0
 8001ae8:	01c9      	lsls	r1, r1, #7
 8001aea:	430a      	orrs	r2, r1
 8001aec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aee:	4b5d      	ldr	r3, [pc, #372]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c68 <HAL_RCC_ClockConfig+0x1fc>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4b59      	ldr	r3, [pc, #356]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2201      	movs	r2, #1
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d057      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b14:	4b53      	ldr	r3, [pc, #332]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d12b      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e097      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	049b      	lsls	r3, r3, #18
 8001b34:	4013      	ands	r3, r2
 8001b36:	d11f      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e08b      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b44:	4b47      	ldr	r3, [pc, #284]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d113      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e07f      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5c:	4b41      	ldr	r3, [pc, #260]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b60:	2202      	movs	r2, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e074      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e06d      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b78:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	4393      	bics	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f950 	bl	8000e30 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b94:	e009      	b.n	8001baa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7ff f94b 	bl	8000e30 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e054      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2238      	movs	r2, #56	@ 0x38
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1ec      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d21e      	bcs.n	8001c08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2207      	movs	r2, #7
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bdc:	f7ff f928 	bl	8000e30 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be4:	e009      	b.n	8001bfa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be6:	f7ff f923 	bl	8000e30 <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e02c      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2207      	movs	r2, #7
 8001c00:	4013      	ands	r3, r2
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1ee      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c12:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4a15      	ldr	r2, [pc, #84]	@ (8001c6c <HAL_RCC_ClockConfig+0x200>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c22:	430a      	orrs	r2, r1
 8001c24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c26:	f000 f829 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c2a:	0001      	movs	r1, r0
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	220f      	movs	r2, #15
 8001c34:	401a      	ands	r2, r3
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_RCC_ClockConfig+0x204>)
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	58d3      	ldr	r3, [r2, r3]
 8001c3c:	221f      	movs	r2, #31
 8001c3e:	4013      	ands	r3, r2
 8001c40:	000a      	movs	r2, r1
 8001c42:	40da      	lsrs	r2, r3
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_RCC_ClockConfig+0x208>)
 8001c46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <HAL_RCC_ClockConfig+0x20c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff f893 	bl	8000d78 <HAL_InitTick>
 8001c52:	0003      	movs	r3, r0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b004      	add	sp, #16
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	00001388 	.word	0x00001388
 8001c64:	40021000 	.word	0x40021000
 8001c68:	fffff0ff 	.word	0xfffff0ff
 8001c6c:	ffff8fff 	.word	0xffff8fff
 8001c70:	08003be8 	.word	0x08003be8
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c82:	4b3c      	ldr	r3, [pc, #240]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2238      	movs	r2, #56	@ 0x38
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d10f      	bne.n	8001cac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c8c:	4b39      	ldr	r3, [pc, #228]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0adb      	lsrs	r3, r3, #11
 8001c92:	2207      	movs	r2, #7
 8001c94:	4013      	ands	r3, r2
 8001c96:	2201      	movs	r2, #1
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	0013      	movs	r3, r2
 8001c9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	4835      	ldr	r0, [pc, #212]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ca2:	f7fe fa2f 	bl	8000104 <__udivsi3>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e05d      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cac:	4b31      	ldr	r3, [pc, #196]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2238      	movs	r2, #56	@ 0x38
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb8:	4b30      	ldr	r3, [pc, #192]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x100>)
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	e054      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2238      	movs	r2, #56	@ 0x38
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d138      	bne.n	8001d3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cca:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2203      	movs	r2, #3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd4:	4b27      	ldr	r3, [pc, #156]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	2207      	movs	r2, #7
 8001cdc:	4013      	ands	r3, r2
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	4824      	ldr	r0, [pc, #144]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x100>)
 8001cec:	f7fe fa0a 	bl	8000104 <__udivsi3>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	227f      	movs	r2, #127	@ 0x7f
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	434b      	muls	r3, r1
 8001d00:	617b      	str	r3, [r7, #20]
        break;
 8001d02:	e00d      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	481c      	ldr	r0, [pc, #112]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d08:	f7fe f9fc 	bl	8000104 <__udivsi3>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	0019      	movs	r1, r3
 8001d10:	4b18      	ldr	r3, [pc, #96]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	227f      	movs	r2, #127	@ 0x7f
 8001d18:	4013      	ands	r3, r2
 8001d1a:	434b      	muls	r3, r1
 8001d1c:	617b      	str	r3, [r7, #20]
        break;
 8001d1e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d20:	4b14      	ldr	r3, [pc, #80]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0f5b      	lsrs	r3, r3, #29
 8001d26:	2207      	movs	r2, #7
 8001d28:	4013      	ands	r3, r2
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	6978      	ldr	r0, [r7, #20]
 8001d32:	f7fe f9e7 	bl	8000104 <__udivsi3>
 8001d36:	0003      	movs	r3, r0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	e015      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2238      	movs	r2, #56	@ 0x38
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d103      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2238      	movs	r2, #56	@ 0x38
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b18      	cmp	r3, #24
 8001d5a:	d103      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d5c:	23fa      	movs	r3, #250	@ 0xfa
 8001d5e:	01db      	lsls	r3, r3, #7
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e001      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d68:	693b      	ldr	r3, [r7, #16]
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b006      	add	sp, #24
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			@ (mov r8, r8)
 8001d74:	40021000 	.word	0x40021000
 8001d78:	00f42400 	.word	0x00f42400
 8001d7c:	007a1200 	.word	0x007a1200

08001d80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d84:	4b02      	ldr	r3, [pc, #8]	@ (8001d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	20000000 	.word	0x20000000

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d98:	f7ff fff2 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001d9c:	0004      	movs	r4, r0
 8001d9e:	f7ff fb3f 	bl	8001420 <LL_RCC_GetAPB1Prescaler>
 8001da2:	0003      	movs	r3, r0
 8001da4:	0b1a      	lsrs	r2, r3, #12
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	58d3      	ldr	r3, [r2, r3]
 8001dac:	221f      	movs	r2, #31
 8001dae:	4013      	ands	r3, r2
 8001db0:	40dc      	lsrs	r4, r3
 8001db2:	0023      	movs	r3, r4
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	08003c28 	.word	0x08003c28

08001dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001dc8:	2313      	movs	r3, #19
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dd0:	2312      	movs	r3, #18
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	4013      	ands	r3, r2
 8001de2:	d100      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001de4:	e0a3      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de6:	2011      	movs	r0, #17
 8001de8:	183b      	adds	r3, r7, r0
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4bc3      	ldr	r3, [pc, #780]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001df0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001df2:	2380      	movs	r3, #128	@ 0x80
 8001df4:	055b      	lsls	r3, r3, #21
 8001df6:	4013      	ands	r3, r2
 8001df8:	d110      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4bc0      	ldr	r3, [pc, #768]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dfe:	4bbf      	ldr	r3, [pc, #764]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e00:	2180      	movs	r1, #128	@ 0x80
 8001e02:	0549      	lsls	r1, r1, #21
 8001e04:	430a      	orrs	r2, r1
 8001e06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e08:	4bbc      	ldr	r3, [pc, #752]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	055b      	lsls	r3, r3, #21
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	183b      	adds	r3, r7, r0
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1c:	4bb8      	ldr	r3, [pc, #736]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4bb7      	ldr	r3, [pc, #732]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001e22:	2180      	movs	r1, #128	@ 0x80
 8001e24:	0049      	lsls	r1, r1, #1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e2a:	f7ff f801 	bl	8000e30 <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e32:	e00b      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e34:	f7fe fffc 	bl	8000e30 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d904      	bls.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e42:	2313      	movs	r3, #19
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	2203      	movs	r2, #3
 8001e48:	701a      	strb	r2, [r3, #0]
        break;
 8001e4a:	e005      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e4c:	4bac      	ldr	r3, [pc, #688]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	d0ed      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e58:	2313      	movs	r3, #19
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d154      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e62:	4ba6      	ldr	r3, [pc, #664]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e66:	23c0      	movs	r3, #192	@ 0xc0
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d019      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d014      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e7e:	4b9f      	ldr	r3, [pc, #636]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	4aa0      	ldr	r2, [pc, #640]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e88:	4b9c      	ldr	r3, [pc, #624]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e8c:	4b9b      	ldr	r3, [pc, #620]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e8e:	2180      	movs	r1, #128	@ 0x80
 8001e90:	0249      	lsls	r1, r1, #9
 8001e92:	430a      	orrs	r2, r1
 8001e94:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e96:	4b99      	ldr	r3, [pc, #612]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e9a:	4b98      	ldr	r3, [pc, #608]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e9c:	499a      	ldr	r1, [pc, #616]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ea2:	4b96      	ldr	r3, [pc, #600]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	d016      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ffbe 	bl	8000e30 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb8:	e00c      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe ffb9 	bl	8000e30 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	4a91      	ldr	r2, [pc, #580]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d904      	bls.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001eca:	2313      	movs	r3, #19
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	2203      	movs	r2, #3
 8001ed0:	701a      	strb	r2, [r3, #0]
            break;
 8001ed2:	e004      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed4:	4b89      	ldr	r3, [pc, #548]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d0ed      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001ede:	2313      	movs	r3, #19
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee8:	4b84      	ldr	r3, [pc, #528]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eec:	4a85      	ldr	r2, [pc, #532]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ef6:	4b81      	ldr	r3, [pc, #516]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001efc:	e00c      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001efe:	2312      	movs	r3, #18
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2213      	movs	r2, #19
 8001f04:	18ba      	adds	r2, r7, r2
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	e005      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f0c:	2312      	movs	r3, #18
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2213      	movs	r2, #19
 8001f12:	18ba      	adds	r2, r7, r2
 8001f14:	7812      	ldrb	r2, [r2, #0]
 8001f16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f18:	2311      	movs	r3, #17
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d105      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f22:	4b76      	ldr	r3, [pc, #472]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f26:	4b75      	ldr	r3, [pc, #468]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f28:	4979      	ldr	r1, [pc, #484]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	d009      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f38:	4b70      	ldr	r3, [pc, #448]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	4393      	bics	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	4b6d      	ldr	r3, [pc, #436]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2202      	movs	r2, #2
 8001f52:	4013      	ands	r3, r2
 8001f54:	d009      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f56:	4b69      	ldr	r3, [pc, #420]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4b65      	ldr	r3, [pc, #404]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f66:	430a      	orrs	r2, r1
 8001f68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	4013      	ands	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f74:	4b61      	ldr	r3, [pc, #388]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	4a66      	ldr	r2, [pc, #408]	@ (8002114 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4b5e      	ldr	r3, [pc, #376]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f94:	4b59      	ldr	r3, [pc, #356]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f98:	4a5f      	ldr	r2, [pc, #380]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	4b56      	ldr	r3, [pc, #344]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	@ 0x80
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fb4:	4b51      	ldr	r3, [pc, #324]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb8:	4a58      	ldr	r2, [pc, #352]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	4b4e      	ldr	r3, [pc, #312]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd6:	4a52      	ldr	r2, [pc, #328]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	4b46      	ldr	r3, [pc, #280]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	2380      	movs	r3, #128	@ 0x80
 8001fec:	01db      	lsls	r3, r3, #7
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d015      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ff2:	4b42      	ldr	r3, [pc, #264]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	0899      	lsrs	r1, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1a      	ldr	r2, [r3, #32]
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002000:	430a      	orrs	r2, r1
 8002002:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	05db      	lsls	r3, r3, #23
 800200c:	429a      	cmp	r2, r3
 800200e:	d106      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002010:	4b3a      	ldr	r3, [pc, #232]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4b39      	ldr	r3, [pc, #228]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002016:	2180      	movs	r1, #128	@ 0x80
 8002018:	0249      	lsls	r1, r1, #9
 800201a:	430a      	orrs	r2, r1
 800201c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	031b      	lsls	r3, r3, #12
 8002026:	4013      	ands	r3, r2
 8002028:	d009      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800202a:	4b34      	ldr	r3, [pc, #208]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800202c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202e:	2240      	movs	r2, #64	@ 0x40
 8002030:	4393      	bics	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002038:	4b30      	ldr	r3, [pc, #192]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800203a:	430a      	orrs	r2, r1
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	2380      	movs	r3, #128	@ 0x80
 8002044:	039b      	lsls	r3, r3, #14
 8002046:	4013      	ands	r3, r2
 8002048:	d016      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800204a:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800204c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204e:	4a35      	ldr	r2, [pc, #212]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002050:	4013      	ands	r3, r2
 8002052:	0019      	movs	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002058:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800205a:	430a      	orrs	r2, r1
 800205c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	03db      	lsls	r3, r3, #15
 8002066:	429a      	cmp	r2, r3
 8002068:	d106      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800206a:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	4b23      	ldr	r3, [pc, #140]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002070:	2180      	movs	r1, #128	@ 0x80
 8002072:	0449      	lsls	r1, r1, #17
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	03db      	lsls	r3, r3, #15
 8002080:	4013      	ands	r3, r2
 8002082:	d016      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002088:	4a27      	ldr	r2, [pc, #156]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800208a:	4013      	ands	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002092:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002094:	430a      	orrs	r2, r1
 8002096:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800209c:	2380      	movs	r3, #128	@ 0x80
 800209e:	045b      	lsls	r3, r3, #17
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d106      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020aa:	2180      	movs	r1, #128	@ 0x80
 80020ac:	0449      	lsls	r1, r1, #17
 80020ae:	430a      	orrs	r2, r1
 80020b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	@ 0x80
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4013      	ands	r3, r2
 80020bc:	d016      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80020be:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	4a1a      	ldr	r2, [pc, #104]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	01db      	lsls	r3, r3, #7
 80020da:	429a      	cmp	r2, r3
 80020dc:	d106      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e4:	2180      	movs	r1, #128	@ 0x80
 80020e6:	0249      	lsls	r1, r1, #9
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80020ec:	2312      	movs	r3, #18
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	781b      	ldrb	r3, [r3, #0]
}
 80020f2:	0018      	movs	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b006      	add	sp, #24
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
 8002104:	fffffcff 	.word	0xfffffcff
 8002108:	fffeffff 	.word	0xfffeffff
 800210c:	00001388 	.word	0x00001388
 8002110:	efffffff 	.word	0xefffffff
 8002114:	fffff3ff 	.word	0xfffff3ff
 8002118:	fff3ffff 	.word	0xfff3ffff
 800211c:	ffcfffff 	.word	0xffcfffff
 8002120:	ffffcfff 	.word	0xffffcfff
 8002124:	ffbfffff 	.word	0xffbfffff
 8002128:	feffffff 	.word	0xfeffffff
 800212c:	ffff3fff 	.word	0xffff3fff

08002130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e04a      	b.n	80021d8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	223d      	movs	r2, #61	@ 0x3d
 8002146:	5c9b      	ldrb	r3, [r3, r2]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	223c      	movs	r2, #60	@ 0x3c
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f7fe fcc7 	bl	8000aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	223d      	movs	r2, #61	@ 0x3d
 8002162:	2102      	movs	r1, #2
 8002164:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	0019      	movs	r1, r3
 8002170:	0010      	movs	r0, r2
 8002172:	f000 fa1f 	bl	80025b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2248      	movs	r2, #72	@ 0x48
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	223e      	movs	r2, #62	@ 0x3e
 8002182:	2101      	movs	r1, #1
 8002184:	5499      	strb	r1, [r3, r2]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	223f      	movs	r2, #63	@ 0x3f
 800218a:	2101      	movs	r1, #1
 800218c:	5499      	strb	r1, [r3, r2]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2240      	movs	r2, #64	@ 0x40
 8002192:	2101      	movs	r1, #1
 8002194:	5499      	strb	r1, [r3, r2]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2241      	movs	r2, #65	@ 0x41
 800219a:	2101      	movs	r1, #1
 800219c:	5499      	strb	r1, [r3, r2]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2242      	movs	r2, #66	@ 0x42
 80021a2:	2101      	movs	r1, #1
 80021a4:	5499      	strb	r1, [r3, r2]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2243      	movs	r2, #67	@ 0x43
 80021aa:	2101      	movs	r1, #1
 80021ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2244      	movs	r2, #68	@ 0x44
 80021b2:	2101      	movs	r1, #1
 80021b4:	5499      	strb	r1, [r3, r2]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2245      	movs	r2, #69	@ 0x45
 80021ba:	2101      	movs	r1, #1
 80021bc:	5499      	strb	r1, [r3, r2]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2246      	movs	r2, #70	@ 0x46
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2247      	movs	r2, #71	@ 0x47
 80021ca:	2101      	movs	r1, #1
 80021cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	223d      	movs	r2, #61	@ 0x3d
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d108      	bne.n	8002202 <HAL_TIM_PWM_Start+0x22>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	223e      	movs	r2, #62	@ 0x3e
 80021f4:	5c9b      	ldrb	r3, [r3, r2]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	1e5a      	subs	r2, r3, #1
 80021fc:	4193      	sbcs	r3, r2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	e037      	b.n	8002272 <HAL_TIM_PWM_Start+0x92>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b04      	cmp	r3, #4
 8002206:	d108      	bne.n	800221a <HAL_TIM_PWM_Start+0x3a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	223f      	movs	r2, #63	@ 0x3f
 800220c:	5c9b      	ldrb	r3, [r3, r2]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	1e5a      	subs	r2, r3, #1
 8002214:	4193      	sbcs	r3, r2
 8002216:	b2db      	uxtb	r3, r3
 8002218:	e02b      	b.n	8002272 <HAL_TIM_PWM_Start+0x92>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d108      	bne.n	8002232 <HAL_TIM_PWM_Start+0x52>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2240      	movs	r2, #64	@ 0x40
 8002224:	5c9b      	ldrb	r3, [r3, r2]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	1e5a      	subs	r2, r3, #1
 800222c:	4193      	sbcs	r3, r2
 800222e:	b2db      	uxtb	r3, r3
 8002230:	e01f      	b.n	8002272 <HAL_TIM_PWM_Start+0x92>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d108      	bne.n	800224a <HAL_TIM_PWM_Start+0x6a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2241      	movs	r2, #65	@ 0x41
 800223c:	5c9b      	ldrb	r3, [r3, r2]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	4193      	sbcs	r3, r2
 8002246:	b2db      	uxtb	r3, r3
 8002248:	e013      	b.n	8002272 <HAL_TIM_PWM_Start+0x92>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b10      	cmp	r3, #16
 800224e:	d108      	bne.n	8002262 <HAL_TIM_PWM_Start+0x82>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2242      	movs	r2, #66	@ 0x42
 8002254:	5c9b      	ldrb	r3, [r3, r2]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	1e5a      	subs	r2, r3, #1
 800225c:	4193      	sbcs	r3, r2
 800225e:	b2db      	uxtb	r3, r3
 8002260:	e007      	b.n	8002272 <HAL_TIM_PWM_Start+0x92>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2243      	movs	r2, #67	@ 0x43
 8002266:	5c9b      	ldrb	r3, [r3, r2]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	1e5a      	subs	r2, r3, #1
 800226e:	4193      	sbcs	r3, r2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e08b      	b.n	8002392 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <HAL_TIM_PWM_Start+0xaa>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	223e      	movs	r2, #62	@ 0x3e
 8002284:	2102      	movs	r1, #2
 8002286:	5499      	strb	r1, [r3, r2]
 8002288:	e023      	b.n	80022d2 <HAL_TIM_PWM_Start+0xf2>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d104      	bne.n	800229a <HAL_TIM_PWM_Start+0xba>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	223f      	movs	r2, #63	@ 0x3f
 8002294:	2102      	movs	r1, #2
 8002296:	5499      	strb	r1, [r3, r2]
 8002298:	e01b      	b.n	80022d2 <HAL_TIM_PWM_Start+0xf2>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d104      	bne.n	80022aa <HAL_TIM_PWM_Start+0xca>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2240      	movs	r2, #64	@ 0x40
 80022a4:	2102      	movs	r1, #2
 80022a6:	5499      	strb	r1, [r3, r2]
 80022a8:	e013      	b.n	80022d2 <HAL_TIM_PWM_Start+0xf2>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d104      	bne.n	80022ba <HAL_TIM_PWM_Start+0xda>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2241      	movs	r2, #65	@ 0x41
 80022b4:	2102      	movs	r1, #2
 80022b6:	5499      	strb	r1, [r3, r2]
 80022b8:	e00b      	b.n	80022d2 <HAL_TIM_PWM_Start+0xf2>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d104      	bne.n	80022ca <HAL_TIM_PWM_Start+0xea>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2242      	movs	r2, #66	@ 0x42
 80022c4:	2102      	movs	r1, #2
 80022c6:	5499      	strb	r1, [r3, r2]
 80022c8:	e003      	b.n	80022d2 <HAL_TIM_PWM_Start+0xf2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2243      	movs	r2, #67	@ 0x43
 80022ce:	2102      	movs	r1, #2
 80022d0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6839      	ldr	r1, [r7, #0]
 80022d8:	2201      	movs	r2, #1
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 fcbc 	bl	8002c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2d      	ldr	r2, [pc, #180]	@ (800239c <HAL_TIM_PWM_Start+0x1bc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00e      	beq.n	8002308 <HAL_TIM_PWM_Start+0x128>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2c      	ldr	r2, [pc, #176]	@ (80023a0 <HAL_TIM_PWM_Start+0x1c0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_TIM_PWM_Start+0x128>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a2a      	ldr	r2, [pc, #168]	@ (80023a4 <HAL_TIM_PWM_Start+0x1c4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_TIM_PWM_Start+0x128>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a29      	ldr	r2, [pc, #164]	@ (80023a8 <HAL_TIM_PWM_Start+0x1c8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_TIM_PWM_Start+0x12c>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <HAL_TIM_PWM_Start+0x12e>
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	0209      	lsls	r1, r1, #8
 8002320:	430a      	orrs	r2, r1
 8002322:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1c      	ldr	r2, [pc, #112]	@ (800239c <HAL_TIM_PWM_Start+0x1bc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00f      	beq.n	800234e <HAL_TIM_PWM_Start+0x16e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	@ 0x80
 8002334:	05db      	lsls	r3, r3, #23
 8002336:	429a      	cmp	r2, r3
 8002338:	d009      	beq.n	800234e <HAL_TIM_PWM_Start+0x16e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1b      	ldr	r2, [pc, #108]	@ (80023ac <HAL_TIM_PWM_Start+0x1cc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d004      	beq.n	800234e <HAL_TIM_PWM_Start+0x16e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a15      	ldr	r2, [pc, #84]	@ (80023a0 <HAL_TIM_PWM_Start+0x1c0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d116      	bne.n	800237c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a16      	ldr	r2, [pc, #88]	@ (80023b0 <HAL_TIM_PWM_Start+0x1d0>)
 8002356:	4013      	ands	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b06      	cmp	r3, #6
 800235e:	d016      	beq.n	800238e <HAL_TIM_PWM_Start+0x1ae>
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	025b      	lsls	r3, r3, #9
 8002366:	429a      	cmp	r2, r3
 8002368:	d011      	beq.n	800238e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237a:	e008      	b.n	800238e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2101      	movs	r1, #1
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e000      	b.n	8002390 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b004      	add	sp, #16
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40014000 	.word	0x40014000
 80023a4:	40014400 	.word	0x40014400
 80023a8:	40014800 	.word	0x40014800
 80023ac:	40000400 	.word	0x40000400
 80023b0:	00010007 	.word	0x00010007

080023b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c0:	2317      	movs	r3, #23
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	223c      	movs	r2, #60	@ 0x3c
 80023cc:	5c9b      	ldrb	r3, [r3, r2]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0e5      	b.n	80025a2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	223c      	movs	r2, #60	@ 0x3c
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b14      	cmp	r3, #20
 80023e2:	d900      	bls.n	80023e6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80023e4:	e0d1      	b.n	800258a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	009a      	lsls	r2, r3, #2
 80023ea:	4b70      	ldr	r3, [pc, #448]	@ (80025ac <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80023ec:	18d3      	adds	r3, r2, r3
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	0011      	movs	r1, r2
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 f968 	bl	80026d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2108      	movs	r1, #8
 800240c:	430a      	orrs	r2, r1
 800240e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2104      	movs	r1, #4
 800241c:	438a      	bics	r2, r1
 800241e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6999      	ldr	r1, [r3, #24]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	619a      	str	r2, [r3, #24]
      break;
 8002432:	e0af      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	0011      	movs	r1, r2
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f9d1 	bl	80027e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2180      	movs	r1, #128	@ 0x80
 800244e:	0109      	lsls	r1, r1, #4
 8002450:	430a      	orrs	r2, r1
 8002452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4954      	ldr	r1, [pc, #336]	@ (80025b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002460:	400a      	ands	r2, r1
 8002462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6999      	ldr	r1, [r3, #24]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	021a      	lsls	r2, r3, #8
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	619a      	str	r2, [r3, #24]
      break;
 8002478:	e08c      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	0011      	movs	r1, r2
 8002482:	0018      	movs	r0, r3
 8002484:	f000 fa32 	bl	80028ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2108      	movs	r1, #8
 8002494:	430a      	orrs	r2, r1
 8002496:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2104      	movs	r1, #4
 80024a4:	438a      	bics	r2, r1
 80024a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69d9      	ldr	r1, [r3, #28]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	61da      	str	r2, [r3, #28]
      break;
 80024ba:	e06b      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	0011      	movs	r1, r2
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 fa99 	bl	80029fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2180      	movs	r1, #128	@ 0x80
 80024d6:	0109      	lsls	r1, r1, #4
 80024d8:	430a      	orrs	r2, r1
 80024da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4932      	ldr	r1, [pc, #200]	@ (80025b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69d9      	ldr	r1, [r3, #28]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	021a      	lsls	r2, r3, #8
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	61da      	str	r2, [r3, #28]
      break;
 8002500:	e048      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	0011      	movs	r1, r2
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fae0 	bl	8002ad0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2108      	movs	r1, #8
 800251c:	430a      	orrs	r2, r1
 800251e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2104      	movs	r1, #4
 800252c:	438a      	bics	r2, r1
 800252e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002542:	e027      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	0011      	movs	r1, r2
 800254c:	0018      	movs	r0, r3
 800254e:	f000 fb1f 	bl	8002b90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2180      	movs	r1, #128	@ 0x80
 800255e:	0109      	lsls	r1, r1, #4
 8002560:	430a      	orrs	r2, r1
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4910      	ldr	r1, [pc, #64]	@ (80025b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002570:	400a      	ands	r2, r1
 8002572:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	021a      	lsls	r2, r3, #8
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002588:	e004      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800258a:	2317      	movs	r3, #23
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
      break;
 8002592:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	223c      	movs	r2, #60	@ 0x3c
 8002598:	2100      	movs	r1, #0
 800259a:	5499      	strb	r1, [r3, r2]

  return status;
 800259c:	2317      	movs	r3, #23
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	781b      	ldrb	r3, [r3, #0]
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b006      	add	sp, #24
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	08003c48 	.word	0x08003c48
 80025b0:	fffffbff 	.word	0xfffffbff

080025b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a3b      	ldr	r2, [pc, #236]	@ (80026b4 <TIM_Base_SetConfig+0x100>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d008      	beq.n	80025de <TIM_Base_SetConfig+0x2a>
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	2380      	movs	r3, #128	@ 0x80
 80025d0:	05db      	lsls	r3, r3, #23
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d003      	beq.n	80025de <TIM_Base_SetConfig+0x2a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a37      	ldr	r2, [pc, #220]	@ (80026b8 <TIM_Base_SetConfig+0x104>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d108      	bne.n	80025f0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2270      	movs	r2, #112	@ 0x70
 80025e2:	4393      	bics	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a30      	ldr	r2, [pc, #192]	@ (80026b4 <TIM_Base_SetConfig+0x100>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d018      	beq.n	800262a <TIM_Base_SetConfig+0x76>
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	05db      	lsls	r3, r3, #23
 80025fe:	429a      	cmp	r2, r3
 8002600:	d013      	beq.n	800262a <TIM_Base_SetConfig+0x76>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a2c      	ldr	r2, [pc, #176]	@ (80026b8 <TIM_Base_SetConfig+0x104>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00f      	beq.n	800262a <TIM_Base_SetConfig+0x76>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a2b      	ldr	r2, [pc, #172]	@ (80026bc <TIM_Base_SetConfig+0x108>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00b      	beq.n	800262a <TIM_Base_SetConfig+0x76>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a2a      	ldr	r2, [pc, #168]	@ (80026c0 <TIM_Base_SetConfig+0x10c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <TIM_Base_SetConfig+0x76>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a29      	ldr	r2, [pc, #164]	@ (80026c4 <TIM_Base_SetConfig+0x110>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_Base_SetConfig+0x76>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a28      	ldr	r2, [pc, #160]	@ (80026c8 <TIM_Base_SetConfig+0x114>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d108      	bne.n	800263c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4a27      	ldr	r2, [pc, #156]	@ (80026cc <TIM_Base_SetConfig+0x118>)
 800262e:	4013      	ands	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2280      	movs	r2, #128	@ 0x80
 8002640:	4393      	bics	r3, r2
 8002642:	001a      	movs	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a13      	ldr	r2, [pc, #76]	@ (80026b4 <TIM_Base_SetConfig+0x100>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00b      	beq.n	8002682 <TIM_Base_SetConfig+0xce>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a14      	ldr	r2, [pc, #80]	@ (80026c0 <TIM_Base_SetConfig+0x10c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <TIM_Base_SetConfig+0xce>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a13      	ldr	r2, [pc, #76]	@ (80026c4 <TIM_Base_SetConfig+0x110>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <TIM_Base_SetConfig+0xce>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a12      	ldr	r2, [pc, #72]	@ (80026c8 <TIM_Base_SetConfig+0x114>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d103      	bne.n	800268a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2201      	movs	r2, #1
 8002696:	4013      	ands	r3, r2
 8002698:	2b01      	cmp	r3, #1
 800269a:	d106      	bne.n	80026aa <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2201      	movs	r2, #1
 80026a2:	4393      	bics	r3, r2
 80026a4:	001a      	movs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	611a      	str	r2, [r3, #16]
  }
}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b004      	add	sp, #16
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40002000 	.word	0x40002000
 80026c0:	40014000 	.word	0x40014000
 80026c4:	40014400 	.word	0x40014400
 80026c8:	40014800 	.word	0x40014800
 80026cc:	fffffcff 	.word	0xfffffcff

080026d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	2201      	movs	r2, #1
 80026e6:	4393      	bics	r3, r2
 80026e8:	001a      	movs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a32      	ldr	r2, [pc, #200]	@ (80027c8 <TIM_OC1_SetConfig+0xf8>)
 80026fe:	4013      	ands	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2203      	movs	r2, #3
 8002706:	4393      	bics	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2202      	movs	r2, #2
 8002718:	4393      	bics	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a28      	ldr	r2, [pc, #160]	@ (80027cc <TIM_OC1_SetConfig+0xfc>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00b      	beq.n	8002746 <TIM_OC1_SetConfig+0x76>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a27      	ldr	r2, [pc, #156]	@ (80027d0 <TIM_OC1_SetConfig+0x100>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <TIM_OC1_SetConfig+0x76>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a26      	ldr	r2, [pc, #152]	@ (80027d4 <TIM_OC1_SetConfig+0x104>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d003      	beq.n	8002746 <TIM_OC1_SetConfig+0x76>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a25      	ldr	r2, [pc, #148]	@ (80027d8 <TIM_OC1_SetConfig+0x108>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10c      	bne.n	8002760 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2208      	movs	r2, #8
 800274a:	4393      	bics	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2204      	movs	r2, #4
 800275c:	4393      	bics	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a1a      	ldr	r2, [pc, #104]	@ (80027cc <TIM_OC1_SetConfig+0xfc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00b      	beq.n	8002780 <TIM_OC1_SetConfig+0xb0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a19      	ldr	r2, [pc, #100]	@ (80027d0 <TIM_OC1_SetConfig+0x100>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <TIM_OC1_SetConfig+0xb0>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a18      	ldr	r2, [pc, #96]	@ (80027d4 <TIM_OC1_SetConfig+0x104>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <TIM_OC1_SetConfig+0xb0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <TIM_OC1_SetConfig+0x108>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d111      	bne.n	80027a4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4a16      	ldr	r2, [pc, #88]	@ (80027dc <TIM_OC1_SetConfig+0x10c>)
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4a15      	ldr	r2, [pc, #84]	@ (80027e0 <TIM_OC1_SetConfig+0x110>)
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b006      	add	sp, #24
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	fffeff8f 	.word	0xfffeff8f
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40014000 	.word	0x40014000
 80027d4:	40014400 	.word	0x40014400
 80027d8:	40014800 	.word	0x40014800
 80027dc:	fffffeff 	.word	0xfffffeff
 80027e0:	fffffdff 	.word	0xfffffdff

080027e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	2210      	movs	r2, #16
 80027fa:	4393      	bics	r3, r2
 80027fc:	001a      	movs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a2e      	ldr	r2, [pc, #184]	@ (80028cc <TIM_OC2_SetConfig+0xe8>)
 8002812:	4013      	ands	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4a2d      	ldr	r2, [pc, #180]	@ (80028d0 <TIM_OC2_SetConfig+0xec>)
 800281a:	4013      	ands	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2220      	movs	r2, #32
 800282e:	4393      	bics	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a24      	ldr	r2, [pc, #144]	@ (80028d4 <TIM_OC2_SetConfig+0xf0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10d      	bne.n	8002862 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2280      	movs	r2, #128	@ 0x80
 800284a:	4393      	bics	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2240      	movs	r2, #64	@ 0x40
 800285e:	4393      	bics	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1b      	ldr	r2, [pc, #108]	@ (80028d4 <TIM_OC2_SetConfig+0xf0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00b      	beq.n	8002882 <TIM_OC2_SetConfig+0x9e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1a      	ldr	r2, [pc, #104]	@ (80028d8 <TIM_OC2_SetConfig+0xf4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <TIM_OC2_SetConfig+0x9e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a19      	ldr	r2, [pc, #100]	@ (80028dc <TIM_OC2_SetConfig+0xf8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d003      	beq.n	8002882 <TIM_OC2_SetConfig+0x9e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a18      	ldr	r2, [pc, #96]	@ (80028e0 <TIM_OC2_SetConfig+0xfc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d113      	bne.n	80028aa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4a17      	ldr	r2, [pc, #92]	@ (80028e4 <TIM_OC2_SetConfig+0x100>)
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <TIM_OC2_SetConfig+0x104>)
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	621a      	str	r2, [r3, #32]
}
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b006      	add	sp, #24
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	feff8fff 	.word	0xfeff8fff
 80028d0:	fffffcff 	.word	0xfffffcff
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40014000 	.word	0x40014000
 80028dc:	40014400 	.word	0x40014400
 80028e0:	40014800 	.word	0x40014800
 80028e4:	fffffbff 	.word	0xfffffbff
 80028e8:	fffff7ff 	.word	0xfffff7ff

080028ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4a33      	ldr	r2, [pc, #204]	@ (80029d0 <TIM_OC3_SetConfig+0xe4>)
 8002902:	401a      	ands	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a2f      	ldr	r2, [pc, #188]	@ (80029d4 <TIM_OC3_SetConfig+0xe8>)
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2203      	movs	r2, #3
 8002920:	4393      	bics	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	4a29      	ldr	r2, [pc, #164]	@ (80029d8 <TIM_OC3_SetConfig+0xec>)
 8002932:	4013      	ands	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a25      	ldr	r2, [pc, #148]	@ (80029dc <TIM_OC3_SetConfig+0xf0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10d      	bne.n	8002966 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	4a24      	ldr	r2, [pc, #144]	@ (80029e0 <TIM_OC3_SetConfig+0xf4>)
 800294e:	4013      	ands	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4a20      	ldr	r2, [pc, #128]	@ (80029e4 <TIM_OC3_SetConfig+0xf8>)
 8002962:	4013      	ands	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <TIM_OC3_SetConfig+0xf0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00b      	beq.n	8002986 <TIM_OC3_SetConfig+0x9a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1d      	ldr	r2, [pc, #116]	@ (80029e8 <TIM_OC3_SetConfig+0xfc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <TIM_OC3_SetConfig+0x9a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1c      	ldr	r2, [pc, #112]	@ (80029ec <TIM_OC3_SetConfig+0x100>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d003      	beq.n	8002986 <TIM_OC3_SetConfig+0x9a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1b      	ldr	r2, [pc, #108]	@ (80029f0 <TIM_OC3_SetConfig+0x104>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d113      	bne.n	80029ae <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4a1a      	ldr	r2, [pc, #104]	@ (80029f4 <TIM_OC3_SetConfig+0x108>)
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4a19      	ldr	r2, [pc, #100]	@ (80029f8 <TIM_OC3_SetConfig+0x10c>)
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	621a      	str	r2, [r3, #32]
}
 80029c8:	46c0      	nop			@ (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b006      	add	sp, #24
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	fffffeff 	.word	0xfffffeff
 80029d4:	fffeff8f 	.word	0xfffeff8f
 80029d8:	fffffdff 	.word	0xfffffdff
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	fffff7ff 	.word	0xfffff7ff
 80029e4:	fffffbff 	.word	0xfffffbff
 80029e8:	40014000 	.word	0x40014000
 80029ec:	40014400 	.word	0x40014400
 80029f0:	40014800 	.word	0x40014800
 80029f4:	ffffefff 	.word	0xffffefff
 80029f8:	ffffdfff 	.word	0xffffdfff

080029fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4a26      	ldr	r2, [pc, #152]	@ (8002aac <TIM_OC4_SetConfig+0xb0>)
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a22      	ldr	r2, [pc, #136]	@ (8002ab0 <TIM_OC4_SetConfig+0xb4>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a21      	ldr	r2, [pc, #132]	@ (8002ab4 <TIM_OC4_SetConfig+0xb8>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab8 <TIM_OC4_SetConfig+0xbc>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	031b      	lsls	r3, r3, #12
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a19      	ldr	r2, [pc, #100]	@ (8002abc <TIM_OC4_SetConfig+0xc0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <TIM_OC4_SetConfig+0x78>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ac0 <TIM_OC4_SetConfig+0xc4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <TIM_OC4_SetConfig+0x78>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a17      	ldr	r2, [pc, #92]	@ (8002ac4 <TIM_OC4_SetConfig+0xc8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_OC4_SetConfig+0x78>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <TIM_OC4_SetConfig+0xcc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d109      	bne.n	8002a88 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	4a15      	ldr	r2, [pc, #84]	@ (8002acc <TIM_OC4_SetConfig+0xd0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b006      	add	sp, #24
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	ffffefff 	.word	0xffffefff
 8002ab0:	feff8fff 	.word	0xfeff8fff
 8002ab4:	fffffcff 	.word	0xfffffcff
 8002ab8:	ffffdfff 	.word	0xffffdfff
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40014400 	.word	0x40014400
 8002ac8:	40014800 	.word	0x40014800
 8002acc:	ffffbfff 	.word	0xffffbfff

08002ad0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a23      	ldr	r2, [pc, #140]	@ (8002b74 <TIM_OC5_SetConfig+0xa4>)
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <TIM_OC5_SetConfig+0xa8>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b7c <TIM_OC5_SetConfig+0xac>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a17      	ldr	r2, [pc, #92]	@ (8002b80 <TIM_OC5_SetConfig+0xb0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <TIM_OC5_SetConfig+0x6e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a16      	ldr	r2, [pc, #88]	@ (8002b84 <TIM_OC5_SetConfig+0xb4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_OC5_SetConfig+0x6e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a15      	ldr	r2, [pc, #84]	@ (8002b88 <TIM_OC5_SetConfig+0xb8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_OC5_SetConfig+0x6e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a14      	ldr	r2, [pc, #80]	@ (8002b8c <TIM_OC5_SetConfig+0xbc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d109      	bne.n	8002b52 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	4a0c      	ldr	r2, [pc, #48]	@ (8002b74 <TIM_OC5_SetConfig+0xa4>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	621a      	str	r2, [r3, #32]
}
 8002b6c:	46c0      	nop			@ (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b006      	add	sp, #24
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	fffeffff 	.word	0xfffeffff
 8002b78:	fffeff8f 	.word	0xfffeff8f
 8002b7c:	fffdffff 	.word	0xfffdffff
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40014400 	.word	0x40014400
 8002b8c:	40014800 	.word	0x40014800

08002b90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a24      	ldr	r2, [pc, #144]	@ (8002c38 <TIM_OC6_SetConfig+0xa8>)
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a20      	ldr	r2, [pc, #128]	@ (8002c3c <TIM_OC6_SetConfig+0xac>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <TIM_OC6_SetConfig+0xb0>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	051b      	lsls	r3, r3, #20
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a18      	ldr	r2, [pc, #96]	@ (8002c44 <TIM_OC6_SetConfig+0xb4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <TIM_OC6_SetConfig+0x70>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <TIM_OC6_SetConfig+0xb8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d007      	beq.n	8002c00 <TIM_OC6_SetConfig+0x70>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <TIM_OC6_SetConfig+0xbc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <TIM_OC6_SetConfig+0x70>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a15      	ldr	r2, [pc, #84]	@ (8002c50 <TIM_OC6_SetConfig+0xc0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d109      	bne.n	8002c14 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4a14      	ldr	r2, [pc, #80]	@ (8002c54 <TIM_OC6_SetConfig+0xc4>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	029b      	lsls	r3, r3, #10
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b006      	add	sp, #24
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	ffefffff 	.word	0xffefffff
 8002c3c:	feff8fff 	.word	0xfeff8fff
 8002c40:	ffdfffff 	.word	0xffdfffff
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40014000 	.word	0x40014000
 8002c4c:	40014400 	.word	0x40014400
 8002c50:	40014800 	.word	0x40014800
 8002c54:	fffbffff 	.word	0xfffbffff

08002c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	221f      	movs	r2, #31
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	0013      	movs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	43d2      	mvns	r2, r2
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1a      	ldr	r2, [r3, #32]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	211f      	movs	r1, #31
 8002c88:	400b      	ands	r3, r1
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4099      	lsls	r1, r3
 8002c8e:	000b      	movs	r3, r1
 8002c90:	431a      	orrs	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b006      	add	sp, #24
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	223c      	movs	r2, #60	@ 0x3c
 8002cae:	5c9b      	ldrb	r3, [r3, r2]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e055      	b.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	223c      	movs	r2, #60	@ 0x3c
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	223d      	movs	r2, #61	@ 0x3d
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a23      	ldr	r2, [pc, #140]	@ (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a22      	ldr	r2, [pc, #136]	@ (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2270      	movs	r2, #112	@ 0x70
 8002cf8:	4393      	bics	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a16      	ldr	r2, [pc, #88]	@ (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00f      	beq.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	05db      	lsls	r3, r3, #23
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d009      	beq.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a12      	ldr	r2, [pc, #72]	@ (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d004      	beq.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a11      	ldr	r2, [pc, #68]	@ (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d10c      	bne.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2280      	movs	r2, #128	@ 0x80
 8002d3c:	4393      	bics	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	223d      	movs	r2, #61	@ 0x3d
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	223c      	movs	r2, #60	@ 0x3c
 8002d5e:	2100      	movs	r1, #0
 8002d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b004      	add	sp, #16
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	ff0fffff 	.word	0xff0fffff
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40014000 	.word	0x40014000

08002d7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	223c      	movs	r2, #60	@ 0x3c
 8002d8e:	5c9b      	ldrb	r3, [r3, r2]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e06f      	b.n	8002e78 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	223c      	movs	r2, #60	@ 0x3c
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	22ff      	movs	r2, #255	@ 0xff
 8002da4:	4393      	bics	r3, r2
 8002da6:	001a      	movs	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a33      	ldr	r2, [pc, #204]	@ (8002e80 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002db4:	401a      	ands	r2, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a30      	ldr	r2, [pc, #192]	@ (8002e84 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a2e      	ldr	r2, [pc, #184]	@ (8002e88 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8002e8c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002dde:	401a      	ands	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a29      	ldr	r2, [pc, #164]	@ (8002e90 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002dec:	401a      	ands	r2, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a26      	ldr	r2, [pc, #152]	@ (8002e94 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a24      	ldr	r2, [pc, #144]	@ (8002e98 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002e08:	401a      	ands	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a21      	ldr	r2, [pc, #132]	@ (8002e9c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002e18:	401a      	ands	r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d11c      	bne.n	8002e66 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002e30:	401a      	ands	r2, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	051b      	lsls	r3, r3, #20
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002e40:	401a      	ands	r2, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a17      	ldr	r2, [pc, #92]	@ (8002eac <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002e4e:	401a      	ands	r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4a15      	ldr	r2, [pc, #84]	@ (8002eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	223c      	movs	r2, #60	@ 0x3c
 8002e72:	2100      	movs	r1, #0
 8002e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b004      	add	sp, #16
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	fffffcff 	.word	0xfffffcff
 8002e84:	fffffbff 	.word	0xfffffbff
 8002e88:	fffff7ff 	.word	0xfffff7ff
 8002e8c:	ffffefff 	.word	0xffffefff
 8002e90:	ffffdfff 	.word	0xffffdfff
 8002e94:	ffffbfff 	.word	0xffffbfff
 8002e98:	fff0ffff 	.word	0xfff0ffff
 8002e9c:	efffffff 	.word	0xefffffff
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	ff0fffff 	.word	0xff0fffff
 8002ea8:	feffffff 	.word	0xfeffffff
 8002eac:	fdffffff 	.word	0xfdffffff
 8002eb0:	dfffffff 	.word	0xdfffffff

08002eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e046      	b.n	8002f54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2288      	movs	r2, #136	@ 0x88
 8002eca:	589b      	ldr	r3, [r3, r2]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2284      	movs	r2, #132	@ 0x84
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7fd fe7a 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2288      	movs	r2, #136	@ 0x88
 8002ee4:	2124      	movs	r1, #36	@ 0x24
 8002ee6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	438a      	bics	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f000 faea 	bl	80034dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 f828 	bl	8002f60 <UART_SetConfig>
 8002f10:	0003      	movs	r3, r0
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e01c      	b.n	8002f54 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	490d      	ldr	r1, [pc, #52]	@ (8002f5c <HAL_UART_Init+0xa8>)
 8002f26:	400a      	ands	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	212a      	movs	r1, #42	@ 0x2a
 8002f36:	438a      	bics	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 fb79 	bl	8003644 <UART_CheckIdleState>
 8002f52:	0003      	movs	r3, r0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	ffffb7ff 	.word	0xffffb7ff

08002f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b090      	sub	sp, #64	@ 0x40
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f68:	231a      	movs	r3, #26
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	189b      	adds	r3, r3, r2
 8002f6e:	19db      	adds	r3, r3, r7
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4aaf      	ldr	r2, [pc, #700]	@ (8003250 <UART_SetConfig+0x2f0>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4aaa      	ldr	r2, [pc, #680]	@ (8003254 <UART_SetConfig+0x2f4>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	0018      	movs	r0, r3
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	68d9      	ldr	r1, [r3, #12]
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4aa4      	ldr	r2, [pc, #656]	@ (8003258 <UART_SetConfig+0x2f8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a9f      	ldr	r2, [pc, #636]	@ (800325c <UART_SetConfig+0x2fc>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	4393      	bics	r3, r2
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	0003      	movs	r3, r0
 8003002:	430b      	orrs	r3, r1
 8003004:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a95      	ldr	r2, [pc, #596]	@ (8003260 <UART_SetConfig+0x300>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d131      	bne.n	8003074 <UART_SetConfig+0x114>
 8003010:	4b94      	ldr	r3, [pc, #592]	@ (8003264 <UART_SetConfig+0x304>)
 8003012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003014:	2203      	movs	r2, #3
 8003016:	4013      	ands	r3, r2
 8003018:	2b03      	cmp	r3, #3
 800301a:	d01d      	beq.n	8003058 <UART_SetConfig+0xf8>
 800301c:	d823      	bhi.n	8003066 <UART_SetConfig+0x106>
 800301e:	2b02      	cmp	r3, #2
 8003020:	d00c      	beq.n	800303c <UART_SetConfig+0xdc>
 8003022:	d820      	bhi.n	8003066 <UART_SetConfig+0x106>
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <UART_SetConfig+0xce>
 8003028:	2b01      	cmp	r3, #1
 800302a:	d00e      	beq.n	800304a <UART_SetConfig+0xea>
 800302c:	e01b      	b.n	8003066 <UART_SetConfig+0x106>
 800302e:	231b      	movs	r3, #27
 8003030:	2220      	movs	r2, #32
 8003032:	189b      	adds	r3, r3, r2
 8003034:	19db      	adds	r3, r3, r7
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e0b4      	b.n	80031a6 <UART_SetConfig+0x246>
 800303c:	231b      	movs	r3, #27
 800303e:	2220      	movs	r2, #32
 8003040:	189b      	adds	r3, r3, r2
 8003042:	19db      	adds	r3, r3, r7
 8003044:	2202      	movs	r2, #2
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e0ad      	b.n	80031a6 <UART_SetConfig+0x246>
 800304a:	231b      	movs	r3, #27
 800304c:	2220      	movs	r2, #32
 800304e:	189b      	adds	r3, r3, r2
 8003050:	19db      	adds	r3, r3, r7
 8003052:	2204      	movs	r2, #4
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e0a6      	b.n	80031a6 <UART_SetConfig+0x246>
 8003058:	231b      	movs	r3, #27
 800305a:	2220      	movs	r2, #32
 800305c:	189b      	adds	r3, r3, r2
 800305e:	19db      	adds	r3, r3, r7
 8003060:	2208      	movs	r2, #8
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e09f      	b.n	80031a6 <UART_SetConfig+0x246>
 8003066:	231b      	movs	r3, #27
 8003068:	2220      	movs	r2, #32
 800306a:	189b      	adds	r3, r3, r2
 800306c:	19db      	adds	r3, r3, r7
 800306e:	2210      	movs	r2, #16
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	e098      	b.n	80031a6 <UART_SetConfig+0x246>
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a7b      	ldr	r2, [pc, #492]	@ (8003268 <UART_SetConfig+0x308>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d131      	bne.n	80030e2 <UART_SetConfig+0x182>
 800307e:	4b79      	ldr	r3, [pc, #484]	@ (8003264 <UART_SetConfig+0x304>)
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	220c      	movs	r2, #12
 8003084:	4013      	ands	r3, r2
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d01d      	beq.n	80030c6 <UART_SetConfig+0x166>
 800308a:	d823      	bhi.n	80030d4 <UART_SetConfig+0x174>
 800308c:	2b08      	cmp	r3, #8
 800308e:	d00c      	beq.n	80030aa <UART_SetConfig+0x14a>
 8003090:	d820      	bhi.n	80030d4 <UART_SetConfig+0x174>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <UART_SetConfig+0x13c>
 8003096:	2b04      	cmp	r3, #4
 8003098:	d00e      	beq.n	80030b8 <UART_SetConfig+0x158>
 800309a:	e01b      	b.n	80030d4 <UART_SetConfig+0x174>
 800309c:	231b      	movs	r3, #27
 800309e:	2220      	movs	r2, #32
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e07d      	b.n	80031a6 <UART_SetConfig+0x246>
 80030aa:	231b      	movs	r3, #27
 80030ac:	2220      	movs	r2, #32
 80030ae:	189b      	adds	r3, r3, r2
 80030b0:	19db      	adds	r3, r3, r7
 80030b2:	2202      	movs	r2, #2
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e076      	b.n	80031a6 <UART_SetConfig+0x246>
 80030b8:	231b      	movs	r3, #27
 80030ba:	2220      	movs	r2, #32
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	19db      	adds	r3, r3, r7
 80030c0:	2204      	movs	r2, #4
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e06f      	b.n	80031a6 <UART_SetConfig+0x246>
 80030c6:	231b      	movs	r3, #27
 80030c8:	2220      	movs	r2, #32
 80030ca:	189b      	adds	r3, r3, r2
 80030cc:	19db      	adds	r3, r3, r7
 80030ce:	2208      	movs	r2, #8
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e068      	b.n	80031a6 <UART_SetConfig+0x246>
 80030d4:	231b      	movs	r3, #27
 80030d6:	2220      	movs	r2, #32
 80030d8:	189b      	adds	r3, r3, r2
 80030da:	19db      	adds	r3, r3, r7
 80030dc:	2210      	movs	r2, #16
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e061      	b.n	80031a6 <UART_SetConfig+0x246>
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a61      	ldr	r2, [pc, #388]	@ (800326c <UART_SetConfig+0x30c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d106      	bne.n	80030fa <UART_SetConfig+0x19a>
 80030ec:	231b      	movs	r3, #27
 80030ee:	2220      	movs	r2, #32
 80030f0:	189b      	adds	r3, r3, r2
 80030f2:	19db      	adds	r3, r3, r7
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	e055      	b.n	80031a6 <UART_SetConfig+0x246>
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003270 <UART_SetConfig+0x310>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d106      	bne.n	8003112 <UART_SetConfig+0x1b2>
 8003104:	231b      	movs	r3, #27
 8003106:	2220      	movs	r2, #32
 8003108:	189b      	adds	r3, r3, r2
 800310a:	19db      	adds	r3, r3, r7
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e049      	b.n	80031a6 <UART_SetConfig+0x246>
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a50      	ldr	r2, [pc, #320]	@ (8003258 <UART_SetConfig+0x2f8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d13e      	bne.n	800319a <UART_SetConfig+0x23a>
 800311c:	4b51      	ldr	r3, [pc, #324]	@ (8003264 <UART_SetConfig+0x304>)
 800311e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003120:	23c0      	movs	r3, #192	@ 0xc0
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	4013      	ands	r3, r2
 8003126:	22c0      	movs	r2, #192	@ 0xc0
 8003128:	0112      	lsls	r2, r2, #4
 800312a:	4293      	cmp	r3, r2
 800312c:	d027      	beq.n	800317e <UART_SetConfig+0x21e>
 800312e:	22c0      	movs	r2, #192	@ 0xc0
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	4293      	cmp	r3, r2
 8003134:	d82a      	bhi.n	800318c <UART_SetConfig+0x22c>
 8003136:	2280      	movs	r2, #128	@ 0x80
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	4293      	cmp	r3, r2
 800313c:	d011      	beq.n	8003162 <UART_SetConfig+0x202>
 800313e:	2280      	movs	r2, #128	@ 0x80
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	4293      	cmp	r3, r2
 8003144:	d822      	bhi.n	800318c <UART_SetConfig+0x22c>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d004      	beq.n	8003154 <UART_SetConfig+0x1f4>
 800314a:	2280      	movs	r2, #128	@ 0x80
 800314c:	00d2      	lsls	r2, r2, #3
 800314e:	4293      	cmp	r3, r2
 8003150:	d00e      	beq.n	8003170 <UART_SetConfig+0x210>
 8003152:	e01b      	b.n	800318c <UART_SetConfig+0x22c>
 8003154:	231b      	movs	r3, #27
 8003156:	2220      	movs	r2, #32
 8003158:	189b      	adds	r3, r3, r2
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e021      	b.n	80031a6 <UART_SetConfig+0x246>
 8003162:	231b      	movs	r3, #27
 8003164:	2220      	movs	r2, #32
 8003166:	189b      	adds	r3, r3, r2
 8003168:	19db      	adds	r3, r3, r7
 800316a:	2202      	movs	r2, #2
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e01a      	b.n	80031a6 <UART_SetConfig+0x246>
 8003170:	231b      	movs	r3, #27
 8003172:	2220      	movs	r2, #32
 8003174:	189b      	adds	r3, r3, r2
 8003176:	19db      	adds	r3, r3, r7
 8003178:	2204      	movs	r2, #4
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e013      	b.n	80031a6 <UART_SetConfig+0x246>
 800317e:	231b      	movs	r3, #27
 8003180:	2220      	movs	r2, #32
 8003182:	189b      	adds	r3, r3, r2
 8003184:	19db      	adds	r3, r3, r7
 8003186:	2208      	movs	r2, #8
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e00c      	b.n	80031a6 <UART_SetConfig+0x246>
 800318c:	231b      	movs	r3, #27
 800318e:	2220      	movs	r2, #32
 8003190:	189b      	adds	r3, r3, r2
 8003192:	19db      	adds	r3, r3, r7
 8003194:	2210      	movs	r2, #16
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e005      	b.n	80031a6 <UART_SetConfig+0x246>
 800319a:	231b      	movs	r3, #27
 800319c:	2220      	movs	r2, #32
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	19db      	adds	r3, r3, r7
 80031a2:	2210      	movs	r2, #16
 80031a4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003258 <UART_SetConfig+0x2f8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d000      	beq.n	80031b2 <UART_SetConfig+0x252>
 80031b0:	e0a9      	b.n	8003306 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031b2:	231b      	movs	r3, #27
 80031b4:	2220      	movs	r2, #32
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	19db      	adds	r3, r3, r7
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d015      	beq.n	80031ec <UART_SetConfig+0x28c>
 80031c0:	dc18      	bgt.n	80031f4 <UART_SetConfig+0x294>
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d00d      	beq.n	80031e2 <UART_SetConfig+0x282>
 80031c6:	dc15      	bgt.n	80031f4 <UART_SetConfig+0x294>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <UART_SetConfig+0x272>
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d005      	beq.n	80031dc <UART_SetConfig+0x27c>
 80031d0:	e010      	b.n	80031f4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d2:	f7fe fddf 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 80031d6:	0003      	movs	r3, r0
 80031d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031da:	e014      	b.n	8003206 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031dc:	4b25      	ldr	r3, [pc, #148]	@ (8003274 <UART_SetConfig+0x314>)
 80031de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031e0:	e011      	b.n	8003206 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e2:	f7fe fd4b 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 80031e6:	0003      	movs	r3, r0
 80031e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031ea:	e00c      	b.n	8003206 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031f2:	e008      	b.n	8003206 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80031f8:	231a      	movs	r3, #26
 80031fa:	2220      	movs	r2, #32
 80031fc:	189b      	adds	r3, r3, r2
 80031fe:	19db      	adds	r3, r3, r7
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
        break;
 8003204:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003208:	2b00      	cmp	r3, #0
 800320a:	d100      	bne.n	800320e <UART_SetConfig+0x2ae>
 800320c:	e14b      	b.n	80034a6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003212:	4b19      	ldr	r3, [pc, #100]	@ (8003278 <UART_SetConfig+0x318>)
 8003214:	0052      	lsls	r2, r2, #1
 8003216:	5ad3      	ldrh	r3, [r2, r3]
 8003218:	0019      	movs	r1, r3
 800321a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800321c:	f7fc ff72 	bl	8000104 <__udivsi3>
 8003220:	0003      	movs	r3, r0
 8003222:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	0013      	movs	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	189b      	adds	r3, r3, r2
 800322e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003230:	429a      	cmp	r2, r3
 8003232:	d305      	bcc.n	8003240 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800323a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800323c:	429a      	cmp	r2, r3
 800323e:	d91d      	bls.n	800327c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003240:	231a      	movs	r3, #26
 8003242:	2220      	movs	r2, #32
 8003244:	189b      	adds	r3, r3, r2
 8003246:	19db      	adds	r3, r3, r7
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e12b      	b.n	80034a6 <UART_SetConfig+0x546>
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	cfff69f3 	.word	0xcfff69f3
 8003254:	ffffcfff 	.word	0xffffcfff
 8003258:	40008000 	.word	0x40008000
 800325c:	11fff4ff 	.word	0x11fff4ff
 8003260:	40013800 	.word	0x40013800
 8003264:	40021000 	.word	0x40021000
 8003268:	40004400 	.word	0x40004400
 800326c:	40004800 	.word	0x40004800
 8003270:	40004c00 	.word	0x40004c00
 8003274:	00f42400 	.word	0x00f42400
 8003278:	08003c9c 	.word	0x08003c9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800327c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003288:	4b92      	ldr	r3, [pc, #584]	@ (80034d4 <UART_SetConfig+0x574>)
 800328a:	0052      	lsls	r2, r2, #1
 800328c:	5ad3      	ldrh	r3, [r2, r3]
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	69b8      	ldr	r0, [r7, #24]
 800329a:	69f9      	ldr	r1, [r7, #28]
 800329c:	f7fd f8a8 	bl	80003f0 <__aeabi_uldivmod>
 80032a0:	0002      	movs	r2, r0
 80032a2:	000b      	movs	r3, r1
 80032a4:	0e11      	lsrs	r1, r2, #24
 80032a6:	021d      	lsls	r5, r3, #8
 80032a8:	430d      	orrs	r5, r1
 80032aa:	0214      	lsls	r4, r2, #8
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68b8      	ldr	r0, [r7, #8]
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	1900      	adds	r0, r0, r4
 80032be:	4169      	adcs	r1, r5
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f7fd f88f 	bl	80003f0 <__aeabi_uldivmod>
 80032d2:	0002      	movs	r2, r0
 80032d4:	000b      	movs	r3, r1
 80032d6:	0013      	movs	r3, r2
 80032d8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032dc:	23c0      	movs	r3, #192	@ 0xc0
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d309      	bcc.n	80032f8 <UART_SetConfig+0x398>
 80032e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e6:	2380      	movs	r3, #128	@ 0x80
 80032e8:	035b      	lsls	r3, r3, #13
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d204      	bcs.n	80032f8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	e0d6      	b.n	80034a6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80032f8:	231a      	movs	r3, #26
 80032fa:	2220      	movs	r2, #32
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	19db      	adds	r3, r3, r7
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e0cf      	b.n	80034a6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	2380      	movs	r3, #128	@ 0x80
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	429a      	cmp	r2, r3
 8003310:	d000      	beq.n	8003314 <UART_SetConfig+0x3b4>
 8003312:	e070      	b.n	80033f6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003314:	231b      	movs	r3, #27
 8003316:	2220      	movs	r2, #32
 8003318:	189b      	adds	r3, r3, r2
 800331a:	19db      	adds	r3, r3, r7
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b08      	cmp	r3, #8
 8003320:	d015      	beq.n	800334e <UART_SetConfig+0x3ee>
 8003322:	dc18      	bgt.n	8003356 <UART_SetConfig+0x3f6>
 8003324:	2b04      	cmp	r3, #4
 8003326:	d00d      	beq.n	8003344 <UART_SetConfig+0x3e4>
 8003328:	dc15      	bgt.n	8003356 <UART_SetConfig+0x3f6>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <UART_SetConfig+0x3d4>
 800332e:	2b02      	cmp	r3, #2
 8003330:	d005      	beq.n	800333e <UART_SetConfig+0x3de>
 8003332:	e010      	b.n	8003356 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003334:	f7fe fd2e 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8003338:	0003      	movs	r3, r0
 800333a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800333c:	e014      	b.n	8003368 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800333e:	4b66      	ldr	r3, [pc, #408]	@ (80034d8 <UART_SetConfig+0x578>)
 8003340:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003342:	e011      	b.n	8003368 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003344:	f7fe fc9a 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8003348:	0003      	movs	r3, r0
 800334a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800334c:	e00c      	b.n	8003368 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334e:	2380      	movs	r3, #128	@ 0x80
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003354:	e008      	b.n	8003368 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800335a:	231a      	movs	r3, #26
 800335c:	2220      	movs	r2, #32
 800335e:	189b      	adds	r3, r3, r2
 8003360:	19db      	adds	r3, r3, r7
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
        break;
 8003366:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336a:	2b00      	cmp	r3, #0
 800336c:	d100      	bne.n	8003370 <UART_SetConfig+0x410>
 800336e:	e09a      	b.n	80034a6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003374:	4b57      	ldr	r3, [pc, #348]	@ (80034d4 <UART_SetConfig+0x574>)
 8003376:	0052      	lsls	r2, r2, #1
 8003378:	5ad3      	ldrh	r3, [r2, r3]
 800337a:	0019      	movs	r1, r3
 800337c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800337e:	f7fc fec1 	bl	8000104 <__udivsi3>
 8003382:	0003      	movs	r3, r0
 8003384:	005a      	lsls	r2, r3, #1
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	18d2      	adds	r2, r2, r3
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	0019      	movs	r1, r3
 8003394:	0010      	movs	r0, r2
 8003396:	f7fc feb5 	bl	8000104 <__udivsi3>
 800339a:	0003      	movs	r3, r0
 800339c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a0:	2b0f      	cmp	r3, #15
 80033a2:	d921      	bls.n	80033e8 <UART_SetConfig+0x488>
 80033a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033a6:	2380      	movs	r3, #128	@ 0x80
 80033a8:	025b      	lsls	r3, r3, #9
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d21c      	bcs.n	80033e8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	200e      	movs	r0, #14
 80033b4:	2420      	movs	r4, #32
 80033b6:	1903      	adds	r3, r0, r4
 80033b8:	19db      	adds	r3, r3, r7
 80033ba:	210f      	movs	r1, #15
 80033bc:	438a      	bics	r2, r1
 80033be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2207      	movs	r2, #7
 80033c8:	4013      	ands	r3, r2
 80033ca:	b299      	uxth	r1, r3
 80033cc:	1903      	adds	r3, r0, r4
 80033ce:	19db      	adds	r3, r3, r7
 80033d0:	1902      	adds	r2, r0, r4
 80033d2:	19d2      	adds	r2, r2, r7
 80033d4:	8812      	ldrh	r2, [r2, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	1902      	adds	r2, r0, r4
 80033e0:	19d2      	adds	r2, r2, r7
 80033e2:	8812      	ldrh	r2, [r2, #0]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	e05e      	b.n	80034a6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80033e8:	231a      	movs	r3, #26
 80033ea:	2220      	movs	r2, #32
 80033ec:	189b      	adds	r3, r3, r2
 80033ee:	19db      	adds	r3, r3, r7
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	e057      	b.n	80034a6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033f6:	231b      	movs	r3, #27
 80033f8:	2220      	movs	r2, #32
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	19db      	adds	r3, r3, r7
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d015      	beq.n	8003430 <UART_SetConfig+0x4d0>
 8003404:	dc18      	bgt.n	8003438 <UART_SetConfig+0x4d8>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d00d      	beq.n	8003426 <UART_SetConfig+0x4c6>
 800340a:	dc15      	bgt.n	8003438 <UART_SetConfig+0x4d8>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <UART_SetConfig+0x4b6>
 8003410:	2b02      	cmp	r3, #2
 8003412:	d005      	beq.n	8003420 <UART_SetConfig+0x4c0>
 8003414:	e010      	b.n	8003438 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003416:	f7fe fcbd 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 800341a:	0003      	movs	r3, r0
 800341c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800341e:	e014      	b.n	800344a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003420:	4b2d      	ldr	r3, [pc, #180]	@ (80034d8 <UART_SetConfig+0x578>)
 8003422:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003424:	e011      	b.n	800344a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003426:	f7fe fc29 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 800342a:	0003      	movs	r3, r0
 800342c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800342e:	e00c      	b.n	800344a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003436:	e008      	b.n	800344a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800343c:	231a      	movs	r3, #26
 800343e:	2220      	movs	r2, #32
 8003440:	189b      	adds	r3, r3, r2
 8003442:	19db      	adds	r3, r3, r7
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
        break;
 8003448:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800344a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02a      	beq.n	80034a6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003454:	4b1f      	ldr	r3, [pc, #124]	@ (80034d4 <UART_SetConfig+0x574>)
 8003456:	0052      	lsls	r2, r2, #1
 8003458:	5ad3      	ldrh	r3, [r2, r3]
 800345a:	0019      	movs	r1, r3
 800345c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800345e:	f7fc fe51 	bl	8000104 <__udivsi3>
 8003462:	0003      	movs	r3, r0
 8003464:	001a      	movs	r2, r3
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	18d2      	adds	r2, r2, r3
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	0019      	movs	r1, r3
 8003474:	0010      	movs	r0, r2
 8003476:	f7fc fe45 	bl	8000104 <__udivsi3>
 800347a:	0003      	movs	r3, r0
 800347c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003480:	2b0f      	cmp	r3, #15
 8003482:	d90a      	bls.n	800349a <UART_SetConfig+0x53a>
 8003484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	025b      	lsls	r3, r3, #9
 800348a:	429a      	cmp	r2, r3
 800348c:	d205      	bcs.n	800349a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	b29a      	uxth	r2, r3
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	e005      	b.n	80034a6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800349a:	231a      	movs	r3, #26
 800349c:	2220      	movs	r2, #32
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	19db      	adds	r3, r3, r7
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	226a      	movs	r2, #106	@ 0x6a
 80034aa:	2101      	movs	r1, #1
 80034ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	2268      	movs	r2, #104	@ 0x68
 80034b2:	2101      	movs	r1, #1
 80034b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	2200      	movs	r2, #0
 80034ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	2200      	movs	r2, #0
 80034c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80034c2:	231a      	movs	r3, #26
 80034c4:	2220      	movs	r2, #32
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	19db      	adds	r3, r3, r7
 80034ca:	781b      	ldrb	r3, [r3, #0]
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b010      	add	sp, #64	@ 0x40
 80034d2:	bdb0      	pop	{r4, r5, r7, pc}
 80034d4:	08003c9c 	.word	0x08003c9c
 80034d8:	00f42400 	.word	0x00f42400

080034dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	2208      	movs	r2, #8
 80034ea:	4013      	ands	r3, r2
 80034ec:	d00b      	beq.n	8003506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003620 <UART_AdvFeatureConfig+0x144>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	2201      	movs	r2, #1
 800350c:	4013      	ands	r3, r2
 800350e:	d00b      	beq.n	8003528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4a43      	ldr	r2, [pc, #268]	@ (8003624 <UART_AdvFeatureConfig+0x148>)
 8003518:	4013      	ands	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	2202      	movs	r2, #2
 800352e:	4013      	ands	r3, r2
 8003530:	d00b      	beq.n	800354a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4a3b      	ldr	r2, [pc, #236]	@ (8003628 <UART_AdvFeatureConfig+0x14c>)
 800353a:	4013      	ands	r3, r2
 800353c:	0019      	movs	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354e:	2204      	movs	r2, #4
 8003550:	4013      	ands	r3, r2
 8003552:	d00b      	beq.n	800356c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4a34      	ldr	r2, [pc, #208]	@ (800362c <UART_AdvFeatureConfig+0x150>)
 800355c:	4013      	ands	r3, r2
 800355e:	0019      	movs	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003570:	2210      	movs	r2, #16
 8003572:	4013      	ands	r3, r2
 8003574:	d00b      	beq.n	800358e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a2c      	ldr	r2, [pc, #176]	@ (8003630 <UART_AdvFeatureConfig+0x154>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	2220      	movs	r2, #32
 8003594:	4013      	ands	r3, r2
 8003596:	d00b      	beq.n	80035b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	4a25      	ldr	r2, [pc, #148]	@ (8003634 <UART_AdvFeatureConfig+0x158>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	2240      	movs	r2, #64	@ 0x40
 80035b6:	4013      	ands	r3, r2
 80035b8:	d01d      	beq.n	80035f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003638 <UART_AdvFeatureConfig+0x15c>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035d6:	2380      	movs	r3, #128	@ 0x80
 80035d8:	035b      	lsls	r3, r3, #13
 80035da:	429a      	cmp	r2, r3
 80035dc:	d10b      	bne.n	80035f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a15      	ldr	r2, [pc, #84]	@ (800363c <UART_AdvFeatureConfig+0x160>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	0019      	movs	r1, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	2280      	movs	r2, #128	@ 0x80
 80035fc:	4013      	ands	r3, r2
 80035fe:	d00b      	beq.n	8003618 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4a0e      	ldr	r2, [pc, #56]	@ (8003640 <UART_AdvFeatureConfig+0x164>)
 8003608:	4013      	ands	r3, r2
 800360a:	0019      	movs	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }
}
 8003618:	46c0      	nop			@ (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b002      	add	sp, #8
 800361e:	bd80      	pop	{r7, pc}
 8003620:	ffff7fff 	.word	0xffff7fff
 8003624:	fffdffff 	.word	0xfffdffff
 8003628:	fffeffff 	.word	0xfffeffff
 800362c:	fffbffff 	.word	0xfffbffff
 8003630:	ffffefff 	.word	0xffffefff
 8003634:	ffffdfff 	.word	0xffffdfff
 8003638:	ffefffff 	.word	0xffefffff
 800363c:	ff9fffff 	.word	0xff9fffff
 8003640:	fff7ffff 	.word	0xfff7ffff

08003644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b092      	sub	sp, #72	@ 0x48
 8003648:	af02      	add	r7, sp, #8
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2290      	movs	r2, #144	@ 0x90
 8003650:	2100      	movs	r1, #0
 8003652:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003654:	f7fd fbec 	bl	8000e30 <HAL_GetTick>
 8003658:	0003      	movs	r3, r0
 800365a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2208      	movs	r2, #8
 8003664:	4013      	ands	r3, r2
 8003666:	2b08      	cmp	r3, #8
 8003668:	d12d      	bne.n	80036c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800366a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366c:	2280      	movs	r2, #128	@ 0x80
 800366e:	0391      	lsls	r1, r2, #14
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4a47      	ldr	r2, [pc, #284]	@ (8003790 <UART_CheckIdleState+0x14c>)
 8003674:	9200      	str	r2, [sp, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	f000 f88e 	bl	8003798 <UART_WaitOnFlagUntilTimeout>
 800367c:	1e03      	subs	r3, r0, #0
 800367e:	d022      	beq.n	80036c6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003680:	f3ef 8310 	mrs	r3, PRIMASK
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003688:	63bb      	str	r3, [r7, #56]	@ 0x38
 800368a:	2301      	movs	r3, #1
 800368c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			@ (mov r8, r8)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2180      	movs	r1, #128	@ 0x80
 80036a2:	438a      	bics	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2288      	movs	r2, #136	@ 0x88
 80036b6:	2120      	movs	r1, #32
 80036b8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2284      	movs	r2, #132	@ 0x84
 80036be:	2100      	movs	r1, #0
 80036c0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e060      	b.n	8003788 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2204      	movs	r2, #4
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d146      	bne.n	8003762 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d6:	2280      	movs	r2, #128	@ 0x80
 80036d8:	03d1      	lsls	r1, r2, #15
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003790 <UART_CheckIdleState+0x14c>)
 80036de:	9200      	str	r2, [sp, #0]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f000 f859 	bl	8003798 <UART_WaitOnFlagUntilTimeout>
 80036e6:	1e03      	subs	r3, r0, #0
 80036e8:	d03b      	beq.n	8003762 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ea:	f3ef 8310 	mrs	r3, PRIMASK
 80036ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80036f0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f4:	2301      	movs	r3, #1
 80036f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f383 8810 	msr	PRIMASK, r3
}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4922      	ldr	r1, [pc, #136]	@ (8003794 <UART_CheckIdleState+0x150>)
 800370c:	400a      	ands	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003712:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f383 8810 	msr	PRIMASK, r3
}
 800371a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371c:	f3ef 8310 	mrs	r3, PRIMASK
 8003720:	61bb      	str	r3, [r7, #24]
  return(result);
 8003722:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003724:	633b      	str	r3, [r7, #48]	@ 0x30
 8003726:	2301      	movs	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f383 8810 	msr	PRIMASK, r3
}
 8003730:	46c0      	nop			@ (mov r8, r8)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	438a      	bics	r2, r1
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	f383 8810 	msr	PRIMASK, r3
}
 800374c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	228c      	movs	r2, #140	@ 0x8c
 8003752:	2120      	movs	r1, #32
 8003754:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2284      	movs	r2, #132	@ 0x84
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e012      	b.n	8003788 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2288      	movs	r2, #136	@ 0x88
 8003766:	2120      	movs	r1, #32
 8003768:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	228c      	movs	r2, #140	@ 0x8c
 800376e:	2120      	movs	r1, #32
 8003770:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2284      	movs	r2, #132	@ 0x84
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b010      	add	sp, #64	@ 0x40
 800378e:	bd80      	pop	{r7, pc}
 8003790:	01ffffff 	.word	0x01ffffff
 8003794:	fffffedf 	.word	0xfffffedf

08003798 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	1dfb      	adds	r3, r7, #7
 80037a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a8:	e051      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	3301      	adds	r3, #1
 80037ae:	d04e      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b0:	f7fd fb3e 	bl	8000e30 <HAL_GetTick>
 80037b4:	0002      	movs	r2, r0
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d302      	bcc.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e051      	b.n	800386e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2204      	movs	r2, #4
 80037d2:	4013      	ands	r3, r2
 80037d4:	d03b      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0xb6>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b80      	cmp	r3, #128	@ 0x80
 80037da:	d038      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0xb6>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b40      	cmp	r3, #64	@ 0x40
 80037e0:	d035      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	2208      	movs	r2, #8
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d111      	bne.n	8003814 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2208      	movs	r2, #8
 80037f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 f83c 	bl	8003878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2290      	movs	r2, #144	@ 0x90
 8003804:	2108      	movs	r1, #8
 8003806:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2284      	movs	r2, #132	@ 0x84
 800380c:	2100      	movs	r1, #0
 800380e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e02c      	b.n	800386e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	401a      	ands	r2, r3
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	429a      	cmp	r2, r3
 8003826:	d112      	bne.n	800384e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2280      	movs	r2, #128	@ 0x80
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	0018      	movs	r0, r3
 8003836:	f000 f81f 	bl	8003878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2290      	movs	r2, #144	@ 0x90
 800383e:	2120      	movs	r1, #32
 8003840:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2284      	movs	r2, #132	@ 0x84
 8003846:	2100      	movs	r1, #0
 8003848:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e00f      	b.n	800386e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	425a      	negs	r2, r3
 800385e:	4153      	adcs	r3, r2
 8003860:	b2db      	uxtb	r3, r3
 8003862:	001a      	movs	r2, r3
 8003864:	1dfb      	adds	r3, r7, #7
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d09e      	beq.n	80037aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b004      	add	sp, #16
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08e      	sub	sp, #56	@ 0x38
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003880:	f3ef 8310 	mrs	r3, PRIMASK
 8003884:	617b      	str	r3, [r7, #20]
  return(result);
 8003886:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003888:	637b      	str	r3, [r7, #52]	@ 0x34
 800388a:	2301      	movs	r3, #1
 800388c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	f383 8810 	msr	PRIMASK, r3
}
 8003894:	46c0      	nop			@ (mov r8, r8)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4926      	ldr	r1, [pc, #152]	@ (800393c <UART_EndRxTransfer+0xc4>)
 80038a2:	400a      	ands	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f383 8810 	msr	PRIMASK, r3
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b2:	f3ef 8310 	mrs	r3, PRIMASK
 80038b6:	623b      	str	r3, [r7, #32]
  return(result);
 80038b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80038bc:	2301      	movs	r3, #1
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	f383 8810 	msr	PRIMASK, r3
}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	491b      	ldr	r1, [pc, #108]	@ (8003940 <UART_EndRxTransfer+0xc8>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038de:	f383 8810 	msr	PRIMASK, r3
}
 80038e2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d118      	bne.n	800391e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ec:	f3ef 8310 	mrs	r3, PRIMASK
 80038f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80038f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038f6:	2301      	movs	r3, #1
 80038f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f383 8810 	msr	PRIMASK, r3
}
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2110      	movs	r1, #16
 800390e:	438a      	bics	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f383 8810 	msr	PRIMASK, r3
}
 800391c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	228c      	movs	r2, #140	@ 0x8c
 8003922:	2120      	movs	r1, #32
 8003924:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b00e      	add	sp, #56	@ 0x38
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	fffffedf 	.word	0xfffffedf
 8003940:	effffffe 	.word	0xeffffffe

08003944 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2284      	movs	r2, #132	@ 0x84
 8003950:	5c9b      	ldrb	r3, [r3, r2]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_UARTEx_DisableFifoMode+0x16>
 8003956:	2302      	movs	r3, #2
 8003958:	e027      	b.n	80039aa <HAL_UARTEx_DisableFifoMode+0x66>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2284      	movs	r2, #132	@ 0x84
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2288      	movs	r2, #136	@ 0x88
 8003966:	2124      	movs	r1, #36	@ 0x24
 8003968:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2101      	movs	r1, #1
 800397e:	438a      	bics	r2, r1
 8003980:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a0b      	ldr	r2, [pc, #44]	@ (80039b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003986:	4013      	ands	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2288      	movs	r2, #136	@ 0x88
 800399c:	2120      	movs	r1, #32
 800399e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2284      	movs	r2, #132	@ 0x84
 80039a4:	2100      	movs	r1, #0
 80039a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b004      	add	sp, #16
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	dfffffff 	.word	0xdfffffff

080039b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2284      	movs	r2, #132	@ 0x84
 80039c6:	5c9b      	ldrb	r3, [r3, r2]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e02e      	b.n	8003a2e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2284      	movs	r2, #132	@ 0x84
 80039d4:	2101      	movs	r1, #1
 80039d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2288      	movs	r2, #136	@ 0x88
 80039dc:	2124      	movs	r1, #36	@ 0x24
 80039de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2101      	movs	r1, #1
 80039f4:	438a      	bics	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	08d9      	lsrs	r1, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f000 f854 	bl	8003abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2288      	movs	r2, #136	@ 0x88
 8003a20:	2120      	movs	r1, #32
 8003a22:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2284      	movs	r2, #132	@ 0x84
 8003a28:	2100      	movs	r1, #0
 8003a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2284      	movs	r2, #132	@ 0x84
 8003a46:	5c9b      	ldrb	r3, [r3, r2]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e02f      	b.n	8003ab0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2284      	movs	r2, #132	@ 0x84
 8003a54:	2101      	movs	r1, #1
 8003a56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2288      	movs	r2, #136	@ 0x88
 8003a5c:	2124      	movs	r1, #36	@ 0x24
 8003a5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2101      	movs	r1, #1
 8003a74:	438a      	bics	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 f813 	bl	8003abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2288      	movs	r2, #136	@ 0x88
 8003aa2:	2120      	movs	r1, #32
 8003aa4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2284      	movs	r2, #132	@ 0x84
 8003aaa:	2100      	movs	r1, #0
 8003aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b004      	add	sp, #16
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	f1ffffff 	.word	0xf1ffffff

08003abc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	226a      	movs	r2, #106	@ 0x6a
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2268      	movs	r2, #104	@ 0x68
 8003ad8:	2101      	movs	r1, #1
 8003ada:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003adc:	e043      	b.n	8003b66 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ade:	260f      	movs	r6, #15
 8003ae0:	19bb      	adds	r3, r7, r6
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ae6:	200e      	movs	r0, #14
 8003ae8:	183b      	adds	r3, r7, r0
 8003aea:	2208      	movs	r2, #8
 8003aec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	0e5b      	lsrs	r3, r3, #25
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	240d      	movs	r4, #13
 8003afa:	193b      	adds	r3, r7, r4
 8003afc:	2107      	movs	r1, #7
 8003afe:	400a      	ands	r2, r1
 8003b00:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	0f5b      	lsrs	r3, r3, #29
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	250c      	movs	r5, #12
 8003b0e:	197b      	adds	r3, r7, r5
 8003b10:	2107      	movs	r1, #7
 8003b12:	400a      	ands	r2, r1
 8003b14:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b16:	183b      	adds	r3, r7, r0
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	197a      	adds	r2, r7, r5
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	4914      	ldr	r1, [pc, #80]	@ (8003b70 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b20:	5c8a      	ldrb	r2, [r1, r2]
 8003b22:	435a      	muls	r2, r3
 8003b24:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b26:	197b      	adds	r3, r7, r5
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	4a12      	ldr	r2, [pc, #72]	@ (8003b74 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b2e:	0019      	movs	r1, r3
 8003b30:	f7fc fb72 	bl	8000218 <__divsi3>
 8003b34:	0003      	movs	r3, r0
 8003b36:	b299      	uxth	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	226a      	movs	r2, #106	@ 0x6a
 8003b3c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b3e:	19bb      	adds	r3, r7, r6
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	193a      	adds	r2, r7, r4
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	490a      	ldr	r1, [pc, #40]	@ (8003b70 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b48:	5c8a      	ldrb	r2, [r1, r2]
 8003b4a:	435a      	muls	r2, r3
 8003b4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b4e:	193b      	adds	r3, r7, r4
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	4a08      	ldr	r2, [pc, #32]	@ (8003b74 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b56:	0019      	movs	r1, r3
 8003b58:	f7fc fb5e 	bl	8000218 <__divsi3>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	b299      	uxth	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2268      	movs	r2, #104	@ 0x68
 8003b64:	5299      	strh	r1, [r3, r2]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b005      	add	sp, #20
 8003b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	08003cb4 	.word	0x08003cb4
 8003b74:	08003cbc 	.word	0x08003cbc

08003b78 <memset>:
 8003b78:	0003      	movs	r3, r0
 8003b7a:	1882      	adds	r2, r0, r2
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d100      	bne.n	8003b82 <memset+0xa>
 8003b80:	4770      	bx	lr
 8003b82:	7019      	strb	r1, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	e7f9      	b.n	8003b7c <memset+0x4>

08003b88 <__libc_init_array>:
 8003b88:	b570      	push	{r4, r5, r6, lr}
 8003b8a:	2600      	movs	r6, #0
 8003b8c:	4c0c      	ldr	r4, [pc, #48]	@ (8003bc0 <__libc_init_array+0x38>)
 8003b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8003bc4 <__libc_init_array+0x3c>)
 8003b90:	1b64      	subs	r4, r4, r5
 8003b92:	10a4      	asrs	r4, r4, #2
 8003b94:	42a6      	cmp	r6, r4
 8003b96:	d109      	bne.n	8003bac <__libc_init_array+0x24>
 8003b98:	2600      	movs	r6, #0
 8003b9a:	f000 f819 	bl	8003bd0 <_init>
 8003b9e:	4c0a      	ldr	r4, [pc, #40]	@ (8003bc8 <__libc_init_array+0x40>)
 8003ba0:	4d0a      	ldr	r5, [pc, #40]	@ (8003bcc <__libc_init_array+0x44>)
 8003ba2:	1b64      	subs	r4, r4, r5
 8003ba4:	10a4      	asrs	r4, r4, #2
 8003ba6:	42a6      	cmp	r6, r4
 8003ba8:	d105      	bne.n	8003bb6 <__libc_init_array+0x2e>
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
 8003bac:	00b3      	lsls	r3, r6, #2
 8003bae:	58eb      	ldr	r3, [r5, r3]
 8003bb0:	4798      	blx	r3
 8003bb2:	3601      	adds	r6, #1
 8003bb4:	e7ee      	b.n	8003b94 <__libc_init_array+0xc>
 8003bb6:	00b3      	lsls	r3, r6, #2
 8003bb8:	58eb      	ldr	r3, [r5, r3]
 8003bba:	4798      	blx	r3
 8003bbc:	3601      	adds	r6, #1
 8003bbe:	e7f2      	b.n	8003ba6 <__libc_init_array+0x1e>
 8003bc0:	08003ccc 	.word	0x08003ccc
 8003bc4:	08003ccc 	.word	0x08003ccc
 8003bc8:	08003cd0 	.word	0x08003cd0
 8003bcc:	08003ccc 	.word	0x08003ccc

08003bd0 <_init>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr

08003bdc <_fini>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr
