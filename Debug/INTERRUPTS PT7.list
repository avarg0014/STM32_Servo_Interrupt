
INTERRUPTS PT7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800665c  0800665c  0000765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800679c  0800679c  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800679c  0800679c  0000779c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067a4  080067a4  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080067a4  080067a4  000077a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067ac  080067ac  000077ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080067b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000060  08006810  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08006810  0000833c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138a9  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d81  00000000  00000000  0001b931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7f  00000000  00000000  0001f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf1f  00000000  00000000  00020567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001667f  00000000  00000000  0003c486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac105  00000000  00000000  00052b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fec0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000424c  00000000  00000000  000fec50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00102e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006644 	.word	0x08006644

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08006644 	.word	0x08006644

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <_Z10debugPrintPKcz>:

volatile Mode currentMode = MODE_FREEZE;


void debugPrint(const char *fmt, ...)
{
 8000630:	b40f      	push	{r0, r1, r2, r3}
 8000632:	b580      	push	{r7, lr}
 8000634:	b092      	sub	sp, #72	@ 0x48
 8000636:	af00      	add	r7, sp, #0
    char buf[64];
    va_list args;
    va_start(args, fmt);
 8000638:	2354      	movs	r3, #84	@ 0x54
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buf, sizeof(buf), fmt, args);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000642:	1d38      	adds	r0, r7, #4
 8000644:	2140      	movs	r1, #64	@ 0x40
 8000646:	f005 fb77 	bl	8005d38 <vsniprintf>
 800064a:	0003      	movs	r3, r0
 800064c:	647b      	str	r3, [r7, #68]	@ 0x44
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 800064e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000650:	b29a      	uxth	r2, r3
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	1d39      	adds	r1, r7, #4
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <_Z10debugPrintPKcz+0x3c>)
 800065a:	f003 fde9 	bl	8004230 <HAL_UART_Transmit>
}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b012      	add	sp, #72	@ 0x48
 8000664:	bc80      	pop	{r7}
 8000666:	bc08      	pop	{r3}
 8000668:	b004      	add	sp, #16
 800066a:	4718      	bx	r3
 800066c:	2000015c 	.word	0x2000015c

08000670 <maincpp>:

uint16_t pos = SERVO_MIN;
	int8_t dir = +1;

void maincpp(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&SERVO_TIMER, TIM_CHANNEL_1);
 8000676:	4b4d      	ldr	r3, [pc, #308]	@ (80007ac <maincpp+0x13c>)
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f002 ff18 	bl	80034b0 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pot_value, 1);
 8000680:	494b      	ldr	r1, [pc, #300]	@ (80007b0 <maincpp+0x140>)
 8000682:	4b4c      	ldr	r3, [pc, #304]	@ (80007b4 <maincpp+0x144>)
 8000684:	2201      	movs	r2, #1
 8000686:	0018      	movs	r0, r3
 8000688:	f001 f8f6 	bl	8001878 <HAL_ADC_Start_DMA>
	MX_USART2_UART_Init();
 800068c:	f000 fca6 	bl	8000fdc <MX_USART2_UART_Init>
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000690:	4949      	ldr	r1, [pc, #292]	@ (80007b8 <maincpp+0x148>)
 8000692:	4b4a      	ldr	r3, [pc, #296]	@ (80007bc <maincpp+0x14c>)
 8000694:	2201      	movs	r2, #1
 8000696:	0018      	movs	r0, r3
 8000698:	f003 fe6e 	bl	8004378 <HAL_UART_Receive_IT>

	time_since_button_pressed = HAL_GetTick();
 800069c:	f000 fdf2 	bl	8001284 <HAL_GetTick>
 80006a0:	0002      	movs	r2, r0
 80006a2:	4b47      	ldr	r3, [pc, #284]	@ (80007c0 <maincpp+0x150>)
 80006a4:	601a      	str	r2, [r3, #0]
	    static uint32_t lastFreezeTick = 0;
	    static uint32_t lastManualTick = 0;

	while(1)
	{
		uint32_t now = HAL_GetTick();
 80006a6:	f000 fded 	bl	8001284 <HAL_GetTick>
 80006aa:	0003      	movs	r3, r0
 80006ac:	607b      	str	r3, [r7, #4]

    switch (currentMode)
 80006ae:	4b45      	ldr	r3, [pc, #276]	@ (80007c4 <maincpp+0x154>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d047      	beq.n	8000748 <maincpp+0xd8>
 80006b8:	dcf5      	bgt.n	80006a6 <maincpp+0x36>
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d032      	beq.n	8000724 <maincpp+0xb4>
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d1f1      	bne.n	80006a6 <maincpp+0x36>
    {
        case MODE_SWEEP:
        {
            if (now - lastSweepTick >= SWEEP_INTERVAL_MS)
 80006c2:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <maincpp+0x158>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d068      	beq.n	800079e <maincpp+0x12e>
            {
                lastSweepTick = now;
 80006cc:	4b3e      	ldr	r3, [pc, #248]	@ (80007c8 <maincpp+0x158>)
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	601a      	str	r2, [r3, #0]
                SERVO_TIMER.Instance->CCR1 = pos;
 80006d2:	4b3e      	ldr	r3, [pc, #248]	@ (80007cc <maincpp+0x15c>)
 80006d4:	881a      	ldrh	r2, [r3, #0]
 80006d6:	4b35      	ldr	r3, [pc, #212]	@ (80007ac <maincpp+0x13c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	635a      	str	r2, [r3, #52]	@ 0x34
                pos += dir;
 80006dc:	4b3c      	ldr	r3, [pc, #240]	@ (80007d0 <maincpp+0x160>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b39      	ldr	r3, [pc, #228]	@ (80007cc <maincpp+0x15c>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	18d3      	adds	r3, r2, r3
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b37      	ldr	r3, [pc, #220]	@ (80007cc <maincpp+0x15c>)
 80006ee:	801a      	strh	r2, [r3, #0]
                if (pos >= SERVO_MAX)
 80006f0:	4b36      	ldr	r3, [pc, #216]	@ (80007cc <maincpp+0x15c>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	4a37      	ldr	r2, [pc, #220]	@ (80007d4 <maincpp+0x164>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d906      	bls.n	8000708 <maincpp+0x98>

                { pos = SERVO_MAX; dir = -1; } // I moved these set of braces together in a sentence because it was confusing keeping track of the open and closed braces
 80006fa:	4b34      	ldr	r3, [pc, #208]	@ (80007cc <maincpp+0x15c>)
 80006fc:	4a36      	ldr	r2, [pc, #216]	@ (80007d8 <maincpp+0x168>)
 80006fe:	801a      	strh	r2, [r3, #0]
 8000700:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <maincpp+0x160>)
 8000702:	22ff      	movs	r2, #255	@ 0xff
 8000704:	701a      	strb	r2, [r3, #0]
                else if (pos <= SERVO_MIN)
                { pos = SERVO_MIN; dir = +1; }
            }
            break;
 8000706:	e04a      	b.n	800079e <maincpp+0x12e>
                else if (pos <= SERVO_MIN)
 8000708:	4b30      	ldr	r3, [pc, #192]	@ (80007cc <maincpp+0x15c>)
 800070a:	881a      	ldrh	r2, [r3, #0]
 800070c:	23fa      	movs	r3, #250	@ 0xfa
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	429a      	cmp	r2, r3
 8000712:	d844      	bhi.n	800079e <maincpp+0x12e>
                { pos = SERVO_MIN; dir = +1; }
 8000714:	4b2d      	ldr	r3, [pc, #180]	@ (80007cc <maincpp+0x15c>)
 8000716:	22fa      	movs	r2, #250	@ 0xfa
 8000718:	0052      	lsls	r2, r2, #1
 800071a:	801a      	strh	r2, [r3, #0]
 800071c:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <maincpp+0x160>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
            break;
 8000722:	e03c      	b.n	800079e <maincpp+0x12e>
        }  // closes MODE_SWEEP

        case MODE_FREEZE:
        {
            if (now - lastFreezeTick >= FREEZE_INTERVAL_MS)
 8000724:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <maincpp+0x16c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	1ad2      	subs	r2, r2, r3
 800072c:	23fa      	movs	r3, #250	@ 0xfa
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	429a      	cmp	r2, r3
 8000732:	d336      	bcc.n	80007a2 <maincpp+0x132>
            {
                lastFreezeTick = now;
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <maincpp+0x16c>)
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800073a:	23a0      	movs	r3, #160	@ 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2120      	movs	r1, #32
 8000740:	0018      	movs	r0, r3
 8000742:	f001 ff50 	bl	80025e6 <HAL_GPIO_TogglePin>
            }
            break;
 8000746:	e02c      	b.n	80007a2 <maincpp+0x132>
        }  // closes MODE_FREEZE

        case MODE_MANUAL:
        {
            if (now - lastManualTick >= MANUAL_INTERVAL_MS)
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <maincpp+0x170>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	2bc7      	cmp	r3, #199	@ 0xc7
 8000752:	d928      	bls.n	80007a6 <maincpp+0x136>
            {
                lastManualTick = now;
 8000754:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <maincpp+0x170>)
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	601a      	str	r2, [r3, #0]
                pos = (pot_value * SERVO_RANGE) / ADC_MAX + SERVO_MIN;
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <maincpp+0x140>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	0013      	movs	r3, r2
 8000760:	015b      	lsls	r3, r3, #5
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	189b      	adds	r3, r3, r2
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	491e      	ldr	r1, [pc, #120]	@ (80007e4 <maincpp+0x174>)
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff fcd3 	bl	8000118 <__udivsi3>
 8000772:	0003      	movs	r3, r0
 8000774:	b29b      	uxth	r3, r3
 8000776:	33f5      	adds	r3, #245	@ 0xf5
 8000778:	33ff      	adds	r3, #255	@ 0xff
 800077a:	b29a      	uxth	r2, r3
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <maincpp+0x15c>)
 800077e:	801a      	strh	r2, [r3, #0]
                SERVO_TIMER.Instance->CCR1 = pos;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <maincpp+0x15c>)
 8000782:	881a      	ldrh	r2, [r3, #0]
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <maincpp+0x13c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	635a      	str	r2, [r3, #52]	@ 0x34
                debugPrint("MANUAL POS=%u, ADC=%lu\r\n", pos, pot_value);
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <maincpp+0x15c>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	0019      	movs	r1, r3
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <maincpp+0x140>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <maincpp+0x178>)
 8000796:	0018      	movs	r0, r3
 8000798:	f7ff ff4a 	bl	8000630 <_Z10debugPrintPKcz>
            }
            break;
 800079c:	e003      	b.n	80007a6 <maincpp+0x136>
            break;
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	e781      	b.n	80006a6 <maincpp+0x36>
            break;
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	e77f      	b.n	80006a6 <maincpp+0x36>
            break;
 80007a6:	46c0      	nop			@ (mov r8, r8)
        }  // closes MODE_MANUAL
    }
}
 80007a8:	e77d      	b.n	80006a6 <maincpp+0x36>
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	20000110 	.word	0x20000110
 80007b0:	20000080 	.word	0x20000080
 80007b4:	200000a8 	.word	0x200000a8
 80007b8:	2000007c 	.word	0x2000007c
 80007bc:	2000015c 	.word	0x2000015c
 80007c0:	20000090 	.word	0x20000090
 80007c4:	20000084 	.word	0x20000084
 80007c8:	2000009c 	.word	0x2000009c
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000002 	.word	0x20000002
 80007d4:	000009c3 	.word	0x000009c3
 80007d8:	000009c4 	.word	0x000009c4
 80007dc:	200000a0 	.word	0x200000a0
 80007e0:	200000a4 	.word	0x200000a4
 80007e4:	00000fff 	.word	0x00000fff
 80007e8:	0800665c 	.word	0x0800665c

080007ec <HAL_GPIO_EXTI_Rising_Callback>:
}
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	0002      	movs	r2, r0
 80007f4:	1dbb      	adds	r3, r7, #6
 80007f6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin ==BUTTON_INT13_Pin)
 80007f8:	1dbb      	adds	r3, r7, #6
 80007fa:	881a      	ldrh	r2, [r3, #0]
 80007fc:	2380      	movs	r3, #128	@ 0x80
 80007fe:	019b      	lsls	r3, r3, #6
 8000800:	429a      	cmp	r2, r3
 8000802:	d152      	bne.n	80008aa <HAL_GPIO_EXTI_Rising_Callback+0xbe>
	{
		uint32_t now = HAL_GetTick();
 8000804:	f000 fd3e 	bl	8001284 <HAL_GetTick>
 8000808:	0003      	movs	r3, r0
 800080a:	60fb      	str	r3, [r7, #12]

		if( now - lastRiseTick < DEBOUNCE) return;
 800080c:	4b28      	ldr	r3, [pc, #160]	@ (80008b0 <HAL_GPIO_EXTI_Rising_Callback+0xc4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	1ad2      	subs	r2, r2, r3
 8000814:	2113      	movs	r1, #19
 8000816:	2300      	movs	r3, #0
 8000818:	4291      	cmp	r1, r2
 800081a:	415b      	adcs	r3, r3
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d142      	bne.n	80008a8 <HAL_GPIO_EXTI_Rising_Callback+0xbc>

		uint32_t held = now - time_since_button_pressed;
 8000822:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <HAL_GPIO_EXTI_Rising_Callback+0xc8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	60bb      	str	r3, [r7, #8]

		if(held < NORMAL_BUTTON_PRESS)
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	23fa      	movs	r3, #250	@ 0xfa
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	429a      	cmp	r2, r3
 8000834:	d20a      	bcs.n	800084c <HAL_GPIO_EXTI_Rising_Callback+0x60>
		{
			currentMode = MODE_SWEEP;
 8000836:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <HAL_GPIO_EXTI_Rising_Callback+0xcc>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800083c:	23a0      	movs	r3, #160	@ 0xa0
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	2201      	movs	r2, #1
 8000842:	2120      	movs	r1, #32
 8000844:	0018      	movs	r0, r3
 8000846:	f001 feb1 	bl	80025ac <HAL_GPIO_WritePin>
 800084a:	e021      	b.n	8000890 <HAL_GPIO_EXTI_Rising_Callback+0xa4>
		}
		else if (held< LONG_BUTTON_PRESS)
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	23fa      	movs	r3, #250	@ 0xfa
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	429a      	cmp	r2, r3
 8000854:	d212      	bcs.n	800087c <HAL_GPIO_EXTI_Rising_Callback+0x90>
		{
			currentMode = MODE_FREEZE;
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <HAL_GPIO_EXTI_Rising_Callback+0xcc>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800085c:	23a0      	movs	r3, #160	@ 0xa0
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	2200      	movs	r2, #0
 8000862:	2120      	movs	r1, #32
 8000864:	0018      	movs	r0, r3
 8000866:	f001 fea1 	bl	80025ac <HAL_GPIO_WritePin>
			  debugPrint("FROZEN at POS=%u\r\n", pos);
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <HAL_GPIO_EXTI_Rising_Callback+0xd0>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	001a      	movs	r2, r3
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <HAL_GPIO_EXTI_Rising_Callback+0xd4>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fedb 	bl	8000630 <_Z10debugPrintPKcz>
 800087a:	e009      	b.n	8000890 <HAL_GPIO_EXTI_Rising_Callback+0xa4>
		}
		else
		{
			currentMode = MODE_MANUAL;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_GPIO_EXTI_Rising_Callback+0xcc>)
 800087e:	2202      	movs	r2, #2
 8000880:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000882:	23a0      	movs	r3, #160	@ 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2200      	movs	r2, #0
 8000888:	2120      	movs	r1, #32
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fe8e 	bl	80025ac <HAL_GPIO_WritePin>
		}
		time_since_button_pressed = now;
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <HAL_GPIO_EXTI_Rising_Callback+0xc8>)
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
		button_releases++;
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 800089e:	601a      	str	r2, [r3, #0]
		lastRiseTick = now;
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <HAL_GPIO_EXTI_Rising_Callback+0xc4>)
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e000      	b.n	80008aa <HAL_GPIO_EXTI_Rising_Callback+0xbe>
		if( now - lastRiseTick < DEBOUNCE) return;
 80008a8:	46c0      	nop			@ (mov r8, r8)

	}
}
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b004      	add	sp, #16
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000094 	.word	0x20000094
 80008b4:	20000090 	.word	0x20000090
 80008b8:	20000084 	.word	0x20000084
 80008bc:	20000000 	.word	0x20000000
 80008c0:	08006678 	.word	0x08006678
 80008c4:	2000008c 	.word	0x2000008c

080008c8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	1dbb      	adds	r3, r7, #6
 80008d2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_INT13_Pin)
 80008d4:	1dbb      	adds	r3, r7, #6
 80008d6:	881a      	ldrh	r2, [r3, #0]
 80008d8:	2380      	movs	r3, #128	@ 0x80
 80008da:	019b      	lsls	r3, r3, #6
 80008dc:	429a      	cmp	r2, r3
 80008de:	d11d      	bne.n	800091c <HAL_GPIO_EXTI_Falling_Callback+0x54>
	{
		uint32_t now = HAL_GetTick();
 80008e0:	f000 fcd0 	bl	8001284 <HAL_GetTick>
 80008e4:	0003      	movs	r3, r0
 80008e6:	60fb      	str	r3, [r7, #12]

		if( now - lastFallTick < DEBOUNCE) return;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	1ad2      	subs	r2, r2, r3
 80008f0:	2113      	movs	r1, #19
 80008f2:	2300      	movs	r3, #0
 80008f4:	4291      	cmp	r1, r2
 80008f6:	415b      	adcs	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10d      	bne.n	800091a <HAL_GPIO_EXTI_Falling_Callback+0x52>

		time_since_button_pressed = HAL_GetTick();
 80008fe:	f000 fcc1 	bl	8001284 <HAL_GetTick>
 8000902:	0002      	movs	r2, r0
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8000906:	601a      	str	r2, [r3, #0]
		button_pressed++;
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000910:	601a      	str	r2, [r3, #0]
		lastFallTick = now;
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	e000      	b.n	800091c <HAL_GPIO_EXTI_Falling_Callback+0x54>
		if( now - lastFallTick < DEBOUNCE) return;
 800091a:	46c0      	nop			@ (mov r8, r8)
	}
}
 800091c:	46bd      	mov	sp, r7
 800091e:	b004      	add	sp, #16
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	20000098 	.word	0x20000098
 8000928:	20000090 	.word	0x20000090
 800092c:	20000088 	.word	0x20000088

08000930 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a06      	ldr	r2, [pc, #24]	@ (8000958 <HAL_UART_RxCpltCallback+0x28>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d105      	bne.n	800094e <HAL_UART_RxCpltCallback+0x1e>
    {

        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000942:	4906      	ldr	r1, [pc, #24]	@ (800095c <HAL_UART_RxCpltCallback+0x2c>)
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_UART_RxCpltCallback+0x30>)
 8000946:	2201      	movs	r2, #1
 8000948:	0018      	movs	r0, r3
 800094a:	f003 fd15 	bl	8004378 <HAL_UART_Receive_IT>
    }
}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	40004400 	.word	0x40004400
 800095c:	2000007c 	.word	0x2000007c
 8000960:	2000015c 	.word	0x2000015c

08000964 <_Z41__static_initialization_and_destruction_0v>:
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
volatile uint32_t time_since_button_pressed = HAL_GetTick();
 8000968:	f000 fc8c 	bl	8001284 <HAL_GetTick>
 800096c:	0002      	movs	r2, r0
 800096e:	4b02      	ldr	r3, [pc, #8]	@ (8000978 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8000970:	601a      	str	r2, [r3, #0]
}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000090 	.word	0x20000090

0800097c <_GLOBAL__sub_I_pot_value>:
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
 8000980:	f7ff fff0 	bl	8000964 <_Z41__static_initialization_and_destruction_0v>
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	0018      	movs	r0, r3
 8000992:	230c      	movs	r3, #12
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f005 f9da 	bl	8005d50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800099c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 800099e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a50 <MX_ADC1_Init+0xc8>)
 80009a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	05d2      	lsls	r2, r2, #23
 80009a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009aa:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b0:	4b26      	ldr	r3, [pc, #152]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b6:	4b25      	ldr	r3, [pc, #148]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009bc:	4b23      	ldr	r3, [pc, #140]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009be:	2204      	movs	r2, #4
 80009c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009c2:	4b22      	ldr	r3, [pc, #136]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80009c8:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009da:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009e8:	222c      	movs	r2, #44	@ 0x2c
 80009ea:	2100      	movs	r1, #0
 80009ec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80009f4:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 8000a02:	223c      	movs	r2, #60	@ 0x3c
 8000a04:	2100      	movs	r1, #0
 8000a06:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fd89 	bl	8001528 <HAL_ADC_Init>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000a1a:	f000 f947 	bl	8000cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a30:	1d3a      	adds	r2, r7, #4
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 ffc4 	bl	80019c4 <HAL_ADC_ConfigChannel>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000a40:	f000 f934 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b004      	add	sp, #16
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000a8 	.word	0x200000a8
 8000a50:	40012400 	.word	0x40012400

08000a54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b08b      	sub	sp, #44	@ 0x2c
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	2414      	movs	r4, #20
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	0018      	movs	r0, r3
 8000a62:	2314      	movs	r3, #20
 8000a64:	001a      	movs	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	f005 f972 	bl	8005d50 <memset>
  if(adcHandle->Instance==ADC1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a18      	ldr	r2, [pc, #96]	@ (8000ad4 <HAL_ADC_MspInit+0x80>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d129      	bne.n	8000aca <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <HAL_ADC_MspInit+0x84>)
 8000a78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <HAL_ADC_MspInit+0x84>)
 8000a7c:	2180      	movs	r1, #128	@ 0x80
 8000a7e:	0349      	lsls	r1, r1, #13
 8000a80:	430a      	orrs	r2, r1
 8000a82:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_ADC_MspInit+0x84>)
 8000a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	035b      	lsls	r3, r3, #13
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <HAL_ADC_MspInit+0x84>)
 8000a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <HAL_ADC_MspInit+0x84>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <HAL_ADC_MspInit+0x84>)
 8000aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	193a      	adds	r2, r7, r4
 8000abe:	23a0      	movs	r3, #160	@ 0xa0
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 fc0d 	bl	80022e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b00b      	add	sp, #44	@ 0x2c
 8000ad0:	bd90      	pop	{r4, r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	40012400 	.word	0x40012400
 8000ad8:	40021000 	.word	0x40021000

08000adc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b08b      	sub	sp, #44	@ 0x2c
 8000ae0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	2414      	movs	r4, #20
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2314      	movs	r3, #20
 8000aea:	001a      	movs	r2, r3
 8000aec:	2100      	movs	r1, #0
 8000aee:	f005 f92f 	bl	8005d50 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	4b34      	ldr	r3, [pc, #208]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000af6:	4b33      	ldr	r3, [pc, #204]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000af8:	2104      	movs	r1, #4
 8000afa:	430a      	orrs	r2, r1
 8000afc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000afe:	4b31      	ldr	r3, [pc, #196]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b02:	2204      	movs	r2, #4
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000b10:	2120      	movs	r1, #32
 8000b12:	430a      	orrs	r2, r1
 8000b14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b16:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b26:	4b27      	ldr	r3, [pc, #156]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b2e:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b32:	2201      	movs	r2, #1
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000b3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000b40:	2102      	movs	r1, #2
 8000b42:	430a      	orrs	r2, r1
 8000b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b46:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_GPIO_Init+0xe8>)
 8000b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b52:	23a0      	movs	r3, #160	@ 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	2200      	movs	r2, #0
 8000b58:	2120      	movs	r1, #32
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 fd26 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INT13_Pin */
  GPIO_InitStruct.Pin = BUTTON_INT13_Pin;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2280      	movs	r2, #128	@ 0x80
 8000b64:	0192      	lsls	r2, r2, #6
 8000b66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	22c4      	movs	r2, #196	@ 0xc4
 8000b6c:	0392      	lsls	r2, r2, #14
 8000b6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INT13_GPIO_Port, &GPIO_InitStruct);
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	4a13      	ldr	r2, [pc, #76]	@ (8000bc8 <MX_GPIO_Init+0xec>)
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	0010      	movs	r0, r2
 8000b7e:	f001 fbb1 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b82:	0021      	movs	r1, r4
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2220      	movs	r2, #32
 8000b88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2202      	movs	r2, #2
 8000b9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	187a      	adds	r2, r7, r1
 8000b9e:	23a0      	movs	r3, #160	@ 0xa0
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 fb9d 	bl	80022e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2007      	movs	r0, #7
 8000bb0:	f001 faa0 	bl	80020f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bb4:	2007      	movs	r0, #7
 8000bb6:	f001 fab2 	bl	800211e <HAL_NVIC_EnableIRQ>

}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b00b      	add	sp, #44	@ 0x2c
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	50000800 	.word	0x50000800

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f000 fadc 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f80c 	bl	8000bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f7ff ff80 	bl	8000adc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bdc:	f000 f9fe 	bl	8000fdc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000be0:	f7ff fed2 	bl	8000988 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000be4:	f000 f8ec 	bl	8000dc0 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  maincpp();
 8000be8:	f7ff fd42 	bl	8000670 <maincpp>
  while (1)
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	e7fd      	b.n	8000bec <main+0x20>

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b093      	sub	sp, #76	@ 0x4c
 8000bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf6:	2410      	movs	r4, #16
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	2338      	movs	r3, #56	@ 0x38
 8000bfe:	001a      	movs	r2, r3
 8000c00:	2100      	movs	r1, #0
 8000c02:	f005 f8a5 	bl	8005d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c06:	003b      	movs	r3, r7
 8000c08:	0018      	movs	r0, r3
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f005 f89e 	bl	8005d50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c14:	2380      	movs	r3, #128	@ 0x80
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 fd29 	bl	8002670 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	2202      	movs	r2, #2
 8000c22:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2280      	movs	r2, #128	@ 0x80
 8000c28:	0052      	lsls	r2, r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c2c:	0021      	movs	r1, r4
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2240      	movs	r2, #64	@ 0x40
 8000c38:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2202      	movs	r2, #2
 8000c44:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2208      	movs	r2, #8
 8000c50:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2280      	movs	r2, #128	@ 0x80
 8000c56:	0292      	lsls	r2, r2, #10
 8000c58:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	22c0      	movs	r2, #192	@ 0xc0
 8000c5e:	04d2      	lsls	r2, r2, #19
 8000c60:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	0592      	lsls	r2, r2, #22
 8000c68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f001 fd4b 	bl	8002708 <HAL_RCC_OscConfig>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c76:	f000 f819 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c80:	003b      	movs	r3, r7
 8000c82:	2202      	movs	r2, #2
 8000c84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c86:	003b      	movs	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8c:	003b      	movs	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c92:	003b      	movs	r3, r7
 8000c94:	2102      	movs	r1, #2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f002 f850 	bl	8002d3c <HAL_RCC_ClockConfig>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ca0:	f000 f804 	bl	8000cac <Error_Handler>
  }
}
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b013      	add	sp, #76	@ 0x4c
 8000caa:	bd90      	pop	{r4, r7, pc}

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <HAL_MspInit+0x44>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cdc:	2180      	movs	r1, #128	@ 0x80
 8000cde:	0549      	lsls	r1, r1, #21
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_MspInit+0x44>)
 8000ce6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ce8:	2380      	movs	r3, #128	@ 0x80
 8000cea:	055b      	lsls	r3, r3, #21
 8000cec:	4013      	ands	r3, r2
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	40021000 	.word	0x40021000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	e7fd      	b.n	8000d04 <NMI_Handler+0x4>

08000d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	e7fd      	b.n	8000d0c <HardFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 fa9a 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT13_Pin);
 8000d36:	2380      	movs	r3, #128	@ 0x80
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f001 fc6e 	bl	800261c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	18d3      	adds	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f004 fff2 	bl	8005d60 <__errno>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	425b      	negs	r3, r3
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	18d2      	adds	r2, r2, r3
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <_sbrk+0x64>)
 8000d98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b006      	add	sp, #24
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20009000 	.word	0x20009000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	2000010c 	.word	0x2000010c
 8000db0:	20000340 	.word	0x20000340

08000db4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	46c0      	nop			@ (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b098      	sub	sp, #96	@ 0x60
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc6:	2354      	movs	r3, #84	@ 0x54
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	0018      	movs	r0, r3
 8000dcc:	230c      	movs	r3, #12
 8000dce:	001a      	movs	r2, r3
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	f004 ffbd 	bl	8005d50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd6:	2338      	movs	r3, #56	@ 0x38
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	0018      	movs	r0, r3
 8000ddc:	231c      	movs	r3, #28
 8000dde:	001a      	movs	r2, r3
 8000de0:	2100      	movs	r1, #0
 8000de2:	f004 ffb5 	bl	8005d50 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	0018      	movs	r0, r3
 8000dea:	2334      	movs	r3, #52	@ 0x34
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f004 ffae 	bl	8005d50 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000df4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000df6:	4a3d      	ldr	r2, [pc, #244]	@ (8000eec <MX_TIM15_Init+0x12c>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000dfc:	223f      	movs	r2, #63	@ 0x3f
 8000dfe:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b39      	ldr	r3, [pc, #228]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000;
 8000e06:	4b38      	ldr	r3, [pc, #224]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000e08:	4a39      	ldr	r2, [pc, #228]	@ (8000ef0 <MX_TIM15_Init+0x130>)
 8000e0a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e12:	4b35      	ldr	r3, [pc, #212]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000e20:	0018      	movs	r0, r3
 8000e22:	f002 faed 	bl	8003400 <HAL_TIM_PWM_Init>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f7ff ff3f 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2154      	movs	r1, #84	@ 0x54
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e3c:	187a      	adds	r2, r7, r1
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000e40:	0011      	movs	r1, r2
 8000e42:	0018      	movs	r0, r3
 8000e44:	f003 f894 	bl	8003f70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000e4c:	f7ff ff2e 	bl	8000cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e50:	2138      	movs	r1, #56	@ 0x38
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2260      	movs	r2, #96	@ 0x60
 8000e56:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	0018      	movs	r0, r3
 8000e84:	f002 fbfe 	bl	8003684 <HAL_TIM_PWM_ConfigChannel>
 8000e88:	1e03      	subs	r3, r0, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000e8c:	f7ff ff0e 	bl	8000cac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	0192      	lsls	r2, r2, #6
 8000eb4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec2:	1d3a      	adds	r2, r7, #4
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f003 f8bf 	bl	800404c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8000ed2:	f7ff feeb 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000ed6:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <MX_TIM15_Init+0x128>)
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 f841 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b018      	add	sp, #96	@ 0x60
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	20000110 	.word	0x20000110
 8000eec:	40014000 	.word	0x40014000
 8000ef0:	00004e20 	.word	0x00004e20

08000ef4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b091      	sub	sp, #68	@ 0x44
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	240c      	movs	r4, #12
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	0018      	movs	r0, r3
 8000f02:	2334      	movs	r3, #52	@ 0x34
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f004 ff22 	bl	8005d50 <memset>
  if(tim_pwmHandle->Instance==TIM15)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a11      	ldr	r2, [pc, #68]	@ (8000f58 <HAL_TIM_PWM_MspInit+0x64>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d11c      	bne.n	8000f50 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM15_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	03d2      	lsls	r2, r2, #15
 8000f1c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	2200      	movs	r2, #0
 8000f22:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	0018      	movs	r0, r3
 8000f28:	f002 f8b2 	bl	8003090 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000f30:	f7ff febc 	bl	8000cac <Error_Handler>
    }

    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <HAL_TIM_PWM_MspInit+0x68>)
 8000f36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_TIM_PWM_MspInit+0x68>)
 8000f3a:	2180      	movs	r1, #128	@ 0x80
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_TIM_PWM_MspInit+0x68>)
 8000f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	025b      	lsls	r3, r3, #9
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b011      	add	sp, #68	@ 0x44
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	40014000 	.word	0x40014000
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	240c      	movs	r4, #12
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	2314      	movs	r3, #20
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f004 feec 	bl	8005d50 <memset>
  if(timHandle->Instance==TIM15)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <HAL_TIM_MspPostInit+0x70>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d122      	bne.n	8000fc8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <HAL_TIM_MspPostInit+0x74>)
 8000f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <HAL_TIM_MspPostInit+0x74>)
 8000f88:	2102      	movs	r1, #2
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <HAL_TIM_MspPostInit+0x74>)
 8000f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	2280      	movs	r2, #128	@ 0x80
 8000f9e:	01d2      	lsls	r2, r2, #7
 8000fa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	0021      	movs	r1, r4
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2205      	movs	r2, #5
 8000fba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	4a06      	ldr	r2, [pc, #24]	@ (8000fd8 <HAL_TIM_MspPostInit+0x78>)
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	0010      	movs	r0, r2
 8000fc4:	f001 f98e 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000fc8:	46c0      	nop			@ (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b009      	add	sp, #36	@ 0x24
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	40014000 	.word	0x40014000
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	50000400 	.word	0x50000400

08000fdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe0:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8000fe2:	4a24      	ldr	r2, [pc, #144]	@ (8001074 <MX_USART2_UART_Init+0x98>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe6:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8000fe8:	22e1      	movs	r2, #225	@ 0xe1
 8000fea:	0252      	lsls	r2, r2, #9
 8000fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001012:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101e:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8001020:	2200      	movs	r2, #0
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8001026:	0018      	movs	r0, r3
 8001028:	f003 f8ac 	bl	8004184 <HAL_UART_Init>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d001      	beq.n	8001034 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001030:	f7ff fe3c 	bl	8000cac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8001036:	2100      	movs	r1, #0
 8001038:	0018      	movs	r0, r3
 800103a:	f004 fd6f 	bl	8005b1c <HAL_UARTEx_SetTxFifoThreshold>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001042:	f7ff fe33 	bl	8000cac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 8001048:	2100      	movs	r1, #0
 800104a:	0018      	movs	r0, r3
 800104c:	f004 fda6 	bl	8005b9c <HAL_UARTEx_SetRxFifoThreshold>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d001      	beq.n	8001058 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001054:	f7ff fe2a 	bl	8000cac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <MX_USART2_UART_Init+0x94>)
 800105a:	0018      	movs	r0, r3
 800105c:	f004 fd24 	bl	8005aa8 <HAL_UARTEx_DisableFifoMode>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d001      	beq.n	8001068 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001064:	f7ff fe22 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	2000015c 	.word	0x2000015c
 8001074:	40004400 	.word	0x40004400

08001078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b097      	sub	sp, #92	@ 0x5c
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	2344      	movs	r3, #68	@ 0x44
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	0018      	movs	r0, r3
 8001086:	2314      	movs	r3, #20
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f004 fe60 	bl	8005d50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	2410      	movs	r4, #16
 8001092:	193b      	adds	r3, r7, r4
 8001094:	0018      	movs	r0, r3
 8001096:	2334      	movs	r3, #52	@ 0x34
 8001098:	001a      	movs	r2, r3
 800109a:	2100      	movs	r1, #0
 800109c:	f004 fe58 	bl	8005d50 <memset>
  if(uartHandle->Instance==USART2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a22      	ldr	r2, [pc, #136]	@ (8001130 <HAL_UART_MspInit+0xb8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d13e      	bne.n	8001128 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	2202      	movs	r2, #2
 80010ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	0018      	movs	r0, r3
 80010ba:	f001 ffe9 	bl	8003090 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	1e03      	subs	r3, r0, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010c2:	f7ff fdf3 	bl	8000cac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <HAL_UART_MspInit+0xbc>)
 80010c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <HAL_UART_MspInit+0xbc>)
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	0289      	lsls	r1, r1, #10
 80010d0:	430a      	orrs	r2, r1
 80010d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010d4:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <HAL_UART_MspInit+0xbc>)
 80010d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	029b      	lsls	r3, r3, #10
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <HAL_UART_MspInit+0xbc>)
 80010e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <HAL_UART_MspInit+0xbc>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	430a      	orrs	r2, r1
 80010ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_UART_MspInit+0xbc>)
 80010f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f2:	2201      	movs	r2, #1
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80010fa:	2144      	movs	r1, #68	@ 0x44
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2202      	movs	r2, #2
 8001106:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2201      	movs	r2, #1
 800110c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	187b      	adds	r3, r7, r1
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2201      	movs	r2, #1
 8001118:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	187a      	adds	r2, r7, r1
 800111c:	23a0      	movs	r3, #160	@ 0xa0
 800111e:	05db      	lsls	r3, r3, #23
 8001120:	0011      	movs	r1, r2
 8001122:	0018      	movs	r0, r3
 8001124:	f001 f8de 	bl	80022e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b017      	add	sp, #92	@ 0x5c
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	40004400 	.word	0x40004400
 8001134:	40021000 	.word	0x40021000

08001138 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800113c:	f7ff fe3a 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001166:	f004 fe01 	bl	8005d6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800116a:	f7ff fd2f 	bl	8000bcc <main>

0800116e <LoopForever>:

LoopForever:
  b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   r0, =_estack
 8001170:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800117c:	080067b0 	.word	0x080067b0
  ldr r2, =_sbss
 8001180:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001184:	2000033c 	.word	0x2000033c

08001188 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_COMP_IRQHandler>
	...

0800118c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_Init+0x3c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_Init+0x3c>)
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	0049      	lsls	r1, r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f810 	bl	80011cc <HAL_InitTick>
 80011ac:	1e03      	subs	r3, r0, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e001      	b.n	80011bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fd7e 	bl	8000cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	781b      	ldrb	r3, [r3, #0]
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40022000 	.word	0x40022000

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d4:	230f      	movs	r3, #15
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80011dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <HAL_InitTick+0x88>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d02b      	beq.n	800123c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <HAL_InitTick+0x8c>)
 80011e6:	681c      	ldr	r4, [r3, #0]
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <HAL_InitTick+0x88>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	0019      	movs	r1, r3
 80011ee:	23fa      	movs	r3, #250	@ 0xfa
 80011f0:	0098      	lsls	r0, r3, #2
 80011f2:	f7fe ff91 	bl	8000118 <__udivsi3>
 80011f6:	0003      	movs	r3, r0
 80011f8:	0019      	movs	r1, r3
 80011fa:	0020      	movs	r0, r4
 80011fc:	f7fe ff8c 	bl	8000118 <__udivsi3>
 8001200:	0003      	movs	r3, r0
 8001202:	0018      	movs	r0, r3
 8001204:	f000 ff9b 	bl	800213e <HAL_SYSTICK_Config>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d112      	bne.n	8001232 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d80a      	bhi.n	8001228 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2301      	movs	r3, #1
 8001216:	425b      	negs	r3, r3
 8001218:	2200      	movs	r2, #0
 800121a:	0018      	movs	r0, r3
 800121c:	f000 ff6a 	bl	80020f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_InitTick+0x90>)
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e00d      	b.n	8001244 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001228:	230f      	movs	r3, #15
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	e008      	b.n	8001244 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001232:	230f      	movs	r3, #15
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e003      	b.n	8001244 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800123c:	230f      	movs	r3, #15
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001244:	230f      	movs	r3, #15
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	781b      	ldrb	r3, [r3, #0]
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	b005      	add	sp, #20
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	2000000c 	.word	0x2000000c
 8001258:	20000004 	.word	0x20000004
 800125c:	20000008 	.word	0x20000008

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_IncTick+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	001a      	movs	r2, r3
 800126a:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <HAL_IncTick+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	18d2      	adds	r2, r2, r3
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <HAL_IncTick+0x20>)
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	2000000c 	.word	0x2000000c
 8001280:	200001f0 	.word	0x200001f0

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b02      	ldr	r3, [pc, #8]	@ (8001294 <HAL_GetTick+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	200001f0 	.word	0x200001f0

08001298 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80012a8:	401a      	ands	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	fe3fffff 	.word	0xfe3fffff

080012c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	23e0      	movs	r3, #224	@ 0xe0
 80012ce:	045b      	lsls	r3, r3, #17
 80012d0:	4013      	ands	r3, r2
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}

080012da <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	2104      	movs	r1, #4
 80012ee:	400a      	ands	r2, r1
 80012f0:	2107      	movs	r1, #7
 80012f2:	4091      	lsls	r1, r2
 80012f4:	000a      	movs	r2, r1
 80012f6:	43d2      	mvns	r2, r2
 80012f8:	401a      	ands	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2104      	movs	r1, #4
 80012fe:	400b      	ands	r3, r1
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4099      	lsls	r1, r3
 8001304:	000b      	movs	r3, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800130c:	46c0      	nop			@ (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b004      	add	sp, #16
 8001312:	bd80      	pop	{r7, pc}

08001314 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	2104      	movs	r1, #4
 8001326:	400a      	ands	r2, r1
 8001328:	2107      	movs	r1, #7
 800132a:	4091      	lsls	r1, r2
 800132c:	000a      	movs	r2, r1
 800132e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2104      	movs	r1, #4
 8001334:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001336:	40da      	lsrs	r2, r3
 8001338:	0013      	movs	r3, r2
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}

08001342 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	23c0      	movs	r3, #192	@ 0xc0
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4013      	ands	r3, r2
 8001354:	d101      	bne.n	800135a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800135a:	2300      	movs	r3, #0
}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}

08001364 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	211f      	movs	r1, #31
 8001378:	400a      	ands	r2, r1
 800137a:	210f      	movs	r1, #15
 800137c:	4091      	lsls	r1, r2
 800137e:	000a      	movs	r2, r1
 8001380:	43d2      	mvns	r2, r2
 8001382:	401a      	ands	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	0e9b      	lsrs	r3, r3, #26
 8001388:	210f      	movs	r1, #15
 800138a:	4019      	ands	r1, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	201f      	movs	r0, #31
 8001390:	4003      	ands	r3, r0
 8001392:	4099      	lsls	r1, r3
 8001394:	000b      	movs	r3, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b004      	add	sp, #16
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	035b      	lsls	r3, r3, #13
 80013b6:	0b5b      	lsrs	r3, r3, #13
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	0352      	lsls	r2, r2, #13
 80013d8:	0b52      	lsrs	r2, r2, #13
 80013da:	43d2      	mvns	r2, r2
 80013dc:	401a      	ands	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	0212      	lsls	r2, r2, #8
 8001400:	43d2      	mvns	r2, r2
 8001402:	401a      	ands	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	400b      	ands	r3, r1
 800140c:	4904      	ldr	r1, [pc, #16]	@ (8001420 <LL_ADC_SetChannelSamplingTime+0x34>)
 800140e:	400b      	ands	r3, r1
 8001410:	431a      	orrs	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b004      	add	sp, #16
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	07ffff00 	.word	0x07ffff00

08001424 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <LL_ADC_EnableInternalRegulator+0x24>)
 8001432:	4013      	ands	r3, r2
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	0552      	lsls	r2, r2, #21
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b002      	add	sp, #8
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	6fffffe8 	.word	0x6fffffe8

0800144c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	2380      	movs	r3, #128	@ 0x80
 800145a:	055b      	lsls	r3, r3, #21
 800145c:	401a      	ands	r2, r3
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	055b      	lsls	r3, r3, #21
 8001462:	429a      	cmp	r2, r3
 8001464:	d101      	bne.n	800146a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800146a:	2300      	movs	r3, #0
}
 800146c:	0018      	movs	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}

08001474 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <LL_ADC_Enable+0x20>)
 8001482:	4013      	ands	r3, r2
 8001484:	2201      	movs	r2, #1
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}
 8001494:	7fffffe8 	.word	0x7fffffe8

08001498 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <LL_ADC_Disable+0x20>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	2202      	movs	r2, #2
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014b0:	46c0      	nop			@ (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	7fffffe8 	.word	0x7fffffe8

080014bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2201      	movs	r2, #1
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <LL_ADC_IsEnabled+0x18>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <LL_ADC_IsEnabled+0x1a>
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <LL_ADC_REG_StartConversion+0x20>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	2204      	movs	r2, #4
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014f8:	46c0      	nop			@ (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	7fffffe8 	.word	0x7fffffe8

08001504 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2204      	movs	r2, #4
 8001512:	4013      	ands	r3, r2
 8001514:	2b04      	cmp	r3, #4
 8001516:	d101      	bne.n	800151c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800151c:	2300      	movs	r3, #0
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001530:	231f      	movs	r3, #31
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e17f      	b.n	800184e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10a      	bne.n	800156c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff fa7b 	bl	8000a54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2254      	movs	r2, #84	@ 0x54
 8001568:	2100      	movs	r1, #0
 800156a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ff6b 	bl	800144c <LL_ADC_IsInternalRegulatorEnabled>
 8001576:	1e03      	subs	r3, r0, #0
 8001578:	d115      	bne.n	80015a6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	0018      	movs	r0, r3
 8001580:	f7ff ff50 	bl	8001424 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001584:	4bb4      	ldr	r3, [pc, #720]	@ (8001858 <HAL_ADC_Init+0x330>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	49b4      	ldr	r1, [pc, #720]	@ (800185c <HAL_ADC_Init+0x334>)
 800158a:	0018      	movs	r0, r3
 800158c:	f7fe fdc4 	bl	8000118 <__udivsi3>
 8001590:	0003      	movs	r3, r0
 8001592:	3301      	adds	r3, #1
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001598:	e002      	b.n	80015a0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3b01      	subs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	0018      	movs	r0, r3
 80015ac:	f7ff ff4e 	bl	800144c <LL_ADC_IsInternalRegulatorEnabled>
 80015b0:	1e03      	subs	r3, r0, #0
 80015b2:	d10f      	bne.n	80015d4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	2210      	movs	r2, #16
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c4:	2201      	movs	r2, #1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80015cc:	231f      	movs	r3, #31
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff ff93 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 80015de:	0003      	movs	r3, r0
 80015e0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e6:	2210      	movs	r2, #16
 80015e8:	4013      	ands	r3, r2
 80015ea:	d000      	beq.n	80015ee <HAL_ADC_Init+0xc6>
 80015ec:	e122      	b.n	8001834 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d000      	beq.n	80015f6 <HAL_ADC_Init+0xce>
 80015f4:	e11e      	b.n	8001834 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	4a99      	ldr	r2, [pc, #612]	@ (8001860 <HAL_ADC_Init+0x338>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	2202      	movs	r2, #2
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0018      	movs	r0, r3
 800160c:	f7ff ff56 	bl	80014bc <LL_ADC_IsEnabled>
 8001610:	1e03      	subs	r3, r0, #0
 8001612:	d000      	beq.n	8001616 <HAL_ADC_Init+0xee>
 8001614:	e0ad      	b.n	8001772 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7e1b      	ldrb	r3, [r3, #24]
 800161e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001620:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7e5b      	ldrb	r3, [r3, #25]
 8001626:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001628:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7e9b      	ldrb	r3, [r3, #26]
 800162e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001630:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <HAL_ADC_Init+0x118>
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	015b      	lsls	r3, r3, #5
 800163e:	e000      	b.n	8001642 <HAL_ADC_Init+0x11a>
 8001640:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001642:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001648:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2b00      	cmp	r3, #0
 8001650:	da04      	bge.n	800165c <HAL_ADC_Init+0x134>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	e001      	b.n	8001660 <HAL_ADC_Init+0x138>
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001660:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	212c      	movs	r1, #44	@ 0x2c
 8001666:	5c5b      	ldrb	r3, [r3, r1]
 8001668:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800166a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2220      	movs	r2, #32
 8001676:	5c9b      	ldrb	r3, [r3, r2]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d115      	bne.n	80016a8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e9b      	ldrb	r3, [r3, #26]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2280      	movs	r2, #128	@ 0x80
 8001688:	0252      	lsls	r2, r2, #9
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	e00b      	b.n	80016a8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001694:	2220      	movs	r2, #32
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a0:	2201      	movs	r2, #1
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00a      	beq.n	80016c6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016b4:	23e0      	movs	r3, #224	@ 0xe0
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016be:	4313      	orrs	r3, r2
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a65      	ldr	r2, [pc, #404]	@ (8001864 <HAL_ADC_Init+0x33c>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	430a      	orrs	r2, r1
 80016da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0f9b      	lsrs	r3, r3, #30
 80016e2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016e8:	4313      	orrs	r3, r2
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	223c      	movs	r2, #60	@ 0x3c
 80016f4:	5c9b      	ldrb	r3, [r3, r2]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d111      	bne.n	800171e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	0f9b      	lsrs	r3, r3, #30
 8001700:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001706:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800170c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001712:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	4313      	orrs	r3, r2
 8001718:	2201      	movs	r2, #1
 800171a:	4313      	orrs	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a50      	ldr	r2, [pc, #320]	@ (8001868 <HAL_ADC_Init+0x340>)
 8001726:	4013      	ands	r3, r2
 8001728:	0019      	movs	r1, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	430a      	orrs	r2, r1
 8001732:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	23c0      	movs	r3, #192	@ 0xc0
 800173a:	061b      	lsls	r3, r3, #24
 800173c:	429a      	cmp	r2, r3
 800173e:	d018      	beq.n	8001772 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	05db      	lsls	r3, r3, #23
 8001748:	429a      	cmp	r2, r3
 800174a:	d012      	beq.n	8001772 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	061b      	lsls	r3, r3, #24
 8001754:	429a      	cmp	r2, r3
 8001756:	d00c      	beq.n	8001772 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001758:	4b44      	ldr	r3, [pc, #272]	@ (800186c <HAL_ADC_Init+0x344>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a44      	ldr	r2, [pc, #272]	@ (8001870 <HAL_ADC_Init+0x348>)
 800175e:	4013      	ands	r3, r2
 8001760:	0019      	movs	r1, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	23f0      	movs	r3, #240	@ 0xf0
 8001768:	039b      	lsls	r3, r3, #14
 800176a:	401a      	ands	r2, r3
 800176c:	4b3f      	ldr	r3, [pc, #252]	@ (800186c <HAL_ADC_Init+0x344>)
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177a:	001a      	movs	r2, r3
 800177c:	2100      	movs	r1, #0
 800177e:	f7ff fdac 	bl	80012da <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178a:	493a      	ldr	r1, [pc, #232]	@ (8001874 <HAL_ADC_Init+0x34c>)
 800178c:	001a      	movs	r2, r3
 800178e:	f7ff fda4 	bl	80012da <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2110      	movs	r1, #16
 80017a6:	4249      	negs	r1, r1
 80017a8:	430a      	orrs	r2, r1
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80017ac:	e018      	b.n	80017e0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	039b      	lsls	r3, r3, #14
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d112      	bne.n	80017e0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	221c      	movs	r2, #28
 80017ca:	4013      	ands	r3, r2
 80017cc:	2210      	movs	r2, #16
 80017ce:	4252      	negs	r2, r2
 80017d0:	409a      	lsls	r2, r3
 80017d2:	0011      	movs	r1, r2
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2100      	movs	r1, #0
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff fd94 	bl	8001314 <LL_ADC_GetSamplingTimeCommonChannels>
 80017ec:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d10b      	bne.n	800180e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001800:	2203      	movs	r2, #3
 8001802:	4393      	bics	r3, r2
 8001804:	2201      	movs	r2, #1
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800180c:	e01c      	b.n	8001848 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001812:	2212      	movs	r2, #18
 8001814:	4393      	bics	r3, r2
 8001816:	2210      	movs	r2, #16
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001822:	2201      	movs	r2, #1
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800182a:	231f      	movs	r3, #31
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001832:	e009      	b.n	8001848 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	2210      	movs	r2, #16
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001840:	231f      	movs	r3, #31
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001848:	231f      	movs	r3, #31
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	781b      	ldrb	r3, [r3, #0]
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b008      	add	sp, #32
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	20000004 	.word	0x20000004
 800185c:	00030d40 	.word	0x00030d40
 8001860:	fffffefd 	.word	0xfffffefd
 8001864:	ffde0201 	.word	0xffde0201
 8001868:	1ffffc02 	.word	0x1ffffc02
 800186c:	40012708 	.word	0x40012708
 8001870:	ffc3ffff 	.word	0xffc3ffff
 8001874:	07ffff04 	.word	0x07ffff04

08001878 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0018      	movs	r0, r3
 800188a:	f7ff fe3b 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d16c      	bne.n	800196c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2254      	movs	r2, #84	@ 0x54
 8001896:	5c9b      	ldrb	r3, [r3, r2]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_Start_DMA+0x28>
 800189c:	2302      	movs	r3, #2
 800189e:	e06c      	b.n	800197a <HAL_ADC_Start_DMA+0x102>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2254      	movs	r2, #84	@ 0x54
 80018a4:	2101      	movs	r1, #1
 80018a6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	4013      	ands	r3, r2
 80018b2:	d113      	bne.n	80018dc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff fdff 	bl	80014bc <LL_ADC_IsEnabled>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d004      	beq.n	80018cc <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7ff fde6 	bl	8001498 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2101      	movs	r1, #1
 80018d8:	430a      	orrs	r2, r1
 80018da:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018dc:	2517      	movs	r5, #23
 80018de:	197c      	adds	r4, r7, r5
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 fa46 	bl	8001d74 <ADC_Enable>
 80018e8:	0003      	movs	r3, r0
 80018ea:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ec:	002c      	movs	r4, r5
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d13e      	bne.n	8001974 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fa:	4a22      	ldr	r2, [pc, #136]	@ (8001984 <HAL_ADC_Start_DMA+0x10c>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	2280      	movs	r2, #128	@ 0x80
 8001900:	0052      	lsls	r2, r2, #1
 8001902:	431a      	orrs	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001912:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <HAL_ADC_Start_DMA+0x110>)
 8001914:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800191a:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <HAL_ADC_Start_DMA+0x114>)
 800191c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001922:	4a1b      	ldr	r2, [pc, #108]	@ (8001990 <HAL_ADC_Start_DMA+0x118>)
 8001924:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	221c      	movs	r2, #28
 800192c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2254      	movs	r2, #84	@ 0x54
 8001932:	2100      	movs	r1, #0
 8001934:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2110      	movs	r1, #16
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3340      	adds	r3, #64	@ 0x40
 8001950:	0019      	movs	r1, r3
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	193c      	adds	r4, r7, r4
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f000 fbfe 	bl	8002158 <HAL_DMA_Start_IT>
 800195c:	0003      	movs	r3, r0
 800195e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff fdbb 	bl	80014e0 <LL_ADC_REG_StartConversion>
 800196a:	e003      	b.n	8001974 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800196c:	2317      	movs	r3, #23
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	2202      	movs	r2, #2
 8001972:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001974:	2317      	movs	r3, #23
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	781b      	ldrb	r3, [r3, #0]
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b006      	add	sp, #24
 8001980:	bdb0      	pop	{r4, r5, r7, pc}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	fffff0fe 	.word	0xfffff0fe
 8001988:	08001e81 	.word	0x08001e81
 800198c:	08001f49 	.word	0x08001f49
 8001990:	08001f67 	.word	0x08001f67

08001994 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800199c:	46c0      	nop			@ (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b002      	add	sp, #8
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019ac:	46c0      	nop			@ (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b002      	add	sp, #8
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019bc:	46c0      	nop			@ (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ce:	2317      	movs	r3, #23
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2254      	movs	r2, #84	@ 0x54
 80019de:	5c9b      	ldrb	r3, [r3, r2]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x24>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e1c0      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x3a6>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2254      	movs	r2, #84	@ 0x54
 80019ec:	2101      	movs	r1, #1
 80019ee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff fd85 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	d000      	beq.n	8001a00 <HAL_ADC_ConfigChannel+0x3c>
 80019fe:	e1a3      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d100      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x46>
 8001a08:	e143      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	2380      	movs	r3, #128	@ 0x80
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d004      	beq.n	8001a20 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a1a:	4ac1      	ldr	r2, [pc, #772]	@ (8001d20 <HAL_ADC_ConfigChannel+0x35c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d108      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0019      	movs	r1, r3
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	f7ff fcba 	bl	80013a4 <LL_ADC_REG_SetSequencerChAdd>
 8001a30:	e0c9      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	211f      	movs	r1, #31
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	210f      	movs	r1, #15
 8001a40:	4099      	lsls	r1, r3
 8001a42:	000b      	movs	r3, r1
 8001a44:	43db      	mvns	r3, r3
 8001a46:	4013      	ands	r3, r2
 8001a48:	0019      	movs	r1, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	035b      	lsls	r3, r3, #13
 8001a50:	0b5b      	lsrs	r3, r3, #13
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x9c>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	e098      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2201      	movs	r2, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	d000      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0xa8>
 8001a6a:	e091      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x1cc>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d000      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0xb4>
 8001a76:	e089      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x1c8>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d000      	beq.n	8001a84 <HAL_ADC_ConfigChannel+0xc0>
 8001a82:	e081      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x1c4>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2208      	movs	r2, #8
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d000      	beq.n	8001a90 <HAL_ADC_ConfigChannel+0xcc>
 8001a8e:	e079      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x1c0>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2210      	movs	r2, #16
 8001a96:	4013      	ands	r3, r2
 8001a98:	d000      	beq.n	8001a9c <HAL_ADC_ConfigChannel+0xd8>
 8001a9a:	e071      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x1bc>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d000      	beq.n	8001aa8 <HAL_ADC_ConfigChannel+0xe4>
 8001aa6:	e069      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x1b8>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2240      	movs	r2, #64	@ 0x40
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d000      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0xf0>
 8001ab2:	e061      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x1b4>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2280      	movs	r2, #128	@ 0x80
 8001aba:	4013      	ands	r3, r2
 8001abc:	d000      	beq.n	8001ac0 <HAL_ADC_ConfigChannel+0xfc>
 8001abe:	e059      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x1b0>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d151      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1ac>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d149      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1a8>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d141      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1a4>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	d139      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1a0>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	015b      	lsls	r3, r3, #5
 8001af8:	4013      	ands	r3, r2
 8001afa:	d131      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x19c>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	019b      	lsls	r3, r3, #6
 8001b04:	4013      	ands	r3, r2
 8001b06:	d129      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x198>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	4013      	ands	r3, r2
 8001b12:	d121      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x194>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d119      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x190>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	@ 0x80
 8001b26:	025b      	lsls	r3, r3, #9
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d111      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x18c>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	d109      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x188>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	02db      	lsls	r3, r3, #11
 8001b40:	4013      	ands	r3, r2
 8001b42:	d001      	beq.n	8001b48 <HAL_ADC_ConfigChannel+0x184>
 8001b44:	2312      	movs	r3, #18
 8001b46:	e024      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e022      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b4c:	2311      	movs	r3, #17
 8001b4e:	e020      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b50:	2310      	movs	r3, #16
 8001b52:	e01e      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b54:	230f      	movs	r3, #15
 8001b56:	e01c      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b58:	230e      	movs	r3, #14
 8001b5a:	e01a      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b5c:	230d      	movs	r3, #13
 8001b5e:	e018      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b60:	230c      	movs	r3, #12
 8001b62:	e016      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b64:	230b      	movs	r3, #11
 8001b66:	e014      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b68:	230a      	movs	r3, #10
 8001b6a:	e012      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b6c:	2309      	movs	r3, #9
 8001b6e:	e010      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b70:	2308      	movs	r3, #8
 8001b72:	e00e      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b74:	2307      	movs	r3, #7
 8001b76:	e00c      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b78:	2306      	movs	r3, #6
 8001b7a:	e00a      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	e008      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b80:	2304      	movs	r3, #4
 8001b82:	e006      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b84:	2303      	movs	r3, #3
 8001b86:	e004      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ce>
 8001b90:	2300      	movs	r3, #0
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	6852      	ldr	r2, [r2, #4]
 8001b96:	201f      	movs	r0, #31
 8001b98:	4002      	ands	r2, r0
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	000a      	movs	r2, r1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d808      	bhi.n	8001bc6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	f7ff fbcf 	bl	8001364 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6819      	ldr	r1, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	f7ff fc0a 	bl	80013ec <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db00      	blt.n	8001be2 <HAL_ADC_ConfigChannel+0x21e>
 8001be0:	e0bc      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001be2:	4b50      	ldr	r3, [pc, #320]	@ (8001d24 <HAL_ADC_ConfigChannel+0x360>)
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff fb6b 	bl	80012c0 <LL_ADC_GetCommonPathInternalCh>
 8001bea:	0003      	movs	r3, r0
 8001bec:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8001d28 <HAL_ADC_ConfigChannel+0x364>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d122      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c00:	d11d      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2280      	movs	r2, #128	@ 0x80
 8001c06:	0412      	lsls	r2, r2, #16
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	4a46      	ldr	r2, [pc, #280]	@ (8001d24 <HAL_ADC_ConfigChannel+0x360>)
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	0010      	movs	r0, r2
 8001c10:	f7ff fb42 	bl	8001298 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c14:	4b45      	ldr	r3, [pc, #276]	@ (8001d2c <HAL_ADC_ConfigChannel+0x368>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4945      	ldr	r1, [pc, #276]	@ (8001d30 <HAL_ADC_ConfigChannel+0x36c>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7fe fa7c 	bl	8000118 <__udivsi3>
 8001c20:	0003      	movs	r3, r0
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	0013      	movs	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	189b      	adds	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c2e:	e002      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f9      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c3c:	e08e      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a3c      	ldr	r2, [pc, #240]	@ (8001d34 <HAL_ADC_ConfigChannel+0x370>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d10e      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	2380      	movs	r3, #128	@ 0x80
 8001c4c:	045b      	lsls	r3, r3, #17
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d109      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	0452      	lsls	r2, r2, #17
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	4a32      	ldr	r2, [pc, #200]	@ (8001d24 <HAL_ADC_ConfigChannel+0x360>)
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	0010      	movs	r0, r2
 8001c60:	f7ff fb1a 	bl	8001298 <LL_ADC_SetCommonPathInternalCh>
 8001c64:	e07a      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a33      	ldr	r2, [pc, #204]	@ (8001d38 <HAL_ADC_ConfigChannel+0x374>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d000      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x2ae>
 8001c70:	e074      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	03db      	lsls	r3, r3, #15
 8001c78:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c7a:	d000      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x2ba>
 8001c7c:	e06e      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	03d2      	lsls	r2, r2, #15
 8001c84:	4313      	orrs	r3, r2
 8001c86:	4a27      	ldr	r2, [pc, #156]	@ (8001d24 <HAL_ADC_ConfigChannel+0x360>)
 8001c88:	0019      	movs	r1, r3
 8001c8a:	0010      	movs	r0, r2
 8001c8c:	f7ff fb04 	bl	8001298 <LL_ADC_SetCommonPathInternalCh>
 8001c90:	e064      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d004      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d20 <HAL_ADC_ConfigChannel+0x35c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d107      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	0010      	movs	r0, r2
 8001cb4:	f7ff fb87 	bl	80013c6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da4d      	bge.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cc0:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <HAL_ADC_ConfigChannel+0x360>)
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7ff fafc 	bl	80012c0 <LL_ADC_GetCommonPathInternalCh>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a15      	ldr	r2, [pc, #84]	@ (8001d28 <HAL_ADC_ConfigChannel+0x364>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d108      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4a18      	ldr	r2, [pc, #96]	@ (8001d3c <HAL_ADC_ConfigChannel+0x378>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <HAL_ADC_ConfigChannel+0x360>)
 8001cde:	0019      	movs	r1, r3
 8001ce0:	0010      	movs	r0, r2
 8001ce2:	f7ff fad9 	bl	8001298 <LL_ADC_SetCommonPathInternalCh>
 8001ce6:	e039      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a11      	ldr	r2, [pc, #68]	@ (8001d34 <HAL_ADC_ConfigChannel+0x370>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d108      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <HAL_ADC_ConfigChannel+0x37c>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <HAL_ADC_ConfigChannel+0x360>)
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	0010      	movs	r0, r2
 8001cfe:	f7ff facb 	bl	8001298 <LL_ADC_SetCommonPathInternalCh>
 8001d02:	e02b      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0b      	ldr	r2, [pc, #44]	@ (8001d38 <HAL_ADC_ConfigChannel+0x374>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d126      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <HAL_ADC_ConfigChannel+0x380>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	4a03      	ldr	r2, [pc, #12]	@ (8001d24 <HAL_ADC_ConfigChannel+0x360>)
 8001d16:	0019      	movs	r1, r3
 8001d18:	0010      	movs	r0, r2
 8001d1a:	f7ff fabd 	bl	8001298 <LL_ADC_SetCommonPathInternalCh>
 8001d1e:	e01d      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x398>
 8001d20:	80000004 	.word	0x80000004
 8001d24:	40012708 	.word	0x40012708
 8001d28:	b0001000 	.word	0xb0001000
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	00030d40 	.word	0x00030d40
 8001d34:	b8004000 	.word	0xb8004000
 8001d38:	b4002000 	.word	0xb4002000
 8001d3c:	ff7fffff 	.word	0xff7fffff
 8001d40:	feffffff 	.word	0xfeffffff
 8001d44:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d54:	2317      	movs	r3, #23
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2254      	movs	r2, #84	@ 0x54
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d64:	2317      	movs	r3, #23
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	781b      	ldrb	r3, [r3, #0]
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b006      	add	sp, #24
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			@ (mov r8, r8)

08001d74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff fb99 	bl	80014bc <LL_ADC_IsEnabled>
 8001d8a:	1e03      	subs	r3, r0, #0
 8001d8c:	d000      	beq.n	8001d90 <ADC_Enable+0x1c>
 8001d8e:	e069      	b.n	8001e64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	4a36      	ldr	r2, [pc, #216]	@ (8001e70 <ADC_Enable+0xfc>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d00d      	beq.n	8001db8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	2210      	movs	r2, #16
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	2201      	movs	r2, #1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e056      	b.n	8001e66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7ff fb59 	bl	8001474 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e74 <ADC_Enable+0x100>)
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7ff fa7b 	bl	80012c0 <LL_ADC_GetCommonPathInternalCh>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d00f      	beq.n	8001df4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dd4:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <ADC_Enable+0x104>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4928      	ldr	r1, [pc, #160]	@ (8001e7c <ADC_Enable+0x108>)
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7fe f99c 	bl	8000118 <__udivsi3>
 8001de0:	0003      	movs	r3, r0
 8001de2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001de4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001de6:	e002      	b.n	8001dee <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f9      	bne.n	8001de8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e5b      	ldrb	r3, [r3, #25]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d033      	beq.n	8001e64 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fa42 	bl	8001284 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e04:	e027      	b.n	8001e56 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7ff fb56 	bl	80014bc <LL_ADC_IsEnabled>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d104      	bne.n	8001e1e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff fb2b 	bl	8001474 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e1e:	f7ff fa31 	bl	8001284 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d914      	bls.n	8001e56 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d00d      	beq.n	8001e56 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	2210      	movs	r2, #16
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e007      	b.n	8001e66 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d1d0      	bne.n	8001e06 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b004      	add	sp, #16
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	80000017 	.word	0x80000017
 8001e74:	40012708 	.word	0x40012708
 8001e78:	20000004 	.word	0x20000004
 8001e7c:	00030d40 	.word	0x00030d40

08001e80 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	2250      	movs	r2, #80	@ 0x50
 8001e94:	4013      	ands	r3, r2
 8001e96:	d141      	bne.n	8001f1c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	2280      	movs	r2, #128	@ 0x80
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f7ff fa49 	bl	8001342 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eb0:	1e03      	subs	r3, r0, #0
 8001eb2:	d02e      	beq.n	8001f12 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	7e9b      	ldrb	r3, [r3, #26]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d12a      	bne.n	8001f12 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d123      	bne.n	8001f12 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff fb18 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d110      	bne.n	8001efa <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	210c      	movs	r1, #12
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eec:	4a15      	ldr	r2, [pc, #84]	@ (8001f44 <ADC_DMAConvCplt+0xc4>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ef8:	e00b      	b.n	8001f12 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	2220      	movs	r2, #32
 8001f00:	431a      	orrs	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff fd3d 	bl	8001994 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f1a:	e00f      	b.n	8001f3c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	2210      	movs	r2, #16
 8001f22:	4013      	ands	r3, r2
 8001f24:	d004      	beq.n	8001f30 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff fd43 	bl	80019b4 <HAL_ADC_ErrorCallback>
}
 8001f2e:	e005      	b.n	8001f3c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	0010      	movs	r0, r2
 8001f3a:	4798      	blx	r3
}
 8001f3c:	46c0      	nop			@ (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b004      	add	sp, #16
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	fffffefe 	.word	0xfffffefe

08001f48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff fd23 	bl	80019a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b004      	add	sp, #16
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	2240      	movs	r2, #64	@ 0x40
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	2204      	movs	r2, #4
 8001f86:	431a      	orrs	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7ff fd10 	bl	80019b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f94:	46c0      	nop			@ (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b004      	add	sp, #16
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	1dfb      	adds	r3, r7, #7
 8001fa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	1dfb      	adds	r3, r7, #7
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fae:	d809      	bhi.n	8001fc4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb0:	1dfb      	adds	r3, r7, #7
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	231f      	movs	r3, #31
 8001fb8:	401a      	ands	r2, r3
 8001fba:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <__NVIC_EnableIRQ+0x30>)
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	4091      	lsls	r1, r2
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001fc4:	46c0      	nop			@ (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	1dfb      	adds	r3, r7, #7
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fe4:	d828      	bhi.n	8002038 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80020a4 <__NVIC_SetPriority+0xd4>)
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b25b      	sxtb	r3, r3
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	33c0      	adds	r3, #192	@ 0xc0
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	589b      	ldr	r3, [r3, r2]
 8001ff6:	1dfa      	adds	r2, r7, #7
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	400a      	ands	r2, r1
 8002000:	00d2      	lsls	r2, r2, #3
 8002002:	21ff      	movs	r1, #255	@ 0xff
 8002004:	4091      	lsls	r1, r2
 8002006:	000a      	movs	r2, r1
 8002008:	43d2      	mvns	r2, r2
 800200a:	401a      	ands	r2, r3
 800200c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	019b      	lsls	r3, r3, #6
 8002012:	22ff      	movs	r2, #255	@ 0xff
 8002014:	401a      	ands	r2, r3
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	0018      	movs	r0, r3
 800201c:	2303      	movs	r3, #3
 800201e:	4003      	ands	r3, r0
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002024:	481f      	ldr	r0, [pc, #124]	@ (80020a4 <__NVIC_SetPriority+0xd4>)
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b25b      	sxtb	r3, r3
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	430a      	orrs	r2, r1
 8002030:	33c0      	adds	r3, #192	@ 0xc0
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002036:	e031      	b.n	800209c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002038:	4a1b      	ldr	r2, [pc, #108]	@ (80020a8 <__NVIC_SetPriority+0xd8>)
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	0019      	movs	r1, r3
 8002040:	230f      	movs	r3, #15
 8002042:	400b      	ands	r3, r1
 8002044:	3b08      	subs	r3, #8
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3306      	adds	r3, #6
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	18d3      	adds	r3, r2, r3
 800204e:	3304      	adds	r3, #4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	1dfa      	adds	r2, r7, #7
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	0011      	movs	r1, r2
 8002058:	2203      	movs	r2, #3
 800205a:	400a      	ands	r2, r1
 800205c:	00d2      	lsls	r2, r2, #3
 800205e:	21ff      	movs	r1, #255	@ 0xff
 8002060:	4091      	lsls	r1, r2
 8002062:	000a      	movs	r2, r1
 8002064:	43d2      	mvns	r2, r2
 8002066:	401a      	ands	r2, r3
 8002068:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	019b      	lsls	r3, r3, #6
 800206e:	22ff      	movs	r2, #255	@ 0xff
 8002070:	401a      	ands	r2, r3
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	0018      	movs	r0, r3
 8002078:	2303      	movs	r3, #3
 800207a:	4003      	ands	r3, r0
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002080:	4809      	ldr	r0, [pc, #36]	@ (80020a8 <__NVIC_SetPriority+0xd8>)
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	001c      	movs	r4, r3
 8002088:	230f      	movs	r3, #15
 800208a:	4023      	ands	r3, r4
 800208c:	3b08      	subs	r3, #8
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	430a      	orrs	r2, r1
 8002092:	3306      	adds	r3, #6
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	18c3      	adds	r3, r0, r3
 8002098:	3304      	adds	r3, #4
 800209a:	601a      	str	r2, [r3, #0]
}
 800209c:	46c0      	nop			@ (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b003      	add	sp, #12
 80020a2:	bd90      	pop	{r4, r7, pc}
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	1e5a      	subs	r2, r3, #1
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	045b      	lsls	r3, r3, #17
 80020bc:	429a      	cmp	r2, r3
 80020be:	d301      	bcc.n	80020c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c0:	2301      	movs	r3, #1
 80020c2:	e010      	b.n	80020e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c4:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <SysTick_Config+0x44>)
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	3a01      	subs	r2, #1
 80020ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020cc:	2301      	movs	r3, #1
 80020ce:	425b      	negs	r3, r3
 80020d0:	2103      	movs	r1, #3
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7ff ff7c 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <SysTick_Config+0x44>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <SysTick_Config+0x44>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	0018      	movs	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b002      	add	sp, #8
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	210f      	movs	r1, #15
 8002100:	187b      	adds	r3, r7, r1
 8002102:	1c02      	adds	r2, r0, #0
 8002104:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	187b      	adds	r3, r7, r1
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b25b      	sxtb	r3, r3
 800210e:	0011      	movs	r1, r2
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff ff5d 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	46bd      	mov	sp, r7
 800211a:	b004      	add	sp, #16
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	0002      	movs	r2, r0
 8002126:	1dfb      	adds	r3, r7, #7
 8002128:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b25b      	sxtb	r3, r3
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff ff33 	bl	8001f9c <__NVIC_EnableIRQ>
}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b002      	add	sp, #8
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff ffaf 	bl	80020ac <SysTick_Config>
 800214e:	0003      	movs	r3, r0
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	b002      	add	sp, #8
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2317      	movs	r3, #23
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2224      	movs	r2, #36	@ 0x24
 8002172:	5c9b      	ldrb	r3, [r3, r2]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_DMA_Start_IT+0x24>
 8002178:	2302      	movs	r3, #2
 800217a:	e06f      	b.n	800225c <HAL_DMA_Start_IT+0x104>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2224      	movs	r2, #36	@ 0x24
 8002180:	2101      	movs	r1, #1
 8002182:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2225      	movs	r2, #37	@ 0x25
 8002188:	5c9b      	ldrb	r3, [r3, r2]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d157      	bne.n	8002240 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2225      	movs	r2, #37	@ 0x25
 8002194:	2102      	movs	r1, #2
 8002196:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	438a      	bics	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f855 	bl	8002264 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	210e      	movs	r1, #14
 80021ce:	430a      	orrs	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e00f      	b.n	80021f4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2104      	movs	r1, #4
 80021e0:	438a      	bics	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	210a      	movs	r1, #10
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	025b      	lsls	r3, r3, #9
 80021fe:	4013      	ands	r3, r2
 8002200:	d008      	beq.n	8002214 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220c:	2180      	movs	r1, #128	@ 0x80
 800220e:	0049      	lsls	r1, r1, #1
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002226:	2180      	movs	r1, #128	@ 0x80
 8002228:	0049      	lsls	r1, r1, #1
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e00a      	b.n	8002256 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2280      	movs	r2, #128	@ 0x80
 8002244:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2224      	movs	r2, #36	@ 0x24
 800224a:	2100      	movs	r1, #0
 800224c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800224e:	2317      	movs	r3, #23
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002256:	2317      	movs	r3, #23
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	781b      	ldrb	r3, [r3, #0]
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b006      	add	sp, #24
 8002262:	bd80      	pop	{r7, pc}

08002264 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800227a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800228c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800228e:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <DMA_SetConfig+0x7c>)
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	221c      	movs	r2, #28
 8002298:	4013      	ands	r3, r2
 800229a:	2201      	movs	r2, #1
 800229c:	409a      	lsls	r2, r3
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <DMA_SetConfig+0x7c>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d108      	bne.n	80022c6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022c4:	e007      	b.n	80022d6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	60da      	str	r2, [r3, #12]
}
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	40020000 	.word	0x40020000

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e147      	b.n	8002584 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4091      	lsls	r1, r2
 80022fe:	000a      	movs	r2, r1
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d100      	bne.n	800230c <HAL_GPIO_Init+0x28>
 800230a:	e138      	b.n	800257e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2203      	movs	r2, #3
 8002312:	4013      	ands	r3, r2
 8002314:	2b01      	cmp	r3, #1
 8002316:	d005      	beq.n	8002324 <HAL_GPIO_Init+0x40>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	4013      	ands	r3, r2
 8002320:	2b02      	cmp	r3, #2
 8002322:	d130      	bne.n	8002386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	409a      	lsls	r2, r3
 8002332:	0013      	movs	r3, r2
 8002334:	43da      	mvns	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	409a      	lsls	r2, r3
 8002346:	0013      	movs	r3, r2
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235a:	2201      	movs	r2, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	2201      	movs	r2, #1
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2203      	movs	r2, #3
 800238c:	4013      	ands	r3, r2
 800238e:	2b03      	cmp	r3, #3
 8002390:	d017      	beq.n	80023c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	0013      	movs	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2203      	movs	r2, #3
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d123      	bne.n	8002416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	58d3      	ldr	r3, [r2, r3]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2207      	movs	r2, #7
 80023e0:	4013      	ands	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	43da      	mvns	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2107      	movs	r1, #7
 80023fa:	400b      	ands	r3, r1
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	409a      	lsls	r2, r3
 8002400:	0013      	movs	r3, r2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	6939      	ldr	r1, [r7, #16]
 8002414:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	43da      	mvns	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2203      	movs	r2, #3
 8002434:	401a      	ands	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	23c0      	movs	r3, #192	@ 0xc0
 8002450:	029b      	lsls	r3, r3, #10
 8002452:	4013      	ands	r3, r2
 8002454:	d100      	bne.n	8002458 <HAL_GPIO_Init+0x174>
 8002456:	e092      	b.n	800257e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002458:	4a50      	ldr	r2, [pc, #320]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3318      	adds	r3, #24
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	589b      	ldr	r3, [r3, r2]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2203      	movs	r2, #3
 800246a:	4013      	ands	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	220f      	movs	r2, #15
 8002470:	409a      	lsls	r2, r3
 8002472:	0013      	movs	r3, r2
 8002474:	43da      	mvns	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	23a0      	movs	r3, #160	@ 0xa0
 8002480:	05db      	lsls	r3, r3, #23
 8002482:	429a      	cmp	r2, r3
 8002484:	d013      	beq.n	80024ae <HAL_GPIO_Init+0x1ca>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a45      	ldr	r2, [pc, #276]	@ (80025a0 <HAL_GPIO_Init+0x2bc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00d      	beq.n	80024aa <HAL_GPIO_Init+0x1c6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a44      	ldr	r2, [pc, #272]	@ (80025a4 <HAL_GPIO_Init+0x2c0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x1c2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a43      	ldr	r2, [pc, #268]	@ (80025a8 <HAL_GPIO_Init+0x2c4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_GPIO_Init+0x1be>
 800249e:	2303      	movs	r3, #3
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x1cc>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e004      	b.n	80024b0 <HAL_GPIO_Init+0x1cc>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_Init+0x1cc>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_GPIO_Init+0x1cc>
 80024ae:	2300      	movs	r3, #0
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	2103      	movs	r1, #3
 80024b4:	400a      	ands	r2, r1
 80024b6:	00d2      	lsls	r2, r2, #3
 80024b8:	4093      	lsls	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80024c0:	4936      	ldr	r1, [pc, #216]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3318      	adds	r3, #24
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ce:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43da      	mvns	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	035b      	lsls	r3, r3, #13
 80024e6:	4013      	ands	r3, r2
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f2:	4b2a      	ldr	r3, [pc, #168]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80024f8:	4b28      	ldr	r3, [pc, #160]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43da      	mvns	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	039b      	lsls	r3, r3, #14
 8002510:	4013      	ands	r3, r2
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800251c:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002522:	4a1e      	ldr	r2, [pc, #120]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 8002524:	2384      	movs	r3, #132	@ 0x84
 8002526:	58d3      	ldr	r3, [r2, r3]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43da      	mvns	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	4013      	ands	r3, r2
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002548:	4914      	ldr	r1, [pc, #80]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 800254a:	2284      	movs	r2, #132	@ 0x84
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002550:	4a12      	ldr	r2, [pc, #72]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	58d3      	ldr	r3, [r2, r3]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43da      	mvns	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	4013      	ands	r3, r2
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002576:	4909      	ldr	r1, [pc, #36]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 8002578:	2280      	movs	r2, #128	@ 0x80
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	40da      	lsrs	r2, r3
 800258c:	1e13      	subs	r3, r2, #0
 800258e:	d000      	beq.n	8002592 <HAL_GPIO_Init+0x2ae>
 8002590:	e6b0      	b.n	80022f4 <HAL_GPIO_Init+0x10>
  }
}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b006      	add	sp, #24
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021800 	.word	0x40021800
 80025a0:	50000400 	.word	0x50000400
 80025a4:	50000800 	.word	0x50000800
 80025a8:	50000c00 	.word	0x50000c00

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	0008      	movs	r0, r1
 80025b6:	0011      	movs	r1, r2
 80025b8:	1cbb      	adds	r3, r7, #2
 80025ba:	1c02      	adds	r2, r0, #0
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	1c7b      	adds	r3, r7, #1
 80025c0:	1c0a      	adds	r2, r1, #0
 80025c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025c4:	1c7b      	adds	r3, r7, #1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025cc:	1cbb      	adds	r3, r7, #2
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025d4:	e003      	b.n	80025de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025d6:	1cbb      	adds	r3, r7, #2
 80025d8:	881a      	ldrh	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	000a      	movs	r2, r1
 80025f0:	1cbb      	adds	r3, r7, #2
 80025f2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025fa:	1cbb      	adds	r3, r7, #2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	041a      	lsls	r2, r3, #16
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	43db      	mvns	r3, r3
 8002608:	1cb9      	adds	r1, r7, #2
 800260a:	8809      	ldrh	r1, [r1, #0]
 800260c:	400b      	ands	r3, r1
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
}
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b004      	add	sp, #16
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	0002      	movs	r2, r0
 8002624:	1dbb      	adds	r3, r7, #6
 8002626:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002628:	4b10      	ldr	r3, [pc, #64]	@ (800266c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	1dba      	adds	r2, r7, #6
 800262e:	8812      	ldrh	r2, [r2, #0]
 8002630:	4013      	ands	r3, r2
 8002632:	d008      	beq.n	8002646 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002634:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002636:	1dba      	adds	r2, r7, #6
 8002638:	8812      	ldrh	r2, [r2, #0]
 800263a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800263c:	1dbb      	adds	r3, r7, #6
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	0018      	movs	r0, r3
 8002642:	f7fe f8d3 	bl	80007ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	1dba      	adds	r2, r7, #6
 800264c:	8812      	ldrh	r2, [r2, #0]
 800264e:	4013      	ands	r3, r2
 8002650:	d008      	beq.n	8002664 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002654:	1dba      	adds	r2, r7, #6
 8002656:	8812      	ldrh	r2, [r2, #0]
 8002658:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800265a:	1dbb      	adds	r3, r7, #6
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	0018      	movs	r0, r3
 8002660:	f7fe f932 	bl	80008c8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002664:	46c0      	nop			@ (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b002      	add	sp, #8
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021800 	.word	0x40021800

08002670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a19      	ldr	r2, [pc, #100]	@ (80026e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800267e:	4013      	ands	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	4b17      	ldr	r3, [pc, #92]	@ (80026e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	430a      	orrs	r2, r1
 8002688:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d11f      	bne.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002694:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	0013      	movs	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	189b      	adds	r3, r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4912      	ldr	r1, [pc, #72]	@ (80026ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7fd fd38 	bl	8000118 <__udivsi3>
 80026a8:	0003      	movs	r3, r0
 80026aa:	3301      	adds	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ae:	e008      	b.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e001      	b.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e009      	b.n	80026d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026c2:	4b07      	ldr	r3, [pc, #28]	@ (80026e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	401a      	ands	r2, r3
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d0ed      	beq.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b004      	add	sp, #16
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	40007000 	.word	0x40007000
 80026e4:	fffff9ff 	.word	0xfffff9ff
 80026e8:	20000004 	.word	0x20000004
 80026ec:	000f4240 	.word	0x000f4240

080026f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026f4:	4b03      	ldr	r3, [pc, #12]	@ (8002704 <LL_RCC_GetAPB1Prescaler+0x14>)
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	23e0      	movs	r3, #224	@ 0xe0
 80026fa:	01db      	lsls	r3, r3, #7
 80026fc:	4013      	ands	r3, r2
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e2fe      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	d100      	bne.n	8002726 <HAL_RCC_OscConfig+0x1e>
 8002724:	e07c      	b.n	8002820 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002726:	4bc3      	ldr	r3, [pc, #780]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2238      	movs	r2, #56	@ 0x38
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002730:	4bc0      	ldr	r3, [pc, #768]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2203      	movs	r2, #3
 8002736:	4013      	ands	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b10      	cmp	r3, #16
 800273e:	d102      	bne.n	8002746 <HAL_RCC_OscConfig+0x3e>
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d002      	beq.n	800274c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d10b      	bne.n	8002764 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	4bb9      	ldr	r3, [pc, #740]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	029b      	lsls	r3, r3, #10
 8002754:	4013      	ands	r3, r2
 8002756:	d062      	beq.n	800281e <HAL_RCC_OscConfig+0x116>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d15e      	bne.n	800281e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e2d9      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	025b      	lsls	r3, r3, #9
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <HAL_RCC_OscConfig+0x78>
 8002770:	4bb0      	ldr	r3, [pc, #704]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4baf      	ldr	r3, [pc, #700]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002776:	2180      	movs	r1, #128	@ 0x80
 8002778:	0249      	lsls	r1, r1, #9
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e020      	b.n	80027c2 <HAL_RCC_OscConfig+0xba>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	23a0      	movs	r3, #160	@ 0xa0
 8002786:	02db      	lsls	r3, r3, #11
 8002788:	429a      	cmp	r2, r3
 800278a:	d10e      	bne.n	80027aa <HAL_RCC_OscConfig+0xa2>
 800278c:	4ba9      	ldr	r3, [pc, #676]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4ba8      	ldr	r3, [pc, #672]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002792:	2180      	movs	r1, #128	@ 0x80
 8002794:	02c9      	lsls	r1, r1, #11
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	4ba6      	ldr	r3, [pc, #664]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4ba5      	ldr	r3, [pc, #660]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80027a0:	2180      	movs	r1, #128	@ 0x80
 80027a2:	0249      	lsls	r1, r1, #9
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e00b      	b.n	80027c2 <HAL_RCC_OscConfig+0xba>
 80027aa:	4ba2      	ldr	r3, [pc, #648]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80027b0:	49a1      	ldr	r1, [pc, #644]	@ (8002a38 <HAL_RCC_OscConfig+0x330>)
 80027b2:	400a      	ands	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	4b9f      	ldr	r3, [pc, #636]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80027bc:	499f      	ldr	r1, [pc, #636]	@ (8002a3c <HAL_RCC_OscConfig+0x334>)
 80027be:	400a      	ands	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d014      	beq.n	80027f4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7fe fd5b 	bl	8001284 <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fd56 	bl	8001284 <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	@ 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e298      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e6:	4b93      	ldr	r3, [pc, #588]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	029b      	lsls	r3, r3, #10
 80027ee:	4013      	ands	r3, r2
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0xcc>
 80027f2:	e015      	b.n	8002820 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fd46 	bl	8001284 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fe:	f7fe fd41 	bl	8001284 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b64      	cmp	r3, #100	@ 0x64
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e283      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002810:	4b88      	ldr	r3, [pc, #544]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	029b      	lsls	r3, r3, #10
 8002818:	4013      	ands	r3, r2
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0xf6>
 800281c:	e000      	b.n	8002820 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2202      	movs	r2, #2
 8002826:	4013      	ands	r3, r2
 8002828:	d100      	bne.n	800282c <HAL_RCC_OscConfig+0x124>
 800282a:	e099      	b.n	8002960 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282c:	4b81      	ldr	r3, [pc, #516]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2238      	movs	r2, #56	@ 0x38
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002836:	4b7f      	ldr	r3, [pc, #508]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2203      	movs	r2, #3
 800283c:	4013      	ands	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b10      	cmp	r3, #16
 8002844:	d102      	bne.n	800284c <HAL_RCC_OscConfig+0x144>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d002      	beq.n	8002852 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d135      	bne.n	80028be <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002852:	4b78      	ldr	r3, [pc, #480]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4013      	ands	r3, r2
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x162>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e256      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	4b72      	ldr	r3, [pc, #456]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a74      	ldr	r2, [pc, #464]	@ (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	021a      	lsls	r2, r3, #8
 800287a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d112      	bne.n	80028ac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002886:	4b6b      	ldr	r3, [pc, #428]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a44 <HAL_RCC_OscConfig+0x33c>)
 800288c:	4013      	ands	r3, r2
 800288e:	0019      	movs	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	4b67      	ldr	r3, [pc, #412]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800289a:	4b66      	ldr	r3, [pc, #408]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	0adb      	lsrs	r3, r3, #11
 80028a0:	2207      	movs	r2, #7
 80028a2:	4013      	ands	r3, r2
 80028a4:	4a68      	ldr	r2, [pc, #416]	@ (8002a48 <HAL_RCC_OscConfig+0x340>)
 80028a6:	40da      	lsrs	r2, r3
 80028a8:	4b68      	ldr	r3, [pc, #416]	@ (8002a4c <HAL_RCC_OscConfig+0x344>)
 80028aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028ac:	4b68      	ldr	r3, [pc, #416]	@ (8002a50 <HAL_RCC_OscConfig+0x348>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fe fc8b 	bl	80011cc <HAL_InitTick>
 80028b6:	1e03      	subs	r3, r0, #0
 80028b8:	d051      	beq.n	800295e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e22c      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d030      	beq.n	8002928 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002a44 <HAL_RCC_OscConfig+0x33c>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	4b57      	ldr	r3, [pc, #348]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028da:	4b56      	ldr	r3, [pc, #344]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b55      	ldr	r3, [pc, #340]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80028e0:	2180      	movs	r1, #128	@ 0x80
 80028e2:	0049      	lsls	r1, r1, #1
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fccc 	bl	8001284 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f2:	f7fe fcc7 	bl	8001284 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e209      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002904:	4b4b      	ldr	r3, [pc, #300]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4013      	ands	r3, r2
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b48      	ldr	r3, [pc, #288]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a4a      	ldr	r2, [pc, #296]	@ (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	021a      	lsls	r2, r3, #8
 8002920:	4b44      	ldr	r3, [pc, #272]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	e01b      	b.n	8002960 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002928:	4b42      	ldr	r3, [pc, #264]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b41      	ldr	r3, [pc, #260]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800292e:	4949      	ldr	r1, [pc, #292]	@ (8002a54 <HAL_RCC_OscConfig+0x34c>)
 8002930:	400a      	ands	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fca6 	bl	8001284 <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293e:	f7fe fca1 	bl	8001284 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1e3      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002950:	4b38      	ldr	r3, [pc, #224]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4013      	ands	r3, r2
 800295a:	d1f0      	bne.n	800293e <HAL_RCC_OscConfig+0x236>
 800295c:	e000      	b.n	8002960 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800295e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2208      	movs	r2, #8
 8002966:	4013      	ands	r3, r2
 8002968:	d047      	beq.n	80029fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800296a:	4b32      	ldr	r3, [pc, #200]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2238      	movs	r2, #56	@ 0x38
 8002970:	4013      	ands	r3, r2
 8002972:	2b18      	cmp	r3, #24
 8002974:	d10a      	bne.n	800298c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002976:	4b2f      	ldr	r3, [pc, #188]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297a:	2202      	movs	r2, #2
 800297c:	4013      	ands	r3, r2
 800297e:	d03c      	beq.n	80029fa <HAL_RCC_OscConfig+0x2f2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d138      	bne.n	80029fa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e1c5      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d019      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002994:	4b27      	ldr	r3, [pc, #156]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002996:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002998:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 800299a:	2101      	movs	r1, #1
 800299c:	430a      	orrs	r2, r1
 800299e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe fc70 	bl	8001284 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029aa:	f7fe fc6b 	bl	8001284 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1ad      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80029be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d0f1      	beq.n	80029aa <HAL_RCC_OscConfig+0x2a2>
 80029c6:	e018      	b.n	80029fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80029ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80029ce:	2101      	movs	r1, #1
 80029d0:	438a      	bics	r2, r1
 80029d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fc56 	bl	8001284 <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029de:	f7fe fc51 	bl	8001284 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e193      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f0:	4b10      	ldr	r3, [pc, #64]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 80029f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f4:	2202      	movs	r2, #2
 80029f6:	4013      	ands	r3, r2
 80029f8:	d1f1      	bne.n	80029de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2204      	movs	r2, #4
 8002a00:	4013      	ands	r3, r2
 8002a02:	d100      	bne.n	8002a06 <HAL_RCC_OscConfig+0x2fe>
 8002a04:	e0c6      	b.n	8002b94 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a06:	231f      	movs	r3, #31
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a0e:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2238      	movs	r2, #56	@ 0x38
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	d11e      	bne.n	8002a58 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_RCC_OscConfig+0x32c>)
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	d100      	bne.n	8002a26 <HAL_RCC_OscConfig+0x31e>
 8002a24:	e0b6      	b.n	8002b94 <HAL_RCC_OscConfig+0x48c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d000      	beq.n	8002a30 <HAL_RCC_OscConfig+0x328>
 8002a2e:	e0b1      	b.n	8002b94 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e171      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
 8002a34:	40021000 	.word	0x40021000
 8002a38:	fffeffff 	.word	0xfffeffff
 8002a3c:	fffbffff 	.word	0xfffbffff
 8002a40:	ffff80ff 	.word	0xffff80ff
 8002a44:	ffffc7ff 	.word	0xffffc7ff
 8002a48:	00f42400 	.word	0x00f42400
 8002a4c:	20000004 	.word	0x20000004
 8002a50:	20000008 	.word	0x20000008
 8002a54:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a58:	4bb1      	ldr	r3, [pc, #708]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	055b      	lsls	r3, r3, #21
 8002a60:	4013      	ands	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_OscConfig+0x360>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x362>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d011      	beq.n	8002a92 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	4bac      	ldr	r3, [pc, #688]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a72:	4bab      	ldr	r3, [pc, #684]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002a74:	2180      	movs	r1, #128	@ 0x80
 8002a76:	0549      	lsls	r1, r1, #21
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a7c:	4ba8      	ldr	r3, [pc, #672]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002a7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	055b      	lsls	r3, r3, #21
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a8a:	231f      	movs	r3, #31
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a92:	4ba4      	ldr	r3, [pc, #656]	@ (8002d24 <HAL_RCC_OscConfig+0x61c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a9e:	4ba1      	ldr	r3, [pc, #644]	@ (8002d24 <HAL_RCC_OscConfig+0x61c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4ba0      	ldr	r3, [pc, #640]	@ (8002d24 <HAL_RCC_OscConfig+0x61c>)
 8002aa4:	2180      	movs	r1, #128	@ 0x80
 8002aa6:	0049      	lsls	r1, r1, #1
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fbea 	bl	8001284 <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe fbe5 	bl	8001284 <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e127      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac8:	4b96      	ldr	r3, [pc, #600]	@ (8002d24 <HAL_RCC_OscConfig+0x61c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x3e2>
 8002adc:	4b90      	ldr	r3, [pc, #576]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002ade:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ae0:	4b8f      	ldr	r3, [pc, #572]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x41c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x404>
 8002af2:	4b8b      	ldr	r3, [pc, #556]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002af4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002af6:	4b8a      	ldr	r3, [pc, #552]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002af8:	2104      	movs	r1, #4
 8002afa:	430a      	orrs	r2, r1
 8002afc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002afe:	4b88      	ldr	r3, [pc, #544]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002b00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b02:	4b87      	ldr	r3, [pc, #540]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002b04:	2101      	movs	r1, #1
 8002b06:	430a      	orrs	r2, r1
 8002b08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x41c>
 8002b0c:	4b84      	ldr	r3, [pc, #528]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002b0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b10:	4b83      	ldr	r3, [pc, #524]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	438a      	bics	r2, r1
 8002b16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b18:	4b81      	ldr	r3, [pc, #516]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002b1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b1c:	4b80      	ldr	r3, [pc, #512]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002b1e:	2104      	movs	r1, #4
 8002b20:	438a      	bics	r2, r1
 8002b22:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d014      	beq.n	8002b56 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fbaa 	bl	8001284 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b34:	e009      	b.n	8002b4a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe fba5 	bl	8001284 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	4a79      	ldr	r2, [pc, #484]	@ (8002d28 <HAL_RCC_OscConfig+0x620>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0e6      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4a:	4b75      	ldr	r3, [pc, #468]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	2202      	movs	r2, #2
 8002b50:	4013      	ands	r3, r2
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x42e>
 8002b54:	e013      	b.n	8002b7e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe fb95 	bl	8001284 <HAL_GetTick>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b5e:	e009      	b.n	8002b74 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe fb90 	bl	8001284 <HAL_GetTick>
 8002b64:	0002      	movs	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d28 <HAL_RCC_OscConfig+0x620>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0d1      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b74:	4b6a      	ldr	r3, [pc, #424]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	2202      	movs	r2, #2
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b7e:	231f      	movs	r3, #31
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b88:	4b65      	ldr	r3, [pc, #404]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b8c:	4b64      	ldr	r3, [pc, #400]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002b8e:	4967      	ldr	r1, [pc, #412]	@ (8002d2c <HAL_RCC_OscConfig+0x624>)
 8002b90:	400a      	ands	r2, r1
 8002b92:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d100      	bne.n	8002b9e <HAL_RCC_OscConfig+0x496>
 8002b9c:	e0bb      	b.n	8002d16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b9e:	4b60      	ldr	r3, [pc, #384]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2238      	movs	r2, #56	@ 0x38
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d100      	bne.n	8002bac <HAL_RCC_OscConfig+0x4a4>
 8002baa:	e07b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d156      	bne.n	8002c62 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b59      	ldr	r3, [pc, #356]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002bba:	495d      	ldr	r1, [pc, #372]	@ (8002d30 <HAL_RCC_OscConfig+0x628>)
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fb60 	bl	8001284 <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bca:	f7fe fb5b 	bl	8001284 <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e09d      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bdc:	4b50      	ldr	r3, [pc, #320]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	049b      	lsls	r3, r3, #18
 8002be4:	4013      	ands	r3, r2
 8002be6:	d1f0      	bne.n	8002bca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a51      	ldr	r2, [pc, #324]	@ (8002d34 <HAL_RCC_OscConfig+0x62c>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1a      	ldr	r2, [r3, #32]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c14:	431a      	orrs	r2, r3
 8002c16:	4b42      	ldr	r3, [pc, #264]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b40      	ldr	r3, [pc, #256]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b3f      	ldr	r3, [pc, #252]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c22:	2180      	movs	r1, #128	@ 0x80
 8002c24:	0449      	lsls	r1, r1, #17
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c30:	2180      	movs	r1, #128	@ 0x80
 8002c32:	0549      	lsls	r1, r1, #21
 8002c34:	430a      	orrs	r2, r1
 8002c36:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fb24 	bl	8001284 <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe fb1f 	bl	8001284 <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e061      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c54:	4b32      	ldr	r3, [pc, #200]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2380      	movs	r3, #128	@ 0x80
 8002c5a:	049b      	lsls	r3, r3, #18
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x53a>
 8002c60:	e059      	b.n	8002d16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b2f      	ldr	r3, [pc, #188]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b2e      	ldr	r3, [pc, #184]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c68:	4931      	ldr	r1, [pc, #196]	@ (8002d30 <HAL_RCC_OscConfig+0x628>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fb09 	bl	8001284 <HAL_GetTick>
 8002c72:	0003      	movs	r3, r0
 8002c74:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe fb04 	bl	8001284 <HAL_GetTick>
 8002c7c:	0002      	movs	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e046      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c8a:	4b25      	ldr	r3, [pc, #148]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	2380      	movs	r3, #128	@ 0x80
 8002c90:	049b      	lsls	r3, r3, #18
 8002c92:	4013      	ands	r3, r2
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c96:	4b22      	ldr	r3, [pc, #136]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	4b21      	ldr	r3, [pc, #132]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002c9c:	4926      	ldr	r1, [pc, #152]	@ (8002d38 <HAL_RCC_OscConfig+0x630>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	e038      	b.n	8002d16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e033      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <HAL_RCC_OscConfig+0x618>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d126      	bne.n	8002d12 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2270      	movs	r2, #112	@ 0x70
 8002cc8:	401a      	ands	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d11f      	bne.n	8002d12 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	23fe      	movs	r3, #254	@ 0xfe
 8002cd6:	01db      	lsls	r3, r3, #7
 8002cd8:	401a      	ands	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cde:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d116      	bne.n	8002d12 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	23f8      	movs	r3, #248	@ 0xf8
 8002ce8:	039b      	lsls	r3, r3, #14
 8002cea:	401a      	ands	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d10e      	bne.n	8002d12 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	23e0      	movs	r3, #224	@ 0xe0
 8002cf8:	051b      	lsls	r3, r3, #20
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	0f5b      	lsrs	r3, r3, #29
 8002d08:	075a      	lsls	r2, r3, #29
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b008      	add	sp, #32
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40007000 	.word	0x40007000
 8002d28:	00001388 	.word	0x00001388
 8002d2c:	efffffff 	.word	0xefffffff
 8002d30:	feffffff 	.word	0xfeffffff
 8002d34:	11c1808c 	.word	0x11c1808c
 8002d38:	eefefffc 	.word	0xeefefffc

08002d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0e9      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d50:	4b76      	ldr	r3, [pc, #472]	@ (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2207      	movs	r2, #7
 8002d56:	4013      	ands	r3, r2
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d91e      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b73      	ldr	r3, [pc, #460]	@ (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2207      	movs	r2, #7
 8002d64:	4393      	bics	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	4b70      	ldr	r3, [pc, #448]	@ (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d70:	f7fe fa88 	bl	8001284 <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d78:	e009      	b.n	8002d8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7a:	f7fe fa83 	bl	8001284 <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	4a6a      	ldr	r2, [pc, #424]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0ca      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d8e:	4b67      	ldr	r3, [pc, #412]	@ (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2207      	movs	r2, #7
 8002d94:	4013      	ands	r3, r2
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1ee      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2202      	movs	r2, #2
 8002da2:	4013      	ands	r3, r2
 8002da4:	d015      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2204      	movs	r2, #4
 8002dac:	4013      	ands	r3, r2
 8002dae:	d006      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002db0:	4b60      	ldr	r3, [pc, #384]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	4b5f      	ldr	r3, [pc, #380]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002db6:	21e0      	movs	r1, #224	@ 0xe0
 8002db8:	01c9      	lsls	r1, r1, #7
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4a5d      	ldr	r2, [pc, #372]	@ (8002f38 <HAL_RCC_ClockConfig+0x1fc>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	4b59      	ldr	r3, [pc, #356]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d057      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de4:	4b53      	ldr	r3, [pc, #332]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	029b      	lsls	r3, r3, #10
 8002dec:	4013      	ands	r3, r2
 8002dee:	d12b      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e097      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	049b      	lsls	r3, r3, #18
 8002e04:	4013      	ands	r3, r2
 8002e06:	d11f      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e08b      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e14:	4b47      	ldr	r3, [pc, #284]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	@ 0x80
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d113      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e07f      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2c:	4b41      	ldr	r3, [pc, #260]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e30:	2202      	movs	r2, #2
 8002e32:	4013      	ands	r3, r2
 8002e34:	d108      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e074      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3e:	2202      	movs	r2, #2
 8002e40:	4013      	ands	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e06d      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e48:	4b3a      	ldr	r3, [pc, #232]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	4393      	bics	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4b37      	ldr	r3, [pc, #220]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fa12 	bl	8001284 <HAL_GetTick>
 8002e60:	0003      	movs	r3, r0
 8002e62:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e64:	e009      	b.n	8002e7a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e66:	f7fe fa0d 	bl	8001284 <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	4a2f      	ldr	r2, [pc, #188]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e054      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2238      	movs	r2, #56	@ 0x38
 8002e80:	401a      	ands	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1ec      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b27      	ldr	r3, [pc, #156]	@ (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2207      	movs	r2, #7
 8002e92:	4013      	ands	r3, r2
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d21e      	bcs.n	8002ed8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002eac:	f7fe f9ea 	bl	8001284 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eb4:	e009      	b.n	8002eca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb6:	f7fe f9e5 	bl	8001284 <HAL_GetTick>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f30 <HAL_RCC_ClockConfig+0x1f4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e02c      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eca:	4b18      	ldr	r3, [pc, #96]	@ (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2207      	movs	r2, #7
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1ee      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2204      	movs	r2, #4
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee2:	4b14      	ldr	r3, [pc, #80]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	@ (8002f3c <HAL_RCC_ClockConfig+0x200>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	0019      	movs	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	4b10      	ldr	r3, [pc, #64]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ef6:	f000 f829 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002efa:	0001      	movs	r1, r0
 8002efc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	220f      	movs	r2, #15
 8002f04:	401a      	ands	r2, r3
 8002f06:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <HAL_RCC_ClockConfig+0x204>)
 8002f08:	0092      	lsls	r2, r2, #2
 8002f0a:	58d3      	ldr	r3, [r2, r3]
 8002f0c:	221f      	movs	r2, #31
 8002f0e:	4013      	ands	r3, r2
 8002f10:	000a      	movs	r2, r1
 8002f12:	40da      	lsrs	r2, r3
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_ClockConfig+0x208>)
 8002f16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCC_ClockConfig+0x20c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7fe f955 	bl	80011cc <HAL_InitTick>
 8002f22:	0003      	movs	r3, r0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b004      	add	sp, #16
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	00001388 	.word	0x00001388
 8002f34:	40021000 	.word	0x40021000
 8002f38:	fffff0ff 	.word	0xfffff0ff
 8002f3c:	ffff8fff 	.word	0xffff8fff
 8002f40:	0800668c 	.word	0x0800668c
 8002f44:	20000004 	.word	0x20000004
 8002f48:	20000008 	.word	0x20000008

08002f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f52:	4b3c      	ldr	r3, [pc, #240]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2238      	movs	r2, #56	@ 0x38
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d10f      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f5c:	4b39      	ldr	r3, [pc, #228]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0adb      	lsrs	r3, r3, #11
 8002f62:	2207      	movs	r2, #7
 8002f64:	4013      	ands	r3, r2
 8002f66:	2201      	movs	r2, #1
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	0013      	movs	r3, r2
 8002f6c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	4835      	ldr	r0, [pc, #212]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f72:	f7fd f8d1 	bl	8000118 <__udivsi3>
 8002f76:	0003      	movs	r3, r0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	e05d      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f7c:	4b31      	ldr	r3, [pc, #196]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2238      	movs	r2, #56	@ 0x38
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d102      	bne.n	8002f8e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f88:	4b30      	ldr	r3, [pc, #192]	@ (800304c <HAL_RCC_GetSysClockFreq+0x100>)
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	e054      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2238      	movs	r2, #56	@ 0x38
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b10      	cmp	r3, #16
 8002f98:	d138      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fa4:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	2207      	movs	r2, #7
 8002fac:	4013      	ands	r3, r2
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d10d      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	4824      	ldr	r0, [pc, #144]	@ (800304c <HAL_RCC_GetSysClockFreq+0x100>)
 8002fbc:	f7fd f8ac 	bl	8000118 <__udivsi3>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	227f      	movs	r2, #127	@ 0x7f
 8002fcc:	4013      	ands	r3, r2
 8002fce:	434b      	muls	r3, r1
 8002fd0:	617b      	str	r3, [r7, #20]
        break;
 8002fd2:	e00d      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	481c      	ldr	r0, [pc, #112]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fd8:	f7fd f89e 	bl	8000118 <__udivsi3>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	0019      	movs	r1, r3
 8002fe0:	4b18      	ldr	r3, [pc, #96]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	227f      	movs	r2, #127	@ 0x7f
 8002fe8:	4013      	ands	r3, r2
 8002fea:	434b      	muls	r3, r1
 8002fec:	617b      	str	r3, [r7, #20]
        break;
 8002fee:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ff0:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0f5b      	lsrs	r3, r3, #29
 8002ff6:	2207      	movs	r2, #7
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	6978      	ldr	r0, [r7, #20]
 8003002:	f7fd f889 	bl	8000118 <__udivsi3>
 8003006:	0003      	movs	r3, r0
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	e015      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800300c:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2238      	movs	r2, #56	@ 0x38
 8003012:	4013      	ands	r3, r2
 8003014:	2b20      	cmp	r3, #32
 8003016:	d103      	bne.n	8003020 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003018:	2380      	movs	r3, #128	@ 0x80
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	e00b      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003020:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2238      	movs	r2, #56	@ 0x38
 8003026:	4013      	ands	r3, r2
 8003028:	2b18      	cmp	r3, #24
 800302a:	d103      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800302c:	23fa      	movs	r3, #250	@ 0xfa
 800302e:	01db      	lsls	r3, r3, #7
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	e001      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003038:	693b      	ldr	r3, [r7, #16]
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b006      	add	sp, #24
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	40021000 	.word	0x40021000
 8003048:	00f42400 	.word	0x00f42400
 800304c:	007a1200 	.word	0x007a1200

08003050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003054:	4b02      	ldr	r3, [pc, #8]	@ (8003060 <HAL_RCC_GetHCLKFreq+0x10>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	20000004 	.word	0x20000004

08003064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003068:	f7ff fff2 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 800306c:	0004      	movs	r4, r0
 800306e:	f7ff fb3f 	bl	80026f0 <LL_RCC_GetAPB1Prescaler>
 8003072:	0003      	movs	r3, r0
 8003074:	0b1a      	lsrs	r2, r3, #12
 8003076:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003078:	0092      	lsls	r2, r2, #2
 800307a:	58d3      	ldr	r3, [r2, r3]
 800307c:	221f      	movs	r2, #31
 800307e:	4013      	ands	r3, r2
 8003080:	40dc      	lsrs	r4, r3
 8003082:	0023      	movs	r3, r4
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	bdb0      	pop	{r4, r5, r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	080066cc 	.word	0x080066cc

08003090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003098:	2313      	movs	r3, #19
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030a0:	2312      	movs	r3, #18
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2380      	movs	r3, #128	@ 0x80
 80030ae:	029b      	lsls	r3, r3, #10
 80030b0:	4013      	ands	r3, r2
 80030b2:	d100      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80030b4:	e0a3      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b6:	2011      	movs	r0, #17
 80030b8:	183b      	adds	r3, r7, r0
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4bc3      	ldr	r3, [pc, #780]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	055b      	lsls	r3, r3, #21
 80030c6:	4013      	ands	r3, r2
 80030c8:	d110      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	4bc0      	ldr	r3, [pc, #768]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030ce:	4bbf      	ldr	r3, [pc, #764]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030d0:	2180      	movs	r1, #128	@ 0x80
 80030d2:	0549      	lsls	r1, r1, #21
 80030d4:	430a      	orrs	r2, r1
 80030d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030d8:	4bbc      	ldr	r3, [pc, #752]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030dc:	2380      	movs	r3, #128	@ 0x80
 80030de:	055b      	lsls	r3, r3, #21
 80030e0:	4013      	ands	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e6:	183b      	adds	r3, r7, r0
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ec:	4bb8      	ldr	r3, [pc, #736]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4bb7      	ldr	r3, [pc, #732]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030f2:	2180      	movs	r1, #128	@ 0x80
 80030f4:	0049      	lsls	r1, r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030fa:	f7fe f8c3 	bl	8001284 <HAL_GetTick>
 80030fe:	0003      	movs	r3, r0
 8003100:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003102:	e00b      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7fe f8be 	bl	8001284 <HAL_GetTick>
 8003108:	0002      	movs	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d904      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003112:	2313      	movs	r3, #19
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2203      	movs	r2, #3
 8003118:	701a      	strb	r2, [r3, #0]
        break;
 800311a:	e005      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800311c:	4bac      	ldr	r3, [pc, #688]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	2380      	movs	r3, #128	@ 0x80
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4013      	ands	r3, r2
 8003126:	d0ed      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003128:	2313      	movs	r3, #19
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d154      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003132:	4ba6      	ldr	r3, [pc, #664]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003134:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003136:	23c0      	movs	r3, #192	@ 0xc0
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4013      	ands	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d019      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	429a      	cmp	r2, r3
 800314c:	d014      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800314e:	4b9f      	ldr	r3, [pc, #636]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003152:	4aa0      	ldr	r2, [pc, #640]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003154:	4013      	ands	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003158:	4b9c      	ldr	r3, [pc, #624]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800315a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800315c:	4b9b      	ldr	r3, [pc, #620]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800315e:	2180      	movs	r1, #128	@ 0x80
 8003160:	0249      	lsls	r1, r1, #9
 8003162:	430a      	orrs	r2, r1
 8003164:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003166:	4b99      	ldr	r3, [pc, #612]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003168:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800316a:	4b98      	ldr	r3, [pc, #608]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800316c:	499a      	ldr	r1, [pc, #616]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800316e:	400a      	ands	r2, r1
 8003170:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003172:	4b96      	ldr	r3, [pc, #600]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2201      	movs	r2, #1
 800317c:	4013      	ands	r3, r2
 800317e:	d016      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe f880 	bl	8001284 <HAL_GetTick>
 8003184:	0003      	movs	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003188:	e00c      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fe f87b 	bl	8001284 <HAL_GetTick>
 800318e:	0002      	movs	r2, r0
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	4a91      	ldr	r2, [pc, #580]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d904      	bls.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800319a:	2313      	movs	r3, #19
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2203      	movs	r2, #3
 80031a0:	701a      	strb	r2, [r3, #0]
            break;
 80031a2:	e004      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a4:	4b89      	ldr	r3, [pc, #548]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a8:	2202      	movs	r2, #2
 80031aa:	4013      	ands	r3, r2
 80031ac:	d0ed      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80031ae:	2313      	movs	r3, #19
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b8:	4b84      	ldr	r3, [pc, #528]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031bc:	4a85      	ldr	r2, [pc, #532]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c6:	4b81      	ldr	r3, [pc, #516]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031c8:	430a      	orrs	r2, r1
 80031ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031cc:	e00c      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031ce:	2312      	movs	r3, #18
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2213      	movs	r2, #19
 80031d4:	18ba      	adds	r2, r7, r2
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e005      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031dc:	2312      	movs	r3, #18
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2213      	movs	r2, #19
 80031e2:	18ba      	adds	r2, r7, r2
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031e8:	2311      	movs	r3, #17
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d105      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f2:	4b76      	ldr	r3, [pc, #472]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031f6:	4b75      	ldr	r3, [pc, #468]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031f8:	4979      	ldr	r1, [pc, #484]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80031fa:	400a      	ands	r2, r1
 80031fc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2201      	movs	r2, #1
 8003204:	4013      	ands	r3, r2
 8003206:	d009      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003208:	4b70      	ldr	r3, [pc, #448]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800320a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320c:	2203      	movs	r2, #3
 800320e:	4393      	bics	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4b6d      	ldr	r3, [pc, #436]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003218:	430a      	orrs	r2, r1
 800321a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2202      	movs	r2, #2
 8003222:	4013      	ands	r3, r2
 8003224:	d009      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003226:	4b69      	ldr	r3, [pc, #420]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	220c      	movs	r2, #12
 800322c:	4393      	bics	r3, r2
 800322e:	0019      	movs	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b65      	ldr	r3, [pc, #404]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003236:	430a      	orrs	r2, r1
 8003238:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2210      	movs	r2, #16
 8003240:	4013      	ands	r3, r2
 8003242:	d009      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003244:	4b61      	ldr	r3, [pc, #388]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003248:	4a66      	ldr	r2, [pc, #408]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800324a:	4013      	ands	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	4b5e      	ldr	r3, [pc, #376]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003254:	430a      	orrs	r2, r1
 8003256:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4013      	ands	r3, r2
 8003262:	d009      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003264:	4b59      	ldr	r3, [pc, #356]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003268:	4a5f      	ldr	r2, [pc, #380]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800326a:	4013      	ands	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	4b56      	ldr	r3, [pc, #344]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003274:	430a      	orrs	r2, r1
 8003276:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4013      	ands	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003284:	4b51      	ldr	r3, [pc, #324]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003288:	4a58      	ldr	r2, [pc, #352]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800328a:	4013      	ands	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	4b4e      	ldr	r3, [pc, #312]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003294:	430a      	orrs	r2, r1
 8003296:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2220      	movs	r2, #32
 800329e:	4013      	ands	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032a2:	4b4a      	ldr	r3, [pc, #296]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	4a52      	ldr	r2, [pc, #328]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	4b46      	ldr	r3, [pc, #280]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032b2:	430a      	orrs	r2, r1
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	2380      	movs	r3, #128	@ 0x80
 80032bc:	01db      	lsls	r3, r3, #7
 80032be:	4013      	ands	r3, r2
 80032c0:	d015      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c2:	4b42      	ldr	r3, [pc, #264]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	0899      	lsrs	r1, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1a      	ldr	r2, [r3, #32]
 80032ce:	4b3f      	ldr	r3, [pc, #252]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032d0:	430a      	orrs	r2, r1
 80032d2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	2380      	movs	r3, #128	@ 0x80
 80032da:	05db      	lsls	r3, r3, #23
 80032dc:	429a      	cmp	r2, r3
 80032de:	d106      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032e0:	4b3a      	ldr	r3, [pc, #232]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	4b39      	ldr	r3, [pc, #228]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032e6:	2180      	movs	r1, #128	@ 0x80
 80032e8:	0249      	lsls	r1, r1, #9
 80032ea:	430a      	orrs	r2, r1
 80032ec:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	031b      	lsls	r3, r3, #12
 80032f6:	4013      	ands	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032fa:	4b34      	ldr	r3, [pc, #208]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fe:	2240      	movs	r2, #64	@ 0x40
 8003300:	4393      	bics	r3, r2
 8003302:	0019      	movs	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003308:	4b30      	ldr	r3, [pc, #192]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800330a:	430a      	orrs	r2, r1
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	039b      	lsls	r3, r3, #14
 8003316:	4013      	ands	r3, r2
 8003318:	d016      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800331a:	4b2c      	ldr	r3, [pc, #176]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	4a35      	ldr	r2, [pc, #212]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003320:	4013      	ands	r3, r2
 8003322:	0019      	movs	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003328:	4b28      	ldr	r3, [pc, #160]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800332a:	430a      	orrs	r2, r1
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003332:	2380      	movs	r3, #128	@ 0x80
 8003334:	03db      	lsls	r3, r3, #15
 8003336:	429a      	cmp	r2, r3
 8003338:	d106      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800333a:	4b24      	ldr	r3, [pc, #144]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	4b23      	ldr	r3, [pc, #140]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003340:	2180      	movs	r1, #128	@ 0x80
 8003342:	0449      	lsls	r1, r1, #17
 8003344:	430a      	orrs	r2, r1
 8003346:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	03db      	lsls	r3, r3, #15
 8003350:	4013      	ands	r3, r2
 8003352:	d016      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003354:	4b1d      	ldr	r3, [pc, #116]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	4a27      	ldr	r2, [pc, #156]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800335a:	4013      	ands	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003362:	4b1a      	ldr	r3, [pc, #104]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003364:	430a      	orrs	r2, r1
 8003366:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336c:	2380      	movs	r3, #128	@ 0x80
 800336e:	045b      	lsls	r3, r3, #17
 8003370:	429a      	cmp	r2, r3
 8003372:	d106      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003374:	4b15      	ldr	r3, [pc, #84]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800337a:	2180      	movs	r1, #128	@ 0x80
 800337c:	0449      	lsls	r1, r1, #17
 800337e:	430a      	orrs	r2, r1
 8003380:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	4013      	ands	r3, r2
 800338c:	d016      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800338e:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003392:	4a1a      	ldr	r2, [pc, #104]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800339e:	430a      	orrs	r2, r1
 80033a0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	2380      	movs	r3, #128	@ 0x80
 80033a8:	01db      	lsls	r3, r3, #7
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d106      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033ae:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033b4:	2180      	movs	r1, #128	@ 0x80
 80033b6:	0249      	lsls	r1, r1, #9
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80033bc:	2312      	movs	r3, #18
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	781b      	ldrb	r3, [r3, #0]
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b006      	add	sp, #24
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40007000 	.word	0x40007000
 80033d4:	fffffcff 	.word	0xfffffcff
 80033d8:	fffeffff 	.word	0xfffeffff
 80033dc:	00001388 	.word	0x00001388
 80033e0:	efffffff 	.word	0xefffffff
 80033e4:	fffff3ff 	.word	0xfffff3ff
 80033e8:	fff3ffff 	.word	0xfff3ffff
 80033ec:	ffcfffff 	.word	0xffcfffff
 80033f0:	ffffcfff 	.word	0xffffcfff
 80033f4:	ffbfffff 	.word	0xffbfffff
 80033f8:	feffffff 	.word	0xfeffffff
 80033fc:	ffff3fff 	.word	0xffff3fff

08003400 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e04a      	b.n	80034a8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	223d      	movs	r2, #61	@ 0x3d
 8003416:	5c9b      	ldrb	r3, [r3, r2]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	223c      	movs	r2, #60	@ 0x3c
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f7fd fd63 	bl	8000ef4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	223d      	movs	r2, #61	@ 0x3d
 8003432:	2102      	movs	r1, #2
 8003434:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	0019      	movs	r1, r3
 8003440:	0010      	movs	r0, r2
 8003442:	f000 fa1f 	bl	8003884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2248      	movs	r2, #72	@ 0x48
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	223e      	movs	r2, #62	@ 0x3e
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	223f      	movs	r2, #63	@ 0x3f
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2240      	movs	r2, #64	@ 0x40
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2241      	movs	r2, #65	@ 0x41
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2242      	movs	r2, #66	@ 0x42
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2243      	movs	r2, #67	@ 0x43
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2244      	movs	r2, #68	@ 0x44
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2245      	movs	r2, #69	@ 0x45
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2246      	movs	r2, #70	@ 0x46
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2247      	movs	r2, #71	@ 0x47
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	223d      	movs	r2, #61	@ 0x3d
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d108      	bne.n	80034d2 <HAL_TIM_PWM_Start+0x22>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	223e      	movs	r2, #62	@ 0x3e
 80034c4:	5c9b      	ldrb	r3, [r3, r2]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	1e5a      	subs	r2, r3, #1
 80034cc:	4193      	sbcs	r3, r2
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e037      	b.n	8003542 <HAL_TIM_PWM_Start+0x92>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d108      	bne.n	80034ea <HAL_TIM_PWM_Start+0x3a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	223f      	movs	r2, #63	@ 0x3f
 80034dc:	5c9b      	ldrb	r3, [r3, r2]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	4193      	sbcs	r3, r2
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e02b      	b.n	8003542 <HAL_TIM_PWM_Start+0x92>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d108      	bne.n	8003502 <HAL_TIM_PWM_Start+0x52>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2240      	movs	r2, #64	@ 0x40
 80034f4:	5c9b      	ldrb	r3, [r3, r2]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	1e5a      	subs	r2, r3, #1
 80034fc:	4193      	sbcs	r3, r2
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e01f      	b.n	8003542 <HAL_TIM_PWM_Start+0x92>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b0c      	cmp	r3, #12
 8003506:	d108      	bne.n	800351a <HAL_TIM_PWM_Start+0x6a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2241      	movs	r2, #65	@ 0x41
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	4193      	sbcs	r3, r2
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e013      	b.n	8003542 <HAL_TIM_PWM_Start+0x92>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b10      	cmp	r3, #16
 800351e:	d108      	bne.n	8003532 <HAL_TIM_PWM_Start+0x82>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2242      	movs	r2, #66	@ 0x42
 8003524:	5c9b      	ldrb	r3, [r3, r2]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	1e5a      	subs	r2, r3, #1
 800352c:	4193      	sbcs	r3, r2
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e007      	b.n	8003542 <HAL_TIM_PWM_Start+0x92>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2243      	movs	r2, #67	@ 0x43
 8003536:	5c9b      	ldrb	r3, [r3, r2]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	1e5a      	subs	r2, r3, #1
 800353e:	4193      	sbcs	r3, r2
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e08b      	b.n	8003662 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d104      	bne.n	800355a <HAL_TIM_PWM_Start+0xaa>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	223e      	movs	r2, #62	@ 0x3e
 8003554:	2102      	movs	r1, #2
 8003556:	5499      	strb	r1, [r3, r2]
 8003558:	e023      	b.n	80035a2 <HAL_TIM_PWM_Start+0xf2>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b04      	cmp	r3, #4
 800355e:	d104      	bne.n	800356a <HAL_TIM_PWM_Start+0xba>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	223f      	movs	r2, #63	@ 0x3f
 8003564:	2102      	movs	r1, #2
 8003566:	5499      	strb	r1, [r3, r2]
 8003568:	e01b      	b.n	80035a2 <HAL_TIM_PWM_Start+0xf2>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d104      	bne.n	800357a <HAL_TIM_PWM_Start+0xca>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2240      	movs	r2, #64	@ 0x40
 8003574:	2102      	movs	r1, #2
 8003576:	5499      	strb	r1, [r3, r2]
 8003578:	e013      	b.n	80035a2 <HAL_TIM_PWM_Start+0xf2>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b0c      	cmp	r3, #12
 800357e:	d104      	bne.n	800358a <HAL_TIM_PWM_Start+0xda>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2241      	movs	r2, #65	@ 0x41
 8003584:	2102      	movs	r1, #2
 8003586:	5499      	strb	r1, [r3, r2]
 8003588:	e00b      	b.n	80035a2 <HAL_TIM_PWM_Start+0xf2>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b10      	cmp	r3, #16
 800358e:	d104      	bne.n	800359a <HAL_TIM_PWM_Start+0xea>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2242      	movs	r2, #66	@ 0x42
 8003594:	2102      	movs	r1, #2
 8003596:	5499      	strb	r1, [r3, r2]
 8003598:	e003      	b.n	80035a2 <HAL_TIM_PWM_Start+0xf2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2243      	movs	r2, #67	@ 0x43
 800359e:	2102      	movs	r1, #2
 80035a0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6839      	ldr	r1, [r7, #0]
 80035a8:	2201      	movs	r2, #1
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 fcbc 	bl	8003f28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2d      	ldr	r2, [pc, #180]	@ (800366c <HAL_TIM_PWM_Start+0x1bc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <HAL_TIM_PWM_Start+0x128>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a2c      	ldr	r2, [pc, #176]	@ (8003670 <HAL_TIM_PWM_Start+0x1c0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_TIM_PWM_Start+0x128>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003674 <HAL_TIM_PWM_Start+0x1c4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_TIM_PWM_Start+0x128>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a29      	ldr	r2, [pc, #164]	@ (8003678 <HAL_TIM_PWM_Start+0x1c8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_TIM_PWM_Start+0x12c>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_TIM_PWM_Start+0x12e>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2180      	movs	r1, #128	@ 0x80
 80035ee:	0209      	lsls	r1, r1, #8
 80035f0:	430a      	orrs	r2, r1
 80035f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1c      	ldr	r2, [pc, #112]	@ (800366c <HAL_TIM_PWM_Start+0x1bc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00f      	beq.n	800361e <HAL_TIM_PWM_Start+0x16e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	2380      	movs	r3, #128	@ 0x80
 8003604:	05db      	lsls	r3, r3, #23
 8003606:	429a      	cmp	r2, r3
 8003608:	d009      	beq.n	800361e <HAL_TIM_PWM_Start+0x16e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1b      	ldr	r2, [pc, #108]	@ (800367c <HAL_TIM_PWM_Start+0x1cc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_TIM_PWM_Start+0x16e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a15      	ldr	r2, [pc, #84]	@ (8003670 <HAL_TIM_PWM_Start+0x1c0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d116      	bne.n	800364c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a16      	ldr	r2, [pc, #88]	@ (8003680 <HAL_TIM_PWM_Start+0x1d0>)
 8003626:	4013      	ands	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b06      	cmp	r3, #6
 800362e:	d016      	beq.n	800365e <HAL_TIM_PWM_Start+0x1ae>
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	2380      	movs	r3, #128	@ 0x80
 8003634:	025b      	lsls	r3, r3, #9
 8003636:	429a      	cmp	r2, r3
 8003638:	d011      	beq.n	800365e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2101      	movs	r1, #1
 8003646:	430a      	orrs	r2, r1
 8003648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364a:	e008      	b.n	800365e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2101      	movs	r1, #1
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e000      	b.n	8003660 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b004      	add	sp, #16
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	40014800 	.word	0x40014800
 800367c:	40000400 	.word	0x40000400
 8003680:	00010007 	.word	0x00010007

08003684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2317      	movs	r3, #23
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	223c      	movs	r2, #60	@ 0x3c
 800369c:	5c9b      	ldrb	r3, [r3, r2]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e0e5      	b.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	223c      	movs	r2, #60	@ 0x3c
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b14      	cmp	r3, #20
 80036b2:	d900      	bls.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80036b4:	e0d1      	b.n	800385a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	009a      	lsls	r2, r3, #2
 80036ba:	4b70      	ldr	r3, [pc, #448]	@ (800387c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	0011      	movs	r1, r2
 80036ca:	0018      	movs	r0, r3
 80036cc:	f000 f968 	bl	80039a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2108      	movs	r1, #8
 80036dc:	430a      	orrs	r2, r1
 80036de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2104      	movs	r1, #4
 80036ec:	438a      	bics	r2, r1
 80036ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6999      	ldr	r1, [r3, #24]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	619a      	str	r2, [r3, #24]
      break;
 8003702:	e0af      	b.n	8003864 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	0011      	movs	r1, r2
 800370c:	0018      	movs	r0, r3
 800370e:	f000 f9d1 	bl	8003ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699a      	ldr	r2, [r3, #24]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2180      	movs	r1, #128	@ 0x80
 800371e:	0109      	lsls	r1, r1, #4
 8003720:	430a      	orrs	r2, r1
 8003722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4954      	ldr	r1, [pc, #336]	@ (8003880 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003730:	400a      	ands	r2, r1
 8003732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6999      	ldr	r1, [r3, #24]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	021a      	lsls	r2, r3, #8
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	619a      	str	r2, [r3, #24]
      break;
 8003748:	e08c      	b.n	8003864 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	0011      	movs	r1, r2
 8003752:	0018      	movs	r0, r3
 8003754:	f000 fa32 	bl	8003bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2108      	movs	r1, #8
 8003764:	430a      	orrs	r2, r1
 8003766:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2104      	movs	r1, #4
 8003774:	438a      	bics	r2, r1
 8003776:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69d9      	ldr	r1, [r3, #28]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	61da      	str	r2, [r3, #28]
      break;
 800378a:	e06b      	b.n	8003864 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	0011      	movs	r1, r2
 8003794:	0018      	movs	r0, r3
 8003796:	f000 fa99 	bl	8003ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2180      	movs	r1, #128	@ 0x80
 80037a6:	0109      	lsls	r1, r1, #4
 80037a8:	430a      	orrs	r2, r1
 80037aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4932      	ldr	r1, [pc, #200]	@ (8003880 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69d9      	ldr	r1, [r3, #28]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	021a      	lsls	r2, r3, #8
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	61da      	str	r2, [r3, #28]
      break;
 80037d0:	e048      	b.n	8003864 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	0011      	movs	r1, r2
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 fae0 	bl	8003da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2108      	movs	r1, #8
 80037ec:	430a      	orrs	r2, r1
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2104      	movs	r1, #4
 80037fc:	438a      	bics	r2, r1
 80037fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003812:	e027      	b.n	8003864 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	0011      	movs	r1, r2
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fb1f 	bl	8003e60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2180      	movs	r1, #128	@ 0x80
 800382e:	0109      	lsls	r1, r1, #4
 8003830:	430a      	orrs	r2, r1
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4910      	ldr	r1, [pc, #64]	@ (8003880 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003840:	400a      	ands	r2, r1
 8003842:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	021a      	lsls	r2, r3, #8
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003858:	e004      	b.n	8003864 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800385a:	2317      	movs	r3, #23
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
      break;
 8003862:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	223c      	movs	r2, #60	@ 0x3c
 8003868:	2100      	movs	r1, #0
 800386a:	5499      	strb	r1, [r3, r2]

  return status;
 800386c:	2317      	movs	r3, #23
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	781b      	ldrb	r3, [r3, #0]
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b006      	add	sp, #24
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	080066ec 	.word	0x080066ec
 8003880:	fffffbff 	.word	0xfffffbff

08003884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a3b      	ldr	r2, [pc, #236]	@ (8003984 <TIM_Base_SetConfig+0x100>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d008      	beq.n	80038ae <TIM_Base_SetConfig+0x2a>
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	05db      	lsls	r3, r3, #23
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d003      	beq.n	80038ae <TIM_Base_SetConfig+0x2a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a37      	ldr	r2, [pc, #220]	@ (8003988 <TIM_Base_SetConfig+0x104>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d108      	bne.n	80038c0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2270      	movs	r2, #112	@ 0x70
 80038b2:	4393      	bics	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a30      	ldr	r2, [pc, #192]	@ (8003984 <TIM_Base_SetConfig+0x100>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d018      	beq.n	80038fa <TIM_Base_SetConfig+0x76>
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	2380      	movs	r3, #128	@ 0x80
 80038cc:	05db      	lsls	r3, r3, #23
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d013      	beq.n	80038fa <TIM_Base_SetConfig+0x76>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003988 <TIM_Base_SetConfig+0x104>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00f      	beq.n	80038fa <TIM_Base_SetConfig+0x76>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2b      	ldr	r2, [pc, #172]	@ (800398c <TIM_Base_SetConfig+0x108>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00b      	beq.n	80038fa <TIM_Base_SetConfig+0x76>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003990 <TIM_Base_SetConfig+0x10c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <TIM_Base_SetConfig+0x76>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a29      	ldr	r2, [pc, #164]	@ (8003994 <TIM_Base_SetConfig+0x110>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_Base_SetConfig+0x76>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a28      	ldr	r2, [pc, #160]	@ (8003998 <TIM_Base_SetConfig+0x114>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d108      	bne.n	800390c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a27      	ldr	r2, [pc, #156]	@ (800399c <TIM_Base_SetConfig+0x118>)
 80038fe:	4013      	ands	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	4393      	bics	r3, r2
 8003912:	001a      	movs	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a13      	ldr	r2, [pc, #76]	@ (8003984 <TIM_Base_SetConfig+0x100>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <TIM_Base_SetConfig+0xce>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a14      	ldr	r2, [pc, #80]	@ (8003990 <TIM_Base_SetConfig+0x10c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <TIM_Base_SetConfig+0xce>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a13      	ldr	r2, [pc, #76]	@ (8003994 <TIM_Base_SetConfig+0x110>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d003      	beq.n	8003952 <TIM_Base_SetConfig+0xce>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a12      	ldr	r2, [pc, #72]	@ (8003998 <TIM_Base_SetConfig+0x114>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d103      	bne.n	800395a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2201      	movs	r2, #1
 8003966:	4013      	ands	r3, r2
 8003968:	2b01      	cmp	r3, #1
 800396a:	d106      	bne.n	800397a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2201      	movs	r2, #1
 8003972:	4393      	bics	r3, r2
 8003974:	001a      	movs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]
  }
}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	b004      	add	sp, #16
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			@ (mov r8, r8)
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40002000 	.word	0x40002000
 8003990:	40014000 	.word	0x40014000
 8003994:	40014400 	.word	0x40014400
 8003998:	40014800 	.word	0x40014800
 800399c:	fffffcff 	.word	0xfffffcff

080039a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	2201      	movs	r2, #1
 80039b6:	4393      	bics	r3, r2
 80039b8:	001a      	movs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a32      	ldr	r2, [pc, #200]	@ (8003a98 <TIM_OC1_SetConfig+0xf8>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2203      	movs	r2, #3
 80039d6:	4393      	bics	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2202      	movs	r2, #2
 80039e8:	4393      	bics	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a28      	ldr	r2, [pc, #160]	@ (8003a9c <TIM_OC1_SetConfig+0xfc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <TIM_OC1_SetConfig+0x76>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <TIM_OC1_SetConfig+0x100>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <TIM_OC1_SetConfig+0x76>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a26      	ldr	r2, [pc, #152]	@ (8003aa4 <TIM_OC1_SetConfig+0x104>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_OC1_SetConfig+0x76>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a25      	ldr	r2, [pc, #148]	@ (8003aa8 <TIM_OC1_SetConfig+0x108>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10c      	bne.n	8003a30 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2208      	movs	r2, #8
 8003a1a:	4393      	bics	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1a      	ldr	r2, [pc, #104]	@ (8003a9c <TIM_OC1_SetConfig+0xfc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <TIM_OC1_SetConfig+0xb0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a19      	ldr	r2, [pc, #100]	@ (8003aa0 <TIM_OC1_SetConfig+0x100>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <TIM_OC1_SetConfig+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a18      	ldr	r2, [pc, #96]	@ (8003aa4 <TIM_OC1_SetConfig+0x104>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_OC1_SetConfig+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a17      	ldr	r2, [pc, #92]	@ (8003aa8 <TIM_OC1_SetConfig+0x108>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d111      	bne.n	8003a74 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4a16      	ldr	r2, [pc, #88]	@ (8003aac <TIM_OC1_SetConfig+0x10c>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4a15      	ldr	r2, [pc, #84]	@ (8003ab0 <TIM_OC1_SetConfig+0x110>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	46c0      	nop			@ (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b006      	add	sp, #24
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	fffeff8f 	.word	0xfffeff8f
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40014400 	.word	0x40014400
 8003aa8:	40014800 	.word	0x40014800
 8003aac:	fffffeff 	.word	0xfffffeff
 8003ab0:	fffffdff 	.word	0xfffffdff

08003ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	2210      	movs	r2, #16
 8003aca:	4393      	bics	r3, r2
 8003acc:	001a      	movs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8003b9c <TIM_OC2_SetConfig+0xe8>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba0 <TIM_OC2_SetConfig+0xec>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2220      	movs	r2, #32
 8003afe:	4393      	bics	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <TIM_OC2_SetConfig+0xf0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10d      	bne.n	8003b32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2280      	movs	r2, #128	@ 0x80
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2240      	movs	r2, #64	@ 0x40
 8003b2e:	4393      	bics	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba4 <TIM_OC2_SetConfig+0xf0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00b      	beq.n	8003b52 <TIM_OC2_SetConfig+0x9e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba8 <TIM_OC2_SetConfig+0xf4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <TIM_OC2_SetConfig+0x9e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <TIM_OC2_SetConfig+0xf8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <TIM_OC2_SetConfig+0x9e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	@ (8003bb0 <TIM_OC2_SetConfig+0xfc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d113      	bne.n	8003b7a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4a17      	ldr	r2, [pc, #92]	@ (8003bb4 <TIM_OC2_SetConfig+0x100>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4a16      	ldr	r2, [pc, #88]	@ (8003bb8 <TIM_OC2_SetConfig+0x104>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	621a      	str	r2, [r3, #32]
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b006      	add	sp, #24
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	feff8fff 	.word	0xfeff8fff
 8003ba0:	fffffcff 	.word	0xfffffcff
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800
 8003bb4:	fffffbff 	.word	0xfffffbff
 8003bb8:	fffff7ff 	.word	0xfffff7ff

08003bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4a33      	ldr	r2, [pc, #204]	@ (8003ca0 <TIM_OC3_SetConfig+0xe4>)
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a2f      	ldr	r2, [pc, #188]	@ (8003ca4 <TIM_OC3_SetConfig+0xe8>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	4a29      	ldr	r2, [pc, #164]	@ (8003ca8 <TIM_OC3_SetConfig+0xec>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a25      	ldr	r2, [pc, #148]	@ (8003cac <TIM_OC3_SetConfig+0xf0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10d      	bne.n	8003c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4a24      	ldr	r2, [pc, #144]	@ (8003cb0 <TIM_OC3_SetConfig+0xf4>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	4a20      	ldr	r2, [pc, #128]	@ (8003cb4 <TIM_OC3_SetConfig+0xf8>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1c      	ldr	r2, [pc, #112]	@ (8003cac <TIM_OC3_SetConfig+0xf0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00b      	beq.n	8003c56 <TIM_OC3_SetConfig+0x9a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <TIM_OC3_SetConfig+0xfc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <TIM_OC3_SetConfig+0x9a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1c      	ldr	r2, [pc, #112]	@ (8003cbc <TIM_OC3_SetConfig+0x100>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_OC3_SetConfig+0x9a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc0 <TIM_OC3_SetConfig+0x104>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d113      	bne.n	8003c7e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc4 <TIM_OC3_SetConfig+0x108>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4a19      	ldr	r2, [pc, #100]	@ (8003cc8 <TIM_OC3_SetConfig+0x10c>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	621a      	str	r2, [r3, #32]
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b006      	add	sp, #24
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	fffffeff 	.word	0xfffffeff
 8003ca4:	fffeff8f 	.word	0xfffeff8f
 8003ca8:	fffffdff 	.word	0xfffffdff
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	fffff7ff 	.word	0xfffff7ff
 8003cb4:	fffffbff 	.word	0xfffffbff
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800
 8003cc4:	ffffefff 	.word	0xffffefff
 8003cc8:	ffffdfff 	.word	0xffffdfff

08003ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4a26      	ldr	r2, [pc, #152]	@ (8003d7c <TIM_OC4_SetConfig+0xb0>)
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a22      	ldr	r2, [pc, #136]	@ (8003d80 <TIM_OC4_SetConfig+0xb4>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a21      	ldr	r2, [pc, #132]	@ (8003d84 <TIM_OC4_SetConfig+0xb8>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4a1d      	ldr	r2, [pc, #116]	@ (8003d88 <TIM_OC4_SetConfig+0xbc>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	031b      	lsls	r3, r3, #12
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a19      	ldr	r2, [pc, #100]	@ (8003d8c <TIM_OC4_SetConfig+0xc0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <TIM_OC4_SetConfig+0x78>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a18      	ldr	r2, [pc, #96]	@ (8003d90 <TIM_OC4_SetConfig+0xc4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <TIM_OC4_SetConfig+0x78>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a17      	ldr	r2, [pc, #92]	@ (8003d94 <TIM_OC4_SetConfig+0xc8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_OC4_SetConfig+0x78>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a16      	ldr	r2, [pc, #88]	@ (8003d98 <TIM_OC4_SetConfig+0xcc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d109      	bne.n	8003d58 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4a15      	ldr	r2, [pc, #84]	@ (8003d9c <TIM_OC4_SetConfig+0xd0>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	019b      	lsls	r3, r3, #6
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	621a      	str	r2, [r3, #32]
}
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b006      	add	sp, #24
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	ffffefff 	.word	0xffffefff
 8003d80:	feff8fff 	.word	0xfeff8fff
 8003d84:	fffffcff 	.word	0xfffffcff
 8003d88:	ffffdfff 	.word	0xffffdfff
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40014000 	.word	0x40014000
 8003d94:	40014400 	.word	0x40014400
 8003d98:	40014800 	.word	0x40014800
 8003d9c:	ffffbfff 	.word	0xffffbfff

08003da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	4a23      	ldr	r2, [pc, #140]	@ (8003e44 <TIM_OC5_SetConfig+0xa4>)
 8003db6:	401a      	ands	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <TIM_OC5_SetConfig+0xa8>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8003e4c <TIM_OC5_SetConfig+0xac>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a17      	ldr	r2, [pc, #92]	@ (8003e50 <TIM_OC5_SetConfig+0xb0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_OC5_SetConfig+0x6e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a16      	ldr	r2, [pc, #88]	@ (8003e54 <TIM_OC5_SetConfig+0xb4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_OC5_SetConfig+0x6e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a15      	ldr	r2, [pc, #84]	@ (8003e58 <TIM_OC5_SetConfig+0xb8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_OC5_SetConfig+0x6e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a14      	ldr	r2, [pc, #80]	@ (8003e5c <TIM_OC5_SetConfig+0xbc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d109      	bne.n	8003e22 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	4a0c      	ldr	r2, [pc, #48]	@ (8003e44 <TIM_OC5_SetConfig+0xa4>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	621a      	str	r2, [r3, #32]
}
 8003e3c:	46c0      	nop			@ (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b006      	add	sp, #24
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	fffeffff 	.word	0xfffeffff
 8003e48:	fffeff8f 	.word	0xfffeff8f
 8003e4c:	fffdffff 	.word	0xfffdffff
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40014400 	.word	0x40014400
 8003e5c:	40014800 	.word	0x40014800

08003e60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	4a24      	ldr	r2, [pc, #144]	@ (8003f08 <TIM_OC6_SetConfig+0xa8>)
 8003e76:	401a      	ands	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4a20      	ldr	r2, [pc, #128]	@ (8003f0c <TIM_OC6_SetConfig+0xac>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003f10 <TIM_OC6_SetConfig+0xb0>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	051b      	lsls	r3, r3, #20
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a18      	ldr	r2, [pc, #96]	@ (8003f14 <TIM_OC6_SetConfig+0xb4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <TIM_OC6_SetConfig+0x70>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a17      	ldr	r2, [pc, #92]	@ (8003f18 <TIM_OC6_SetConfig+0xb8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_OC6_SetConfig+0x70>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a16      	ldr	r2, [pc, #88]	@ (8003f1c <TIM_OC6_SetConfig+0xbc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_OC6_SetConfig+0x70>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a15      	ldr	r2, [pc, #84]	@ (8003f20 <TIM_OC6_SetConfig+0xc0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d109      	bne.n	8003ee4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4a14      	ldr	r2, [pc, #80]	@ (8003f24 <TIM_OC6_SetConfig+0xc4>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	029b      	lsls	r3, r3, #10
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	621a      	str	r2, [r3, #32]
}
 8003efe:	46c0      	nop			@ (mov r8, r8)
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b006      	add	sp, #24
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	ffefffff 	.word	0xffefffff
 8003f0c:	feff8fff 	.word	0xfeff8fff
 8003f10:	ffdfffff 	.word	0xffdfffff
 8003f14:	40012c00 	.word	0x40012c00
 8003f18:	40014000 	.word	0x40014000
 8003f1c:	40014400 	.word	0x40014400
 8003f20:	40014800 	.word	0x40014800
 8003f24:	fffbffff 	.word	0xfffbffff

08003f28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	221f      	movs	r2, #31
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	0013      	movs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	43d2      	mvns	r2, r2
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	211f      	movs	r1, #31
 8003f58:	400b      	ands	r3, r1
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4099      	lsls	r1, r3
 8003f5e:	000b      	movs	r3, r1
 8003f60:	431a      	orrs	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b006      	add	sp, #24
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	223c      	movs	r2, #60	@ 0x3c
 8003f7e:	5c9b      	ldrb	r3, [r3, r2]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e055      	b.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	223c      	movs	r2, #60	@ 0x3c
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	223d      	movs	r2, #61	@ 0x3d
 8003f94:	2102      	movs	r1, #2
 8003f96:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a23      	ldr	r2, [pc, #140]	@ (800403c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d108      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a22      	ldr	r2, [pc, #136]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2270      	movs	r2, #112	@ 0x70
 8003fc8:	4393      	bics	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a16      	ldr	r2, [pc, #88]	@ (800403c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00f      	beq.n	8004008 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2380      	movs	r3, #128	@ 0x80
 8003fee:	05db      	lsls	r3, r3, #23
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d009      	beq.n	8004008 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a12      	ldr	r2, [pc, #72]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a11      	ldr	r2, [pc, #68]	@ (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d10c      	bne.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2280      	movs	r2, #128	@ 0x80
 800400c:	4393      	bics	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	223d      	movs	r2, #61	@ 0x3d
 8004026:	2101      	movs	r1, #1
 8004028:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	223c      	movs	r2, #60	@ 0x3c
 800402e:	2100      	movs	r1, #0
 8004030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	0018      	movs	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	b004      	add	sp, #16
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40012c00 	.word	0x40012c00
 8004040:	ff0fffff 	.word	0xff0fffff
 8004044:	40000400 	.word	0x40000400
 8004048:	40014000 	.word	0x40014000

0800404c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	223c      	movs	r2, #60	@ 0x3c
 800405e:	5c9b      	ldrb	r3, [r3, r2]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004064:	2302      	movs	r3, #2
 8004066:	e06f      	b.n	8004148 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	223c      	movs	r2, #60	@ 0x3c
 800406c:	2101      	movs	r1, #1
 800406e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	22ff      	movs	r2, #255	@ 0xff
 8004074:	4393      	bics	r3, r2
 8004076:	001a      	movs	r2, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a33      	ldr	r2, [pc, #204]	@ (8004150 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004084:	401a      	ands	r2, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a30      	ldr	r2, [pc, #192]	@ (8004154 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004092:	401a      	ands	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a2e      	ldr	r2, [pc, #184]	@ (8004158 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80040a0:	401a      	ands	r2, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a2b      	ldr	r2, [pc, #172]	@ (800415c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80040ae:	401a      	ands	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a29      	ldr	r2, [pc, #164]	@ (8004160 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80040bc:	401a      	ands	r2, r3
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a26      	ldr	r2, [pc, #152]	@ (8004164 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80040ca:	401a      	ands	r2, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4a24      	ldr	r2, [pc, #144]	@ (8004168 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80040d8:	401a      	ands	r2, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4a21      	ldr	r2, [pc, #132]	@ (800416c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80040e8:	401a      	ands	r2, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004170 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d11c      	bne.n	8004136 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004100:	401a      	ands	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	051b      	lsls	r3, r3, #20
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a1a      	ldr	r2, [pc, #104]	@ (8004178 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004110:	401a      	ands	r2, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a17      	ldr	r2, [pc, #92]	@ (800417c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800411e:	401a      	ands	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a15      	ldr	r2, [pc, #84]	@ (8004180 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800412c:	401a      	ands	r2, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	223c      	movs	r2, #60	@ 0x3c
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	0018      	movs	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	b004      	add	sp, #16
 800414e:	bd80      	pop	{r7, pc}
 8004150:	fffffcff 	.word	0xfffffcff
 8004154:	fffffbff 	.word	0xfffffbff
 8004158:	fffff7ff 	.word	0xfffff7ff
 800415c:	ffffefff 	.word	0xffffefff
 8004160:	ffffdfff 	.word	0xffffdfff
 8004164:	ffffbfff 	.word	0xffffbfff
 8004168:	fff0ffff 	.word	0xfff0ffff
 800416c:	efffffff 	.word	0xefffffff
 8004170:	40012c00 	.word	0x40012c00
 8004174:	ff0fffff 	.word	0xff0fffff
 8004178:	feffffff 	.word	0xfeffffff
 800417c:	fdffffff 	.word	0xfdffffff
 8004180:	dfffffff 	.word	0xdfffffff

08004184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e046      	b.n	8004224 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2288      	movs	r2, #136	@ 0x88
 800419a:	589b      	ldr	r3, [r3, r2]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d107      	bne.n	80041b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2284      	movs	r2, #132	@ 0x84
 80041a4:	2100      	movs	r1, #0
 80041a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7fc ff64 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2288      	movs	r2, #136	@ 0x88
 80041b4:	2124      	movs	r1, #36	@ 0x24
 80041b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2101      	movs	r1, #1
 80041c4:	438a      	bics	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 fc00 	bl	80049d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 f93e 	bl	800445c <UART_SetConfig>
 80041e0:	0003      	movs	r3, r0
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e01c      	b.n	8004224 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	490d      	ldr	r1, [pc, #52]	@ (800422c <HAL_UART_Init+0xa8>)
 80041f6:	400a      	ands	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	212a      	movs	r1, #42	@ 0x2a
 8004206:	438a      	bics	r2, r1
 8004208:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2101      	movs	r1, #1
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0018      	movs	r0, r3
 800421e:	f000 fc8f 	bl	8004b40 <UART_CheckIdleState>
 8004222:	0003      	movs	r3, r0
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}
 800422c:	ffffb7ff 	.word	0xffffb7ff

08004230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	@ 0x28
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	1dbb      	adds	r3, r7, #6
 800423e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2288      	movs	r2, #136	@ 0x88
 8004244:	589b      	ldr	r3, [r3, r2]
 8004246:	2b20      	cmp	r3, #32
 8004248:	d000      	beq.n	800424c <HAL_UART_Transmit+0x1c>
 800424a:	e090      	b.n	800436e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_UART_Transmit+0x2a>
 8004252:	1dbb      	adds	r3, r7, #6
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e088      	b.n	8004370 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	2380      	movs	r3, #128	@ 0x80
 8004264:	015b      	lsls	r3, r3, #5
 8004266:	429a      	cmp	r2, r3
 8004268:	d109      	bne.n	800427e <HAL_UART_Transmit+0x4e>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d105      	bne.n	800427e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2201      	movs	r2, #1
 8004276:	4013      	ands	r3, r2
 8004278:	d001      	beq.n	800427e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e078      	b.n	8004370 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2290      	movs	r2, #144	@ 0x90
 8004282:	2100      	movs	r1, #0
 8004284:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2288      	movs	r2, #136	@ 0x88
 800428a:	2121      	movs	r1, #33	@ 0x21
 800428c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800428e:	f7fc fff9 	bl	8001284 <HAL_GetTick>
 8004292:	0003      	movs	r3, r0
 8004294:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1dba      	adds	r2, r7, #6
 800429a:	2154      	movs	r1, #84	@ 0x54
 800429c:	8812      	ldrh	r2, [r2, #0]
 800429e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1dba      	adds	r2, r7, #6
 80042a4:	2156      	movs	r1, #86	@ 0x56
 80042a6:	8812      	ldrh	r2, [r2, #0]
 80042a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	015b      	lsls	r3, r3, #5
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d108      	bne.n	80042c8 <HAL_UART_Transmit+0x98>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	e003      	b.n	80042d0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042d0:	e030      	b.n	8004334 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	0013      	movs	r3, r2
 80042dc:	2200      	movs	r2, #0
 80042de:	2180      	movs	r1, #128	@ 0x80
 80042e0:	f000 fcd8 	bl	8004c94 <UART_WaitOnFlagUntilTimeout>
 80042e4:	1e03      	subs	r3, r0, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2288      	movs	r2, #136	@ 0x88
 80042ec:	2120      	movs	r1, #32
 80042ee:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e03d      	b.n	8004370 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	001a      	movs	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	05d2      	lsls	r2, r2, #23
 8004306:	0dd2      	lsrs	r2, r2, #23
 8004308:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	3302      	adds	r3, #2
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	e007      	b.n	8004322 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	3301      	adds	r3, #1
 8004320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2256      	movs	r2, #86	@ 0x56
 8004326:	5a9b      	ldrh	r3, [r3, r2]
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b299      	uxth	r1, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2256      	movs	r2, #86	@ 0x56
 8004332:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2256      	movs	r2, #86	@ 0x56
 8004338:	5a9b      	ldrh	r3, [r3, r2]
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1c8      	bne.n	80042d2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	0013      	movs	r3, r2
 800434a:	2200      	movs	r2, #0
 800434c:	2140      	movs	r1, #64	@ 0x40
 800434e:	f000 fca1 	bl	8004c94 <UART_WaitOnFlagUntilTimeout>
 8004352:	1e03      	subs	r3, r0, #0
 8004354:	d005      	beq.n	8004362 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2288      	movs	r2, #136	@ 0x88
 800435a:	2120      	movs	r1, #32
 800435c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e006      	b.n	8004370 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2288      	movs	r2, #136	@ 0x88
 8004366:	2120      	movs	r1, #32
 8004368:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b008      	add	sp, #32
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	1dbb      	adds	r3, r7, #6
 8004384:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	228c      	movs	r2, #140	@ 0x8c
 800438a:	589b      	ldr	r3, [r3, r2]
 800438c:	2b20      	cmp	r3, #32
 800438e:	d14a      	bne.n	8004426 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_UART_Receive_IT+0x26>
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e042      	b.n	8004428 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	2380      	movs	r3, #128	@ 0x80
 80043a8:	015b      	lsls	r3, r3, #5
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d109      	bne.n	80043c2 <HAL_UART_Receive_IT+0x4a>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d105      	bne.n	80043c2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2201      	movs	r2, #1
 80043ba:	4013      	ands	r3, r2
 80043bc:	d001      	beq.n	80043c2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e032      	b.n	8004428 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a18      	ldr	r2, [pc, #96]	@ (8004430 <HAL_UART_Receive_IT+0xb8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d020      	beq.n	8004414 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	2380      	movs	r3, #128	@ 0x80
 80043da:	041b      	lsls	r3, r3, #16
 80043dc:	4013      	ands	r3, r2
 80043de:	d019      	beq.n	8004414 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e0:	f3ef 8310 	mrs	r3, PRIMASK
 80043e4:	613b      	str	r3, [r7, #16]
  return(result);
 80043e6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	2301      	movs	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f383 8810 	msr	PRIMASK, r3
}
 80043f4:	46c0      	nop			@ (mov r8, r8)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2180      	movs	r1, #128	@ 0x80
 8004402:	04c9      	lsls	r1, r1, #19
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f383 8810 	msr	PRIMASK, r3
}
 8004412:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004414:	1dbb      	adds	r3, r7, #6
 8004416:	881a      	ldrh	r2, [r3, #0]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	0018      	movs	r0, r3
 800441e:	f000 fca9 	bl	8004d74 <UART_Start_Receive_IT>
 8004422:	0003      	movs	r3, r0
 8004424:	e000      	b.n	8004428 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b008      	add	sp, #32
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40008000 	.word	0x40008000

08004434 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	000a      	movs	r2, r1
 800444e:	1cbb      	adds	r3, r7, #2
 8004450:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b002      	add	sp, #8
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	b5b0      	push	{r4, r5, r7, lr}
 800445e:	b090      	sub	sp, #64	@ 0x40
 8004460:	af00      	add	r7, sp, #0
 8004462:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004464:	231a      	movs	r3, #26
 8004466:	2220      	movs	r2, #32
 8004468:	189b      	adds	r3, r3, r2
 800446a:	19db      	adds	r3, r3, r7
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	431a      	orrs	r2, r3
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	431a      	orrs	r2, r3
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	4313      	orrs	r3, r2
 8004486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4aaf      	ldr	r2, [pc, #700]	@ (800474c <UART_SetConfig+0x2f0>)
 8004490:	4013      	ands	r3, r2
 8004492:	0019      	movs	r1, r3
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800449a:	430b      	orrs	r3, r1
 800449c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4aaa      	ldr	r2, [pc, #680]	@ (8004750 <UART_SetConfig+0x2f4>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	0018      	movs	r0, r3
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	68d9      	ldr	r1, [r3, #12]
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	0003      	movs	r3, r0
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4aa4      	ldr	r2, [pc, #656]	@ (8004754 <UART_SetConfig+0x2f8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044ce:	4313      	orrs	r3, r2
 80044d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4a9f      	ldr	r2, [pc, #636]	@ (8004758 <UART_SetConfig+0x2fc>)
 80044da:	4013      	ands	r3, r2
 80044dc:	0019      	movs	r1, r3
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	220f      	movs	r2, #15
 80044f0:	4393      	bics	r3, r2
 80044f2:	0018      	movs	r0, r3
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	0003      	movs	r3, r0
 80044fe:	430b      	orrs	r3, r1
 8004500:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a95      	ldr	r2, [pc, #596]	@ (800475c <UART_SetConfig+0x300>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d131      	bne.n	8004570 <UART_SetConfig+0x114>
 800450c:	4b94      	ldr	r3, [pc, #592]	@ (8004760 <UART_SetConfig+0x304>)
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	2203      	movs	r2, #3
 8004512:	4013      	ands	r3, r2
 8004514:	2b03      	cmp	r3, #3
 8004516:	d01d      	beq.n	8004554 <UART_SetConfig+0xf8>
 8004518:	d823      	bhi.n	8004562 <UART_SetConfig+0x106>
 800451a:	2b02      	cmp	r3, #2
 800451c:	d00c      	beq.n	8004538 <UART_SetConfig+0xdc>
 800451e:	d820      	bhi.n	8004562 <UART_SetConfig+0x106>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <UART_SetConfig+0xce>
 8004524:	2b01      	cmp	r3, #1
 8004526:	d00e      	beq.n	8004546 <UART_SetConfig+0xea>
 8004528:	e01b      	b.n	8004562 <UART_SetConfig+0x106>
 800452a:	231b      	movs	r3, #27
 800452c:	2220      	movs	r2, #32
 800452e:	189b      	adds	r3, r3, r2
 8004530:	19db      	adds	r3, r3, r7
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	e0b4      	b.n	80046a2 <UART_SetConfig+0x246>
 8004538:	231b      	movs	r3, #27
 800453a:	2220      	movs	r2, #32
 800453c:	189b      	adds	r3, r3, r2
 800453e:	19db      	adds	r3, r3, r7
 8004540:	2202      	movs	r2, #2
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	e0ad      	b.n	80046a2 <UART_SetConfig+0x246>
 8004546:	231b      	movs	r3, #27
 8004548:	2220      	movs	r2, #32
 800454a:	189b      	adds	r3, r3, r2
 800454c:	19db      	adds	r3, r3, r7
 800454e:	2204      	movs	r2, #4
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e0a6      	b.n	80046a2 <UART_SetConfig+0x246>
 8004554:	231b      	movs	r3, #27
 8004556:	2220      	movs	r2, #32
 8004558:	189b      	adds	r3, r3, r2
 800455a:	19db      	adds	r3, r3, r7
 800455c:	2208      	movs	r2, #8
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e09f      	b.n	80046a2 <UART_SetConfig+0x246>
 8004562:	231b      	movs	r3, #27
 8004564:	2220      	movs	r2, #32
 8004566:	189b      	adds	r3, r3, r2
 8004568:	19db      	adds	r3, r3, r7
 800456a:	2210      	movs	r2, #16
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	e098      	b.n	80046a2 <UART_SetConfig+0x246>
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a7b      	ldr	r2, [pc, #492]	@ (8004764 <UART_SetConfig+0x308>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d131      	bne.n	80045de <UART_SetConfig+0x182>
 800457a:	4b79      	ldr	r3, [pc, #484]	@ (8004760 <UART_SetConfig+0x304>)
 800457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457e:	220c      	movs	r2, #12
 8004580:	4013      	ands	r3, r2
 8004582:	2b0c      	cmp	r3, #12
 8004584:	d01d      	beq.n	80045c2 <UART_SetConfig+0x166>
 8004586:	d823      	bhi.n	80045d0 <UART_SetConfig+0x174>
 8004588:	2b08      	cmp	r3, #8
 800458a:	d00c      	beq.n	80045a6 <UART_SetConfig+0x14a>
 800458c:	d820      	bhi.n	80045d0 <UART_SetConfig+0x174>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <UART_SetConfig+0x13c>
 8004592:	2b04      	cmp	r3, #4
 8004594:	d00e      	beq.n	80045b4 <UART_SetConfig+0x158>
 8004596:	e01b      	b.n	80045d0 <UART_SetConfig+0x174>
 8004598:	231b      	movs	r3, #27
 800459a:	2220      	movs	r2, #32
 800459c:	189b      	adds	r3, r3, r2
 800459e:	19db      	adds	r3, r3, r7
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	e07d      	b.n	80046a2 <UART_SetConfig+0x246>
 80045a6:	231b      	movs	r3, #27
 80045a8:	2220      	movs	r2, #32
 80045aa:	189b      	adds	r3, r3, r2
 80045ac:	19db      	adds	r3, r3, r7
 80045ae:	2202      	movs	r2, #2
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e076      	b.n	80046a2 <UART_SetConfig+0x246>
 80045b4:	231b      	movs	r3, #27
 80045b6:	2220      	movs	r2, #32
 80045b8:	189b      	adds	r3, r3, r2
 80045ba:	19db      	adds	r3, r3, r7
 80045bc:	2204      	movs	r2, #4
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e06f      	b.n	80046a2 <UART_SetConfig+0x246>
 80045c2:	231b      	movs	r3, #27
 80045c4:	2220      	movs	r2, #32
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	19db      	adds	r3, r3, r7
 80045ca:	2208      	movs	r2, #8
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e068      	b.n	80046a2 <UART_SetConfig+0x246>
 80045d0:	231b      	movs	r3, #27
 80045d2:	2220      	movs	r2, #32
 80045d4:	189b      	adds	r3, r3, r2
 80045d6:	19db      	adds	r3, r3, r7
 80045d8:	2210      	movs	r2, #16
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	e061      	b.n	80046a2 <UART_SetConfig+0x246>
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a61      	ldr	r2, [pc, #388]	@ (8004768 <UART_SetConfig+0x30c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d106      	bne.n	80045f6 <UART_SetConfig+0x19a>
 80045e8:	231b      	movs	r3, #27
 80045ea:	2220      	movs	r2, #32
 80045ec:	189b      	adds	r3, r3, r2
 80045ee:	19db      	adds	r3, r3, r7
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e055      	b.n	80046a2 <UART_SetConfig+0x246>
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5c      	ldr	r2, [pc, #368]	@ (800476c <UART_SetConfig+0x310>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d106      	bne.n	800460e <UART_SetConfig+0x1b2>
 8004600:	231b      	movs	r3, #27
 8004602:	2220      	movs	r2, #32
 8004604:	189b      	adds	r3, r3, r2
 8004606:	19db      	adds	r3, r3, r7
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e049      	b.n	80046a2 <UART_SetConfig+0x246>
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a50      	ldr	r2, [pc, #320]	@ (8004754 <UART_SetConfig+0x2f8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d13e      	bne.n	8004696 <UART_SetConfig+0x23a>
 8004618:	4b51      	ldr	r3, [pc, #324]	@ (8004760 <UART_SetConfig+0x304>)
 800461a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800461c:	23c0      	movs	r3, #192	@ 0xc0
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	4013      	ands	r3, r2
 8004622:	22c0      	movs	r2, #192	@ 0xc0
 8004624:	0112      	lsls	r2, r2, #4
 8004626:	4293      	cmp	r3, r2
 8004628:	d027      	beq.n	800467a <UART_SetConfig+0x21e>
 800462a:	22c0      	movs	r2, #192	@ 0xc0
 800462c:	0112      	lsls	r2, r2, #4
 800462e:	4293      	cmp	r3, r2
 8004630:	d82a      	bhi.n	8004688 <UART_SetConfig+0x22c>
 8004632:	2280      	movs	r2, #128	@ 0x80
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	4293      	cmp	r3, r2
 8004638:	d011      	beq.n	800465e <UART_SetConfig+0x202>
 800463a:	2280      	movs	r2, #128	@ 0x80
 800463c:	0112      	lsls	r2, r2, #4
 800463e:	4293      	cmp	r3, r2
 8004640:	d822      	bhi.n	8004688 <UART_SetConfig+0x22c>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <UART_SetConfig+0x1f4>
 8004646:	2280      	movs	r2, #128	@ 0x80
 8004648:	00d2      	lsls	r2, r2, #3
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <UART_SetConfig+0x210>
 800464e:	e01b      	b.n	8004688 <UART_SetConfig+0x22c>
 8004650:	231b      	movs	r3, #27
 8004652:	2220      	movs	r2, #32
 8004654:	189b      	adds	r3, r3, r2
 8004656:	19db      	adds	r3, r3, r7
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e021      	b.n	80046a2 <UART_SetConfig+0x246>
 800465e:	231b      	movs	r3, #27
 8004660:	2220      	movs	r2, #32
 8004662:	189b      	adds	r3, r3, r2
 8004664:	19db      	adds	r3, r3, r7
 8004666:	2202      	movs	r2, #2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e01a      	b.n	80046a2 <UART_SetConfig+0x246>
 800466c:	231b      	movs	r3, #27
 800466e:	2220      	movs	r2, #32
 8004670:	189b      	adds	r3, r3, r2
 8004672:	19db      	adds	r3, r3, r7
 8004674:	2204      	movs	r2, #4
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e013      	b.n	80046a2 <UART_SetConfig+0x246>
 800467a:	231b      	movs	r3, #27
 800467c:	2220      	movs	r2, #32
 800467e:	189b      	adds	r3, r3, r2
 8004680:	19db      	adds	r3, r3, r7
 8004682:	2208      	movs	r2, #8
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	e00c      	b.n	80046a2 <UART_SetConfig+0x246>
 8004688:	231b      	movs	r3, #27
 800468a:	2220      	movs	r2, #32
 800468c:	189b      	adds	r3, r3, r2
 800468e:	19db      	adds	r3, r3, r7
 8004690:	2210      	movs	r2, #16
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	e005      	b.n	80046a2 <UART_SetConfig+0x246>
 8004696:	231b      	movs	r3, #27
 8004698:	2220      	movs	r2, #32
 800469a:	189b      	adds	r3, r3, r2
 800469c:	19db      	adds	r3, r3, r7
 800469e:	2210      	movs	r2, #16
 80046a0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004754 <UART_SetConfig+0x2f8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d000      	beq.n	80046ae <UART_SetConfig+0x252>
 80046ac:	e0a9      	b.n	8004802 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ae:	231b      	movs	r3, #27
 80046b0:	2220      	movs	r2, #32
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	19db      	adds	r3, r3, r7
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d015      	beq.n	80046e8 <UART_SetConfig+0x28c>
 80046bc:	dc18      	bgt.n	80046f0 <UART_SetConfig+0x294>
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d00d      	beq.n	80046de <UART_SetConfig+0x282>
 80046c2:	dc15      	bgt.n	80046f0 <UART_SetConfig+0x294>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <UART_SetConfig+0x272>
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d005      	beq.n	80046d8 <UART_SetConfig+0x27c>
 80046cc:	e010      	b.n	80046f0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ce:	f7fe fcc9 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 80046d2:	0003      	movs	r3, r0
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046d6:	e014      	b.n	8004702 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d8:	4b25      	ldr	r3, [pc, #148]	@ (8004770 <UART_SetConfig+0x314>)
 80046da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046dc:	e011      	b.n	8004702 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046de:	f7fe fc35 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 80046e2:	0003      	movs	r3, r0
 80046e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046e6:	e00c      	b.n	8004702 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e8:	2380      	movs	r3, #128	@ 0x80
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046ee:	e008      	b.n	8004702 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80046f4:	231a      	movs	r3, #26
 80046f6:	2220      	movs	r2, #32
 80046f8:	189b      	adds	r3, r3, r2
 80046fa:	19db      	adds	r3, r3, r7
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
        break;
 8004700:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004704:	2b00      	cmp	r3, #0
 8004706:	d100      	bne.n	800470a <UART_SetConfig+0x2ae>
 8004708:	e14b      	b.n	80049a2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800470e:	4b19      	ldr	r3, [pc, #100]	@ (8004774 <UART_SetConfig+0x318>)
 8004710:	0052      	lsls	r2, r2, #1
 8004712:	5ad3      	ldrh	r3, [r2, r3]
 8004714:	0019      	movs	r1, r3
 8004716:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004718:	f7fb fcfe 	bl	8000118 <__udivsi3>
 800471c:	0003      	movs	r3, r0
 800471e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	0013      	movs	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	189b      	adds	r3, r3, r2
 800472a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800472c:	429a      	cmp	r2, r3
 800472e:	d305      	bcc.n	800473c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004736:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004738:	429a      	cmp	r2, r3
 800473a:	d91d      	bls.n	8004778 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800473c:	231a      	movs	r3, #26
 800473e:	2220      	movs	r2, #32
 8004740:	189b      	adds	r3, r3, r2
 8004742:	19db      	adds	r3, r3, r7
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e12b      	b.n	80049a2 <UART_SetConfig+0x546>
 800474a:	46c0      	nop			@ (mov r8, r8)
 800474c:	cfff69f3 	.word	0xcfff69f3
 8004750:	ffffcfff 	.word	0xffffcfff
 8004754:	40008000 	.word	0x40008000
 8004758:	11fff4ff 	.word	0x11fff4ff
 800475c:	40013800 	.word	0x40013800
 8004760:	40021000 	.word	0x40021000
 8004764:	40004400 	.word	0x40004400
 8004768:	40004800 	.word	0x40004800
 800476c:	40004c00 	.word	0x40004c00
 8004770:	00f42400 	.word	0x00f42400
 8004774:	08006740 	.word	0x08006740
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004784:	4b92      	ldr	r3, [pc, #584]	@ (80049d0 <UART_SetConfig+0x574>)
 8004786:	0052      	lsls	r2, r2, #1
 8004788:	5ad3      	ldrh	r3, [r2, r3]
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	69b8      	ldr	r0, [r7, #24]
 8004796:	69f9      	ldr	r1, [r7, #28]
 8004798:	f7fb fe34 	bl	8000404 <__aeabi_uldivmod>
 800479c:	0002      	movs	r2, r0
 800479e:	000b      	movs	r3, r1
 80047a0:	0e11      	lsrs	r1, r2, #24
 80047a2:	021d      	lsls	r5, r3, #8
 80047a4:	430d      	orrs	r5, r1
 80047a6:	0214      	lsls	r4, r2, #8
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68b8      	ldr	r0, [r7, #8]
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	1900      	adds	r0, r0, r4
 80047ba:	4169      	adcs	r1, r5
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f7fb fe1b 	bl	8000404 <__aeabi_uldivmod>
 80047ce:	0002      	movs	r2, r0
 80047d0:	000b      	movs	r3, r1
 80047d2:	0013      	movs	r3, r2
 80047d4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d8:	23c0      	movs	r3, #192	@ 0xc0
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	429a      	cmp	r2, r3
 80047de:	d309      	bcc.n	80047f4 <UART_SetConfig+0x398>
 80047e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e2:	2380      	movs	r3, #128	@ 0x80
 80047e4:	035b      	lsls	r3, r3, #13
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d204      	bcs.n	80047f4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	e0d6      	b.n	80049a2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80047f4:	231a      	movs	r3, #26
 80047f6:	2220      	movs	r2, #32
 80047f8:	189b      	adds	r3, r3, r2
 80047fa:	19db      	adds	r3, r3, r7
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e0cf      	b.n	80049a2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	2380      	movs	r3, #128	@ 0x80
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	429a      	cmp	r2, r3
 800480c:	d000      	beq.n	8004810 <UART_SetConfig+0x3b4>
 800480e:	e070      	b.n	80048f2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004810:	231b      	movs	r3, #27
 8004812:	2220      	movs	r2, #32
 8004814:	189b      	adds	r3, r3, r2
 8004816:	19db      	adds	r3, r3, r7
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b08      	cmp	r3, #8
 800481c:	d015      	beq.n	800484a <UART_SetConfig+0x3ee>
 800481e:	dc18      	bgt.n	8004852 <UART_SetConfig+0x3f6>
 8004820:	2b04      	cmp	r3, #4
 8004822:	d00d      	beq.n	8004840 <UART_SetConfig+0x3e4>
 8004824:	dc15      	bgt.n	8004852 <UART_SetConfig+0x3f6>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <UART_SetConfig+0x3d4>
 800482a:	2b02      	cmp	r3, #2
 800482c:	d005      	beq.n	800483a <UART_SetConfig+0x3de>
 800482e:	e010      	b.n	8004852 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004830:	f7fe fc18 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8004834:	0003      	movs	r3, r0
 8004836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004838:	e014      	b.n	8004864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800483a:	4b66      	ldr	r3, [pc, #408]	@ (80049d4 <UART_SetConfig+0x578>)
 800483c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800483e:	e011      	b.n	8004864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004840:	f7fe fb84 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8004844:	0003      	movs	r3, r0
 8004846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004848:	e00c      	b.n	8004864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484a:	2380      	movs	r3, #128	@ 0x80
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004850:	e008      	b.n	8004864 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004856:	231a      	movs	r3, #26
 8004858:	2220      	movs	r2, #32
 800485a:	189b      	adds	r3, r3, r2
 800485c:	19db      	adds	r3, r3, r7
 800485e:	2201      	movs	r2, #1
 8004860:	701a      	strb	r2, [r3, #0]
        break;
 8004862:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004866:	2b00      	cmp	r3, #0
 8004868:	d100      	bne.n	800486c <UART_SetConfig+0x410>
 800486a:	e09a      	b.n	80049a2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004870:	4b57      	ldr	r3, [pc, #348]	@ (80049d0 <UART_SetConfig+0x574>)
 8004872:	0052      	lsls	r2, r2, #1
 8004874:	5ad3      	ldrh	r3, [r2, r3]
 8004876:	0019      	movs	r1, r3
 8004878:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800487a:	f7fb fc4d 	bl	8000118 <__udivsi3>
 800487e:	0003      	movs	r3, r0
 8004880:	005a      	lsls	r2, r3, #1
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	18d2      	adds	r2, r2, r3
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	0019      	movs	r1, r3
 8004890:	0010      	movs	r0, r2
 8004892:	f7fb fc41 	bl	8000118 <__udivsi3>
 8004896:	0003      	movs	r3, r0
 8004898:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489c:	2b0f      	cmp	r3, #15
 800489e:	d921      	bls.n	80048e4 <UART_SetConfig+0x488>
 80048a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a2:	2380      	movs	r3, #128	@ 0x80
 80048a4:	025b      	lsls	r3, r3, #9
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d21c      	bcs.n	80048e4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	200e      	movs	r0, #14
 80048b0:	2420      	movs	r4, #32
 80048b2:	1903      	adds	r3, r0, r4
 80048b4:	19db      	adds	r3, r3, r7
 80048b6:	210f      	movs	r1, #15
 80048b8:	438a      	bics	r2, r1
 80048ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2207      	movs	r2, #7
 80048c4:	4013      	ands	r3, r2
 80048c6:	b299      	uxth	r1, r3
 80048c8:	1903      	adds	r3, r0, r4
 80048ca:	19db      	adds	r3, r3, r7
 80048cc:	1902      	adds	r2, r0, r4
 80048ce:	19d2      	adds	r2, r2, r7
 80048d0:	8812      	ldrh	r2, [r2, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	1902      	adds	r2, r0, r4
 80048dc:	19d2      	adds	r2, r2, r7
 80048de:	8812      	ldrh	r2, [r2, #0]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	e05e      	b.n	80049a2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80048e4:	231a      	movs	r3, #26
 80048e6:	2220      	movs	r2, #32
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	19db      	adds	r3, r3, r7
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e057      	b.n	80049a2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048f2:	231b      	movs	r3, #27
 80048f4:	2220      	movs	r2, #32
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	19db      	adds	r3, r3, r7
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d015      	beq.n	800492c <UART_SetConfig+0x4d0>
 8004900:	dc18      	bgt.n	8004934 <UART_SetConfig+0x4d8>
 8004902:	2b04      	cmp	r3, #4
 8004904:	d00d      	beq.n	8004922 <UART_SetConfig+0x4c6>
 8004906:	dc15      	bgt.n	8004934 <UART_SetConfig+0x4d8>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <UART_SetConfig+0x4b6>
 800490c:	2b02      	cmp	r3, #2
 800490e:	d005      	beq.n	800491c <UART_SetConfig+0x4c0>
 8004910:	e010      	b.n	8004934 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004912:	f7fe fba7 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8004916:	0003      	movs	r3, r0
 8004918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800491a:	e014      	b.n	8004946 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b2d      	ldr	r3, [pc, #180]	@ (80049d4 <UART_SetConfig+0x578>)
 800491e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004920:	e011      	b.n	8004946 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7fe fb13 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8004926:	0003      	movs	r3, r0
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800492a:	e00c      	b.n	8004946 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492c:	2380      	movs	r3, #128	@ 0x80
 800492e:	021b      	lsls	r3, r3, #8
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004932:	e008      	b.n	8004946 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004938:	231a      	movs	r3, #26
 800493a:	2220      	movs	r2, #32
 800493c:	189b      	adds	r3, r3, r2
 800493e:	19db      	adds	r3, r3, r7
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]
        break;
 8004944:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02a      	beq.n	80049a2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004950:	4b1f      	ldr	r3, [pc, #124]	@ (80049d0 <UART_SetConfig+0x574>)
 8004952:	0052      	lsls	r2, r2, #1
 8004954:	5ad3      	ldrh	r3, [r2, r3]
 8004956:	0019      	movs	r1, r3
 8004958:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800495a:	f7fb fbdd 	bl	8000118 <__udivsi3>
 800495e:	0003      	movs	r3, r0
 8004960:	001a      	movs	r2, r3
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	18d2      	adds	r2, r2, r3
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	0019      	movs	r1, r3
 8004970:	0010      	movs	r0, r2
 8004972:	f7fb fbd1 	bl	8000118 <__udivsi3>
 8004976:	0003      	movs	r3, r0
 8004978:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d90a      	bls.n	8004996 <UART_SetConfig+0x53a>
 8004980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004982:	2380      	movs	r3, #128	@ 0x80
 8004984:	025b      	lsls	r3, r3, #9
 8004986:	429a      	cmp	r2, r3
 8004988:	d205      	bcs.n	8004996 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	b29a      	uxth	r2, r3
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	e005      	b.n	80049a2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004996:	231a      	movs	r3, #26
 8004998:	2220      	movs	r2, #32
 800499a:	189b      	adds	r3, r3, r2
 800499c:	19db      	adds	r3, r3, r7
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	226a      	movs	r2, #106	@ 0x6a
 80049a6:	2101      	movs	r1, #1
 80049a8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	2268      	movs	r2, #104	@ 0x68
 80049ae:	2101      	movs	r1, #1
 80049b0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	2200      	movs	r2, #0
 80049b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	2200      	movs	r2, #0
 80049bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80049be:	231a      	movs	r3, #26
 80049c0:	2220      	movs	r2, #32
 80049c2:	189b      	adds	r3, r3, r2
 80049c4:	19db      	adds	r3, r3, r7
 80049c6:	781b      	ldrb	r3, [r3, #0]
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b010      	add	sp, #64	@ 0x40
 80049ce:	bdb0      	pop	{r4, r5, r7, pc}
 80049d0:	08006740 	.word	0x08006740
 80049d4:	00f42400 	.word	0x00f42400

080049d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	2208      	movs	r2, #8
 80049e6:	4013      	ands	r3, r2
 80049e8:	d00b      	beq.n	8004a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a4a      	ldr	r2, [pc, #296]	@ (8004b1c <UART_AdvFeatureConfig+0x144>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	0019      	movs	r1, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a06:	2201      	movs	r2, #1
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4a43      	ldr	r2, [pc, #268]	@ (8004b20 <UART_AdvFeatureConfig+0x148>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	0019      	movs	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	2202      	movs	r2, #2
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d00b      	beq.n	8004a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4a3b      	ldr	r2, [pc, #236]	@ (8004b24 <UART_AdvFeatureConfig+0x14c>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	0019      	movs	r1, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4a34      	ldr	r2, [pc, #208]	@ (8004b28 <UART_AdvFeatureConfig+0x150>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a2c      	ldr	r2, [pc, #176]	@ (8004b2c <UART_AdvFeatureConfig+0x154>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8e:	2220      	movs	r2, #32
 8004a90:	4013      	ands	r3, r2
 8004a92:	d00b      	beq.n	8004aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4a25      	ldr	r2, [pc, #148]	@ (8004b30 <UART_AdvFeatureConfig+0x158>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	2240      	movs	r2, #64	@ 0x40
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b34 <UART_AdvFeatureConfig+0x15c>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	035b      	lsls	r3, r3, #13
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d10b      	bne.n	8004af2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a15      	ldr	r2, [pc, #84]	@ (8004b38 <UART_AdvFeatureConfig+0x160>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	2280      	movs	r2, #128	@ 0x80
 8004af8:	4013      	ands	r3, r2
 8004afa:	d00b      	beq.n	8004b14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4a0e      	ldr	r2, [pc, #56]	@ (8004b3c <UART_AdvFeatureConfig+0x164>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	0019      	movs	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  }
}
 8004b14:	46c0      	nop			@ (mov r8, r8)
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b002      	add	sp, #8
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	ffff7fff 	.word	0xffff7fff
 8004b20:	fffdffff 	.word	0xfffdffff
 8004b24:	fffeffff 	.word	0xfffeffff
 8004b28:	fffbffff 	.word	0xfffbffff
 8004b2c:	ffffefff 	.word	0xffffefff
 8004b30:	ffffdfff 	.word	0xffffdfff
 8004b34:	ffefffff 	.word	0xffefffff
 8004b38:	ff9fffff 	.word	0xff9fffff
 8004b3c:	fff7ffff 	.word	0xfff7ffff

08004b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b092      	sub	sp, #72	@ 0x48
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2290      	movs	r2, #144	@ 0x90
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b50:	f7fc fb98 	bl	8001284 <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2208      	movs	r2, #8
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d12d      	bne.n	8004bc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b68:	2280      	movs	r2, #128	@ 0x80
 8004b6a:	0391      	lsls	r1, r2, #14
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4a47      	ldr	r2, [pc, #284]	@ (8004c8c <UART_CheckIdleState+0x14c>)
 8004b70:	9200      	str	r2, [sp, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f000 f88e 	bl	8004c94 <UART_WaitOnFlagUntilTimeout>
 8004b78:	1e03      	subs	r3, r0, #0
 8004b7a:	d022      	beq.n	8004bc2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b80:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b86:	2301      	movs	r3, #1
 8004b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	f383 8810 	msr	PRIMASK, r3
}
 8004b90:	46c0      	nop			@ (mov r8, r8)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2180      	movs	r1, #128	@ 0x80
 8004b9e:	438a      	bics	r2, r1
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba8:	f383 8810 	msr	PRIMASK, r3
}
 8004bac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2288      	movs	r2, #136	@ 0x88
 8004bb2:	2120      	movs	r1, #32
 8004bb4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2284      	movs	r2, #132	@ 0x84
 8004bba:	2100      	movs	r1, #0
 8004bbc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e060      	b.n	8004c84 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d146      	bne.n	8004c5e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bd2:	2280      	movs	r2, #128	@ 0x80
 8004bd4:	03d1      	lsls	r1, r2, #15
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8004c8c <UART_CheckIdleState+0x14c>)
 8004bda:	9200      	str	r2, [sp, #0]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f000 f859 	bl	8004c94 <UART_WaitOnFlagUntilTimeout>
 8004be2:	1e03      	subs	r3, r0, #0
 8004be4:	d03b      	beq.n	8004c5e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bea:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f383 8810 	msr	PRIMASK, r3
}
 8004bfa:	46c0      	nop			@ (mov r8, r8)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4922      	ldr	r1, [pc, #136]	@ (8004c90 <UART_CheckIdleState+0x150>)
 8004c08:	400a      	ands	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f383 8810 	msr	PRIMASK, r3
}
 8004c16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c18:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c22:	2301      	movs	r3, #1
 8004c24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			@ (mov r8, r8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	438a      	bics	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	228c      	movs	r2, #140	@ 0x8c
 8004c4e:	2120      	movs	r1, #32
 8004c50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2284      	movs	r2, #132	@ 0x84
 8004c56:	2100      	movs	r1, #0
 8004c58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e012      	b.n	8004c84 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2288      	movs	r2, #136	@ 0x88
 8004c62:	2120      	movs	r1, #32
 8004c64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	228c      	movs	r2, #140	@ 0x8c
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2284      	movs	r2, #132	@ 0x84
 8004c7e:	2100      	movs	r1, #0
 8004c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	0018      	movs	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b010      	add	sp, #64	@ 0x40
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	01ffffff 	.word	0x01ffffff
 8004c90:	fffffedf 	.word	0xfffffedf

08004c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	1dfb      	adds	r3, r7, #7
 8004ca2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca4:	e051      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	d04e      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cac:	f7fc faea 	bl	8001284 <HAL_GetTick>
 8004cb0:	0002      	movs	r2, r0
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d302      	bcc.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e051      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2204      	movs	r2, #4
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d03b      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b80      	cmp	r3, #128	@ 0x80
 8004cd6:	d038      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b40      	cmp	r3, #64	@ 0x40
 8004cdc:	d035      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d111      	bne.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f000 f960 	bl	8004fbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2290      	movs	r2, #144	@ 0x90
 8004d00:	2108      	movs	r1, #8
 8004d02:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2284      	movs	r2, #132	@ 0x84
 8004d08:	2100      	movs	r1, #0
 8004d0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e02c      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69da      	ldr	r2, [r3, #28]
 8004d16:	2380      	movs	r3, #128	@ 0x80
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	2380      	movs	r3, #128	@ 0x80
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d112      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2280      	movs	r2, #128	@ 0x80
 8004d2a:	0112      	lsls	r2, r2, #4
 8004d2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f000 f943 	bl	8004fbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2290      	movs	r2, #144	@ 0x90
 8004d3a:	2120      	movs	r1, #32
 8004d3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2284      	movs	r2, #132	@ 0x84
 8004d42:	2100      	movs	r1, #0
 8004d44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e00f      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	4013      	ands	r3, r2
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	425a      	negs	r2, r3
 8004d5a:	4153      	adcs	r3, r2
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	001a      	movs	r2, r3
 8004d60:	1dfb      	adds	r3, r7, #7
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d09e      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b004      	add	sp, #16
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b098      	sub	sp, #96	@ 0x60
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	1dbb      	adds	r3, r7, #6
 8004d80:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1dba      	adds	r2, r7, #6
 8004d8c:	215c      	movs	r1, #92	@ 0x5c
 8004d8e:	8812      	ldrh	r2, [r2, #0]
 8004d90:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1dba      	adds	r2, r7, #6
 8004d96:	215e      	movs	r1, #94	@ 0x5e
 8004d98:	8812      	ldrh	r2, [r2, #0]
 8004d9a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	015b      	lsls	r3, r3, #5
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d10d      	bne.n	8004dca <UART_Start_Receive_IT+0x56>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d104      	bne.n	8004dc0 <UART_Start_Receive_IT+0x4c>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2260      	movs	r2, #96	@ 0x60
 8004dba:	497b      	ldr	r1, [pc, #492]	@ (8004fa8 <UART_Start_Receive_IT+0x234>)
 8004dbc:	5299      	strh	r1, [r3, r2]
 8004dbe:	e02e      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2260      	movs	r2, #96	@ 0x60
 8004dc4:	21ff      	movs	r1, #255	@ 0xff
 8004dc6:	5299      	strh	r1, [r3, r2]
 8004dc8:	e029      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10d      	bne.n	8004dee <UART_Start_Receive_IT+0x7a>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <UART_Start_Receive_IT+0x70>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2260      	movs	r2, #96	@ 0x60
 8004dde:	21ff      	movs	r1, #255	@ 0xff
 8004de0:	5299      	strh	r1, [r3, r2]
 8004de2:	e01c      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2260      	movs	r2, #96	@ 0x60
 8004de8:	217f      	movs	r1, #127	@ 0x7f
 8004dea:	5299      	strh	r1, [r3, r2]
 8004dec:	e017      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	2380      	movs	r3, #128	@ 0x80
 8004df4:	055b      	lsls	r3, r3, #21
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d10d      	bne.n	8004e16 <UART_Start_Receive_IT+0xa2>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d104      	bne.n	8004e0c <UART_Start_Receive_IT+0x98>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2260      	movs	r2, #96	@ 0x60
 8004e06:	217f      	movs	r1, #127	@ 0x7f
 8004e08:	5299      	strh	r1, [r3, r2]
 8004e0a:	e008      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2260      	movs	r2, #96	@ 0x60
 8004e10:	213f      	movs	r1, #63	@ 0x3f
 8004e12:	5299      	strh	r1, [r3, r2]
 8004e14:	e003      	b.n	8004e1e <UART_Start_Receive_IT+0xaa>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2260      	movs	r2, #96	@ 0x60
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2290      	movs	r2, #144	@ 0x90
 8004e22:	2100      	movs	r1, #0
 8004e24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	228c      	movs	r2, #140	@ 0x8c
 8004e2a:	2122      	movs	r1, #34	@ 0x22
 8004e2c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e32:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e38:	2301      	movs	r3, #1
 8004e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e3e:	f383 8810 	msr	PRIMASK, r3
}
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2101      	movs	r1, #1
 8004e50:	430a      	orrs	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
 8004e54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e5a:	f383 8810 	msr	PRIMASK, r3
}
 8004e5e:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004e64:	2380      	movs	r3, #128	@ 0x80
 8004e66:	059b      	lsls	r3, r3, #22
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d150      	bne.n	8004f0e <UART_Start_Receive_IT+0x19a>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2268      	movs	r2, #104	@ 0x68
 8004e70:	5a9b      	ldrh	r3, [r3, r2]
 8004e72:	1dba      	adds	r2, r7, #6
 8004e74:	8812      	ldrh	r2, [r2, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d349      	bcc.n	8004f0e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	2380      	movs	r3, #128	@ 0x80
 8004e80:	015b      	lsls	r3, r3, #5
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d107      	bne.n	8004e96 <UART_Start_Receive_IT+0x122>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a46      	ldr	r2, [pc, #280]	@ (8004fac <UART_Start_Receive_IT+0x238>)
 8004e92:	675a      	str	r2, [r3, #116]	@ 0x74
 8004e94:	e002      	b.n	8004e9c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a45      	ldr	r2, [pc, #276]	@ (8004fb0 <UART_Start_Receive_IT+0x23c>)
 8004e9a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d019      	beq.n	8004ed8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004eae:	2301      	movs	r3, #1
 8004eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			@ (mov r8, r8)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2180      	movs	r1, #128	@ 0x80
 8004ec6:	0049      	lsls	r1, r1, #1
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8004edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ee0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	f383 8810 	msr	PRIMASK, r3
}
 8004eec:	46c0      	nop			@ (mov r8, r8)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2180      	movs	r1, #128	@ 0x80
 8004efa:	0549      	lsls	r1, r1, #21
 8004efc:	430a      	orrs	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f02:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f06:	f383 8810 	msr	PRIMASK, r3
}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	e047      	b.n	8004f9e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	2380      	movs	r3, #128	@ 0x80
 8004f14:	015b      	lsls	r3, r3, #5
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d107      	bne.n	8004f2a <UART_Start_Receive_IT+0x1b6>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a23      	ldr	r2, [pc, #140]	@ (8004fb4 <UART_Start_Receive_IT+0x240>)
 8004f26:	675a      	str	r2, [r3, #116]	@ 0x74
 8004f28:	e002      	b.n	8004f30 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4a22      	ldr	r2, [pc, #136]	@ (8004fb8 <UART_Start_Receive_IT+0x244>)
 8004f2e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d019      	beq.n	8004f6c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f38:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f3e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f42:	2301      	movs	r3, #1
 8004f44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f383 8810 	msr	PRIMASK, r3
}
 8004f4c:	46c0      	nop			@ (mov r8, r8)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2190      	movs	r1, #144	@ 0x90
 8004f5a:	0049      	lsls	r1, r1, #1
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	f383 8810 	msr	PRIMASK, r3
}
 8004f6a:	e018      	b.n	8004f9e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f70:	613b      	str	r3, [r7, #16]
  return(result);
 8004f72:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f74:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f76:	2301      	movs	r3, #1
 8004f78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f383 8810 	msr	PRIMASK, r3
}
 8004f80:	46c0      	nop			@ (mov r8, r8)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2120      	movs	r1, #32
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f383 8810 	msr	PRIMASK, r3
}
 8004f9c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b018      	add	sp, #96	@ 0x60
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	000001ff 	.word	0x000001ff
 8004fac:	08005751 	.word	0x08005751
 8004fb0:	08005411 	.word	0x08005411
 8004fb4:	0800524d 	.word	0x0800524d
 8004fb8:	08005089 	.word	0x08005089

08004fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	@ 0x38
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc8:	617b      	str	r3, [r7, #20]
  return(result);
 8004fca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fce:	2301      	movs	r3, #1
 8004fd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f383 8810 	msr	PRIMASK, r3
}
 8004fd8:	46c0      	nop			@ (mov r8, r8)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4926      	ldr	r1, [pc, #152]	@ (8005080 <UART_EndRxTransfer+0xc4>)
 8004fe6:	400a      	ands	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f383 8810 	msr	PRIMASK, r3
}
 8004ff4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8004ffa:	623b      	str	r3, [r7, #32]
  return(result);
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ffe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005000:	2301      	movs	r3, #1
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	f383 8810 	msr	PRIMASK, r3
}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	491b      	ldr	r1, [pc, #108]	@ (8005084 <UART_EndRxTransfer+0xc8>)
 8005018:	400a      	ands	r2, r1
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005022:	f383 8810 	msr	PRIMASK, r3
}
 8005026:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d118      	bne.n	8005062 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005030:	f3ef 8310 	mrs	r3, PRIMASK
 8005034:	60bb      	str	r3, [r7, #8]
  return(result);
 8005036:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503a:	2301      	movs	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f383 8810 	msr	PRIMASK, r3
}
 8005044:	46c0      	nop			@ (mov r8, r8)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2110      	movs	r1, #16
 8005052:	438a      	bics	r2, r1
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005058:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f383 8810 	msr	PRIMASK, r3
}
 8005060:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	228c      	movs	r2, #140	@ 0x8c
 8005066:	2120      	movs	r1, #32
 8005068:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	b00e      	add	sp, #56	@ 0x38
 800507c:	bd80      	pop	{r7, pc}
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	fffffedf 	.word	0xfffffedf
 8005084:	effffffe 	.word	0xeffffffe

08005088 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b094      	sub	sp, #80	@ 0x50
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005090:	204e      	movs	r0, #78	@ 0x4e
 8005092:	183b      	adds	r3, r7, r0
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	2160      	movs	r1, #96	@ 0x60
 8005098:	5a52      	ldrh	r2, [r2, r1]
 800509a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	228c      	movs	r2, #140	@ 0x8c
 80050a0:	589b      	ldr	r3, [r3, r2]
 80050a2:	2b22      	cmp	r3, #34	@ 0x22
 80050a4:	d000      	beq.n	80050a8 <UART_RxISR_8BIT+0x20>
 80050a6:	e0bf      	b.n	8005228 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050ae:	214c      	movs	r1, #76	@ 0x4c
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050b4:	187b      	adds	r3, r7, r1
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	183b      	adds	r3, r7, r0
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b2d9      	uxtb	r1, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c4:	400a      	ands	r2, r1
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	225e      	movs	r2, #94	@ 0x5e
 80050d8:	5a9b      	ldrh	r3, [r3, r2]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b299      	uxth	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	225e      	movs	r2, #94	@ 0x5e
 80050e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	225e      	movs	r2, #94	@ 0x5e
 80050ea:	5a9b      	ldrh	r3, [r3, r2]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d000      	beq.n	80050f4 <UART_RxISR_8BIT+0x6c>
 80050f2:	e0a1      	b.n	8005238 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f4:	f3ef 8310 	mrs	r3, PRIMASK
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050fe:	2301      	movs	r3, #1
 8005100:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			@ (mov r8, r8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	494a      	ldr	r1, [pc, #296]	@ (8005240 <UART_RxISR_8BIT+0x1b8>)
 8005116:	400a      	ands	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005120:	f383 8810 	msr	PRIMASK, r3
}
 8005124:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005126:	f3ef 8310 	mrs	r3, PRIMASK
 800512a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005130:	2301      	movs	r3, #1
 8005132:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			@ (mov r8, r8)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2101      	movs	r1, #1
 8005148:	438a      	bics	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005152:	f383 8810 	msr	PRIMASK, r3
}
 8005156:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	228c      	movs	r2, #140	@ 0x8c
 800515c:	2120      	movs	r1, #32
 800515e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a34      	ldr	r2, [pc, #208]	@ (8005244 <UART_RxISR_8BIT+0x1bc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01f      	beq.n	80051b6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	2380      	movs	r3, #128	@ 0x80
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	4013      	ands	r3, r2
 8005182:	d018      	beq.n	80051b6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005184:	f3ef 8310 	mrs	r3, PRIMASK
 8005188:	61bb      	str	r3, [r7, #24]
  return(result);
 800518a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800518c:	643b      	str	r3, [r7, #64]	@ 0x40
 800518e:	2301      	movs	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f383 8810 	msr	PRIMASK, r3
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4928      	ldr	r1, [pc, #160]	@ (8005248 <UART_RxISR_8BIT+0x1c0>)
 80051a6:	400a      	ands	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	f383 8810 	msr	PRIMASK, r3
}
 80051b4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d12f      	bne.n	800521e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c4:	f3ef 8310 	mrs	r3, PRIMASK
 80051c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80051ca:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ce:	2301      	movs	r3, #1
 80051d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f383 8810 	msr	PRIMASK, r3
}
 80051d8:	46c0      	nop			@ (mov r8, r8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2110      	movs	r1, #16
 80051e6:	438a      	bics	r2, r1
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f383 8810 	msr	PRIMASK, r3
}
 80051f4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2210      	movs	r2, #16
 80051fe:	4013      	ands	r3, r2
 8005200:	2b10      	cmp	r3, #16
 8005202:	d103      	bne.n	800520c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2210      	movs	r2, #16
 800520a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	225c      	movs	r2, #92	@ 0x5c
 8005210:	5a9a      	ldrh	r2, [r3, r2]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0011      	movs	r1, r2
 8005216:	0018      	movs	r0, r3
 8005218:	f7ff f914 	bl	8004444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800521c:	e00c      	b.n	8005238 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	0018      	movs	r0, r3
 8005222:	f7fb fb85 	bl	8000930 <HAL_UART_RxCpltCallback>
}
 8005226:	e007      	b.n	8005238 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2108      	movs	r1, #8
 8005234:	430a      	orrs	r2, r1
 8005236:	619a      	str	r2, [r3, #24]
}
 8005238:	46c0      	nop			@ (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	b014      	add	sp, #80	@ 0x50
 800523e:	bd80      	pop	{r7, pc}
 8005240:	fffffedf 	.word	0xfffffedf
 8005244:	40008000 	.word	0x40008000
 8005248:	fbffffff 	.word	0xfbffffff

0800524c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b094      	sub	sp, #80	@ 0x50
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005254:	204e      	movs	r0, #78	@ 0x4e
 8005256:	183b      	adds	r3, r7, r0
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	2160      	movs	r1, #96	@ 0x60
 800525c:	5a52      	ldrh	r2, [r2, r1]
 800525e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	228c      	movs	r2, #140	@ 0x8c
 8005264:	589b      	ldr	r3, [r3, r2]
 8005266:	2b22      	cmp	r3, #34	@ 0x22
 8005268:	d000      	beq.n	800526c <UART_RxISR_16BIT+0x20>
 800526a:	e0bf      	b.n	80053ec <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005272:	214c      	movs	r1, #76	@ 0x4c
 8005274:	187b      	adds	r3, r7, r1
 8005276:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800527e:	187b      	adds	r3, r7, r1
 8005280:	183a      	adds	r2, r7, r0
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	8812      	ldrh	r2, [r2, #0]
 8005286:	4013      	ands	r3, r2
 8005288:	b29a      	uxth	r2, r3
 800528a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800528c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005292:	1c9a      	adds	r2, r3, #2
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	225e      	movs	r2, #94	@ 0x5e
 800529c:	5a9b      	ldrh	r3, [r3, r2]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b299      	uxth	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	225e      	movs	r2, #94	@ 0x5e
 80052a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	225e      	movs	r2, #94	@ 0x5e
 80052ae:	5a9b      	ldrh	r3, [r3, r2]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d000      	beq.n	80052b8 <UART_RxISR_16BIT+0x6c>
 80052b6:	e0a1      	b.n	80053fc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b8:	f3ef 8310 	mrs	r3, PRIMASK
 80052bc:	623b      	str	r3, [r7, #32]
  return(result);
 80052be:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052c2:	2301      	movs	r3, #1
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	f383 8810 	msr	PRIMASK, r3
}
 80052cc:	46c0      	nop			@ (mov r8, r8)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	494a      	ldr	r1, [pc, #296]	@ (8005404 <UART_RxISR_16BIT+0x1b8>)
 80052da:	400a      	ands	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ea:	f3ef 8310 	mrs	r3, PRIMASK
 80052ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80052f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f4:	2301      	movs	r3, #1
 80052f6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	f383 8810 	msr	PRIMASK, r3
}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2101      	movs	r1, #1
 800530c:	438a      	bics	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005316:	f383 8810 	msr	PRIMASK, r3
}
 800531a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	228c      	movs	r2, #140	@ 0x8c
 8005320:	2120      	movs	r1, #32
 8005322:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a34      	ldr	r2, [pc, #208]	@ (8005408 <UART_RxISR_16BIT+0x1bc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01f      	beq.n	800537a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	2380      	movs	r3, #128	@ 0x80
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	4013      	ands	r3, r2
 8005346:	d018      	beq.n	800537a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005348:	f3ef 8310 	mrs	r3, PRIMASK
 800534c:	617b      	str	r3, [r7, #20]
  return(result);
 800534e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005352:	2301      	movs	r3, #1
 8005354:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f383 8810 	msr	PRIMASK, r3
}
 800535c:	46c0      	nop			@ (mov r8, r8)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4928      	ldr	r1, [pc, #160]	@ (800540c <UART_RxISR_16BIT+0x1c0>)
 800536a:	400a      	ands	r2, r1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005370:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f383 8810 	msr	PRIMASK, r3
}
 8005378:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800537e:	2b01      	cmp	r3, #1
 8005380:	d12f      	bne.n	80053e2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005388:	f3ef 8310 	mrs	r3, PRIMASK
 800538c:	60bb      	str	r3, [r7, #8]
  return(result);
 800538e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005390:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005392:	2301      	movs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f383 8810 	msr	PRIMASK, r3
}
 800539c:	46c0      	nop			@ (mov r8, r8)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2110      	movs	r1, #16
 80053aa:	438a      	bics	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f383 8810 	msr	PRIMASK, r3
}
 80053b8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	2210      	movs	r2, #16
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d103      	bne.n	80053d0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2210      	movs	r2, #16
 80053ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	225c      	movs	r2, #92	@ 0x5c
 80053d4:	5a9a      	ldrh	r2, [r3, r2]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	0011      	movs	r1, r2
 80053da:	0018      	movs	r0, r3
 80053dc:	f7ff f832 	bl	8004444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053e0:	e00c      	b.n	80053fc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f7fb faa3 	bl	8000930 <HAL_UART_RxCpltCallback>
}
 80053ea:	e007      	b.n	80053fc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2108      	movs	r1, #8
 80053f8:	430a      	orrs	r2, r1
 80053fa:	619a      	str	r2, [r3, #24]
}
 80053fc:	46c0      	nop			@ (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b014      	add	sp, #80	@ 0x50
 8005402:	bd80      	pop	{r7, pc}
 8005404:	fffffedf 	.word	0xfffffedf
 8005408:	40008000 	.word	0x40008000
 800540c:	fbffffff 	.word	0xfbffffff

08005410 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b0a0      	sub	sp, #128	@ 0x80
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005418:	237a      	movs	r3, #122	@ 0x7a
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	2160      	movs	r1, #96	@ 0x60
 8005420:	5a52      	ldrh	r2, [r2, r1]
 8005422:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	228c      	movs	r2, #140	@ 0x8c
 8005440:	589b      	ldr	r3, [r3, r2]
 8005442:	2b22      	cmp	r3, #34	@ 0x22
 8005444:	d000      	beq.n	8005448 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005446:	e16a      	b.n	800571e <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005448:	236e      	movs	r3, #110	@ 0x6e
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	2168      	movs	r1, #104	@ 0x68
 8005450:	5a52      	ldrh	r2, [r2, r1]
 8005452:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005454:	e111      	b.n	800567a <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800545c:	216c      	movs	r1, #108	@ 0x6c
 800545e:	187b      	adds	r3, r7, r1
 8005460:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005462:	187b      	adds	r3, r7, r1
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	237a      	movs	r3, #122	@ 0x7a
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b2d9      	uxtb	r1, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005474:	400a      	ands	r2, r1
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	225e      	movs	r2, #94	@ 0x5e
 8005488:	5a9b      	ldrh	r3, [r3, r2]
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b299      	uxth	r1, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	225e      	movs	r2, #94	@ 0x5e
 8005494:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800549e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054a0:	2207      	movs	r2, #7
 80054a2:	4013      	ands	r3, r2
 80054a4:	d049      	beq.n	800553a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054a8:	2201      	movs	r2, #1
 80054aa:	4013      	ands	r3, r2
 80054ac:	d010      	beq.n	80054d0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80054ae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80054b0:	2380      	movs	r3, #128	@ 0x80
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	4013      	ands	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2201      	movs	r2, #1
 80054be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2290      	movs	r2, #144	@ 0x90
 80054c4:	589b      	ldr	r3, [r3, r2]
 80054c6:	2201      	movs	r2, #1
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2190      	movs	r1, #144	@ 0x90
 80054ce:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054d2:	2202      	movs	r2, #2
 80054d4:	4013      	ands	r3, r2
 80054d6:	d00f      	beq.n	80054f8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80054d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054da:	2201      	movs	r2, #1
 80054dc:	4013      	ands	r3, r2
 80054de:	d00b      	beq.n	80054f8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2202      	movs	r2, #2
 80054e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2290      	movs	r2, #144	@ 0x90
 80054ec:	589b      	ldr	r3, [r3, r2]
 80054ee:	2204      	movs	r2, #4
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2190      	movs	r1, #144	@ 0x90
 80054f6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054fa:	2204      	movs	r2, #4
 80054fc:	4013      	ands	r3, r2
 80054fe:	d00f      	beq.n	8005520 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005500:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005502:	2201      	movs	r2, #1
 8005504:	4013      	ands	r3, r2
 8005506:	d00b      	beq.n	8005520 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2204      	movs	r2, #4
 800550e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2290      	movs	r2, #144	@ 0x90
 8005514:	589b      	ldr	r3, [r3, r2]
 8005516:	2202      	movs	r2, #2
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2190      	movs	r1, #144	@ 0x90
 800551e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2290      	movs	r2, #144	@ 0x90
 8005524:	589b      	ldr	r3, [r3, r2]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	0018      	movs	r0, r3
 800552e:	f7fe ff81 	bl	8004434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2290      	movs	r2, #144	@ 0x90
 8005536:	2100      	movs	r1, #0
 8005538:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	225e      	movs	r2, #94	@ 0x5e
 800553e:	5a9b      	ldrh	r3, [r3, r2]
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d000      	beq.n	8005548 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005546:	e098      	b.n	800567a <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005548:	f3ef 8310 	mrs	r3, PRIMASK
 800554c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800554e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005550:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005552:	2301      	movs	r3, #1
 8005554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005558:	f383 8810 	msr	PRIMASK, r3
}
 800555c:	46c0      	nop			@ (mov r8, r8)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4973      	ldr	r1, [pc, #460]	@ (8005738 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800556a:	400a      	ands	r2, r1
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005570:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005574:	f383 8810 	msr	PRIMASK, r3
}
 8005578:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800557a:	f3ef 8310 	mrs	r3, PRIMASK
 800557e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005582:	667b      	str	r3, [r7, #100]	@ 0x64
 8005584:	2301      	movs	r3, #1
 8005586:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800558a:	f383 8810 	msr	PRIMASK, r3
}
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4968      	ldr	r1, [pc, #416]	@ (800573c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800559c:	400a      	ands	r2, r1
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055a6:	f383 8810 	msr	PRIMASK, r3
}
 80055aa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	228c      	movs	r2, #140	@ 0x8c
 80055b0:	2120      	movs	r1, #32
 80055b2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a5e      	ldr	r2, [pc, #376]	@ (8005740 <UART_RxISR_8BIT_FIFOEN+0x330>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01f      	beq.n	800560a <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	2380      	movs	r3, #128	@ 0x80
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	4013      	ands	r3, r2
 80055d6:	d018      	beq.n	800560a <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d8:	f3ef 8310 	mrs	r3, PRIMASK
 80055dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80055de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055e2:	2301      	movs	r3, #1
 80055e4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	f383 8810 	msr	PRIMASK, r3
}
 80055ec:	46c0      	nop			@ (mov r8, r8)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4952      	ldr	r1, [pc, #328]	@ (8005744 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80055fa:	400a      	ands	r2, r1
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005600:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005604:	f383 8810 	msr	PRIMASK, r3
}
 8005608:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d12f      	bne.n	8005672 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005618:	f3ef 8310 	mrs	r3, PRIMASK
 800561c:	623b      	str	r3, [r7, #32]
  return(result);
 800561e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005620:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005622:	2301      	movs	r3, #1
 8005624:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	f383 8810 	msr	PRIMASK, r3
}
 800562c:	46c0      	nop			@ (mov r8, r8)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2110      	movs	r1, #16
 800563a:	438a      	bics	r2, r1
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005640:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005644:	f383 8810 	msr	PRIMASK, r3
}
 8005648:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	2210      	movs	r2, #16
 8005652:	4013      	ands	r3, r2
 8005654:	2b10      	cmp	r3, #16
 8005656:	d103      	bne.n	8005660 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2210      	movs	r2, #16
 800565e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	225c      	movs	r2, #92	@ 0x5c
 8005664:	5a9a      	ldrh	r2, [r3, r2]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0011      	movs	r1, r2
 800566a:	0018      	movs	r0, r3
 800566c:	f7fe feea 	bl	8004444 <HAL_UARTEx_RxEventCallback>
 8005670:	e003      	b.n	800567a <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	0018      	movs	r0, r3
 8005676:	f7fb f95b 	bl	8000930 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800567a:	236e      	movs	r3, #110	@ 0x6e
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005686:	2220      	movs	r2, #32
 8005688:	4013      	ands	r3, r2
 800568a:	d000      	beq.n	800568e <UART_RxISR_8BIT_FIFOEN+0x27e>
 800568c:	e6e3      	b.n	8005456 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800568e:	205a      	movs	r0, #90	@ 0x5a
 8005690:	183b      	adds	r3, r7, r0
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	215e      	movs	r1, #94	@ 0x5e
 8005696:	5a52      	ldrh	r2, [r2, r1]
 8005698:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800569a:	0001      	movs	r1, r0
 800569c:	187b      	adds	r3, r7, r1
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d044      	beq.n	800572e <UART_RxISR_8BIT_FIFOEN+0x31e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2268      	movs	r2, #104	@ 0x68
 80056a8:	5a9b      	ldrh	r3, [r3, r2]
 80056aa:	187a      	adds	r2, r7, r1
 80056ac:	8812      	ldrh	r2, [r2, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d23d      	bcs.n	800572e <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b2:	f3ef 8310 	mrs	r3, PRIMASK
 80056b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80056bc:	2301      	movs	r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f383 8810 	msr	PRIMASK, r3
}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	491d      	ldr	r1, [pc, #116]	@ (8005748 <UART_RxISR_8BIT_FIFOEN+0x338>)
 80056d4:	400a      	ands	r2, r1
 80056d6:	609a      	str	r2, [r3, #8]
 80056d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f383 8810 	msr	PRIMASK, r3
}
 80056e2:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a19      	ldr	r2, [pc, #100]	@ (800574c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80056e8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ea:	f3ef 8310 	mrs	r3, PRIMASK
 80056ee:	617b      	str	r3, [r7, #20]
  return(result);
 80056f0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056f4:	2301      	movs	r3, #1
 80056f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f383 8810 	msr	PRIMASK, r3
}
 80056fe:	46c0      	nop			@ (mov r8, r8)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2120      	movs	r1, #32
 800570c:	430a      	orrs	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005712:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f383 8810 	msr	PRIMASK, r3
}
 800571a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800571c:	e007      	b.n	800572e <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2108      	movs	r1, #8
 800572a:	430a      	orrs	r2, r1
 800572c:	619a      	str	r2, [r3, #24]
}
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	46bd      	mov	sp, r7
 8005732:	b020      	add	sp, #128	@ 0x80
 8005734:	bd80      	pop	{r7, pc}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	fffffeff 	.word	0xfffffeff
 800573c:	effffffe 	.word	0xeffffffe
 8005740:	40008000 	.word	0x40008000
 8005744:	fbffffff 	.word	0xfbffffff
 8005748:	efffffff 	.word	0xefffffff
 800574c:	08005089 	.word	0x08005089

08005750 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b0a2      	sub	sp, #136	@ 0x88
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005758:	2382      	movs	r3, #130	@ 0x82
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	2160      	movs	r1, #96	@ 0x60
 8005760:	5a52      	ldrh	r2, [r2, r1]
 8005762:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	2284      	movs	r2, #132	@ 0x84
 800576c:	18ba      	adds	r2, r7, r2
 800576e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	228c      	movs	r2, #140	@ 0x8c
 8005784:	589b      	ldr	r3, [r3, r2]
 8005786:	2b22      	cmp	r3, #34	@ 0x22
 8005788:	d000      	beq.n	800578c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800578a:	e174      	b.n	8005a76 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800578c:	2376      	movs	r3, #118	@ 0x76
 800578e:	18fb      	adds	r3, r7, r3
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	2168      	movs	r1, #104	@ 0x68
 8005794:	5a52      	ldrh	r2, [r2, r1]
 8005796:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005798:	e119      	b.n	80059ce <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057a0:	2174      	movs	r1, #116	@ 0x74
 80057a2:	187b      	adds	r3, r7, r1
 80057a4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057aa:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80057ac:	187b      	adds	r3, r7, r1
 80057ae:	2282      	movs	r2, #130	@ 0x82
 80057b0:	18ba      	adds	r2, r7, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	8812      	ldrh	r2, [r2, #0]
 80057b6:	4013      	ands	r3, r2
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c2:	1c9a      	adds	r2, r3, #2
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	225e      	movs	r2, #94	@ 0x5e
 80057cc:	5a9b      	ldrh	r3, [r3, r2]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b299      	uxth	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	225e      	movs	r2, #94	@ 0x5e
 80057d8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	2184      	movs	r1, #132	@ 0x84
 80057e2:	187a      	adds	r2, r7, r1
 80057e4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80057e6:	187b      	adds	r3, r7, r1
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2207      	movs	r2, #7
 80057ec:	4013      	ands	r3, r2
 80057ee:	d04e      	beq.n	800588e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057f0:	187b      	adds	r3, r7, r1
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2201      	movs	r2, #1
 80057f6:	4013      	ands	r3, r2
 80057f8:	d010      	beq.n	800581c <UART_RxISR_16BIT_FIFOEN+0xcc>
 80057fa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80057fc:	2380      	movs	r3, #128	@ 0x80
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	4013      	ands	r3, r2
 8005802:	d00b      	beq.n	800581c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2201      	movs	r2, #1
 800580a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2290      	movs	r2, #144	@ 0x90
 8005810:	589b      	ldr	r3, [r3, r2]
 8005812:	2201      	movs	r2, #1
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2190      	movs	r1, #144	@ 0x90
 800581a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800581c:	2384      	movs	r3, #132	@ 0x84
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2202      	movs	r2, #2
 8005824:	4013      	ands	r3, r2
 8005826:	d00f      	beq.n	8005848 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800582a:	2201      	movs	r2, #1
 800582c:	4013      	ands	r3, r2
 800582e:	d00b      	beq.n	8005848 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2202      	movs	r2, #2
 8005836:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2290      	movs	r2, #144	@ 0x90
 800583c:	589b      	ldr	r3, [r3, r2]
 800583e:	2204      	movs	r2, #4
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2190      	movs	r1, #144	@ 0x90
 8005846:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005848:	2384      	movs	r3, #132	@ 0x84
 800584a:	18fb      	adds	r3, r7, r3
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2204      	movs	r2, #4
 8005850:	4013      	ands	r3, r2
 8005852:	d00f      	beq.n	8005874 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005854:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005856:	2201      	movs	r2, #1
 8005858:	4013      	ands	r3, r2
 800585a:	d00b      	beq.n	8005874 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2204      	movs	r2, #4
 8005862:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2290      	movs	r2, #144	@ 0x90
 8005868:	589b      	ldr	r3, [r3, r2]
 800586a:	2202      	movs	r2, #2
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2190      	movs	r1, #144	@ 0x90
 8005872:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2290      	movs	r2, #144	@ 0x90
 8005878:	589b      	ldr	r3, [r3, r2]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0018      	movs	r0, r3
 8005882:	f7fe fdd7 	bl	8004434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2290      	movs	r2, #144	@ 0x90
 800588a:	2100      	movs	r1, #0
 800588c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	225e      	movs	r2, #94	@ 0x5e
 8005892:	5a9b      	ldrh	r3, [r3, r2]
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d000      	beq.n	800589c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800589a:	e098      	b.n	80059ce <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800589c:	f3ef 8310 	mrs	r3, PRIMASK
 80058a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80058a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058a6:	2301      	movs	r3, #1
 80058a8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058ac:	f383 8810 	msr	PRIMASK, r3
}
 80058b0:	46c0      	nop			@ (mov r8, r8)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4974      	ldr	r1, [pc, #464]	@ (8005a90 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80058be:	400a      	ands	r2, r1
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058c4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c8:	f383 8810 	msr	PRIMASK, r3
}
 80058cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ce:	f3ef 8310 	mrs	r3, PRIMASK
 80058d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80058d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058d8:	2301      	movs	r3, #1
 80058da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058de:	f383 8810 	msr	PRIMASK, r3
}
 80058e2:	46c0      	nop			@ (mov r8, r8)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4969      	ldr	r1, [pc, #420]	@ (8005a94 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80058f0:	400a      	ands	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058f6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058fa:	f383 8810 	msr	PRIMASK, r3
}
 80058fe:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	228c      	movs	r2, #140	@ 0x8c
 8005904:	2120      	movs	r1, #32
 8005906:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a5f      	ldr	r2, [pc, #380]	@ (8005a98 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01f      	beq.n	800595e <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	2380      	movs	r3, #128	@ 0x80
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	4013      	ands	r3, r2
 800592a:	d018      	beq.n	800595e <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592c:	f3ef 8310 	mrs	r3, PRIMASK
 8005930:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005934:	667b      	str	r3, [r7, #100]	@ 0x64
 8005936:	2301      	movs	r3, #1
 8005938:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593c:	f383 8810 	msr	PRIMASK, r3
}
 8005940:	46c0      	nop			@ (mov r8, r8)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4953      	ldr	r1, [pc, #332]	@ (8005a9c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800594e:	400a      	ands	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005954:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005962:	2b01      	cmp	r3, #1
 8005964:	d12f      	bne.n	80059c6 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596c:	f3ef 8310 	mrs	r3, PRIMASK
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005974:	663b      	str	r3, [r7, #96]	@ 0x60
 8005976:	2301      	movs	r3, #1
 8005978:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597c:	f383 8810 	msr	PRIMASK, r3
}
 8005980:	46c0      	nop			@ (mov r8, r8)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2110      	movs	r1, #16
 800598e:	438a      	bics	r2, r1
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005998:	f383 8810 	msr	PRIMASK, r3
}
 800599c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	2210      	movs	r2, #16
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d103      	bne.n	80059b4 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2210      	movs	r2, #16
 80059b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	225c      	movs	r2, #92	@ 0x5c
 80059b8:	5a9a      	ldrh	r2, [r3, r2]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	0011      	movs	r1, r2
 80059be:	0018      	movs	r0, r3
 80059c0:	f7fe fd40 	bl	8004444 <HAL_UARTEx_RxEventCallback>
 80059c4:	e003      	b.n	80059ce <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7fa ffb1 	bl	8000930 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059ce:	2376      	movs	r3, #118	@ 0x76
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d006      	beq.n	80059e6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80059d8:	2384      	movs	r3, #132	@ 0x84
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2220      	movs	r2, #32
 80059e0:	4013      	ands	r3, r2
 80059e2:	d000      	beq.n	80059e6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80059e4:	e6d9      	b.n	800579a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059e6:	205e      	movs	r0, #94	@ 0x5e
 80059e8:	183b      	adds	r3, r7, r0
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	215e      	movs	r1, #94	@ 0x5e
 80059ee:	5a52      	ldrh	r2, [r2, r1]
 80059f0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059f2:	0001      	movs	r1, r0
 80059f4:	187b      	adds	r3, r7, r1
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d044      	beq.n	8005a86 <UART_RxISR_16BIT_FIFOEN+0x336>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2268      	movs	r2, #104	@ 0x68
 8005a00:	5a9b      	ldrh	r3, [r3, r2]
 8005a02:	187a      	adds	r2, r7, r1
 8005a04:	8812      	ldrh	r2, [r2, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d23d      	bcs.n	8005a86 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a10:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a14:	2301      	movs	r3, #1
 8005a16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f383 8810 	msr	PRIMASK, r3
}
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	491d      	ldr	r1, [pc, #116]	@ (8005aa0 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f383 8810 	msr	PRIMASK, r3
}
 8005a3a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005a40:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a42:	f3ef 8310 	mrs	r3, PRIMASK
 8005a46:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a48:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f383 8810 	msr	PRIMASK, r3
}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2120      	movs	r1, #32
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	f383 8810 	msr	PRIMASK, r3
}
 8005a72:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a74:	e007      	b.n	8005a86 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699a      	ldr	r2, [r3, #24]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2108      	movs	r1, #8
 8005a82:	430a      	orrs	r2, r1
 8005a84:	619a      	str	r2, [r3, #24]
}
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b022      	add	sp, #136	@ 0x88
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	fffffeff 	.word	0xfffffeff
 8005a94:	effffffe 	.word	0xeffffffe
 8005a98:	40008000 	.word	0x40008000
 8005a9c:	fbffffff 	.word	0xfbffffff
 8005aa0:	efffffff 	.word	0xefffffff
 8005aa4:	0800524d 	.word	0x0800524d

08005aa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2284      	movs	r2, #132	@ 0x84
 8005ab4:	5c9b      	ldrb	r3, [r3, r2]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_UARTEx_DisableFifoMode+0x16>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e027      	b.n	8005b0e <HAL_UARTEx_DisableFifoMode+0x66>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2284      	movs	r2, #132	@ 0x84
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2288      	movs	r2, #136	@ 0x88
 8005aca:	2124      	movs	r1, #36	@ 0x24
 8005acc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	438a      	bics	r2, r1
 8005ae4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8005b18 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2288      	movs	r2, #136	@ 0x88
 8005b00:	2120      	movs	r1, #32
 8005b02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2284      	movs	r2, #132	@ 0x84
 8005b08:	2100      	movs	r1, #0
 8005b0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	0018      	movs	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b004      	add	sp, #16
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			@ (mov r8, r8)
 8005b18:	dfffffff 	.word	0xdfffffff

08005b1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2284      	movs	r2, #132	@ 0x84
 8005b2a:	5c9b      	ldrb	r3, [r3, r2]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e02e      	b.n	8005b92 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2284      	movs	r2, #132	@ 0x84
 8005b38:	2101      	movs	r1, #1
 8005b3a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2288      	movs	r2, #136	@ 0x88
 8005b40:	2124      	movs	r1, #36	@ 0x24
 8005b42:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2101      	movs	r1, #1
 8005b58:	438a      	bics	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	08d9      	lsrs	r1, r3, #3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 f854 	bl	8005c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2288      	movs	r2, #136	@ 0x88
 8005b84:	2120      	movs	r1, #32
 8005b86:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2284      	movs	r2, #132	@ 0x84
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	0018      	movs	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	b004      	add	sp, #16
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2284      	movs	r2, #132	@ 0x84
 8005baa:	5c9b      	ldrb	r3, [r3, r2]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e02f      	b.n	8005c14 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2284      	movs	r2, #132	@ 0x84
 8005bb8:	2101      	movs	r1, #1
 8005bba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2288      	movs	r2, #136	@ 0x88
 8005bc0:	2124      	movs	r1, #36	@ 0x24
 8005bc2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	438a      	bics	r2, r1
 8005bda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4a0e      	ldr	r2, [pc, #56]	@ (8005c1c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	0019      	movs	r1, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f000 f813 	bl	8005c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2288      	movs	r2, #136	@ 0x88
 8005c06:	2120      	movs	r1, #32
 8005c08:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2284      	movs	r2, #132	@ 0x84
 8005c0e:	2100      	movs	r1, #0
 8005c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	0018      	movs	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b004      	add	sp, #16
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	f1ffffff 	.word	0xf1ffffff

08005c20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d108      	bne.n	8005c42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	226a      	movs	r2, #106	@ 0x6a
 8005c34:	2101      	movs	r1, #1
 8005c36:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2268      	movs	r2, #104	@ 0x68
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c40:	e043      	b.n	8005cca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c42:	260f      	movs	r6, #15
 8005c44:	19bb      	adds	r3, r7, r6
 8005c46:	2208      	movs	r2, #8
 8005c48:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c4a:	200e      	movs	r0, #14
 8005c4c:	183b      	adds	r3, r7, r0
 8005c4e:	2208      	movs	r2, #8
 8005c50:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	0e5b      	lsrs	r3, r3, #25
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	240d      	movs	r4, #13
 8005c5e:	193b      	adds	r3, r7, r4
 8005c60:	2107      	movs	r1, #7
 8005c62:	400a      	ands	r2, r1
 8005c64:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	0f5b      	lsrs	r3, r3, #29
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	250c      	movs	r5, #12
 8005c72:	197b      	adds	r3, r7, r5
 8005c74:	2107      	movs	r1, #7
 8005c76:	400a      	ands	r2, r1
 8005c78:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c7a:	183b      	adds	r3, r7, r0
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	197a      	adds	r2, r7, r5
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	4914      	ldr	r1, [pc, #80]	@ (8005cd4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c84:	5c8a      	ldrb	r2, [r1, r2]
 8005c86:	435a      	muls	r2, r3
 8005c88:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c8a:	197b      	adds	r3, r7, r5
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	4a12      	ldr	r2, [pc, #72]	@ (8005cd8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c92:	0019      	movs	r1, r3
 8005c94:	f7fa faca 	bl	800022c <__divsi3>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	b299      	uxth	r1, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	226a      	movs	r2, #106	@ 0x6a
 8005ca0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ca2:	19bb      	adds	r3, r7, r6
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	193a      	adds	r2, r7, r4
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	490a      	ldr	r1, [pc, #40]	@ (8005cd4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005cac:	5c8a      	ldrb	r2, [r1, r2]
 8005cae:	435a      	muls	r2, r3
 8005cb0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cb2:	193b      	adds	r3, r7, r4
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	4a08      	ldr	r2, [pc, #32]	@ (8005cd8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005cb8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cba:	0019      	movs	r1, r3
 8005cbc:	f7fa fab6 	bl	800022c <__divsi3>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	b299      	uxth	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2268      	movs	r2, #104	@ 0x68
 8005cc8:	5299      	strh	r1, [r3, r2]
}
 8005cca:	46c0      	nop			@ (mov r8, r8)
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	b005      	add	sp, #20
 8005cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	08006758 	.word	0x08006758
 8005cd8:	08006760 	.word	0x08006760

08005cdc <_vsniprintf_r>:
 8005cdc:	b530      	push	{r4, r5, lr}
 8005cde:	0005      	movs	r5, r0
 8005ce0:	0014      	movs	r4, r2
 8005ce2:	0008      	movs	r0, r1
 8005ce4:	001a      	movs	r2, r3
 8005ce6:	b09b      	sub	sp, #108	@ 0x6c
 8005ce8:	2c00      	cmp	r4, #0
 8005cea:	da05      	bge.n	8005cf8 <_vsniprintf_r+0x1c>
 8005cec:	238b      	movs	r3, #139	@ 0x8b
 8005cee:	2001      	movs	r0, #1
 8005cf0:	602b      	str	r3, [r5, #0]
 8005cf2:	4240      	negs	r0, r0
 8005cf4:	b01b      	add	sp, #108	@ 0x6c
 8005cf6:	bd30      	pop	{r4, r5, pc}
 8005cf8:	2382      	movs	r3, #130	@ 0x82
 8005cfa:	4669      	mov	r1, sp
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	818b      	strh	r3, [r1, #12]
 8005d00:	2100      	movs	r1, #0
 8005d02:	9000      	str	r0, [sp, #0]
 8005d04:	9119      	str	r1, [sp, #100]	@ 0x64
 8005d06:	9004      	str	r0, [sp, #16]
 8005d08:	428c      	cmp	r4, r1
 8005d0a:	d000      	beq.n	8005d0e <_vsniprintf_r+0x32>
 8005d0c:	1e61      	subs	r1, r4, #1
 8005d0e:	2301      	movs	r3, #1
 8005d10:	9102      	str	r1, [sp, #8]
 8005d12:	9105      	str	r1, [sp, #20]
 8005d14:	4669      	mov	r1, sp
 8005d16:	425b      	negs	r3, r3
 8005d18:	81cb      	strh	r3, [r1, #14]
 8005d1a:	0028      	movs	r0, r5
 8005d1c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005d1e:	f000 f9a7 	bl	8006070 <_svfiprintf_r>
 8005d22:	1c43      	adds	r3, r0, #1
 8005d24:	da01      	bge.n	8005d2a <_vsniprintf_r+0x4e>
 8005d26:	238b      	movs	r3, #139	@ 0x8b
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	2c00      	cmp	r4, #0
 8005d2c:	d0e2      	beq.n	8005cf4 <_vsniprintf_r+0x18>
 8005d2e:	2200      	movs	r2, #0
 8005d30:	9b00      	ldr	r3, [sp, #0]
 8005d32:	701a      	strb	r2, [r3, #0]
 8005d34:	e7de      	b.n	8005cf4 <_vsniprintf_r+0x18>
	...

08005d38 <vsniprintf>:
 8005d38:	b513      	push	{r0, r1, r4, lr}
 8005d3a:	4c04      	ldr	r4, [pc, #16]	@ (8005d4c <vsniprintf+0x14>)
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	0013      	movs	r3, r2
 8005d40:	000a      	movs	r2, r1
 8005d42:	0001      	movs	r1, r0
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	f7ff ffc9 	bl	8005cdc <_vsniprintf_r>
 8005d4a:	bd16      	pop	{r1, r2, r4, pc}
 8005d4c:	20000010 	.word	0x20000010

08005d50 <memset>:
 8005d50:	0003      	movs	r3, r0
 8005d52:	1882      	adds	r2, r0, r2
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d100      	bne.n	8005d5a <memset+0xa>
 8005d58:	4770      	bx	lr
 8005d5a:	7019      	strb	r1, [r3, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	e7f9      	b.n	8005d54 <memset+0x4>

08005d60 <__errno>:
 8005d60:	4b01      	ldr	r3, [pc, #4]	@ (8005d68 <__errno+0x8>)
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	4770      	bx	lr
 8005d66:	46c0      	nop			@ (mov r8, r8)
 8005d68:	20000010 	.word	0x20000010

08005d6c <__libc_init_array>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	2600      	movs	r6, #0
 8005d70:	4c0c      	ldr	r4, [pc, #48]	@ (8005da4 <__libc_init_array+0x38>)
 8005d72:	4d0d      	ldr	r5, [pc, #52]	@ (8005da8 <__libc_init_array+0x3c>)
 8005d74:	1b64      	subs	r4, r4, r5
 8005d76:	10a4      	asrs	r4, r4, #2
 8005d78:	42a6      	cmp	r6, r4
 8005d7a:	d109      	bne.n	8005d90 <__libc_init_array+0x24>
 8005d7c:	2600      	movs	r6, #0
 8005d7e:	f000 fc61 	bl	8006644 <_init>
 8005d82:	4c0a      	ldr	r4, [pc, #40]	@ (8005dac <__libc_init_array+0x40>)
 8005d84:	4d0a      	ldr	r5, [pc, #40]	@ (8005db0 <__libc_init_array+0x44>)
 8005d86:	1b64      	subs	r4, r4, r5
 8005d88:	10a4      	asrs	r4, r4, #2
 8005d8a:	42a6      	cmp	r6, r4
 8005d8c:	d105      	bne.n	8005d9a <__libc_init_array+0x2e>
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	00b3      	lsls	r3, r6, #2
 8005d92:	58eb      	ldr	r3, [r5, r3]
 8005d94:	4798      	blx	r3
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7ee      	b.n	8005d78 <__libc_init_array+0xc>
 8005d9a:	00b3      	lsls	r3, r6, #2
 8005d9c:	58eb      	ldr	r3, [r5, r3]
 8005d9e:	4798      	blx	r3
 8005da0:	3601      	adds	r6, #1
 8005da2:	e7f2      	b.n	8005d8a <__libc_init_array+0x1e>
 8005da4:	080067a4 	.word	0x080067a4
 8005da8:	080067a4 	.word	0x080067a4
 8005dac:	080067ac 	.word	0x080067ac
 8005db0:	080067a4 	.word	0x080067a4

08005db4 <__retarget_lock_acquire_recursive>:
 8005db4:	4770      	bx	lr

08005db6 <__retarget_lock_release_recursive>:
 8005db6:	4770      	bx	lr

08005db8 <_free_r>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	0005      	movs	r5, r0
 8005dbc:	1e0c      	subs	r4, r1, #0
 8005dbe:	d010      	beq.n	8005de2 <_free_r+0x2a>
 8005dc0:	3c04      	subs	r4, #4
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da00      	bge.n	8005dca <_free_r+0x12>
 8005dc8:	18e4      	adds	r4, r4, r3
 8005dca:	0028      	movs	r0, r5
 8005dcc:	f000 f8e0 	bl	8005f90 <__malloc_lock>
 8005dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e48 <_free_r+0x90>)
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d105      	bne.n	8005de4 <_free_r+0x2c>
 8005dd8:	6063      	str	r3, [r4, #4]
 8005dda:	6014      	str	r4, [r2, #0]
 8005ddc:	0028      	movs	r0, r5
 8005dde:	f000 f8df 	bl	8005fa0 <__malloc_unlock>
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	42a3      	cmp	r3, r4
 8005de6:	d908      	bls.n	8005dfa <_free_r+0x42>
 8005de8:	6820      	ldr	r0, [r4, #0]
 8005dea:	1821      	adds	r1, r4, r0
 8005dec:	428b      	cmp	r3, r1
 8005dee:	d1f3      	bne.n	8005dd8 <_free_r+0x20>
 8005df0:	6819      	ldr	r1, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	1809      	adds	r1, r1, r0
 8005df6:	6021      	str	r1, [r4, #0]
 8005df8:	e7ee      	b.n	8005dd8 <_free_r+0x20>
 8005dfa:	001a      	movs	r2, r3
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <_free_r+0x4e>
 8005e02:	42a3      	cmp	r3, r4
 8005e04:	d9f9      	bls.n	8005dfa <_free_r+0x42>
 8005e06:	6811      	ldr	r1, [r2, #0]
 8005e08:	1850      	adds	r0, r2, r1
 8005e0a:	42a0      	cmp	r0, r4
 8005e0c:	d10b      	bne.n	8005e26 <_free_r+0x6e>
 8005e0e:	6820      	ldr	r0, [r4, #0]
 8005e10:	1809      	adds	r1, r1, r0
 8005e12:	1850      	adds	r0, r2, r1
 8005e14:	6011      	str	r1, [r2, #0]
 8005e16:	4283      	cmp	r3, r0
 8005e18:	d1e0      	bne.n	8005ddc <_free_r+0x24>
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	1841      	adds	r1, r0, r1
 8005e20:	6011      	str	r1, [r2, #0]
 8005e22:	6053      	str	r3, [r2, #4]
 8005e24:	e7da      	b.n	8005ddc <_free_r+0x24>
 8005e26:	42a0      	cmp	r0, r4
 8005e28:	d902      	bls.n	8005e30 <_free_r+0x78>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	602b      	str	r3, [r5, #0]
 8005e2e:	e7d5      	b.n	8005ddc <_free_r+0x24>
 8005e30:	6820      	ldr	r0, [r4, #0]
 8005e32:	1821      	adds	r1, r4, r0
 8005e34:	428b      	cmp	r3, r1
 8005e36:	d103      	bne.n	8005e40 <_free_r+0x88>
 8005e38:	6819      	ldr	r1, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	1809      	adds	r1, r1, r0
 8005e3e:	6021      	str	r1, [r4, #0]
 8005e40:	6063      	str	r3, [r4, #4]
 8005e42:	6054      	str	r4, [r2, #4]
 8005e44:	e7ca      	b.n	8005ddc <_free_r+0x24>
 8005e46:	46c0      	nop			@ (mov r8, r8)
 8005e48:	20000338 	.word	0x20000338

08005e4c <sbrk_aligned>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4e0f      	ldr	r6, [pc, #60]	@ (8005e8c <sbrk_aligned+0x40>)
 8005e50:	000d      	movs	r5, r1
 8005e52:	6831      	ldr	r1, [r6, #0]
 8005e54:	0004      	movs	r4, r0
 8005e56:	2900      	cmp	r1, #0
 8005e58:	d102      	bne.n	8005e60 <sbrk_aligned+0x14>
 8005e5a:	f000 fb95 	bl	8006588 <_sbrk_r>
 8005e5e:	6030      	str	r0, [r6, #0]
 8005e60:	0029      	movs	r1, r5
 8005e62:	0020      	movs	r0, r4
 8005e64:	f000 fb90 	bl	8006588 <_sbrk_r>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d103      	bne.n	8005e74 <sbrk_aligned+0x28>
 8005e6c:	2501      	movs	r5, #1
 8005e6e:	426d      	negs	r5, r5
 8005e70:	0028      	movs	r0, r5
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	2303      	movs	r3, #3
 8005e76:	1cc5      	adds	r5, r0, #3
 8005e78:	439d      	bics	r5, r3
 8005e7a:	42a8      	cmp	r0, r5
 8005e7c:	d0f8      	beq.n	8005e70 <sbrk_aligned+0x24>
 8005e7e:	1a29      	subs	r1, r5, r0
 8005e80:	0020      	movs	r0, r4
 8005e82:	f000 fb81 	bl	8006588 <_sbrk_r>
 8005e86:	3001      	adds	r0, #1
 8005e88:	d1f2      	bne.n	8005e70 <sbrk_aligned+0x24>
 8005e8a:	e7ef      	b.n	8005e6c <sbrk_aligned+0x20>
 8005e8c:	20000334 	.word	0x20000334

08005e90 <_malloc_r>:
 8005e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e92:	2203      	movs	r2, #3
 8005e94:	1ccb      	adds	r3, r1, #3
 8005e96:	4393      	bics	r3, r2
 8005e98:	3308      	adds	r3, #8
 8005e9a:	0005      	movs	r5, r0
 8005e9c:	001f      	movs	r7, r3
 8005e9e:	2b0c      	cmp	r3, #12
 8005ea0:	d234      	bcs.n	8005f0c <_malloc_r+0x7c>
 8005ea2:	270c      	movs	r7, #12
 8005ea4:	42b9      	cmp	r1, r7
 8005ea6:	d833      	bhi.n	8005f10 <_malloc_r+0x80>
 8005ea8:	0028      	movs	r0, r5
 8005eaa:	f000 f871 	bl	8005f90 <__malloc_lock>
 8005eae:	4e37      	ldr	r6, [pc, #220]	@ (8005f8c <_malloc_r+0xfc>)
 8005eb0:	6833      	ldr	r3, [r6, #0]
 8005eb2:	001c      	movs	r4, r3
 8005eb4:	2c00      	cmp	r4, #0
 8005eb6:	d12f      	bne.n	8005f18 <_malloc_r+0x88>
 8005eb8:	0039      	movs	r1, r7
 8005eba:	0028      	movs	r0, r5
 8005ebc:	f7ff ffc6 	bl	8005e4c <sbrk_aligned>
 8005ec0:	0004      	movs	r4, r0
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	d15f      	bne.n	8005f86 <_malloc_r+0xf6>
 8005ec6:	6834      	ldr	r4, [r6, #0]
 8005ec8:	9400      	str	r4, [sp, #0]
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d14a      	bne.n	8005f66 <_malloc_r+0xd6>
 8005ed0:	2c00      	cmp	r4, #0
 8005ed2:	d052      	beq.n	8005f7a <_malloc_r+0xea>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	0028      	movs	r0, r5
 8005ed8:	18e3      	adds	r3, r4, r3
 8005eda:	9900      	ldr	r1, [sp, #0]
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	f000 fb53 	bl	8006588 <_sbrk_r>
 8005ee2:	9b01      	ldr	r3, [sp, #4]
 8005ee4:	4283      	cmp	r3, r0
 8005ee6:	d148      	bne.n	8005f7a <_malloc_r+0xea>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	0028      	movs	r0, r5
 8005eec:	1aff      	subs	r7, r7, r3
 8005eee:	0039      	movs	r1, r7
 8005ef0:	f7ff ffac 	bl	8005e4c <sbrk_aligned>
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d040      	beq.n	8005f7a <_malloc_r+0xea>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	19db      	adds	r3, r3, r7
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	6833      	ldr	r3, [r6, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	2a00      	cmp	r2, #0
 8005f04:	d133      	bne.n	8005f6e <_malloc_r+0xde>
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	6033      	str	r3, [r6, #0]
 8005f0a:	e019      	b.n	8005f40 <_malloc_r+0xb0>
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dac9      	bge.n	8005ea4 <_malloc_r+0x14>
 8005f10:	230c      	movs	r3, #12
 8005f12:	602b      	str	r3, [r5, #0]
 8005f14:	2000      	movs	r0, #0
 8005f16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f18:	6821      	ldr	r1, [r4, #0]
 8005f1a:	1bc9      	subs	r1, r1, r7
 8005f1c:	d420      	bmi.n	8005f60 <_malloc_r+0xd0>
 8005f1e:	290b      	cmp	r1, #11
 8005f20:	d90a      	bls.n	8005f38 <_malloc_r+0xa8>
 8005f22:	19e2      	adds	r2, r4, r7
 8005f24:	6027      	str	r7, [r4, #0]
 8005f26:	42a3      	cmp	r3, r4
 8005f28:	d104      	bne.n	8005f34 <_malloc_r+0xa4>
 8005f2a:	6032      	str	r2, [r6, #0]
 8005f2c:	6863      	ldr	r3, [r4, #4]
 8005f2e:	6011      	str	r1, [r2, #0]
 8005f30:	6053      	str	r3, [r2, #4]
 8005f32:	e005      	b.n	8005f40 <_malloc_r+0xb0>
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	e7f9      	b.n	8005f2c <_malloc_r+0x9c>
 8005f38:	6862      	ldr	r2, [r4, #4]
 8005f3a:	42a3      	cmp	r3, r4
 8005f3c:	d10e      	bne.n	8005f5c <_malloc_r+0xcc>
 8005f3e:	6032      	str	r2, [r6, #0]
 8005f40:	0028      	movs	r0, r5
 8005f42:	f000 f82d 	bl	8005fa0 <__malloc_unlock>
 8005f46:	0020      	movs	r0, r4
 8005f48:	2207      	movs	r2, #7
 8005f4a:	300b      	adds	r0, #11
 8005f4c:	1d23      	adds	r3, r4, #4
 8005f4e:	4390      	bics	r0, r2
 8005f50:	1ac2      	subs	r2, r0, r3
 8005f52:	4298      	cmp	r0, r3
 8005f54:	d0df      	beq.n	8005f16 <_malloc_r+0x86>
 8005f56:	1a1b      	subs	r3, r3, r0
 8005f58:	50a3      	str	r3, [r4, r2]
 8005f5a:	e7dc      	b.n	8005f16 <_malloc_r+0x86>
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	e7ef      	b.n	8005f40 <_malloc_r+0xb0>
 8005f60:	0023      	movs	r3, r4
 8005f62:	6864      	ldr	r4, [r4, #4]
 8005f64:	e7a6      	b.n	8005eb4 <_malloc_r+0x24>
 8005f66:	9c00      	ldr	r4, [sp, #0]
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	e7ad      	b.n	8005eca <_malloc_r+0x3a>
 8005f6e:	001a      	movs	r2, r3
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	42a3      	cmp	r3, r4
 8005f74:	d1fb      	bne.n	8005f6e <_malloc_r+0xde>
 8005f76:	2300      	movs	r3, #0
 8005f78:	e7da      	b.n	8005f30 <_malloc_r+0xa0>
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	0028      	movs	r0, r5
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	f000 f80e 	bl	8005fa0 <__malloc_unlock>
 8005f84:	e7c6      	b.n	8005f14 <_malloc_r+0x84>
 8005f86:	6007      	str	r7, [r0, #0]
 8005f88:	e7da      	b.n	8005f40 <_malloc_r+0xb0>
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	20000338 	.word	0x20000338

08005f90 <__malloc_lock>:
 8005f90:	b510      	push	{r4, lr}
 8005f92:	4802      	ldr	r0, [pc, #8]	@ (8005f9c <__malloc_lock+0xc>)
 8005f94:	f7ff ff0e 	bl	8005db4 <__retarget_lock_acquire_recursive>
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	46c0      	nop			@ (mov r8, r8)
 8005f9c:	20000330 	.word	0x20000330

08005fa0 <__malloc_unlock>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	4802      	ldr	r0, [pc, #8]	@ (8005fac <__malloc_unlock+0xc>)
 8005fa4:	f7ff ff07 	bl	8005db6 <__retarget_lock_release_recursive>
 8005fa8:	bd10      	pop	{r4, pc}
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	20000330 	.word	0x20000330

08005fb0 <__ssputs_r>:
 8005fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fb2:	688e      	ldr	r6, [r1, #8]
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	001f      	movs	r7, r3
 8005fb8:	000c      	movs	r4, r1
 8005fba:	680b      	ldr	r3, [r1, #0]
 8005fbc:	9002      	str	r0, [sp, #8]
 8005fbe:	9203      	str	r2, [sp, #12]
 8005fc0:	42be      	cmp	r6, r7
 8005fc2:	d830      	bhi.n	8006026 <__ssputs_r+0x76>
 8005fc4:	210c      	movs	r1, #12
 8005fc6:	5e62      	ldrsh	r2, [r4, r1]
 8005fc8:	2190      	movs	r1, #144	@ 0x90
 8005fca:	00c9      	lsls	r1, r1, #3
 8005fcc:	420a      	tst	r2, r1
 8005fce:	d028      	beq.n	8006022 <__ssputs_r+0x72>
 8005fd0:	2003      	movs	r0, #3
 8005fd2:	6921      	ldr	r1, [r4, #16]
 8005fd4:	1a5b      	subs	r3, r3, r1
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	6963      	ldr	r3, [r4, #20]
 8005fda:	4343      	muls	r3, r0
 8005fdc:	9801      	ldr	r0, [sp, #4]
 8005fde:	0fdd      	lsrs	r5, r3, #31
 8005fe0:	18ed      	adds	r5, r5, r3
 8005fe2:	1c7b      	adds	r3, r7, #1
 8005fe4:	181b      	adds	r3, r3, r0
 8005fe6:	106d      	asrs	r5, r5, #1
 8005fe8:	42ab      	cmp	r3, r5
 8005fea:	d900      	bls.n	8005fee <__ssputs_r+0x3e>
 8005fec:	001d      	movs	r5, r3
 8005fee:	0552      	lsls	r2, r2, #21
 8005ff0:	d528      	bpl.n	8006044 <__ssputs_r+0x94>
 8005ff2:	0029      	movs	r1, r5
 8005ff4:	9802      	ldr	r0, [sp, #8]
 8005ff6:	f7ff ff4b 	bl	8005e90 <_malloc_r>
 8005ffa:	1e06      	subs	r6, r0, #0
 8005ffc:	d02c      	beq.n	8006058 <__ssputs_r+0xa8>
 8005ffe:	9a01      	ldr	r2, [sp, #4]
 8006000:	6921      	ldr	r1, [r4, #16]
 8006002:	f000 fade 	bl	80065c2 <memcpy>
 8006006:	89a2      	ldrh	r2, [r4, #12]
 8006008:	4b18      	ldr	r3, [pc, #96]	@ (800606c <__ssputs_r+0xbc>)
 800600a:	401a      	ands	r2, r3
 800600c:	2380      	movs	r3, #128	@ 0x80
 800600e:	4313      	orrs	r3, r2
 8006010:	81a3      	strh	r3, [r4, #12]
 8006012:	9b01      	ldr	r3, [sp, #4]
 8006014:	6126      	str	r6, [r4, #16]
 8006016:	18f6      	adds	r6, r6, r3
 8006018:	6026      	str	r6, [r4, #0]
 800601a:	003e      	movs	r6, r7
 800601c:	6165      	str	r5, [r4, #20]
 800601e:	1aed      	subs	r5, r5, r3
 8006020:	60a5      	str	r5, [r4, #8]
 8006022:	42be      	cmp	r6, r7
 8006024:	d900      	bls.n	8006028 <__ssputs_r+0x78>
 8006026:	003e      	movs	r6, r7
 8006028:	0032      	movs	r2, r6
 800602a:	9903      	ldr	r1, [sp, #12]
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	f000 fa99 	bl	8006564 <memmove>
 8006032:	2000      	movs	r0, #0
 8006034:	68a3      	ldr	r3, [r4, #8]
 8006036:	1b9b      	subs	r3, r3, r6
 8006038:	60a3      	str	r3, [r4, #8]
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	199b      	adds	r3, r3, r6
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	b005      	add	sp, #20
 8006042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006044:	002a      	movs	r2, r5
 8006046:	9802      	ldr	r0, [sp, #8]
 8006048:	f000 fac4 	bl	80065d4 <_realloc_r>
 800604c:	1e06      	subs	r6, r0, #0
 800604e:	d1e0      	bne.n	8006012 <__ssputs_r+0x62>
 8006050:	6921      	ldr	r1, [r4, #16]
 8006052:	9802      	ldr	r0, [sp, #8]
 8006054:	f7ff feb0 	bl	8005db8 <_free_r>
 8006058:	230c      	movs	r3, #12
 800605a:	2001      	movs	r0, #1
 800605c:	9a02      	ldr	r2, [sp, #8]
 800605e:	4240      	negs	r0, r0
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	89a2      	ldrh	r2, [r4, #12]
 8006064:	3334      	adds	r3, #52	@ 0x34
 8006066:	4313      	orrs	r3, r2
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	e7e9      	b.n	8006040 <__ssputs_r+0x90>
 800606c:	fffffb7f 	.word	0xfffffb7f

08006070 <_svfiprintf_r>:
 8006070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006072:	b0a1      	sub	sp, #132	@ 0x84
 8006074:	9003      	str	r0, [sp, #12]
 8006076:	001d      	movs	r5, r3
 8006078:	898b      	ldrh	r3, [r1, #12]
 800607a:	000f      	movs	r7, r1
 800607c:	0016      	movs	r6, r2
 800607e:	061b      	lsls	r3, r3, #24
 8006080:	d511      	bpl.n	80060a6 <_svfiprintf_r+0x36>
 8006082:	690b      	ldr	r3, [r1, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10e      	bne.n	80060a6 <_svfiprintf_r+0x36>
 8006088:	2140      	movs	r1, #64	@ 0x40
 800608a:	f7ff ff01 	bl	8005e90 <_malloc_r>
 800608e:	6038      	str	r0, [r7, #0]
 8006090:	6138      	str	r0, [r7, #16]
 8006092:	2800      	cmp	r0, #0
 8006094:	d105      	bne.n	80060a2 <_svfiprintf_r+0x32>
 8006096:	230c      	movs	r3, #12
 8006098:	9a03      	ldr	r2, [sp, #12]
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	2001      	movs	r0, #1
 800609e:	4240      	negs	r0, r0
 80060a0:	e0cf      	b.n	8006242 <_svfiprintf_r+0x1d2>
 80060a2:	2340      	movs	r3, #64	@ 0x40
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	2300      	movs	r3, #0
 80060a8:	ac08      	add	r4, sp, #32
 80060aa:	6163      	str	r3, [r4, #20]
 80060ac:	3320      	adds	r3, #32
 80060ae:	7663      	strb	r3, [r4, #25]
 80060b0:	3310      	adds	r3, #16
 80060b2:	76a3      	strb	r3, [r4, #26]
 80060b4:	9507      	str	r5, [sp, #28]
 80060b6:	0035      	movs	r5, r6
 80060b8:	782b      	ldrb	r3, [r5, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <_svfiprintf_r+0x52>
 80060be:	2b25      	cmp	r3, #37	@ 0x25
 80060c0:	d148      	bne.n	8006154 <_svfiprintf_r+0xe4>
 80060c2:	1bab      	subs	r3, r5, r6
 80060c4:	9305      	str	r3, [sp, #20]
 80060c6:	42b5      	cmp	r5, r6
 80060c8:	d00b      	beq.n	80060e2 <_svfiprintf_r+0x72>
 80060ca:	0032      	movs	r2, r6
 80060cc:	0039      	movs	r1, r7
 80060ce:	9803      	ldr	r0, [sp, #12]
 80060d0:	f7ff ff6e 	bl	8005fb0 <__ssputs_r>
 80060d4:	3001      	adds	r0, #1
 80060d6:	d100      	bne.n	80060da <_svfiprintf_r+0x6a>
 80060d8:	e0ae      	b.n	8006238 <_svfiprintf_r+0x1c8>
 80060da:	6963      	ldr	r3, [r4, #20]
 80060dc:	9a05      	ldr	r2, [sp, #20]
 80060de:	189b      	adds	r3, r3, r2
 80060e0:	6163      	str	r3, [r4, #20]
 80060e2:	782b      	ldrb	r3, [r5, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d100      	bne.n	80060ea <_svfiprintf_r+0x7a>
 80060e8:	e0a6      	b.n	8006238 <_svfiprintf_r+0x1c8>
 80060ea:	2201      	movs	r2, #1
 80060ec:	2300      	movs	r3, #0
 80060ee:	4252      	negs	r2, r2
 80060f0:	6062      	str	r2, [r4, #4]
 80060f2:	a904      	add	r1, sp, #16
 80060f4:	3254      	adds	r2, #84	@ 0x54
 80060f6:	1852      	adds	r2, r2, r1
 80060f8:	1c6e      	adds	r6, r5, #1
 80060fa:	6023      	str	r3, [r4, #0]
 80060fc:	60e3      	str	r3, [r4, #12]
 80060fe:	60a3      	str	r3, [r4, #8]
 8006100:	7013      	strb	r3, [r2, #0]
 8006102:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006104:	4b54      	ldr	r3, [pc, #336]	@ (8006258 <_svfiprintf_r+0x1e8>)
 8006106:	2205      	movs	r2, #5
 8006108:	0018      	movs	r0, r3
 800610a:	7831      	ldrb	r1, [r6, #0]
 800610c:	9305      	str	r3, [sp, #20]
 800610e:	f000 fa4d 	bl	80065ac <memchr>
 8006112:	1c75      	adds	r5, r6, #1
 8006114:	2800      	cmp	r0, #0
 8006116:	d11f      	bne.n	8006158 <_svfiprintf_r+0xe8>
 8006118:	6822      	ldr	r2, [r4, #0]
 800611a:	06d3      	lsls	r3, r2, #27
 800611c:	d504      	bpl.n	8006128 <_svfiprintf_r+0xb8>
 800611e:	2353      	movs	r3, #83	@ 0x53
 8006120:	a904      	add	r1, sp, #16
 8006122:	185b      	adds	r3, r3, r1
 8006124:	2120      	movs	r1, #32
 8006126:	7019      	strb	r1, [r3, #0]
 8006128:	0713      	lsls	r3, r2, #28
 800612a:	d504      	bpl.n	8006136 <_svfiprintf_r+0xc6>
 800612c:	2353      	movs	r3, #83	@ 0x53
 800612e:	a904      	add	r1, sp, #16
 8006130:	185b      	adds	r3, r3, r1
 8006132:	212b      	movs	r1, #43	@ 0x2b
 8006134:	7019      	strb	r1, [r3, #0]
 8006136:	7833      	ldrb	r3, [r6, #0]
 8006138:	2b2a      	cmp	r3, #42	@ 0x2a
 800613a:	d016      	beq.n	800616a <_svfiprintf_r+0xfa>
 800613c:	0035      	movs	r5, r6
 800613e:	2100      	movs	r1, #0
 8006140:	200a      	movs	r0, #10
 8006142:	68e3      	ldr	r3, [r4, #12]
 8006144:	782a      	ldrb	r2, [r5, #0]
 8006146:	1c6e      	adds	r6, r5, #1
 8006148:	3a30      	subs	r2, #48	@ 0x30
 800614a:	2a09      	cmp	r2, #9
 800614c:	d950      	bls.n	80061f0 <_svfiprintf_r+0x180>
 800614e:	2900      	cmp	r1, #0
 8006150:	d111      	bne.n	8006176 <_svfiprintf_r+0x106>
 8006152:	e017      	b.n	8006184 <_svfiprintf_r+0x114>
 8006154:	3501      	adds	r5, #1
 8006156:	e7af      	b.n	80060b8 <_svfiprintf_r+0x48>
 8006158:	9b05      	ldr	r3, [sp, #20]
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	1ac0      	subs	r0, r0, r3
 800615e:	2301      	movs	r3, #1
 8006160:	4083      	lsls	r3, r0
 8006162:	4313      	orrs	r3, r2
 8006164:	002e      	movs	r6, r5
 8006166:	6023      	str	r3, [r4, #0]
 8006168:	e7cc      	b.n	8006104 <_svfiprintf_r+0x94>
 800616a:	9b07      	ldr	r3, [sp, #28]
 800616c:	1d19      	adds	r1, r3, #4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	9107      	str	r1, [sp, #28]
 8006172:	2b00      	cmp	r3, #0
 8006174:	db01      	blt.n	800617a <_svfiprintf_r+0x10a>
 8006176:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006178:	e004      	b.n	8006184 <_svfiprintf_r+0x114>
 800617a:	425b      	negs	r3, r3
 800617c:	60e3      	str	r3, [r4, #12]
 800617e:	2302      	movs	r3, #2
 8006180:	4313      	orrs	r3, r2
 8006182:	6023      	str	r3, [r4, #0]
 8006184:	782b      	ldrb	r3, [r5, #0]
 8006186:	2b2e      	cmp	r3, #46	@ 0x2e
 8006188:	d10c      	bne.n	80061a4 <_svfiprintf_r+0x134>
 800618a:	786b      	ldrb	r3, [r5, #1]
 800618c:	2b2a      	cmp	r3, #42	@ 0x2a
 800618e:	d134      	bne.n	80061fa <_svfiprintf_r+0x18a>
 8006190:	9b07      	ldr	r3, [sp, #28]
 8006192:	3502      	adds	r5, #2
 8006194:	1d1a      	adds	r2, r3, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	9207      	str	r2, [sp, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	da01      	bge.n	80061a2 <_svfiprintf_r+0x132>
 800619e:	2301      	movs	r3, #1
 80061a0:	425b      	negs	r3, r3
 80061a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80061a4:	4e2d      	ldr	r6, [pc, #180]	@ (800625c <_svfiprintf_r+0x1ec>)
 80061a6:	2203      	movs	r2, #3
 80061a8:	0030      	movs	r0, r6
 80061aa:	7829      	ldrb	r1, [r5, #0]
 80061ac:	f000 f9fe 	bl	80065ac <memchr>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d006      	beq.n	80061c2 <_svfiprintf_r+0x152>
 80061b4:	2340      	movs	r3, #64	@ 0x40
 80061b6:	1b80      	subs	r0, r0, r6
 80061b8:	4083      	lsls	r3, r0
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	3501      	adds	r5, #1
 80061be:	4313      	orrs	r3, r2
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	7829      	ldrb	r1, [r5, #0]
 80061c4:	2206      	movs	r2, #6
 80061c6:	4826      	ldr	r0, [pc, #152]	@ (8006260 <_svfiprintf_r+0x1f0>)
 80061c8:	1c6e      	adds	r6, r5, #1
 80061ca:	7621      	strb	r1, [r4, #24]
 80061cc:	f000 f9ee 	bl	80065ac <memchr>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d038      	beq.n	8006246 <_svfiprintf_r+0x1d6>
 80061d4:	4b23      	ldr	r3, [pc, #140]	@ (8006264 <_svfiprintf_r+0x1f4>)
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d122      	bne.n	8006220 <_svfiprintf_r+0x1b0>
 80061da:	2207      	movs	r2, #7
 80061dc:	9b07      	ldr	r3, [sp, #28]
 80061de:	3307      	adds	r3, #7
 80061e0:	4393      	bics	r3, r2
 80061e2:	3308      	adds	r3, #8
 80061e4:	9307      	str	r3, [sp, #28]
 80061e6:	6963      	ldr	r3, [r4, #20]
 80061e8:	9a04      	ldr	r2, [sp, #16]
 80061ea:	189b      	adds	r3, r3, r2
 80061ec:	6163      	str	r3, [r4, #20]
 80061ee:	e762      	b.n	80060b6 <_svfiprintf_r+0x46>
 80061f0:	4343      	muls	r3, r0
 80061f2:	0035      	movs	r5, r6
 80061f4:	2101      	movs	r1, #1
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	e7a4      	b.n	8006144 <_svfiprintf_r+0xd4>
 80061fa:	2300      	movs	r3, #0
 80061fc:	200a      	movs	r0, #10
 80061fe:	0019      	movs	r1, r3
 8006200:	3501      	adds	r5, #1
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	782a      	ldrb	r2, [r5, #0]
 8006206:	1c6e      	adds	r6, r5, #1
 8006208:	3a30      	subs	r2, #48	@ 0x30
 800620a:	2a09      	cmp	r2, #9
 800620c:	d903      	bls.n	8006216 <_svfiprintf_r+0x1a6>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0c8      	beq.n	80061a4 <_svfiprintf_r+0x134>
 8006212:	9109      	str	r1, [sp, #36]	@ 0x24
 8006214:	e7c6      	b.n	80061a4 <_svfiprintf_r+0x134>
 8006216:	4341      	muls	r1, r0
 8006218:	0035      	movs	r5, r6
 800621a:	2301      	movs	r3, #1
 800621c:	1889      	adds	r1, r1, r2
 800621e:	e7f1      	b.n	8006204 <_svfiprintf_r+0x194>
 8006220:	aa07      	add	r2, sp, #28
 8006222:	9200      	str	r2, [sp, #0]
 8006224:	0021      	movs	r1, r4
 8006226:	003a      	movs	r2, r7
 8006228:	4b0f      	ldr	r3, [pc, #60]	@ (8006268 <_svfiprintf_r+0x1f8>)
 800622a:	9803      	ldr	r0, [sp, #12]
 800622c:	e000      	b.n	8006230 <_svfiprintf_r+0x1c0>
 800622e:	bf00      	nop
 8006230:	9004      	str	r0, [sp, #16]
 8006232:	9b04      	ldr	r3, [sp, #16]
 8006234:	3301      	adds	r3, #1
 8006236:	d1d6      	bne.n	80061e6 <_svfiprintf_r+0x176>
 8006238:	89bb      	ldrh	r3, [r7, #12]
 800623a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800623c:	065b      	lsls	r3, r3, #25
 800623e:	d500      	bpl.n	8006242 <_svfiprintf_r+0x1d2>
 8006240:	e72c      	b.n	800609c <_svfiprintf_r+0x2c>
 8006242:	b021      	add	sp, #132	@ 0x84
 8006244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006246:	aa07      	add	r2, sp, #28
 8006248:	9200      	str	r2, [sp, #0]
 800624a:	0021      	movs	r1, r4
 800624c:	003a      	movs	r2, r7
 800624e:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <_svfiprintf_r+0x1f8>)
 8006250:	9803      	ldr	r0, [sp, #12]
 8006252:	f000 f87b 	bl	800634c <_printf_i>
 8006256:	e7eb      	b.n	8006230 <_svfiprintf_r+0x1c0>
 8006258:	08006768 	.word	0x08006768
 800625c:	0800676e 	.word	0x0800676e
 8006260:	08006772 	.word	0x08006772
 8006264:	00000000 	.word	0x00000000
 8006268:	08005fb1 	.word	0x08005fb1

0800626c <_printf_common>:
 800626c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800626e:	0016      	movs	r6, r2
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	688a      	ldr	r2, [r1, #8]
 8006274:	690b      	ldr	r3, [r1, #16]
 8006276:	000c      	movs	r4, r1
 8006278:	9000      	str	r0, [sp, #0]
 800627a:	4293      	cmp	r3, r2
 800627c:	da00      	bge.n	8006280 <_printf_common+0x14>
 800627e:	0013      	movs	r3, r2
 8006280:	0022      	movs	r2, r4
 8006282:	6033      	str	r3, [r6, #0]
 8006284:	3243      	adds	r2, #67	@ 0x43
 8006286:	7812      	ldrb	r2, [r2, #0]
 8006288:	2a00      	cmp	r2, #0
 800628a:	d001      	beq.n	8006290 <_printf_common+0x24>
 800628c:	3301      	adds	r3, #1
 800628e:	6033      	str	r3, [r6, #0]
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	069b      	lsls	r3, r3, #26
 8006294:	d502      	bpl.n	800629c <_printf_common+0x30>
 8006296:	6833      	ldr	r3, [r6, #0]
 8006298:	3302      	adds	r3, #2
 800629a:	6033      	str	r3, [r6, #0]
 800629c:	6822      	ldr	r2, [r4, #0]
 800629e:	2306      	movs	r3, #6
 80062a0:	0015      	movs	r5, r2
 80062a2:	401d      	ands	r5, r3
 80062a4:	421a      	tst	r2, r3
 80062a6:	d027      	beq.n	80062f8 <_printf_common+0x8c>
 80062a8:	0023      	movs	r3, r4
 80062aa:	3343      	adds	r3, #67	@ 0x43
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	4193      	sbcs	r3, r2
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	0692      	lsls	r2, r2, #26
 80062b6:	d430      	bmi.n	800631a <_printf_common+0xae>
 80062b8:	0022      	movs	r2, r4
 80062ba:	9901      	ldr	r1, [sp, #4]
 80062bc:	9800      	ldr	r0, [sp, #0]
 80062be:	9d08      	ldr	r5, [sp, #32]
 80062c0:	3243      	adds	r2, #67	@ 0x43
 80062c2:	47a8      	blx	r5
 80062c4:	3001      	adds	r0, #1
 80062c6:	d025      	beq.n	8006314 <_printf_common+0xa8>
 80062c8:	2206      	movs	r2, #6
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	2500      	movs	r5, #0
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d105      	bne.n	80062e0 <_printf_common+0x74>
 80062d4:	6833      	ldr	r3, [r6, #0]
 80062d6:	68e5      	ldr	r5, [r4, #12]
 80062d8:	1aed      	subs	r5, r5, r3
 80062da:	43eb      	mvns	r3, r5
 80062dc:	17db      	asrs	r3, r3, #31
 80062de:	401d      	ands	r5, r3
 80062e0:	68a3      	ldr	r3, [r4, #8]
 80062e2:	6922      	ldr	r2, [r4, #16]
 80062e4:	4293      	cmp	r3, r2
 80062e6:	dd01      	ble.n	80062ec <_printf_common+0x80>
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	18ed      	adds	r5, r5, r3
 80062ec:	2600      	movs	r6, #0
 80062ee:	42b5      	cmp	r5, r6
 80062f0:	d120      	bne.n	8006334 <_printf_common+0xc8>
 80062f2:	2000      	movs	r0, #0
 80062f4:	e010      	b.n	8006318 <_printf_common+0xac>
 80062f6:	3501      	adds	r5, #1
 80062f8:	68e3      	ldr	r3, [r4, #12]
 80062fa:	6832      	ldr	r2, [r6, #0]
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	42ab      	cmp	r3, r5
 8006300:	ddd2      	ble.n	80062a8 <_printf_common+0x3c>
 8006302:	0022      	movs	r2, r4
 8006304:	2301      	movs	r3, #1
 8006306:	9901      	ldr	r1, [sp, #4]
 8006308:	9800      	ldr	r0, [sp, #0]
 800630a:	9f08      	ldr	r7, [sp, #32]
 800630c:	3219      	adds	r2, #25
 800630e:	47b8      	blx	r7
 8006310:	3001      	adds	r0, #1
 8006312:	d1f0      	bne.n	80062f6 <_printf_common+0x8a>
 8006314:	2001      	movs	r0, #1
 8006316:	4240      	negs	r0, r0
 8006318:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800631a:	2030      	movs	r0, #48	@ 0x30
 800631c:	18e1      	adds	r1, r4, r3
 800631e:	3143      	adds	r1, #67	@ 0x43
 8006320:	7008      	strb	r0, [r1, #0]
 8006322:	0021      	movs	r1, r4
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	3145      	adds	r1, #69	@ 0x45
 8006328:	7809      	ldrb	r1, [r1, #0]
 800632a:	18a2      	adds	r2, r4, r2
 800632c:	3243      	adds	r2, #67	@ 0x43
 800632e:	3302      	adds	r3, #2
 8006330:	7011      	strb	r1, [r2, #0]
 8006332:	e7c1      	b.n	80062b8 <_printf_common+0x4c>
 8006334:	0022      	movs	r2, r4
 8006336:	2301      	movs	r3, #1
 8006338:	9901      	ldr	r1, [sp, #4]
 800633a:	9800      	ldr	r0, [sp, #0]
 800633c:	9f08      	ldr	r7, [sp, #32]
 800633e:	321a      	adds	r2, #26
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	d0e6      	beq.n	8006314 <_printf_common+0xa8>
 8006346:	3601      	adds	r6, #1
 8006348:	e7d1      	b.n	80062ee <_printf_common+0x82>
	...

0800634c <_printf_i>:
 800634c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634e:	b08b      	sub	sp, #44	@ 0x2c
 8006350:	9206      	str	r2, [sp, #24]
 8006352:	000a      	movs	r2, r1
 8006354:	3243      	adds	r2, #67	@ 0x43
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	9005      	str	r0, [sp, #20]
 800635a:	9203      	str	r2, [sp, #12]
 800635c:	7e0a      	ldrb	r2, [r1, #24]
 800635e:	000c      	movs	r4, r1
 8006360:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006362:	2a78      	cmp	r2, #120	@ 0x78
 8006364:	d809      	bhi.n	800637a <_printf_i+0x2e>
 8006366:	2a62      	cmp	r2, #98	@ 0x62
 8006368:	d80b      	bhi.n	8006382 <_printf_i+0x36>
 800636a:	2a00      	cmp	r2, #0
 800636c:	d100      	bne.n	8006370 <_printf_i+0x24>
 800636e:	e0ba      	b.n	80064e6 <_printf_i+0x19a>
 8006370:	497a      	ldr	r1, [pc, #488]	@ (800655c <_printf_i+0x210>)
 8006372:	9104      	str	r1, [sp, #16]
 8006374:	2a58      	cmp	r2, #88	@ 0x58
 8006376:	d100      	bne.n	800637a <_printf_i+0x2e>
 8006378:	e08e      	b.n	8006498 <_printf_i+0x14c>
 800637a:	0025      	movs	r5, r4
 800637c:	3542      	adds	r5, #66	@ 0x42
 800637e:	702a      	strb	r2, [r5, #0]
 8006380:	e022      	b.n	80063c8 <_printf_i+0x7c>
 8006382:	0010      	movs	r0, r2
 8006384:	3863      	subs	r0, #99	@ 0x63
 8006386:	2815      	cmp	r0, #21
 8006388:	d8f7      	bhi.n	800637a <_printf_i+0x2e>
 800638a:	f7f9 febb 	bl	8000104 <__gnu_thumb1_case_shi>
 800638e:	0016      	.short	0x0016
 8006390:	fff6001f 	.word	0xfff6001f
 8006394:	fff6fff6 	.word	0xfff6fff6
 8006398:	001ffff6 	.word	0x001ffff6
 800639c:	fff6fff6 	.word	0xfff6fff6
 80063a0:	fff6fff6 	.word	0xfff6fff6
 80063a4:	0036009f 	.word	0x0036009f
 80063a8:	fff6007e 	.word	0xfff6007e
 80063ac:	00b0fff6 	.word	0x00b0fff6
 80063b0:	0036fff6 	.word	0x0036fff6
 80063b4:	fff6fff6 	.word	0xfff6fff6
 80063b8:	0082      	.short	0x0082
 80063ba:	0025      	movs	r5, r4
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	3542      	adds	r5, #66	@ 0x42
 80063c0:	1d11      	adds	r1, r2, #4
 80063c2:	6019      	str	r1, [r3, #0]
 80063c4:	6813      	ldr	r3, [r2, #0]
 80063c6:	702b      	strb	r3, [r5, #0]
 80063c8:	2301      	movs	r3, #1
 80063ca:	e09e      	b.n	800650a <_printf_i+0x1be>
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	6809      	ldr	r1, [r1, #0]
 80063d0:	1d02      	adds	r2, r0, #4
 80063d2:	060d      	lsls	r5, r1, #24
 80063d4:	d50b      	bpl.n	80063ee <_printf_i+0xa2>
 80063d6:	6806      	ldr	r6, [r0, #0]
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	2e00      	cmp	r6, #0
 80063dc:	da03      	bge.n	80063e6 <_printf_i+0x9a>
 80063de:	232d      	movs	r3, #45	@ 0x2d
 80063e0:	9a03      	ldr	r2, [sp, #12]
 80063e2:	4276      	negs	r6, r6
 80063e4:	7013      	strb	r3, [r2, #0]
 80063e6:	4b5d      	ldr	r3, [pc, #372]	@ (800655c <_printf_i+0x210>)
 80063e8:	270a      	movs	r7, #10
 80063ea:	9304      	str	r3, [sp, #16]
 80063ec:	e018      	b.n	8006420 <_printf_i+0xd4>
 80063ee:	6806      	ldr	r6, [r0, #0]
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	0649      	lsls	r1, r1, #25
 80063f4:	d5f1      	bpl.n	80063da <_printf_i+0x8e>
 80063f6:	b236      	sxth	r6, r6
 80063f8:	e7ef      	b.n	80063da <_printf_i+0x8e>
 80063fa:	6808      	ldr	r0, [r1, #0]
 80063fc:	6819      	ldr	r1, [r3, #0]
 80063fe:	c940      	ldmia	r1!, {r6}
 8006400:	0605      	lsls	r5, r0, #24
 8006402:	d402      	bmi.n	800640a <_printf_i+0xbe>
 8006404:	0640      	lsls	r0, r0, #25
 8006406:	d500      	bpl.n	800640a <_printf_i+0xbe>
 8006408:	b2b6      	uxth	r6, r6
 800640a:	6019      	str	r1, [r3, #0]
 800640c:	4b53      	ldr	r3, [pc, #332]	@ (800655c <_printf_i+0x210>)
 800640e:	270a      	movs	r7, #10
 8006410:	9304      	str	r3, [sp, #16]
 8006412:	2a6f      	cmp	r2, #111	@ 0x6f
 8006414:	d100      	bne.n	8006418 <_printf_i+0xcc>
 8006416:	3f02      	subs	r7, #2
 8006418:	0023      	movs	r3, r4
 800641a:	2200      	movs	r2, #0
 800641c:	3343      	adds	r3, #67	@ 0x43
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	6863      	ldr	r3, [r4, #4]
 8006422:	60a3      	str	r3, [r4, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	db06      	blt.n	8006436 <_printf_i+0xea>
 8006428:	2104      	movs	r1, #4
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	9d03      	ldr	r5, [sp, #12]
 800642e:	438a      	bics	r2, r1
 8006430:	6022      	str	r2, [r4, #0]
 8006432:	4333      	orrs	r3, r6
 8006434:	d00c      	beq.n	8006450 <_printf_i+0x104>
 8006436:	9d03      	ldr	r5, [sp, #12]
 8006438:	0030      	movs	r0, r6
 800643a:	0039      	movs	r1, r7
 800643c:	f7f9 fef2 	bl	8000224 <__aeabi_uidivmod>
 8006440:	9b04      	ldr	r3, [sp, #16]
 8006442:	3d01      	subs	r5, #1
 8006444:	5c5b      	ldrb	r3, [r3, r1]
 8006446:	702b      	strb	r3, [r5, #0]
 8006448:	0033      	movs	r3, r6
 800644a:	0006      	movs	r6, r0
 800644c:	429f      	cmp	r7, r3
 800644e:	d9f3      	bls.n	8006438 <_printf_i+0xec>
 8006450:	2f08      	cmp	r7, #8
 8006452:	d109      	bne.n	8006468 <_printf_i+0x11c>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	07db      	lsls	r3, r3, #31
 8006458:	d506      	bpl.n	8006468 <_printf_i+0x11c>
 800645a:	6862      	ldr	r2, [r4, #4]
 800645c:	6923      	ldr	r3, [r4, #16]
 800645e:	429a      	cmp	r2, r3
 8006460:	dc02      	bgt.n	8006468 <_printf_i+0x11c>
 8006462:	2330      	movs	r3, #48	@ 0x30
 8006464:	3d01      	subs	r5, #1
 8006466:	702b      	strb	r3, [r5, #0]
 8006468:	9b03      	ldr	r3, [sp, #12]
 800646a:	1b5b      	subs	r3, r3, r5
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	9b07      	ldr	r3, [sp, #28]
 8006470:	0021      	movs	r1, r4
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	9805      	ldr	r0, [sp, #20]
 8006476:	9b06      	ldr	r3, [sp, #24]
 8006478:	aa09      	add	r2, sp, #36	@ 0x24
 800647a:	f7ff fef7 	bl	800626c <_printf_common>
 800647e:	3001      	adds	r0, #1
 8006480:	d148      	bne.n	8006514 <_printf_i+0x1c8>
 8006482:	2001      	movs	r0, #1
 8006484:	4240      	negs	r0, r0
 8006486:	b00b      	add	sp, #44	@ 0x2c
 8006488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648a:	2220      	movs	r2, #32
 800648c:	6809      	ldr	r1, [r1, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	6022      	str	r2, [r4, #0]
 8006492:	2278      	movs	r2, #120	@ 0x78
 8006494:	4932      	ldr	r1, [pc, #200]	@ (8006560 <_printf_i+0x214>)
 8006496:	9104      	str	r1, [sp, #16]
 8006498:	0021      	movs	r1, r4
 800649a:	3145      	adds	r1, #69	@ 0x45
 800649c:	700a      	strb	r2, [r1, #0]
 800649e:	6819      	ldr	r1, [r3, #0]
 80064a0:	6822      	ldr	r2, [r4, #0]
 80064a2:	c940      	ldmia	r1!, {r6}
 80064a4:	0610      	lsls	r0, r2, #24
 80064a6:	d402      	bmi.n	80064ae <_printf_i+0x162>
 80064a8:	0650      	lsls	r0, r2, #25
 80064aa:	d500      	bpl.n	80064ae <_printf_i+0x162>
 80064ac:	b2b6      	uxth	r6, r6
 80064ae:	6019      	str	r1, [r3, #0]
 80064b0:	07d3      	lsls	r3, r2, #31
 80064b2:	d502      	bpl.n	80064ba <_printf_i+0x16e>
 80064b4:	2320      	movs	r3, #32
 80064b6:	4313      	orrs	r3, r2
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	2e00      	cmp	r6, #0
 80064bc:	d001      	beq.n	80064c2 <_printf_i+0x176>
 80064be:	2710      	movs	r7, #16
 80064c0:	e7aa      	b.n	8006418 <_printf_i+0xcc>
 80064c2:	2220      	movs	r2, #32
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	4393      	bics	r3, r2
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	e7f8      	b.n	80064be <_printf_i+0x172>
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	680d      	ldr	r5, [r1, #0]
 80064d0:	1d10      	adds	r0, r2, #4
 80064d2:	6949      	ldr	r1, [r1, #20]
 80064d4:	6018      	str	r0, [r3, #0]
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	062e      	lsls	r6, r5, #24
 80064da:	d501      	bpl.n	80064e0 <_printf_i+0x194>
 80064dc:	6019      	str	r1, [r3, #0]
 80064de:	e002      	b.n	80064e6 <_printf_i+0x19a>
 80064e0:	066d      	lsls	r5, r5, #25
 80064e2:	d5fb      	bpl.n	80064dc <_printf_i+0x190>
 80064e4:	8019      	strh	r1, [r3, #0]
 80064e6:	2300      	movs	r3, #0
 80064e8:	9d03      	ldr	r5, [sp, #12]
 80064ea:	6123      	str	r3, [r4, #16]
 80064ec:	e7bf      	b.n	800646e <_printf_i+0x122>
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	1d11      	adds	r1, r2, #4
 80064f2:	6019      	str	r1, [r3, #0]
 80064f4:	6815      	ldr	r5, [r2, #0]
 80064f6:	2100      	movs	r1, #0
 80064f8:	0028      	movs	r0, r5
 80064fa:	6862      	ldr	r2, [r4, #4]
 80064fc:	f000 f856 	bl	80065ac <memchr>
 8006500:	2800      	cmp	r0, #0
 8006502:	d001      	beq.n	8006508 <_printf_i+0x1bc>
 8006504:	1b40      	subs	r0, r0, r5
 8006506:	6060      	str	r0, [r4, #4]
 8006508:	6863      	ldr	r3, [r4, #4]
 800650a:	6123      	str	r3, [r4, #16]
 800650c:	2300      	movs	r3, #0
 800650e:	9a03      	ldr	r2, [sp, #12]
 8006510:	7013      	strb	r3, [r2, #0]
 8006512:	e7ac      	b.n	800646e <_printf_i+0x122>
 8006514:	002a      	movs	r2, r5
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	9906      	ldr	r1, [sp, #24]
 800651a:	9805      	ldr	r0, [sp, #20]
 800651c:	9d07      	ldr	r5, [sp, #28]
 800651e:	47a8      	blx	r5
 8006520:	3001      	adds	r0, #1
 8006522:	d0ae      	beq.n	8006482 <_printf_i+0x136>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	079b      	lsls	r3, r3, #30
 8006528:	d415      	bmi.n	8006556 <_printf_i+0x20a>
 800652a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800652c:	68e0      	ldr	r0, [r4, #12]
 800652e:	4298      	cmp	r0, r3
 8006530:	daa9      	bge.n	8006486 <_printf_i+0x13a>
 8006532:	0018      	movs	r0, r3
 8006534:	e7a7      	b.n	8006486 <_printf_i+0x13a>
 8006536:	0022      	movs	r2, r4
 8006538:	2301      	movs	r3, #1
 800653a:	9906      	ldr	r1, [sp, #24]
 800653c:	9805      	ldr	r0, [sp, #20]
 800653e:	9e07      	ldr	r6, [sp, #28]
 8006540:	3219      	adds	r2, #25
 8006542:	47b0      	blx	r6
 8006544:	3001      	adds	r0, #1
 8006546:	d09c      	beq.n	8006482 <_printf_i+0x136>
 8006548:	3501      	adds	r5, #1
 800654a:	68e3      	ldr	r3, [r4, #12]
 800654c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	42ab      	cmp	r3, r5
 8006552:	dcf0      	bgt.n	8006536 <_printf_i+0x1ea>
 8006554:	e7e9      	b.n	800652a <_printf_i+0x1de>
 8006556:	2500      	movs	r5, #0
 8006558:	e7f7      	b.n	800654a <_printf_i+0x1fe>
 800655a:	46c0      	nop			@ (mov r8, r8)
 800655c:	08006779 	.word	0x08006779
 8006560:	0800678a 	.word	0x0800678a

08006564 <memmove>:
 8006564:	b510      	push	{r4, lr}
 8006566:	4288      	cmp	r0, r1
 8006568:	d902      	bls.n	8006570 <memmove+0xc>
 800656a:	188b      	adds	r3, r1, r2
 800656c:	4298      	cmp	r0, r3
 800656e:	d308      	bcc.n	8006582 <memmove+0x1e>
 8006570:	2300      	movs	r3, #0
 8006572:	429a      	cmp	r2, r3
 8006574:	d007      	beq.n	8006586 <memmove+0x22>
 8006576:	5ccc      	ldrb	r4, [r1, r3]
 8006578:	54c4      	strb	r4, [r0, r3]
 800657a:	3301      	adds	r3, #1
 800657c:	e7f9      	b.n	8006572 <memmove+0xe>
 800657e:	5c8b      	ldrb	r3, [r1, r2]
 8006580:	5483      	strb	r3, [r0, r2]
 8006582:	3a01      	subs	r2, #1
 8006584:	d2fb      	bcs.n	800657e <memmove+0x1a>
 8006586:	bd10      	pop	{r4, pc}

08006588 <_sbrk_r>:
 8006588:	2300      	movs	r3, #0
 800658a:	b570      	push	{r4, r5, r6, lr}
 800658c:	4d06      	ldr	r5, [pc, #24]	@ (80065a8 <_sbrk_r+0x20>)
 800658e:	0004      	movs	r4, r0
 8006590:	0008      	movs	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fa fbd8 	bl	8000d48 <_sbrk>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d103      	bne.n	80065a4 <_sbrk_r+0x1c>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d000      	beq.n	80065a4 <_sbrk_r+0x1c>
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	2000032c 	.word	0x2000032c

080065ac <memchr>:
 80065ac:	b2c9      	uxtb	r1, r1
 80065ae:	1882      	adds	r2, r0, r2
 80065b0:	4290      	cmp	r0, r2
 80065b2:	d101      	bne.n	80065b8 <memchr+0xc>
 80065b4:	2000      	movs	r0, #0
 80065b6:	4770      	bx	lr
 80065b8:	7803      	ldrb	r3, [r0, #0]
 80065ba:	428b      	cmp	r3, r1
 80065bc:	d0fb      	beq.n	80065b6 <memchr+0xa>
 80065be:	3001      	adds	r0, #1
 80065c0:	e7f6      	b.n	80065b0 <memchr+0x4>

080065c2 <memcpy>:
 80065c2:	2300      	movs	r3, #0
 80065c4:	b510      	push	{r4, lr}
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d100      	bne.n	80065cc <memcpy+0xa>
 80065ca:	bd10      	pop	{r4, pc}
 80065cc:	5ccc      	ldrb	r4, [r1, r3]
 80065ce:	54c4      	strb	r4, [r0, r3]
 80065d0:	3301      	adds	r3, #1
 80065d2:	e7f8      	b.n	80065c6 <memcpy+0x4>

080065d4 <_realloc_r>:
 80065d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065d6:	0006      	movs	r6, r0
 80065d8:	000c      	movs	r4, r1
 80065da:	0015      	movs	r5, r2
 80065dc:	2900      	cmp	r1, #0
 80065de:	d105      	bne.n	80065ec <_realloc_r+0x18>
 80065e0:	0011      	movs	r1, r2
 80065e2:	f7ff fc55 	bl	8005e90 <_malloc_r>
 80065e6:	0004      	movs	r4, r0
 80065e8:	0020      	movs	r0, r4
 80065ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065ec:	2a00      	cmp	r2, #0
 80065ee:	d103      	bne.n	80065f8 <_realloc_r+0x24>
 80065f0:	f7ff fbe2 	bl	8005db8 <_free_r>
 80065f4:	002c      	movs	r4, r5
 80065f6:	e7f7      	b.n	80065e8 <_realloc_r+0x14>
 80065f8:	f000 f81c 	bl	8006634 <_malloc_usable_size_r>
 80065fc:	0007      	movs	r7, r0
 80065fe:	4285      	cmp	r5, r0
 8006600:	d802      	bhi.n	8006608 <_realloc_r+0x34>
 8006602:	0843      	lsrs	r3, r0, #1
 8006604:	42ab      	cmp	r3, r5
 8006606:	d3ef      	bcc.n	80065e8 <_realloc_r+0x14>
 8006608:	0029      	movs	r1, r5
 800660a:	0030      	movs	r0, r6
 800660c:	f7ff fc40 	bl	8005e90 <_malloc_r>
 8006610:	9001      	str	r0, [sp, #4]
 8006612:	2800      	cmp	r0, #0
 8006614:	d101      	bne.n	800661a <_realloc_r+0x46>
 8006616:	9c01      	ldr	r4, [sp, #4]
 8006618:	e7e6      	b.n	80065e8 <_realloc_r+0x14>
 800661a:	002a      	movs	r2, r5
 800661c:	42bd      	cmp	r5, r7
 800661e:	d900      	bls.n	8006622 <_realloc_r+0x4e>
 8006620:	003a      	movs	r2, r7
 8006622:	0021      	movs	r1, r4
 8006624:	9801      	ldr	r0, [sp, #4]
 8006626:	f7ff ffcc 	bl	80065c2 <memcpy>
 800662a:	0021      	movs	r1, r4
 800662c:	0030      	movs	r0, r6
 800662e:	f7ff fbc3 	bl	8005db8 <_free_r>
 8006632:	e7f0      	b.n	8006616 <_realloc_r+0x42>

08006634 <_malloc_usable_size_r>:
 8006634:	1f0b      	subs	r3, r1, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	1f18      	subs	r0, r3, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	da01      	bge.n	8006642 <_malloc_usable_size_r+0xe>
 800663e:	580b      	ldr	r3, [r1, r0]
 8006640:	18c0      	adds	r0, r0, r3
 8006642:	4770      	bx	lr

08006644 <_init>:
 8006644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006646:	46c0      	nop			@ (mov r8, r8)
 8006648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664a:	bc08      	pop	{r3}
 800664c:	469e      	mov	lr, r3
 800664e:	4770      	bx	lr

08006650 <_fini>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	46c0      	nop			@ (mov r8, r8)
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr
