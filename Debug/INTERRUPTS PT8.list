
INTERRUPTS PT8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f70  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800702c  0800702c  0000802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071ec  080071ec  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080071ec  080071ec  000081ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071f4  080071f4  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f4  080071f4  000081f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071f8  080071f8  000081f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080071fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000060  0800725c  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800725c  0000934c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140da  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e6a  00000000  00000000  0001d162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7a  00000000  00000000  000210f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf25  00000000  00000000  00021e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166b5  00000000  00000000  0003dd97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac10b  00000000  00000000  0005444c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100557  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004230  00000000  00000000  0010059c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001047cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007014 	.word	0x08007014

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08007014 	.word	0x08007014

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <_Z10debugPrintPKcz>:
};

volatile Mode currentMode = MODE_FREEZE;

void debugPrint(const char *fmt, ...)
{
 8000630:	b40f      	push	{r0, r1, r2, r3}
 8000632:	b580      	push	{r7, lr}
 8000634:	b092      	sub	sp, #72	@ 0x48
 8000636:	af00      	add	r7, sp, #0
    char buf[64];
    va_list args;
    va_start(args, fmt);
 8000638:	2354      	movs	r3, #84	@ 0x54
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buf, sizeof(buf), fmt, args);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000642:	1d38      	adds	r0, r7, #4
 8000644:	2140      	movs	r1, #64	@ 0x40
 8000646:	f006 f85f 	bl	8006708 <vsniprintf>
 800064a:	0003      	movs	r3, r0
 800064c:	647b      	str	r3, [r7, #68]	@ 0x44
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 800064e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000650:	b29a      	uxth	r2, r3
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	1d39      	adds	r1, r7, #4
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <_Z10debugPrintPKcz+0x3c>)
 800065a:	f003 ff47 	bl	80044ec <HAL_UART_Transmit>
}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b012      	add	sp, #72	@ 0x48
 8000664:	bc80      	pop	{r7}
 8000666:	bc08      	pop	{r3}
 8000668:	b004      	add	sp, #16
 800066a:	4718      	bx	r3
 800066c:	2000016c 	.word	0x2000016c

08000670 <maincpp>:

uint16_t pos = SERVO_MIN;
int8_t   dir = +1;

void maincpp(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&SERVO_TIMER, TIM_CHANNEL_1);
 8000676:	4b77      	ldr	r3, [pc, #476]	@ (8000854 <maincpp+0x1e4>)
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f003 f876 	bl	800376c <HAL_TIM_PWM_Start>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pot_value, 1);
 8000680:	4975      	ldr	r1, [pc, #468]	@ (8000858 <maincpp+0x1e8>)
 8000682:	4b76      	ldr	r3, [pc, #472]	@ (800085c <maincpp+0x1ec>)
 8000684:	2201      	movs	r2, #1
 8000686:	0018      	movs	r0, r3
 8000688:	f001 f988 	bl	800199c <HAL_ADC_Start_DMA>
    MX_USART2_UART_Init();
 800068c:	f000 fd30 	bl	80010f0 <MX_USART2_UART_Init>
    HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000690:	4973      	ldr	r1, [pc, #460]	@ (8000860 <maincpp+0x1f0>)
 8000692:	4b74      	ldr	r3, [pc, #464]	@ (8000864 <maincpp+0x1f4>)
 8000694:	2201      	movs	r2, #1
 8000696:	0018      	movs	r0, r3
 8000698:	f003 ffcc 	bl	8004634 <HAL_UART_Receive_IT>

    time_since_button_pressed = HAL_GetTick();
 800069c:	f000 fe84 	bl	80013a8 <HAL_GetTick>
 80006a0:	0002      	movs	r2, r0
 80006a2:	4b71      	ldr	r3, [pc, #452]	@ (8000868 <maincpp+0x1f8>)
 80006a4:	601a      	str	r2, [r3, #0]
    static uint32_t lastFreezeTick = 0;
    static uint32_t lastManualTick = 0;

    while (1)
    {
        uint32_t now = HAL_GetTick();
 80006a6:	f000 fe7f 	bl	80013a8 <HAL_GetTick>
 80006aa:	0003      	movs	r3, r0
 80006ac:	607b      	str	r3, [r7, #4]


        switch (currentMode)
 80006ae:	4b6f      	ldr	r3, [pc, #444]	@ (800086c <maincpp+0x1fc>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d049      	beq.n	800074c <maincpp+0xdc>
 80006b8:	dd00      	ble.n	80006bc <maincpp+0x4c>
 80006ba:	e077      	b.n	80007ac <maincpp+0x13c>
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d033      	beq.n	8000728 <maincpp+0xb8>
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d000      	beq.n	80006c6 <maincpp+0x56>
 80006c4:	e072      	b.n	80007ac <maincpp+0x13c>
        {
            case MODE_SWEEP:
                if (now - lastSweepTick >= SWEEP_INTERVAL_MS) {
 80006c6:	4b6a      	ldr	r3, [pc, #424]	@ (8000870 <maincpp+0x200>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d068      	beq.n	80007a2 <maincpp+0x132>
                    lastSweepTick = now;
 80006d0:	4b67      	ldr	r3, [pc, #412]	@ (8000870 <maincpp+0x200>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
                    SERVO_TIMER.Instance->CCR1 = pos;
 80006d6:	4b67      	ldr	r3, [pc, #412]	@ (8000874 <maincpp+0x204>)
 80006d8:	881a      	ldrh	r2, [r3, #0]
 80006da:	4b5e      	ldr	r3, [pc, #376]	@ (8000854 <maincpp+0x1e4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	635a      	str	r2, [r3, #52]	@ 0x34
                    pos += dir;
 80006e0:	4b65      	ldr	r3, [pc, #404]	@ (8000878 <maincpp+0x208>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b62      	ldr	r3, [pc, #392]	@ (8000874 <maincpp+0x204>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	18d3      	adds	r3, r2, r3
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	4b60      	ldr	r3, [pc, #384]	@ (8000874 <maincpp+0x204>)
 80006f2:	801a      	strh	r2, [r3, #0]
                    if (pos >= SERVO_MAX) {
 80006f4:	4b5f      	ldr	r3, [pc, #380]	@ (8000874 <maincpp+0x204>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	4a60      	ldr	r2, [pc, #384]	@ (800087c <maincpp+0x20c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d906      	bls.n	800070c <maincpp+0x9c>
                        pos = SERVO_MAX;
 80006fe:	4b5d      	ldr	r3, [pc, #372]	@ (8000874 <maincpp+0x204>)
 8000700:	4a5f      	ldr	r2, [pc, #380]	@ (8000880 <maincpp+0x210>)
 8000702:	801a      	strh	r2, [r3, #0]
                        dir = -1;
 8000704:	4b5c      	ldr	r3, [pc, #368]	@ (8000878 <maincpp+0x208>)
 8000706:	22ff      	movs	r2, #255	@ 0xff
 8000708:	701a      	strb	r2, [r3, #0]
                    } else if (pos <= SERVO_MIN) {
                        pos = SERVO_MIN;
                        dir = +1;
                    }
                }
                break;
 800070a:	e04a      	b.n	80007a2 <maincpp+0x132>
                    } else if (pos <= SERVO_MIN) {
 800070c:	4b59      	ldr	r3, [pc, #356]	@ (8000874 <maincpp+0x204>)
 800070e:	881a      	ldrh	r2, [r3, #0]
 8000710:	23fa      	movs	r3, #250	@ 0xfa
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	429a      	cmp	r2, r3
 8000716:	d844      	bhi.n	80007a2 <maincpp+0x132>
                        pos = SERVO_MIN;
 8000718:	4b56      	ldr	r3, [pc, #344]	@ (8000874 <maincpp+0x204>)
 800071a:	22fa      	movs	r2, #250	@ 0xfa
 800071c:	0052      	lsls	r2, r2, #1
 800071e:	801a      	strh	r2, [r3, #0]
                        dir = +1;
 8000720:	4b55      	ldr	r3, [pc, #340]	@ (8000878 <maincpp+0x208>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
                break;
 8000726:	e03c      	b.n	80007a2 <maincpp+0x132>

            case MODE_FREEZE:
                if (now - lastFreezeTick >= FREEZE_INTERVAL_MS) {
 8000728:	4b56      	ldr	r3, [pc, #344]	@ (8000884 <maincpp+0x214>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	1ad2      	subs	r2, r2, r3
 8000730:	23fa      	movs	r3, #250	@ 0xfa
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	429a      	cmp	r2, r3
 8000736:	d336      	bcc.n	80007a6 <maincpp+0x136>
                    lastFreezeTick = now;
 8000738:	4b52      	ldr	r3, [pc, #328]	@ (8000884 <maincpp+0x214>)
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	601a      	str	r2, [r3, #0]
                    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800073e:	23a0      	movs	r3, #160	@ 0xa0
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	2120      	movs	r1, #32
 8000744:	0018      	movs	r0, r3
 8000746:	f002 f8ac 	bl	80028a2 <HAL_GPIO_TogglePin>
                }
                break;
 800074a:	e02c      	b.n	80007a6 <maincpp+0x136>

            case MODE_MANUAL:
                if (now - lastManualTick >= MANUAL_INTERVAL_MS) {
 800074c:	4b4e      	ldr	r3, [pc, #312]	@ (8000888 <maincpp+0x218>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	2bc7      	cmp	r3, #199	@ 0xc7
 8000756:	d928      	bls.n	80007aa <maincpp+0x13a>
                    lastManualTick = now;
 8000758:	4b4b      	ldr	r3, [pc, #300]	@ (8000888 <maincpp+0x218>)
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	601a      	str	r2, [r3, #0]
                    pos = (pot_value * SERVO_RANGE) / ADC_MAX + SERVO_MIN;
 800075e:	4b3e      	ldr	r3, [pc, #248]	@ (8000858 <maincpp+0x1e8>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	0013      	movs	r3, r2
 8000764:	015b      	lsls	r3, r3, #5
 8000766:	1a9b      	subs	r3, r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	189b      	adds	r3, r3, r2
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	4947      	ldr	r1, [pc, #284]	@ (800088c <maincpp+0x21c>)
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fcd1 	bl	8000118 <__udivsi3>
 8000776:	0003      	movs	r3, r0
 8000778:	b29b      	uxth	r3, r3
 800077a:	33f5      	adds	r3, #245	@ 0xf5
 800077c:	33ff      	adds	r3, #255	@ 0xff
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b3c      	ldr	r3, [pc, #240]	@ (8000874 <maincpp+0x204>)
 8000782:	801a      	strh	r2, [r3, #0]
                    SERVO_TIMER.Instance->CCR1 = pos;
 8000784:	4b3b      	ldr	r3, [pc, #236]	@ (8000874 <maincpp+0x204>)
 8000786:	881a      	ldrh	r2, [r3, #0]
 8000788:	4b32      	ldr	r3, [pc, #200]	@ (8000854 <maincpp+0x1e4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	635a      	str	r2, [r3, #52]	@ 0x34
                    debugPrint("MANUAL POS=%u, ADC=%lu\r\n", pos, pot_value);
 800078e:	4b39      	ldr	r3, [pc, #228]	@ (8000874 <maincpp+0x204>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	0019      	movs	r1, r3
 8000794:	4b30      	ldr	r3, [pc, #192]	@ (8000858 <maincpp+0x1e8>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b3d      	ldr	r3, [pc, #244]	@ (8000890 <maincpp+0x220>)
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff ff48 	bl	8000630 <_Z10debugPrintPKcz>
                }
                break;
 80007a0:	e003      	b.n	80007aa <maincpp+0x13a>
                break;
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	e002      	b.n	80007ac <maincpp+0x13c>
                break;
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	e000      	b.n	80007ac <maincpp+0x13c>
                break;
 80007aa:	46c0      	nop			@ (mov r8, r8)
        }

        // Command parsing
        if (cmdReady) {
 80007ac:	4b39      	ldr	r3, [pc, #228]	@ (8000894 <maincpp+0x224>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d100      	bne.n	80007b6 <maincpp+0x146>
 80007b4:	e777      	b.n	80006a6 <maincpp+0x36>
            switch (cmdBuf[0]) {
 80007b6:	4b38      	ldr	r3, [pc, #224]	@ (8000898 <maincpp+0x228>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b53      	cmp	r3, #83	@ 0x53
 80007bc:	d008      	beq.n	80007d0 <maincpp+0x160>
 80007be:	dc3c      	bgt.n	800083a <maincpp+0x1ca>
 80007c0:	2b4d      	cmp	r3, #77	@ 0x4d
 80007c2:	d023      	beq.n	800080c <maincpp+0x19c>
 80007c4:	dc39      	bgt.n	800083a <maincpp+0x1ca>
 80007c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80007c8:	d02a      	beq.n	8000820 <maincpp+0x1b0>
 80007ca:	2b46      	cmp	r3, #70	@ 0x46
 80007cc:	d014      	beq.n	80007f8 <maincpp+0x188>
 80007ce:	e034      	b.n	800083a <maincpp+0x1ca>
                case 'S':  // toggle sweep
                    currentMode = (currentMode == MODE_SWEEP)
                                  ? MODE_FREEZE
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <maincpp+0x1fc>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	3b01      	subs	r3, #1
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	4193      	sbcs	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	001a      	movs	r2, r3
                    currentMode = (currentMode == MODE_SWEEP)
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <maincpp+0x1fc>)
 80007e2:	701a      	strb	r2, [r3, #0]
                                  : MODE_SWEEP;
                    debugPrint("CMD: %s → MODE=%d\r\n",
 80007e4:	4b21      	ldr	r3, [pc, #132]	@ (800086c <maincpp+0x1fc>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	001a      	movs	r2, r3
 80007ec:	492a      	ldr	r1, [pc, #168]	@ (8000898 <maincpp+0x228>)
 80007ee:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <maincpp+0x22c>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff ff1d 	bl	8000630 <_Z10debugPrintPKcz>
                               cmdBuf, currentMode);
                    break;
 80007f6:	e026      	b.n	8000846 <maincpp+0x1d6>
                case 'F':  // force freeze
                    currentMode = MODE_FREEZE;
 80007f8:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <maincpp+0x1fc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
                    debugPrint("CMD: %s → FREEZE\r\n", cmdBuf);
 80007fe:	4a26      	ldr	r2, [pc, #152]	@ (8000898 <maincpp+0x228>)
 8000800:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <maincpp+0x230>)
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ff13 	bl	8000630 <_Z10debugPrintPKcz>
                    break;
 800080a:	e01c      	b.n	8000846 <maincpp+0x1d6>
                case 'M':  // force manual
                    currentMode = MODE_MANUAL;
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <maincpp+0x1fc>)
 800080e:	2202      	movs	r2, #2
 8000810:	701a      	strb	r2, [r3, #0]
                    debugPrint("CMD: %s → MANUAL\r\n", cmdBuf);
 8000812:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <maincpp+0x228>)
 8000814:	4b23      	ldr	r3, [pc, #140]	@ (80008a4 <maincpp+0x234>)
 8000816:	0011      	movs	r1, r2
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff ff09 	bl	8000630 <_Z10debugPrintPKcz>
                    break;
 800081e:	e012      	b.n	8000846 <maincpp+0x1d6>
                case '?':  // STATUS
                    debugPrint("STATUS: mode=%d, pos=%u, adc=%lu\r\n",
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <maincpp+0x1fc>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	0019      	movs	r1, r3
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <maincpp+0x204>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	001a      	movs	r2, r3
 800082e:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <maincpp+0x1e8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	481d      	ldr	r0, [pc, #116]	@ (80008a8 <maincpp+0x238>)
 8000834:	f7ff fefc 	bl	8000630 <_Z10debugPrintPKcz>
                               currentMode, pos, pot_value);
                    break;
 8000838:	e005      	b.n	8000846 <maincpp+0x1d6>
                default:
                    debugPrint("UNKNOWN CMD: %s\r\n", cmdBuf);
 800083a:	4a17      	ldr	r2, [pc, #92]	@ (8000898 <maincpp+0x228>)
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <maincpp+0x23c>)
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff fef5 	bl	8000630 <_Z10debugPrintPKcz>
            }
            // resetting for next command
            cmdIndex = 0;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <maincpp+0x240>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
            cmdReady  = false;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <maincpp+0x224>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
        }
    }
 8000852:	e728      	b.n	80006a6 <maincpp+0x36>
 8000854:	20000120 	.word	0x20000120
 8000858:	20000080 	.word	0x20000080
 800085c:	200000b8 	.word	0x200000b8
 8000860:	2000007c 	.word	0x2000007c
 8000864:	2000016c 	.word	0x2000016c
 8000868:	200000a0 	.word	0x200000a0
 800086c:	20000096 	.word	0x20000096
 8000870:	200000ac 	.word	0x200000ac
 8000874:	20000000 	.word	0x20000000
 8000878:	20000002 	.word	0x20000002
 800087c:	000009c3 	.word	0x000009c3
 8000880:	000009c4 	.word	0x000009c4
 8000884:	200000b0 	.word	0x200000b0
 8000888:	200000b4 	.word	0x200000b4
 800088c:	00000fff 	.word	0x00000fff
 8000890:	0800702c 	.word	0x0800702c
 8000894:	20000095 	.word	0x20000095
 8000898:	20000084 	.word	0x20000084
 800089c:	08007048 	.word	0x08007048
 80008a0:	08007060 	.word	0x08007060
 80008a4:	08007078 	.word	0x08007078
 80008a8:	08007090 	.word	0x08007090
 80008ac:	080070b4 	.word	0x080070b4
 80008b0:	20000094 	.word	0x20000094

080008b4 <HAL_GPIO_EXTI_Rising_Callback>:
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	0002      	movs	r2, r0
 80008bc:	1dbb      	adds	r3, r7, #6
 80008be:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == BUTTON_INT13_Pin)
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	881a      	ldrh	r2, [r3, #0]
 80008c4:	2380      	movs	r3, #128	@ 0x80
 80008c6:	019b      	lsls	r3, r3, #6
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d152      	bne.n	8000972 <HAL_GPIO_EXTI_Rising_Callback+0xbe>
    {
        uint32_t now = HAL_GetTick();
 80008cc:	f000 fd6c 	bl	80013a8 <HAL_GetTick>
 80008d0:	0003      	movs	r3, r0
 80008d2:	60fb      	str	r3, [r7, #12]
        if (now - lastRiseTick < DEBOUNCE) return;
 80008d4:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <HAL_GPIO_EXTI_Rising_Callback+0xc4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	1ad2      	subs	r2, r2, r3
 80008dc:	2113      	movs	r1, #19
 80008de:	2300      	movs	r3, #0
 80008e0:	4291      	cmp	r1, r2
 80008e2:	415b      	adcs	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d142      	bne.n	8000970 <HAL_GPIO_EXTI_Rising_Callback+0xbc>

        uint32_t held = now - time_since_button_pressed;
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_GPIO_EXTI_Rising_Callback+0xc8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	60bb      	str	r3, [r7, #8]
        if (held < NORMAL_BUTTON_PRESS) {
 80008f4:	68ba      	ldr	r2, [r7, #8]
 80008f6:	23fa      	movs	r3, #250	@ 0xfa
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d20a      	bcs.n	8000914 <HAL_GPIO_EXTI_Rising_Callback+0x60>
            currentMode = MODE_SWEEP;
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_GPIO_EXTI_Rising_Callback+0xcc>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000904:	23a0      	movs	r3, #160	@ 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	2201      	movs	r2, #1
 800090a:	2120      	movs	r1, #32
 800090c:	0018      	movs	r0, r3
 800090e:	f001 ffab 	bl	8002868 <HAL_GPIO_WritePin>
 8000912:	e021      	b.n	8000958 <HAL_GPIO_EXTI_Rising_Callback+0xa4>
        }
        else if (held < LONG_BUTTON_PRESS) {
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	23fa      	movs	r3, #250	@ 0xfa
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	429a      	cmp	r2, r3
 800091c:	d212      	bcs.n	8000944 <HAL_GPIO_EXTI_Rising_Callback+0x90>
            currentMode = MODE_FREEZE;
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <HAL_GPIO_EXTI_Rising_Callback+0xcc>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000924:	23a0      	movs	r3, #160	@ 0xa0
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	2200      	movs	r2, #0
 800092a:	2120      	movs	r1, #32
 800092c:	0018      	movs	r0, r3
 800092e:	f001 ff9b 	bl	8002868 <HAL_GPIO_WritePin>
            debugPrint("FROZEN at POS=%u\r\n", pos);
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <HAL_GPIO_EXTI_Rising_Callback+0xd0>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	001a      	movs	r2, r3
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <HAL_GPIO_EXTI_Rising_Callback+0xd4>)
 800093a:	0011      	movs	r1, r2
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff fe77 	bl	8000630 <_Z10debugPrintPKcz>
 8000942:	e009      	b.n	8000958 <HAL_GPIO_EXTI_Rising_Callback+0xa4>
        }
        else {
            currentMode = MODE_MANUAL;
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <HAL_GPIO_EXTI_Rising_Callback+0xcc>)
 8000946:	2202      	movs	r2, #2
 8000948:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800094a:	23a0      	movs	r3, #160	@ 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	0018      	movs	r0, r3
 8000954:	f001 ff88 	bl	8002868 <HAL_GPIO_WritePin>
        }

        time_since_button_pressed = now;
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <HAL_GPIO_EXTI_Rising_Callback+0xc8>)
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	601a      	str	r2, [r3, #0]
        button_releases++;
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	4b09      	ldr	r3, [pc, #36]	@ (800098c <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 8000966:	601a      	str	r2, [r3, #0]
        lastRiseTick = now;
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <HAL_GPIO_EXTI_Rising_Callback+0xc4>)
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	e000      	b.n	8000972 <HAL_GPIO_EXTI_Rising_Callback+0xbe>
        if (now - lastRiseTick < DEBOUNCE) return;
 8000970:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000972:	46bd      	mov	sp, r7
 8000974:	b004      	add	sp, #16
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000a4 	.word	0x200000a4
 800097c:	200000a0 	.word	0x200000a0
 8000980:	20000096 	.word	0x20000096
 8000984:	20000000 	.word	0x20000000
 8000988:	080070c8 	.word	0x080070c8
 800098c:	2000009c 	.word	0x2000009c

08000990 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	0002      	movs	r2, r0
 8000998:	1dbb      	adds	r3, r7, #6
 800099a:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == BUTTON_INT13_Pin)
 800099c:	1dbb      	adds	r3, r7, #6
 800099e:	881a      	ldrh	r2, [r3, #0]
 80009a0:	2380      	movs	r3, #128	@ 0x80
 80009a2:	019b      	lsls	r3, r3, #6
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d11b      	bne.n	80009e0 <HAL_GPIO_EXTI_Falling_Callback+0x50>
    {
        uint32_t now = HAL_GetTick();
 80009a8:	f000 fcfe 	bl	80013a8 <HAL_GetTick>
 80009ac:	0003      	movs	r3, r0
 80009ae:	60fb      	str	r3, [r7, #12]
        if (now - lastFallTick < DEBOUNCE) return;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	1ad2      	subs	r2, r2, r3
 80009b8:	2113      	movs	r1, #19
 80009ba:	2300      	movs	r3, #0
 80009bc:	4291      	cmp	r1, r2
 80009be:	415b      	adcs	r3, r3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10b      	bne.n	80009de <HAL_GPIO_EXTI_Falling_Callback+0x4e>

        time_since_button_pressed = now;
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	601a      	str	r2, [r3, #0]
        button_pressed++;
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80009d4:	601a      	str	r2, [r3, #0]
        lastFallTick = now;
 80009d6:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	e000      	b.n	80009e0 <HAL_GPIO_EXTI_Falling_Callback+0x50>
        if (now - lastFallTick < DEBOUNCE) return;
 80009de:	46c0      	nop			@ (mov r8, r8)
    }
}
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b004      	add	sp, #16
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	200000a8 	.word	0x200000a8
 80009ec:	200000a0 	.word	0x200000a0
 80009f0:	20000098 	.word	0x20000098

080009f4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1a      	ldr	r2, [pc, #104]	@ (8000a6c <HAL_UART_RxCpltCallback+0x78>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12e      	bne.n	8000a64 <HAL_UART_RxCpltCallback+0x70>
    {
        char c = (char)rx_byte;
 8000a06:	200f      	movs	r0, #15
 8000a08:	183b      	adds	r3, r7, r0
 8000a0a:	4a19      	ldr	r2, [pc, #100]	@ (8000a70 <HAL_UART_RxCpltCallback+0x7c>)
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	701a      	strb	r2, [r3, #0]

        if (cmdIndex < (CMD_BUF_LEN - 1)) {
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <HAL_UART_RxCpltCallback+0x80>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b0e      	cmp	r3, #14
 8000a16:	d81c      	bhi.n	8000a52 <HAL_UART_RxCpltCallback+0x5e>
            cmdBuf[cmdIndex++] = c;
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <HAL_UART_RxCpltCallback+0x80>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	b2d1      	uxtb	r1, r2
 8000a20:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <HAL_UART_RxCpltCallback+0x80>)
 8000a22:	7011      	strb	r1, [r2, #0]
 8000a24:	0019      	movs	r1, r3
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <HAL_UART_RxCpltCallback+0x84>)
 8000a28:	183a      	adds	r2, r7, r0
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	545a      	strb	r2, [r3, r1]
            if (c == '\r' || c == '\n') {
 8000a2e:	183b      	adds	r3, r7, r0
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b0d      	cmp	r3, #13
 8000a34:	d003      	beq.n	8000a3e <HAL_UART_RxCpltCallback+0x4a>
 8000a36:	183b      	adds	r3, r7, r0
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b0a      	cmp	r3, #10
 8000a3c:	d10c      	bne.n	8000a58 <HAL_UART_RxCpltCallback+0x64>
                cmdBuf[cmdIndex-1] = '\0';
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <HAL_UART_RxCpltCallback+0x80>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	4a0c      	ldr	r2, [pc, #48]	@ (8000a78 <HAL_UART_RxCpltCallback+0x84>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	54d1      	strb	r1, [r2, r3]
                cmdReady = true;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <HAL_UART_RxCpltCallback+0x88>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	e002      	b.n	8000a58 <HAL_UART_RxCpltCallback+0x64>
            }
        } else {

            cmdIndex = 0;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_UART_RxCpltCallback+0x80>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
        }


        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000a58:	4905      	ldr	r1, [pc, #20]	@ (8000a70 <HAL_UART_RxCpltCallback+0x7c>)
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <HAL_UART_RxCpltCallback+0x8c>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f003 fde8 	bl	8004634 <HAL_UART_Receive_IT>
    }
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b004      	add	sp, #16
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	2000007c 	.word	0x2000007c
 8000a74:	20000094 	.word	0x20000094
 8000a78:	20000084 	.word	0x20000084
 8000a7c:	20000095 	.word	0x20000095
 8000a80:	2000016c 	.word	0x2000016c

08000a84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	230c      	movs	r3, #12
 8000a90:	001a      	movs	r2, r3
 8000a92:	2100      	movs	r1, #0
 8000a94:	f005 fe44 	bl	8006720 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b4c <MX_ADC1_Init+0xc8>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000aa0:	2280      	movs	r2, #128	@ 0x80
 8000aa2:	05d2      	lsls	r2, r2, #23
 8000aa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aac:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab8:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000abe:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000ae4:	222c      	movs	r2, #44	@ 0x2c
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000af0:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000afe:	223c      	movs	r2, #60	@ 0x3c
 8000b00:	2100      	movs	r1, #0
 8000b02:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 fd9d 	bl	800164c <HAL_ADC_Init>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000b16:	f000 f947 	bl	8000da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2c:	1d3a      	adds	r2, r7, #4
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_ADC1_Init+0xc4>)
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 ffd8 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000b3c:	f000 f934 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b004      	add	sp, #16
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000b8 	.word	0x200000b8
 8000b4c:	40012400 	.word	0x40012400

08000b50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b08b      	sub	sp, #44	@ 0x2c
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	2414      	movs	r4, #20
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2314      	movs	r3, #20
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f005 fddc 	bl	8006720 <memset>
  if(adcHandle->Instance==ADC1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a18      	ldr	r2, [pc, #96]	@ (8000bd0 <HAL_ADC_MspInit+0x80>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d129      	bne.n	8000bc6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_ADC_MspInit+0x84>)
 8000b74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <HAL_ADC_MspInit+0x84>)
 8000b78:	2180      	movs	r1, #128	@ 0x80
 8000b7a:	0349      	lsls	r1, r1, #13
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <HAL_ADC_MspInit+0x84>)
 8000b82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b84:	2380      	movs	r3, #128	@ 0x80
 8000b86:	035b      	lsls	r3, r3, #13
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_ADC_MspInit+0x84>)
 8000b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <HAL_ADC_MspInit+0x84>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_ADC_MspInit+0x84>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2203      	movs	r2, #3
 8000bb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	193a      	adds	r2, r7, r4
 8000bba:	23a0      	movs	r3, #160	@ 0xa0
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f001 fced 	bl	80025a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b00b      	add	sp, #44	@ 0x2c
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	40012400 	.word	0x40012400
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b08b      	sub	sp, #44	@ 0x2c
 8000bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	2414      	movs	r4, #20
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	0018      	movs	r0, r3
 8000be4:	2314      	movs	r3, #20
 8000be6:	001a      	movs	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	f005 fd99 	bl	8006720 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b34      	ldr	r3, [pc, #208]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bfa:	4b31      	ldr	r3, [pc, #196]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c12:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c16:	2220      	movs	r2, #32
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b28      	ldr	r3, [pc, #160]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c22:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c24:	2101      	movs	r1, #1
 8000c26:	430a      	orrs	r2, r1
 8000c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c2a:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c46:	2202      	movs	r2, #2
 8000c48:	4013      	ands	r3, r2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c4e:	23a0      	movs	r3, #160	@ 0xa0
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	2200      	movs	r2, #0
 8000c54:	2120      	movs	r1, #32
 8000c56:	0018      	movs	r0, r3
 8000c58:	f001 fe06 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INT13_Pin */
  GPIO_InitStruct.Pin = BUTTON_INT13_Pin;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2280      	movs	r2, #128	@ 0x80
 8000c60:	0192      	lsls	r2, r2, #6
 8000c62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	22c4      	movs	r2, #196	@ 0xc4
 8000c68:	0392      	lsls	r2, r2, #14
 8000c6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INT13_GPIO_Port, &GPIO_InitStruct);
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	4a13      	ldr	r2, [pc, #76]	@ (8000cc4 <MX_GPIO_Init+0xec>)
 8000c76:	0019      	movs	r1, r3
 8000c78:	0010      	movs	r0, r2
 8000c7a:	f001 fc91 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c7e:	0021      	movs	r1, r4
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2220      	movs	r2, #32
 8000c84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2201      	movs	r2, #1
 8000c8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2202      	movs	r2, #2
 8000c96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c98:	187a      	adds	r2, r7, r1
 8000c9a:	23a0      	movs	r3, #160	@ 0xa0
 8000c9c:	05db      	lsls	r3, r3, #23
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 fc7d 	bl	80025a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2007      	movs	r0, #7
 8000cac:	f001 fab4 	bl	8002218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cb0:	2007      	movs	r0, #7
 8000cb2:	f001 fac6 	bl	8002242 <HAL_NVIC_EnableIRQ>

}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b00b      	add	sp, #44	@ 0x2c
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	50000800 	.word	0x50000800

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f000 faf0 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f80c 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd4:	f7ff ff80 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cd8:	f000 fa0a 	bl	80010f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000cdc:	f7ff fed2 	bl	8000a84 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000ce0:	f000 f8f8 	bl	8000ed4 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  maincpp();
 8000ce4:	f7ff fcc4 	bl	8000670 <maincpp>
  while (1)
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	e7fd      	b.n	8000ce8 <main+0x20>

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b093      	sub	sp, #76	@ 0x4c
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	2410      	movs	r4, #16
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	2338      	movs	r3, #56	@ 0x38
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f005 fd0f 	bl	8006720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d02:	003b      	movs	r3, r7
 8000d04:	0018      	movs	r0, r3
 8000d06:	2310      	movs	r3, #16
 8000d08:	001a      	movs	r2, r3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f005 fd08 	bl	8006720 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	0018      	movs	r0, r3
 8000d16:	f001 fe09 	bl	800292c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	2280      	movs	r2, #128	@ 0x80
 8000d24:	0052      	lsls	r2, r2, #1
 8000d26:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d28:	0021      	movs	r1, r4
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2240      	movs	r2, #64	@ 0x40
 8000d34:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2202      	movs	r2, #2
 8000d3a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2202      	movs	r2, #2
 8000d40:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2280      	movs	r2, #128	@ 0x80
 8000d52:	0292      	lsls	r2, r2, #10
 8000d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	22c0      	movs	r2, #192	@ 0xc0
 8000d5a:	04d2      	lsls	r2, r2, #19
 8000d5c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2280      	movs	r2, #128	@ 0x80
 8000d62:	0592      	lsls	r2, r2, #22
 8000d64:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f001 fe2b 	bl	80029c4 <HAL_RCC_OscConfig>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d72:	f000 f819 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d76:	003b      	movs	r3, r7
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	003b      	movs	r3, r7
 8000d7e:	2202      	movs	r2, #2
 8000d80:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	003b      	movs	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d88:	003b      	movs	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d8e:	003b      	movs	r3, r7
 8000d90:	2102      	movs	r1, #2
 8000d92:	0018      	movs	r0, r3
 8000d94:	f002 f930 	bl	8002ff8 <HAL_RCC_ClockConfig>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d9c:	f000 f804 	bl	8000da8 <Error_Handler>
  }
}
 8000da0:	46c0      	nop			@ (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b013      	add	sp, #76	@ 0x4c
 8000da6:	bd90      	pop	{r4, r7, pc}

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_MspInit+0x44>)
 8000dbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <HAL_MspInit+0x44>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <HAL_MspInit+0x44>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <HAL_MspInit+0x44>)
 8000dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_MspInit+0x44>)
 8000dd8:	2180      	movs	r1, #128	@ 0x80
 8000dda:	0549      	lsls	r1, r1, #21
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <HAL_MspInit+0x44>)
 8000de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	055b      	lsls	r3, r3, #21
 8000de8:	4013      	ands	r3, r2
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	40021000 	.word	0x40021000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	e7fd      	b.n	8000e00 <NMI_Handler+0x4>

08000e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	e7fd      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */


  /* USER CODE END SVC_IRQn 1 */
}
 8000e10:	46c0      	nop			@ (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 faae 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT13_Pin);
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	019b      	lsls	r3, r3, #6
 8000e36:	0018      	movs	r0, r3
 8000e38:	f001 fd4e 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <USART2_IRQHandler+0x14>)
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f003 fc50 	bl	80046f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	2000016c 	.word	0x2000016c

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	18d3      	adds	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f005 fc50 	bl	8006730 <__errno>
 8000e90:	0003      	movs	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	425b      	negs	r3, r3
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	18d2      	adds	r2, r2, r3
 8000eaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <_sbrk+0x64>)
 8000eac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b006      	add	sp, #24
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20009000 	.word	0x20009000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	2000011c 	.word	0x2000011c
 8000ec4:	20000350 	.word	0x20000350

08000ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b098      	sub	sp, #96	@ 0x60
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eda:	2354      	movs	r3, #84	@ 0x54
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	0018      	movs	r0, r3
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f005 fc1b 	bl	8006720 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	2338      	movs	r3, #56	@ 0x38
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	0018      	movs	r0, r3
 8000ef0:	231c      	movs	r3, #28
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	f005 fc13 	bl	8006720 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	0018      	movs	r0, r3
 8000efe:	2334      	movs	r3, #52	@ 0x34
 8000f00:	001a      	movs	r2, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	f005 fc0c 	bl	8006720 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f08:	4b3c      	ldr	r3, [pc, #240]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000f0a:	4a3d      	ldr	r2, [pc, #244]	@ (8001000 <MX_TIM15_Init+0x12c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 8000f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000f10:	223f      	movs	r2, #63	@ 0x3f
 8000f12:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f14:	4b39      	ldr	r3, [pc, #228]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000;
 8000f1a:	4b38      	ldr	r3, [pc, #224]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000f1c:	4a39      	ldr	r2, [pc, #228]	@ (8001004 <MX_TIM15_Init+0x130>)
 8000f1e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b36      	ldr	r3, [pc, #216]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f26:	4b35      	ldr	r3, [pc, #212]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b33      	ldr	r3, [pc, #204]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f32:	4b32      	ldr	r3, [pc, #200]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000f34:	0018      	movs	r0, r3
 8000f36:	f002 fbc1 	bl	80036bc <HAL_TIM_PWM_Init>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f7ff ff33 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2154      	movs	r1, #84	@ 0x54
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f50:	187a      	adds	r2, r7, r1
 8000f52:	4b2a      	ldr	r3, [pc, #168]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000f54:	0011      	movs	r1, r2
 8000f56:	0018      	movs	r0, r3
 8000f58:	f003 f968 	bl	800422c <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000f60:	f7ff ff22 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f64:	2138      	movs	r1, #56	@ 0x38
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2260      	movs	r2, #96	@ 0x60
 8000f6a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f90:	1879      	adds	r1, r7, r1
 8000f92:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	0018      	movs	r0, r3
 8000f98:	f002 fcd2 	bl	8003940 <HAL_TIM_PWM_ConfigChannel>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000fa0:	f7ff ff02 	bl	8000da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	0192      	lsls	r2, r2, #6
 8000fc8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd6:	1d3a      	adds	r2, r7, #4
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f003 f993 	bl	8004308 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8000fe6:	f7ff fedf 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000fea:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <MX_TIM15_Init+0x128>)
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 f841 	bl	8001074 <HAL_TIM_MspPostInit>

}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b018      	add	sp, #96	@ 0x60
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	20000120 	.word	0x20000120
 8001000:	40014000 	.word	0x40014000
 8001004:	00004e20 	.word	0x00004e20

08001008 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b091      	sub	sp, #68	@ 0x44
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001010:	240c      	movs	r4, #12
 8001012:	193b      	adds	r3, r7, r4
 8001014:	0018      	movs	r0, r3
 8001016:	2334      	movs	r3, #52	@ 0x34
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f005 fb80 	bl	8006720 <memset>
  if(tim_pwmHandle->Instance==TIM15)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a11      	ldr	r2, [pc, #68]	@ (800106c <HAL_TIM_PWM_MspInit+0x64>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d11c      	bne.n	8001064 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM15_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 800102a:	193b      	adds	r3, r7, r4
 800102c:	2280      	movs	r2, #128	@ 0x80
 800102e:	03d2      	lsls	r2, r2, #15
 8001030:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001038:	193b      	adds	r3, r7, r4
 800103a:	0018      	movs	r0, r3
 800103c:	f002 f986 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d001      	beq.n	8001048 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001044:	f7ff feb0 	bl	8000da8 <Error_Handler>
    }

    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_TIM_PWM_MspInit+0x68>)
 800104a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_TIM_PWM_MspInit+0x68>)
 800104e:	2180      	movs	r1, #128	@ 0x80
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	430a      	orrs	r2, r1
 8001054:	641a      	str	r2, [r3, #64]	@ 0x40
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_TIM_PWM_MspInit+0x68>)
 8001058:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	025b      	lsls	r3, r3, #9
 800105e:	4013      	ands	r3, r2
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001064:	46c0      	nop			@ (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b011      	add	sp, #68	@ 0x44
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	40014000 	.word	0x40014000
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b089      	sub	sp, #36	@ 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	240c      	movs	r4, #12
 800107e:	193b      	adds	r3, r7, r4
 8001080:	0018      	movs	r0, r3
 8001082:	2314      	movs	r3, #20
 8001084:	001a      	movs	r2, r3
 8001086:	2100      	movs	r1, #0
 8001088:	f005 fb4a 	bl	8006720 <memset>
  if(timHandle->Instance==TIM15)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a14      	ldr	r2, [pc, #80]	@ (80010e4 <HAL_TIM_MspPostInit+0x70>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d122      	bne.n	80010dc <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <HAL_TIM_MspPostInit+0x74>)
 8001098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_TIM_MspPostInit+0x74>)
 800109c:	2102      	movs	r1, #2
 800109e:	430a      	orrs	r2, r1
 80010a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_TIM_MspPostInit+0x74>)
 80010a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a6:	2202      	movs	r2, #2
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	2280      	movs	r2, #128	@ 0x80
 80010b2:	01d2      	lsls	r2, r2, #7
 80010b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	0021      	movs	r1, r4
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2202      	movs	r2, #2
 80010bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2205      	movs	r2, #5
 80010ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <HAL_TIM_MspPostInit+0x78>)
 80010d4:	0019      	movs	r1, r3
 80010d6:	0010      	movs	r0, r2
 80010d8:	f001 fa62 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b009      	add	sp, #36	@ 0x24
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	40014000 	.word	0x40014000
 80010e8:	40021000 	.word	0x40021000
 80010ec:	50000400 	.word	0x50000400

080010f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f4:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 80010f6:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <MX_USART2_UART_Init+0x98>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010fa:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 80010fc:	22e1      	movs	r2, #225	@ 0xe1
 80010fe:	0252      	lsls	r2, r2, #9
 8001100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110e:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 800113a:	0018      	movs	r0, r3
 800113c:	f003 f980 	bl	8004440 <HAL_UART_Init>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d001      	beq.n	8001148 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001144:	f7ff fe30 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 800114a:	2100      	movs	r1, #0
 800114c:	0018      	movs	r0, r3
 800114e:	f005 f9cd 	bl	80064ec <HAL_UARTEx_SetTxFifoThreshold>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001156:	f7ff fe27 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 800115c:	2100      	movs	r1, #0
 800115e:	0018      	movs	r0, r3
 8001160:	f005 fa04 	bl	800656c <HAL_UARTEx_SetRxFifoThreshold>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d001      	beq.n	800116c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001168:	f7ff fe1e 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <MX_USART2_UART_Init+0x94>)
 800116e:	0018      	movs	r0, r3
 8001170:	f005 f982 	bl	8006478 <HAL_UARTEx_DisableFifoMode>
 8001174:	1e03      	subs	r3, r0, #0
 8001176:	d001      	beq.n	800117c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001178:	f7ff fe16 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117c:	46c0      	nop			@ (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	2000016c 	.word	0x2000016c
 8001188:	40004400 	.word	0x40004400

0800118c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b097      	sub	sp, #92	@ 0x5c
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	2344      	movs	r3, #68	@ 0x44
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	0018      	movs	r0, r3
 800119a:	2314      	movs	r3, #20
 800119c:	001a      	movs	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	f005 fabe 	bl	8006720 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	2410      	movs	r4, #16
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	0018      	movs	r0, r3
 80011aa:	2334      	movs	r3, #52	@ 0x34
 80011ac:	001a      	movs	r2, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	f005 fab6 	bl	8006720 <memset>
  if(uartHandle->Instance==USART2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a26      	ldr	r2, [pc, #152]	@ (8001254 <HAL_UART_MspInit+0xc8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d146      	bne.n	800124c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	2202      	movs	r2, #2
 80011c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	0018      	movs	r0, r3
 80011ce:	f002 f8bd 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	1e03      	subs	r3, r0, #0
 80011d4:	d001      	beq.n	80011da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011d6:	f7ff fde7 	bl	8000da8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_UART_MspInit+0xcc>)
 80011dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011de:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <HAL_UART_MspInit+0xcc>)
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	0289      	lsls	r1, r1, #10
 80011e4:	430a      	orrs	r2, r1
 80011e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <HAL_UART_MspInit+0xcc>)
 80011ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	029b      	lsls	r3, r3, #10
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_UART_MspInit+0xcc>)
 80011f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <HAL_UART_MspInit+0xcc>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	430a      	orrs	r2, r1
 8001200:	635a      	str	r2, [r3, #52]	@ 0x34
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_UART_MspInit+0xcc>)
 8001204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001206:	2201      	movs	r2, #1
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800120e:	2144      	movs	r1, #68	@ 0x44
 8001210:	187b      	adds	r3, r7, r1
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2202      	movs	r2, #2
 800121a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2201      	movs	r2, #1
 8001220:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2201      	movs	r2, #1
 800122c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	187a      	adds	r2, r7, r1
 8001230:	23a0      	movs	r3, #160	@ 0xa0
 8001232:	05db      	lsls	r3, r3, #23
 8001234:	0011      	movs	r1, r2
 8001236:	0018      	movs	r0, r3
 8001238:	f001 f9b2 	bl	80025a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	201c      	movs	r0, #28
 8001242:	f000 ffe9 	bl	8002218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001246:	201c      	movs	r0, #28
 8001248:	f000 fffb 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800124c:	46c0      	nop			@ (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b017      	add	sp, #92	@ 0x5c
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	40004400 	.word	0x40004400
 8001258:	40021000 	.word	0x40021000

0800125c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800125c:	480d      	ldr	r0, [pc, #52]	@ (8001294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800125e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f7ff fe32 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	@ (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <LoopForever+0xe>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	@ (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800128a:	f005 fa57 	bl	800673c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800128e:	f7ff fd1b 	bl	8000cc8 <main>

08001292 <LoopForever>:

LoopForever:
  b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   r0, =_estack
 8001294:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012a0:	080071fc 	.word	0x080071fc
  ldr r2, =_sbss
 80012a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012a8:	2000034c 	.word	0x2000034c

080012ac <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_COMP_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_Init+0x3c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <HAL_Init+0x3c>)
 80012c2:	2180      	movs	r1, #128	@ 0x80
 80012c4:	0049      	lsls	r1, r1, #1
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f810 	bl	80012f0 <HAL_InitTick>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d003      	beq.n	80012dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e001      	b.n	80012e0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff fd6a 	bl	8000db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012e0:	1dfb      	adds	r3, r7, #7
 80012e2:	781b      	ldrb	r3, [r3, #0]
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40022000 	.word	0x40022000

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f8:	230f      	movs	r3, #15
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <HAL_InitTick+0x88>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d02b      	beq.n	8001360 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001308:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <HAL_InitTick+0x8c>)
 800130a:	681c      	ldr	r4, [r3, #0]
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <HAL_InitTick+0x88>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	0019      	movs	r1, r3
 8001312:	23fa      	movs	r3, #250	@ 0xfa
 8001314:	0098      	lsls	r0, r3, #2
 8001316:	f7fe feff 	bl	8000118 <__udivsi3>
 800131a:	0003      	movs	r3, r0
 800131c:	0019      	movs	r1, r3
 800131e:	0020      	movs	r0, r4
 8001320:	f7fe fefa 	bl	8000118 <__udivsi3>
 8001324:	0003      	movs	r3, r0
 8001326:	0018      	movs	r0, r3
 8001328:	f000 ff9b 	bl	8002262 <HAL_SYSTICK_Config>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d112      	bne.n	8001356 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d80a      	bhi.n	800134c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	2301      	movs	r3, #1
 800133a:	425b      	negs	r3, r3
 800133c:	2200      	movs	r2, #0
 800133e:	0018      	movs	r0, r3
 8001340:	f000 ff6a 	bl	8002218 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_InitTick+0x90>)
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e00d      	b.n	8001368 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800134c:	230f      	movs	r3, #15
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e008      	b.n	8001368 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001356:	230f      	movs	r3, #15
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e003      	b.n	8001368 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001360:	230f      	movs	r3, #15
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001368:	230f      	movs	r3, #15
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	781b      	ldrb	r3, [r3, #0]
}
 800136e:	0018      	movs	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	b005      	add	sp, #20
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	2000000c 	.word	0x2000000c
 800137c:	20000004 	.word	0x20000004
 8001380:	20000008 	.word	0x20000008

08001384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <HAL_IncTick+0x1c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	001a      	movs	r2, r3
 800138e:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_IncTick+0x20>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	18d2      	adds	r2, r2, r3
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <HAL_IncTick+0x20>)
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	46c0      	nop			@ (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	2000000c 	.word	0x2000000c
 80013a4:	20000200 	.word	0x20000200

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b02      	ldr	r3, [pc, #8]	@ (80013b8 <HAL_GetTick+0x10>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	20000200 	.word	0x20000200

080013bc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80013cc:	401a      	ands	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	fe3fffff 	.word	0xfe3fffff

080013e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	23e0      	movs	r3, #224	@ 0xe0
 80013f2:	045b      	lsls	r3, r3, #17
 80013f4:	4013      	ands	r3, r2
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}

080013fe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	2104      	movs	r1, #4
 8001412:	400a      	ands	r2, r1
 8001414:	2107      	movs	r1, #7
 8001416:	4091      	lsls	r1, r2
 8001418:	000a      	movs	r2, r1
 800141a:	43d2      	mvns	r2, r2
 800141c:	401a      	ands	r2, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2104      	movs	r1, #4
 8001422:	400b      	ands	r3, r1
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4099      	lsls	r1, r3
 8001428:	000b      	movs	r3, r1
 800142a:	431a      	orrs	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001430:	46c0      	nop			@ (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bd80      	pop	{r7, pc}

08001438 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	2104      	movs	r1, #4
 800144a:	400a      	ands	r2, r1
 800144c:	2107      	movs	r1, #7
 800144e:	4091      	lsls	r1, r2
 8001450:	000a      	movs	r2, r1
 8001452:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2104      	movs	r1, #4
 8001458:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800145a:	40da      	lsrs	r2, r3
 800145c:	0013      	movs	r3, r2
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}

08001466 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	23c0      	movs	r3, #192	@ 0xc0
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4013      	ands	r3, r2
 8001478:	d101      	bne.n	800147e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800147e:	2300      	movs	r3, #0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}

08001488 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	211f      	movs	r1, #31
 800149c:	400a      	ands	r2, r1
 800149e:	210f      	movs	r1, #15
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	401a      	ands	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	0e9b      	lsrs	r3, r3, #26
 80014ac:	210f      	movs	r1, #15
 80014ae:	4019      	ands	r1, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	201f      	movs	r0, #31
 80014b4:	4003      	ands	r3, r0
 80014b6:	4099      	lsls	r1, r3
 80014b8:	000b      	movs	r3, r1
 80014ba:	431a      	orrs	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014c0:	46c0      	nop			@ (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b004      	add	sp, #16
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	035b      	lsls	r3, r3, #13
 80014da:	0b5b      	lsrs	r3, r3, #13
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}

080014ea <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	0352      	lsls	r2, r2, #13
 80014fc:	0b52      	lsrs	r2, r2, #13
 80014fe:	43d2      	mvns	r2, r2
 8001500:	401a      	ands	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	0212      	lsls	r2, r2, #8
 8001524:	43d2      	mvns	r2, r2
 8001526:	401a      	ands	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	400b      	ands	r3, r1
 8001530:	4904      	ldr	r1, [pc, #16]	@ (8001544 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001532:	400b      	ands	r3, r1
 8001534:	431a      	orrs	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b004      	add	sp, #16
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	07ffff00 	.word	0x07ffff00

08001548 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a05      	ldr	r2, [pc, #20]	@ (800156c <LL_ADC_EnableInternalRegulator+0x24>)
 8001556:	4013      	ands	r3, r2
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	0552      	lsls	r2, r2, #21
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b002      	add	sp, #8
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	6fffffe8 	.word	0x6fffffe8

08001570 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	055b      	lsls	r3, r3, #21
 8001580:	401a      	ands	r2, r3
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	055b      	lsls	r3, r3, #21
 8001586:	429a      	cmp	r2, r3
 8001588:	d101      	bne.n	800158e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800158e:	2300      	movs	r3, #0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}

08001598 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <LL_ADC_Enable+0x20>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	2201      	movs	r2, #1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015b0:	46c0      	nop			@ (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	7fffffe8 	.word	0x7fffffe8

080015bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <LL_ADC_Disable+0x20>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	2202      	movs	r2, #2
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80015d4:	46c0      	nop			@ (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	7fffffe8 	.word	0x7fffffe8

080015e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2201      	movs	r2, #1
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <LL_ADC_IsEnabled+0x18>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <LL_ADC_IsEnabled+0x1a>
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b002      	add	sp, #8
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <LL_ADC_REG_StartConversion+0x20>)
 8001612:	4013      	ands	r3, r2
 8001614:	2204      	movs	r2, #4
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}
 8001624:	7fffffe8 	.word	0x7fffffe8

08001628 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2204      	movs	r2, #4
 8001636:	4013      	ands	r3, r2
 8001638:	2b04      	cmp	r3, #4
 800163a:	d101      	bne.n	8001640 <LL_ADC_REG_IsConversionOngoing+0x18>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001640:	2300      	movs	r3, #0
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001654:	231f      	movs	r3, #31
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e17f      	b.n	8001972 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10a      	bne.n	8001690 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff fa67 	bl	8000b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2254      	movs	r2, #84	@ 0x54
 800168c:	2100      	movs	r1, #0
 800168e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff ff6b 	bl	8001570 <LL_ADC_IsInternalRegulatorEnabled>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d115      	bne.n	80016ca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff ff50 	bl	8001548 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016a8:	4bb4      	ldr	r3, [pc, #720]	@ (800197c <HAL_ADC_Init+0x330>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	49b4      	ldr	r1, [pc, #720]	@ (8001980 <HAL_ADC_Init+0x334>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7fe fd32 	bl	8000118 <__udivsi3>
 80016b4:	0003      	movs	r3, r0
 80016b6:	3301      	adds	r3, #1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f9      	bne.n	80016be <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0018      	movs	r0, r3
 80016d0:	f7ff ff4e 	bl	8001570 <LL_ADC_IsInternalRegulatorEnabled>
 80016d4:	1e03      	subs	r3, r0, #0
 80016d6:	d10f      	bne.n	80016f8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016dc:	2210      	movs	r2, #16
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e8:	2201      	movs	r2, #1
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80016f0:	231f      	movs	r3, #31
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ff93 	bl	8001628 <LL_ADC_REG_IsConversionOngoing>
 8001702:	0003      	movs	r3, r0
 8001704:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170a:	2210      	movs	r2, #16
 800170c:	4013      	ands	r3, r2
 800170e:	d000      	beq.n	8001712 <HAL_ADC_Init+0xc6>
 8001710:	e122      	b.n	8001958 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d000      	beq.n	800171a <HAL_ADC_Init+0xce>
 8001718:	e11e      	b.n	8001958 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	4a99      	ldr	r2, [pc, #612]	@ (8001984 <HAL_ADC_Init+0x338>)
 8001720:	4013      	ands	r3, r2
 8001722:	2202      	movs	r2, #2
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff ff56 	bl	80015e0 <LL_ADC_IsEnabled>
 8001734:	1e03      	subs	r3, r0, #0
 8001736:	d000      	beq.n	800173a <HAL_ADC_Init+0xee>
 8001738:	e0ad      	b.n	8001896 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7e1b      	ldrb	r3, [r3, #24]
 8001742:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001744:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7e5b      	ldrb	r3, [r3, #25]
 800174a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800174c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7e9b      	ldrb	r3, [r3, #26]
 8001752:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001754:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <HAL_ADC_Init+0x118>
 800175e:	2380      	movs	r3, #128	@ 0x80
 8001760:	015b      	lsls	r3, r3, #5
 8001762:	e000      	b.n	8001766 <HAL_ADC_Init+0x11a>
 8001764:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001766:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800176c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	da04      	bge.n	8001780 <HAL_ADC_Init+0x134>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	e001      	b.n	8001784 <HAL_ADC_Init+0x138>
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001784:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	212c      	movs	r1, #44	@ 0x2c
 800178a:	5c5b      	ldrb	r3, [r3, r1]
 800178c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800178e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	5c9b      	ldrb	r3, [r3, r2]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d115      	bne.n	80017cc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7e9b      	ldrb	r3, [r3, #26]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2280      	movs	r2, #128	@ 0x80
 80017ac:	0252      	lsls	r2, r2, #9
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	e00b      	b.n	80017cc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b8:	2220      	movs	r2, #32
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c4:	2201      	movs	r2, #1
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00a      	beq.n	80017ea <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017d8:	23e0      	movs	r3, #224	@ 0xe0
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017e2:	4313      	orrs	r3, r2
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a65      	ldr	r2, [pc, #404]	@ (8001988 <HAL_ADC_Init+0x33c>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	0f9b      	lsrs	r3, r3, #30
 8001806:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800180c:	4313      	orrs	r3, r2
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	223c      	movs	r2, #60	@ 0x3c
 8001818:	5c9b      	ldrb	r3, [r3, r2]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d111      	bne.n	8001842 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	0f9b      	lsrs	r3, r3, #30
 8001824:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800182a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001830:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001836:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	4313      	orrs	r3, r2
 800183c:	2201      	movs	r2, #1
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	4a50      	ldr	r2, [pc, #320]	@ (800198c <HAL_ADC_Init+0x340>)
 800184a:	4013      	ands	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	430a      	orrs	r2, r1
 8001856:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	23c0      	movs	r3, #192	@ 0xc0
 800185e:	061b      	lsls	r3, r3, #24
 8001860:	429a      	cmp	r2, r3
 8001862:	d018      	beq.n	8001896 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	05db      	lsls	r3, r3, #23
 800186c:	429a      	cmp	r2, r3
 800186e:	d012      	beq.n	8001896 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001874:	2380      	movs	r3, #128	@ 0x80
 8001876:	061b      	lsls	r3, r3, #24
 8001878:	429a      	cmp	r2, r3
 800187a:	d00c      	beq.n	8001896 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800187c:	4b44      	ldr	r3, [pc, #272]	@ (8001990 <HAL_ADC_Init+0x344>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a44      	ldr	r2, [pc, #272]	@ (8001994 <HAL_ADC_Init+0x348>)
 8001882:	4013      	ands	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	23f0      	movs	r3, #240	@ 0xf0
 800188c:	039b      	lsls	r3, r3, #14
 800188e:	401a      	ands	r2, r3
 8001890:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <HAL_ADC_Init+0x344>)
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189e:	001a      	movs	r2, r3
 80018a0:	2100      	movs	r1, #0
 80018a2:	f7ff fdac 	bl	80013fe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ae:	493a      	ldr	r1, [pc, #232]	@ (8001998 <HAL_ADC_Init+0x34c>)
 80018b0:	001a      	movs	r2, r3
 80018b2:	f7ff fda4 	bl	80013fe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2110      	movs	r1, #16
 80018ca:	4249      	negs	r1, r1
 80018cc:	430a      	orrs	r2, r1
 80018ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80018d0:	e018      	b.n	8001904 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	039b      	lsls	r3, r3, #14
 80018da:	429a      	cmp	r2, r3
 80018dc:	d112      	bne.n	8001904 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	221c      	movs	r2, #28
 80018ee:	4013      	ands	r3, r2
 80018f0:	2210      	movs	r2, #16
 80018f2:	4252      	negs	r2, r2
 80018f4:	409a      	lsls	r2, r3
 80018f6:	0011      	movs	r1, r2
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2100      	movs	r1, #0
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff fd94 	bl	8001438 <LL_ADC_GetSamplingTimeCommonChannels>
 8001910:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001916:	429a      	cmp	r2, r3
 8001918:	d10b      	bne.n	8001932 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001924:	2203      	movs	r2, #3
 8001926:	4393      	bics	r3, r2
 8001928:	2201      	movs	r2, #1
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001930:	e01c      	b.n	800196c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	2212      	movs	r2, #18
 8001938:	4393      	bics	r3, r2
 800193a:	2210      	movs	r2, #16
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001946:	2201      	movs	r2, #1
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800194e:	231f      	movs	r3, #31
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001956:	e009      	b.n	800196c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	2210      	movs	r2, #16
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001964:	231f      	movs	r3, #31
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800196c:	231f      	movs	r3, #31
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	781b      	ldrb	r3, [r3, #0]
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	b008      	add	sp, #32
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	20000004 	.word	0x20000004
 8001980:	00030d40 	.word	0x00030d40
 8001984:	fffffefd 	.word	0xfffffefd
 8001988:	ffde0201 	.word	0xffde0201
 800198c:	1ffffc02 	.word	0x1ffffc02
 8001990:	40012708 	.word	0x40012708
 8001994:	ffc3ffff 	.word	0xffc3ffff
 8001998:	07ffff04 	.word	0x07ffff04

0800199c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7ff fe3b 	bl	8001628 <LL_ADC_REG_IsConversionOngoing>
 80019b2:	1e03      	subs	r3, r0, #0
 80019b4:	d16c      	bne.n	8001a90 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2254      	movs	r2, #84	@ 0x54
 80019ba:	5c9b      	ldrb	r3, [r3, r2]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_ADC_Start_DMA+0x28>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e06c      	b.n	8001a9e <HAL_ADC_Start_DMA+0x102>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2254      	movs	r2, #84	@ 0x54
 80019c8:	2101      	movs	r1, #1
 80019ca:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	d113      	bne.n	8001a00 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff fdff 	bl	80015e0 <LL_ADC_IsEnabled>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d004      	beq.n	80019f0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7ff fde6 	bl	80015bc <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2101      	movs	r1, #1
 80019fc:	430a      	orrs	r2, r1
 80019fe:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a00:	2517      	movs	r5, #23
 8001a02:	197c      	adds	r4, r7, r5
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	0018      	movs	r0, r3
 8001a08:	f000 fa46 	bl	8001e98 <ADC_Enable>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a10:	002c      	movs	r4, r5
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d13e      	bne.n	8001a98 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	4a22      	ldr	r2, [pc, #136]	@ (8001aa8 <HAL_ADC_Start_DMA+0x10c>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	2280      	movs	r2, #128	@ 0x80
 8001a24:	0052      	lsls	r2, r2, #1
 8001a26:	431a      	orrs	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a36:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <HAL_ADC_Start_DMA+0x110>)
 8001a38:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab0 <HAL_ADC_Start_DMA+0x114>)
 8001a40:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a46:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab4 <HAL_ADC_Start_DMA+0x118>)
 8001a48:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	221c      	movs	r2, #28
 8001a50:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2254      	movs	r2, #84	@ 0x54
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2110      	movs	r1, #16
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3340      	adds	r3, #64	@ 0x40
 8001a74:	0019      	movs	r1, r3
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	193c      	adds	r4, r7, r4
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f000 fbfe 	bl	800227c <HAL_DMA_Start_IT>
 8001a80:	0003      	movs	r3, r0
 8001a82:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fdbb 	bl	8001604 <LL_ADC_REG_StartConversion>
 8001a8e:	e003      	b.n	8001a98 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a90:	2317      	movs	r3, #23
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	2202      	movs	r2, #2
 8001a96:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001a98:	2317      	movs	r3, #23
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	781b      	ldrb	r3, [r3, #0]
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b006      	add	sp, #24
 8001aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	fffff0fe 	.word	0xfffff0fe
 8001aac:	08001fa5 	.word	0x08001fa5
 8001ab0:	0800206d 	.word	0x0800206d
 8001ab4:	0800208b 	.word	0x0800208b

08001ab8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ac0:	46c0      	nop			@ (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ad0:	46c0      	nop			@ (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ae0:	46c0      	nop			@ (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af2:	2317      	movs	r3, #23
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2254      	movs	r2, #84	@ 0x54
 8001b02:	5c9b      	ldrb	r3, [r3, r2]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x24>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e1c0      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x3a6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2254      	movs	r2, #84	@ 0x54
 8001b10:	2101      	movs	r1, #1
 8001b12:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff fd85 	bl	8001628 <LL_ADC_REG_IsConversionOngoing>
 8001b1e:	1e03      	subs	r3, r0, #0
 8001b20:	d000      	beq.n	8001b24 <HAL_ADC_ConfigChannel+0x3c>
 8001b22:	e1a3      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d100      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x46>
 8001b2c:	e143      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d004      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b3e:	4ac1      	ldr	r2, [pc, #772]	@ (8001e44 <HAL_ADC_ConfigChannel+0x35c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d108      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	0010      	movs	r0, r2
 8001b50:	f7ff fcba 	bl	80014c8 <LL_ADC_REG_SetSequencerChAdd>
 8001b54:	e0c9      	b.n	8001cea <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	211f      	movs	r1, #31
 8001b60:	400b      	ands	r3, r1
 8001b62:	210f      	movs	r1, #15
 8001b64:	4099      	lsls	r1, r3
 8001b66:	000b      	movs	r3, r1
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	035b      	lsls	r3, r3, #13
 8001b74:	0b5b      	lsrs	r3, r3, #13
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x9c>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	221f      	movs	r2, #31
 8001b80:	4013      	ands	r3, r2
 8001b82:	e098      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d000      	beq.n	8001b90 <HAL_ADC_ConfigChannel+0xa8>
 8001b8e:	e091      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x1cc>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d000      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0xb4>
 8001b9a:	e089      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x1c8>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d000      	beq.n	8001ba8 <HAL_ADC_ConfigChannel+0xc0>
 8001ba6:	e081      	b.n	8001cac <HAL_ADC_ConfigChannel+0x1c4>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2208      	movs	r2, #8
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d000      	beq.n	8001bb4 <HAL_ADC_ConfigChannel+0xcc>
 8001bb2:	e079      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x1c0>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d000      	beq.n	8001bc0 <HAL_ADC_ConfigChannel+0xd8>
 8001bbe:	e071      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x1bc>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d000      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0xe4>
 8001bca:	e069      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x1b8>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2240      	movs	r2, #64	@ 0x40
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d000      	beq.n	8001bd8 <HAL_ADC_ConfigChannel+0xf0>
 8001bd6:	e061      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x1b4>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	4013      	ands	r3, r2
 8001be0:	d000      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0xfc>
 8001be2:	e059      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x1b0>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4013      	ands	r3, r2
 8001bee:	d151      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1ac>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d149      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1a8>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	d141      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1a4>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4013      	ands	r3, r2
 8001c12:	d139      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x1a0>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	015b      	lsls	r3, r3, #5
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d131      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x19c>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	@ 0x80
 8001c26:	019b      	lsls	r3, r3, #6
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d129      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x198>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	d121      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x194>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	4013      	ands	r3, r2
 8001c42:	d119      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x190>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2380      	movs	r3, #128	@ 0x80
 8001c4a:	025b      	lsls	r3, r3, #9
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d111      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x18c>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	029b      	lsls	r3, r3, #10
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d109      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x188>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	02db      	lsls	r3, r3, #11
 8001c64:	4013      	ands	r3, r2
 8001c66:	d001      	beq.n	8001c6c <HAL_ADC_ConfigChannel+0x184>
 8001c68:	2312      	movs	r3, #18
 8001c6a:	e024      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e022      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c70:	2311      	movs	r3, #17
 8001c72:	e020      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c74:	2310      	movs	r3, #16
 8001c76:	e01e      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c78:	230f      	movs	r3, #15
 8001c7a:	e01c      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c7c:	230e      	movs	r3, #14
 8001c7e:	e01a      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c80:	230d      	movs	r3, #13
 8001c82:	e018      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c84:	230c      	movs	r3, #12
 8001c86:	e016      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c88:	230b      	movs	r3, #11
 8001c8a:	e014      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	e012      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c90:	2309      	movs	r3, #9
 8001c92:	e010      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c94:	2308      	movs	r3, #8
 8001c96:	e00e      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c98:	2307      	movs	r3, #7
 8001c9a:	e00c      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	e00a      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	e008      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	e006      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e004      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e002      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1ce>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	6852      	ldr	r2, [r2, #4]
 8001cba:	201f      	movs	r0, #31
 8001cbc:	4002      	ands	r2, r0
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	000a      	movs	r2, r1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d808      	bhi.n	8001cea <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	f7ff fbcf 	bl	8001488 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	f7ff fc0a 	bl	8001510 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db00      	blt.n	8001d06 <HAL_ADC_ConfigChannel+0x21e>
 8001d04:	e0bc      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d06:	4b50      	ldr	r3, [pc, #320]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff fb6b 	bl	80013e4 <LL_ADC_GetCommonPathInternalCh>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_ADC_ConfigChannel+0x364>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d122      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d24:	d11d      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	0412      	lsls	r2, r2, #16
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	4a46      	ldr	r2, [pc, #280]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001d30:	0019      	movs	r1, r3
 8001d32:	0010      	movs	r0, r2
 8001d34:	f7ff fb42 	bl	80013bc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d38:	4b45      	ldr	r3, [pc, #276]	@ (8001e50 <HAL_ADC_ConfigChannel+0x368>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4945      	ldr	r1, [pc, #276]	@ (8001e54 <HAL_ADC_ConfigChannel+0x36c>)
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7fe f9ea 	bl	8000118 <__udivsi3>
 8001d44:	0003      	movs	r3, r0
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	0013      	movs	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	189b      	adds	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d52:	e002      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f9      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d60:	e08e      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a3c      	ldr	r2, [pc, #240]	@ (8001e58 <HAL_ADC_ConfigChannel+0x370>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10e      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	2380      	movs	r3, #128	@ 0x80
 8001d70:	045b      	lsls	r3, r3, #17
 8001d72:	4013      	ands	r3, r2
 8001d74:	d109      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	0452      	lsls	r2, r2, #17
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	4a32      	ldr	r2, [pc, #200]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001d80:	0019      	movs	r1, r3
 8001d82:	0010      	movs	r0, r2
 8001d84:	f7ff fb1a 	bl	80013bc <LL_ADC_SetCommonPathInternalCh>
 8001d88:	e07a      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a33      	ldr	r2, [pc, #204]	@ (8001e5c <HAL_ADC_ConfigChannel+0x374>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d000      	beq.n	8001d96 <HAL_ADC_ConfigChannel+0x2ae>
 8001d94:	e074      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	03db      	lsls	r3, r3, #15
 8001d9c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d9e:	d000      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x2ba>
 8001da0:	e06e      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2280      	movs	r2, #128	@ 0x80
 8001da6:	03d2      	lsls	r2, r2, #15
 8001da8:	4313      	orrs	r3, r2
 8001daa:	4a27      	ldr	r2, [pc, #156]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001dac:	0019      	movs	r1, r3
 8001dae:	0010      	movs	r0, r2
 8001db0:	f7ff fb04 	bl	80013bc <LL_ADC_SetCommonPathInternalCh>
 8001db4:	e064      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d004      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <HAL_ADC_ConfigChannel+0x35c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d107      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	f7ff fb87 	bl	80014ea <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	da4d      	bge.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de4:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7ff fafc 	bl	80013e4 <LL_ADC_GetCommonPathInternalCh>
 8001dec:	0003      	movs	r3, r0
 8001dee:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a15      	ldr	r2, [pc, #84]	@ (8001e4c <HAL_ADC_ConfigChannel+0x364>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d108      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4a18      	ldr	r2, [pc, #96]	@ (8001e60 <HAL_ADC_ConfigChannel+0x378>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	4a11      	ldr	r2, [pc, #68]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001e02:	0019      	movs	r1, r3
 8001e04:	0010      	movs	r0, r2
 8001e06:	f7ff fad9 	bl	80013bc <LL_ADC_SetCommonPathInternalCh>
 8001e0a:	e039      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a11      	ldr	r2, [pc, #68]	@ (8001e58 <HAL_ADC_ConfigChannel+0x370>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d108      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <HAL_ADC_ConfigChannel+0x37c>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001e1e:	0019      	movs	r1, r3
 8001e20:	0010      	movs	r0, r2
 8001e22:	f7ff facb 	bl	80013bc <LL_ADC_SetCommonPathInternalCh>
 8001e26:	e02b      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e5c <HAL_ADC_ConfigChannel+0x374>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d126      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <HAL_ADC_ConfigChannel+0x380>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	4a03      	ldr	r2, [pc, #12]	@ (8001e48 <HAL_ADC_ConfigChannel+0x360>)
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	0010      	movs	r0, r2
 8001e3e:	f7ff fabd 	bl	80013bc <LL_ADC_SetCommonPathInternalCh>
 8001e42:	e01d      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x398>
 8001e44:	80000004 	.word	0x80000004
 8001e48:	40012708 	.word	0x40012708
 8001e4c:	b0001000 	.word	0xb0001000
 8001e50:	20000004 	.word	0x20000004
 8001e54:	00030d40 	.word	0x00030d40
 8001e58:	b8004000 	.word	0xb8004000
 8001e5c:	b4002000 	.word	0xb4002000
 8001e60:	ff7fffff 	.word	0xff7fffff
 8001e64:	feffffff 	.word	0xfeffffff
 8001e68:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	2220      	movs	r2, #32
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e78:	2317      	movs	r3, #23
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2254      	movs	r2, #84	@ 0x54
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e88:	2317      	movs	r3, #23
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	781b      	ldrb	r3, [r3, #0]
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b006      	add	sp, #24
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)

08001e98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff fb99 	bl	80015e0 <LL_ADC_IsEnabled>
 8001eae:	1e03      	subs	r3, r0, #0
 8001eb0:	d000      	beq.n	8001eb4 <ADC_Enable+0x1c>
 8001eb2:	e069      	b.n	8001f88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4a36      	ldr	r2, [pc, #216]	@ (8001f94 <ADC_Enable+0xfc>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d00d      	beq.n	8001edc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e056      	b.n	8001f8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fb59 	bl	8001598 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f98 <ADC_Enable+0x100>)
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff fa7b 	bl	80013e4 <LL_ADC_GetCommonPathInternalCh>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d00f      	beq.n	8001f18 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef8:	4b28      	ldr	r3, [pc, #160]	@ (8001f9c <ADC_Enable+0x104>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4928      	ldr	r1, [pc, #160]	@ (8001fa0 <ADC_Enable+0x108>)
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7fe f90a 	bl	8000118 <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001f08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f0a:	e002      	b.n	8001f12 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f9      	bne.n	8001f0c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7e5b      	ldrb	r3, [r3, #25]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d033      	beq.n	8001f88 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fa42 	bl	80013a8 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f28:	e027      	b.n	8001f7a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff fb56 	bl	80015e0 <LL_ADC_IsEnabled>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d104      	bne.n	8001f42 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff fb2b 	bl	8001598 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f42:	f7ff fa31 	bl	80013a8 <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d914      	bls.n	8001f7a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d00d      	beq.n	8001f7a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	2210      	movs	r2, #16
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6e:	2201      	movs	r2, #1
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e007      	b.n	8001f8a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d1d0      	bne.n	8001f2a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	80000017 	.word	0x80000017
 8001f98:	40012708 	.word	0x40012708
 8001f9c:	20000004 	.word	0x20000004
 8001fa0:	00030d40 	.word	0x00030d40

08001fa4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	2250      	movs	r2, #80	@ 0x50
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d141      	bne.n	8002040 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	2280      	movs	r2, #128	@ 0x80
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7ff fa49 	bl	8001466 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fd4:	1e03      	subs	r3, r0, #0
 8001fd6:	d02e      	beq.n	8002036 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	7e9b      	ldrb	r3, [r3, #26]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d12a      	bne.n	8002036 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d123      	bne.n	8002036 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff fb18 	bl	8001628 <LL_ADC_REG_IsConversionOngoing>
 8001ff8:	1e03      	subs	r3, r0, #0
 8001ffa:	d110      	bne.n	800201e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	210c      	movs	r1, #12
 8002008:	438a      	bics	r2, r1
 800200a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	4a15      	ldr	r2, [pc, #84]	@ (8002068 <ADC_DMAConvCplt+0xc4>)
 8002012:	4013      	ands	r3, r2
 8002014:	2201      	movs	r2, #1
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	659a      	str	r2, [r3, #88]	@ 0x58
 800201c:	e00b      	b.n	8002036 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	2220      	movs	r2, #32
 8002024:	431a      	orrs	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202e:	2201      	movs	r2, #1
 8002030:	431a      	orrs	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff fd3d 	bl	8001ab8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800203e:	e00f      	b.n	8002060 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	2210      	movs	r2, #16
 8002046:	4013      	ands	r3, r2
 8002048:	d004      	beq.n	8002054 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0018      	movs	r0, r3
 800204e:	f7ff fd43 	bl	8001ad8 <HAL_ADC_ErrorCallback>
}
 8002052:	e005      	b.n	8002060 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	0010      	movs	r0, r2
 800205e:	4798      	blx	r3
}
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b004      	add	sp, #16
 8002066:	bd80      	pop	{r7, pc}
 8002068:	fffffefe 	.word	0xfffffefe

0800206c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff fd23 	bl	8001ac8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b004      	add	sp, #16
 8002088:	bd80      	pop	{r7, pc}

0800208a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002096:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	2240      	movs	r2, #64	@ 0x40
 800209e:	431a      	orrs	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	2204      	movs	r2, #4
 80020aa:	431a      	orrs	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7ff fd10 	bl	8001ad8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020b8:	46c0      	nop			@ (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b004      	add	sp, #16
 80020be:	bd80      	pop	{r7, pc}

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	0002      	movs	r2, r0
 80020c8:	1dfb      	adds	r3, r7, #7
 80020ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80020d2:	d809      	bhi.n	80020e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	001a      	movs	r2, r3
 80020da:	231f      	movs	r3, #31
 80020dc:	401a      	ands	r2, r3
 80020de:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <__NVIC_EnableIRQ+0x30>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	4091      	lsls	r1, r2
 80020e4:	000a      	movs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	e000e100 	.word	0xe000e100

080020f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	0002      	movs	r2, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002102:	1dfb      	adds	r3, r7, #7
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b7f      	cmp	r3, #127	@ 0x7f
 8002108:	d828      	bhi.n	800215c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800210a:	4a2f      	ldr	r2, [pc, #188]	@ (80021c8 <__NVIC_SetPriority+0xd4>)
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b25b      	sxtb	r3, r3
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	33c0      	adds	r3, #192	@ 0xc0
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	589b      	ldr	r3, [r3, r2]
 800211a:	1dfa      	adds	r2, r7, #7
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	0011      	movs	r1, r2
 8002120:	2203      	movs	r2, #3
 8002122:	400a      	ands	r2, r1
 8002124:	00d2      	lsls	r2, r2, #3
 8002126:	21ff      	movs	r1, #255	@ 0xff
 8002128:	4091      	lsls	r1, r2
 800212a:	000a      	movs	r2, r1
 800212c:	43d2      	mvns	r2, r2
 800212e:	401a      	ands	r2, r3
 8002130:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	22ff      	movs	r2, #255	@ 0xff
 8002138:	401a      	ands	r2, r3
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	0018      	movs	r0, r3
 8002140:	2303      	movs	r3, #3
 8002142:	4003      	ands	r3, r0
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002148:	481f      	ldr	r0, [pc, #124]	@ (80021c8 <__NVIC_SetPriority+0xd4>)
 800214a:	1dfb      	adds	r3, r7, #7
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b25b      	sxtb	r3, r3
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	430a      	orrs	r2, r1
 8002154:	33c0      	adds	r3, #192	@ 0xc0
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800215a:	e031      	b.n	80021c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800215c:	4a1b      	ldr	r2, [pc, #108]	@ (80021cc <__NVIC_SetPriority+0xd8>)
 800215e:	1dfb      	adds	r3, r7, #7
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	0019      	movs	r1, r3
 8002164:	230f      	movs	r3, #15
 8002166:	400b      	ands	r3, r1
 8002168:	3b08      	subs	r3, #8
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3306      	adds	r3, #6
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	18d3      	adds	r3, r2, r3
 8002172:	3304      	adds	r3, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1dfa      	adds	r2, r7, #7
 8002178:	7812      	ldrb	r2, [r2, #0]
 800217a:	0011      	movs	r1, r2
 800217c:	2203      	movs	r2, #3
 800217e:	400a      	ands	r2, r1
 8002180:	00d2      	lsls	r2, r2, #3
 8002182:	21ff      	movs	r1, #255	@ 0xff
 8002184:	4091      	lsls	r1, r2
 8002186:	000a      	movs	r2, r1
 8002188:	43d2      	mvns	r2, r2
 800218a:	401a      	ands	r2, r3
 800218c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	22ff      	movs	r2, #255	@ 0xff
 8002194:	401a      	ands	r2, r3
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	0018      	movs	r0, r3
 800219c:	2303      	movs	r3, #3
 800219e:	4003      	ands	r3, r0
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021a4:	4809      	ldr	r0, [pc, #36]	@ (80021cc <__NVIC_SetPriority+0xd8>)
 80021a6:	1dfb      	adds	r3, r7, #7
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	001c      	movs	r4, r3
 80021ac:	230f      	movs	r3, #15
 80021ae:	4023      	ands	r3, r4
 80021b0:	3b08      	subs	r3, #8
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	430a      	orrs	r2, r1
 80021b6:	3306      	adds	r3, #6
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	18c3      	adds	r3, r0, r3
 80021bc:	3304      	adds	r3, #4
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	46c0      	nop			@ (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b003      	add	sp, #12
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	1e5a      	subs	r2, r3, #1
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	045b      	lsls	r3, r3, #17
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d301      	bcc.n	80021e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e4:	2301      	movs	r3, #1
 80021e6:	e010      	b.n	800220a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <SysTick_Config+0x44>)
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	3a01      	subs	r2, #1
 80021ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f0:	2301      	movs	r3, #1
 80021f2:	425b      	negs	r3, r3
 80021f4:	2103      	movs	r1, #3
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7ff ff7c 	bl	80020f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <SysTick_Config+0x44>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <SysTick_Config+0x44>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b002      	add	sp, #8
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	210f      	movs	r1, #15
 8002224:	187b      	adds	r3, r7, r1
 8002226:	1c02      	adds	r2, r0, #0
 8002228:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	187b      	adds	r3, r7, r1
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b25b      	sxtb	r3, r3
 8002232:	0011      	movs	r1, r2
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff ff5d 	bl	80020f4 <__NVIC_SetPriority>
}
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b004      	add	sp, #16
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	0002      	movs	r2, r0
 800224a:	1dfb      	adds	r3, r7, #7
 800224c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b25b      	sxtb	r3, r3
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff ff33 	bl	80020c0 <__NVIC_EnableIRQ>
}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b002      	add	sp, #8
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f7ff ffaf 	bl	80021d0 <SysTick_Config>
 8002272:	0003      	movs	r3, r0
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800228a:	2317      	movs	r3, #23
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2224      	movs	r2, #36	@ 0x24
 8002296:	5c9b      	ldrb	r3, [r3, r2]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_DMA_Start_IT+0x24>
 800229c:	2302      	movs	r3, #2
 800229e:	e06f      	b.n	8002380 <HAL_DMA_Start_IT+0x104>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2224      	movs	r2, #36	@ 0x24
 80022a4:	2101      	movs	r1, #1
 80022a6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2225      	movs	r2, #37	@ 0x25
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d157      	bne.n	8002364 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2225      	movs	r2, #37	@ 0x25
 80022b8:	2102      	movs	r1, #2
 80022ba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	438a      	bics	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f921 	bl	8002520 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	210e      	movs	r1, #14
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e00f      	b.n	8002318 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2104      	movs	r1, #4
 8002304:	438a      	bics	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	210a      	movs	r1, #10
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	025b      	lsls	r3, r3, #9
 8002322:	4013      	ands	r3, r2
 8002324:	d008      	beq.n	8002338 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002330:	2180      	movs	r1, #128	@ 0x80
 8002332:	0049      	lsls	r1, r1, #1
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234a:	2180      	movs	r1, #128	@ 0x80
 800234c:	0049      	lsls	r1, r1, #1
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	e00a      	b.n	800237a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2280      	movs	r2, #128	@ 0x80
 8002368:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2224      	movs	r2, #36	@ 0x24
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002372:	2317      	movs	r3, #23
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800237a:	2317      	movs	r3, #23
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	781b      	ldrb	r3, [r3, #0]
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b006      	add	sp, #24
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e050      	b.n	800243c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2225      	movs	r2, #37	@ 0x25
 800239e:	5c9b      	ldrb	r3, [r3, r2]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d008      	beq.n	80023b8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2204      	movs	r2, #4
 80023aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	@ 0x24
 80023b0:	2100      	movs	r1, #0
 80023b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e041      	b.n	800243c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	210e      	movs	r1, #14
 80023c4:	438a      	bics	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	491c      	ldr	r1, [pc, #112]	@ (8002444 <HAL_DMA_Abort+0xbc>)
 80023d4:	400a      	ands	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	438a      	bics	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80023e8:	4b17      	ldr	r3, [pc, #92]	@ (8002448 <HAL_DMA_Abort+0xc0>)
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	221c      	movs	r2, #28
 80023f2:	4013      	ands	r3, r2
 80023f4:	2201      	movs	r2, #1
 80023f6:	409a      	lsls	r2, r3
 80023f8:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <HAL_DMA_Abort+0xc0>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002406:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00c      	beq.n	800242a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241a:	490a      	ldr	r1, [pc, #40]	@ (8002444 <HAL_DMA_Abort+0xbc>)
 800241c:	400a      	ands	r2, r1
 800241e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002428:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2225      	movs	r2, #37	@ 0x25
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2224      	movs	r2, #36	@ 0x24
 8002436:	2100      	movs	r1, #0
 8002438:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}
 8002444:	fffffeff 	.word	0xfffffeff
 8002448:	40020000 	.word	0x40020000

0800244c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	210f      	movs	r1, #15
 8002456:	187b      	adds	r3, r7, r1
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2225      	movs	r2, #37	@ 0x25
 8002460:	5c9b      	ldrb	r3, [r3, r2]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d006      	beq.n	8002476 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2204      	movs	r2, #4
 800246c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	e049      	b.n	800250a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	210e      	movs	r1, #14
 8002482:	438a      	bics	r2, r1
 8002484:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	438a      	bics	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a0:	491d      	ldr	r1, [pc, #116]	@ (8002518 <HAL_DMA_Abort_IT+0xcc>)
 80024a2:	400a      	ands	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80024a6:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <HAL_DMA_Abort_IT+0xd0>)
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	221c      	movs	r2, #28
 80024b0:	4013      	ands	r3, r2
 80024b2:	2201      	movs	r2, #1
 80024b4:	409a      	lsls	r2, r3
 80024b6:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_DMA_Abort_IT+0xd0>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00c      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d8:	490f      	ldr	r1, [pc, #60]	@ (8002518 <HAL_DMA_Abort_IT+0xcc>)
 80024da:	400a      	ands	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80024e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2225      	movs	r2, #37	@ 0x25
 80024ec:	2101      	movs	r1, #1
 80024ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	@ 0x24
 80024f4:	2100      	movs	r1, #0
 80024f6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	0010      	movs	r0, r2
 8002508:	4798      	blx	r3
    }
  }
  return status;
 800250a:	230f      	movs	r3, #15
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	781b      	ldrb	r3, [r3, #0]
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	b004      	add	sp, #16
 8002516:	bd80      	pop	{r7, pc}
 8002518:	fffffeff 	.word	0xfffffeff
 800251c:	40020000 	.word	0x40020000

08002520 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002536:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002548:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800254a:	4b14      	ldr	r3, [pc, #80]	@ (800259c <DMA_SetConfig+0x7c>)
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	221c      	movs	r2, #28
 8002554:	4013      	ands	r3, r2
 8002556:	2201      	movs	r2, #1
 8002558:	409a      	lsls	r2, r3
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <DMA_SetConfig+0x7c>)
 800255c:	430a      	orrs	r2, r1
 800255e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b10      	cmp	r3, #16
 800256e:	d108      	bne.n	8002582 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002580:	e007      	b.n	8002592 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	60da      	str	r2, [r3, #12]
}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	46bd      	mov	sp, r7
 8002596:	b004      	add	sp, #16
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	40020000 	.word	0x40020000

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ae:	e147      	b.n	8002840 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2101      	movs	r1, #1
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4091      	lsls	r1, r2
 80025ba:	000a      	movs	r2, r1
 80025bc:	4013      	ands	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d100      	bne.n	80025c8 <HAL_GPIO_Init+0x28>
 80025c6:	e138      	b.n	800283a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2203      	movs	r2, #3
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d005      	beq.n	80025e0 <HAL_GPIO_Init+0x40>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2203      	movs	r2, #3
 80025da:	4013      	ands	r3, r2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d130      	bne.n	8002642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	409a      	lsls	r2, r3
 80025ee:	0013      	movs	r3, r2
 80025f0:	43da      	mvns	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	409a      	lsls	r2, r3
 8002602:	0013      	movs	r3, r2
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002616:	2201      	movs	r2, #1
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
 800261c:	0013      	movs	r3, r2
 800261e:	43da      	mvns	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	2201      	movs	r2, #1
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
 8002634:	0013      	movs	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2203      	movs	r2, #3
 8002648:	4013      	ands	r3, r2
 800264a:	2b03      	cmp	r3, #3
 800264c:	d017      	beq.n	800267e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	409a      	lsls	r2, r3
 800265c:	0013      	movs	r3, r2
 800265e:	43da      	mvns	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	409a      	lsls	r2, r3
 8002670:	0013      	movs	r3, r2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2203      	movs	r2, #3
 8002684:	4013      	ands	r3, r2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d123      	bne.n	80026d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	58d3      	ldr	r3, [r2, r3]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2207      	movs	r2, #7
 800269c:	4013      	ands	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	409a      	lsls	r2, r3
 80026a4:	0013      	movs	r3, r2
 80026a6:	43da      	mvns	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2107      	movs	r1, #7
 80026b6:	400b      	ands	r3, r1
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	409a      	lsls	r2, r3
 80026bc:	0013      	movs	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	08da      	lsrs	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3208      	adds	r2, #8
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	6939      	ldr	r1, [r7, #16]
 80026d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	2203      	movs	r2, #3
 80026de:	409a      	lsls	r2, r3
 80026e0:	0013      	movs	r3, r2
 80026e2:	43da      	mvns	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	401a      	ands	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	409a      	lsls	r2, r3
 80026f8:	0013      	movs	r3, r2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	23c0      	movs	r3, #192	@ 0xc0
 800270c:	029b      	lsls	r3, r3, #10
 800270e:	4013      	ands	r3, r2
 8002710:	d100      	bne.n	8002714 <HAL_GPIO_Init+0x174>
 8002712:	e092      	b.n	800283a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002714:	4a50      	ldr	r2, [pc, #320]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3318      	adds	r3, #24
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	589b      	ldr	r3, [r3, r2]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2203      	movs	r2, #3
 8002726:	4013      	ands	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	220f      	movs	r2, #15
 800272c:	409a      	lsls	r2, r3
 800272e:	0013      	movs	r3, r2
 8002730:	43da      	mvns	r2, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	23a0      	movs	r3, #160	@ 0xa0
 800273c:	05db      	lsls	r3, r3, #23
 800273e:	429a      	cmp	r2, r3
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x1ca>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a45      	ldr	r2, [pc, #276]	@ (800285c <HAL_GPIO_Init+0x2bc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x1c6>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a44      	ldr	r2, [pc, #272]	@ (8002860 <HAL_GPIO_Init+0x2c0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x1c2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a43      	ldr	r2, [pc, #268]	@ (8002864 <HAL_GPIO_Init+0x2c4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x1be>
 800275a:	2303      	movs	r3, #3
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x1cc>
 800275e:	2305      	movs	r3, #5
 8002760:	e004      	b.n	800276c <HAL_GPIO_Init+0x1cc>
 8002762:	2302      	movs	r3, #2
 8002764:	e002      	b.n	800276c <HAL_GPIO_Init+0x1cc>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_GPIO_Init+0x1cc>
 800276a:	2300      	movs	r3, #0
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	2103      	movs	r1, #3
 8002770:	400a      	ands	r2, r1
 8002772:	00d2      	lsls	r2, r2, #3
 8002774:	4093      	lsls	r3, r2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800277c:	4936      	ldr	r1, [pc, #216]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3318      	adds	r3, #24
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800278a:	4b33      	ldr	r3, [pc, #204]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43da      	mvns	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	035b      	lsls	r3, r3, #13
 80027a2:	4013      	ands	r3, r2
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80027b4:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	43da      	mvns	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	039b      	lsls	r3, r3, #14
 80027cc:	4013      	ands	r3, r2
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027de:	4a1e      	ldr	r2, [pc, #120]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 80027e0:	2384      	movs	r3, #132	@ 0x84
 80027e2:	58d3      	ldr	r3, [r2, r3]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	029b      	lsls	r3, r3, #10
 80027f8:	4013      	ands	r3, r2
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002804:	4914      	ldr	r1, [pc, #80]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 8002806:	2284      	movs	r2, #132	@ 0x84
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800280c:	4a12      	ldr	r2, [pc, #72]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	58d3      	ldr	r3, [r2, r3]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43da      	mvns	r2, r3
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	025b      	lsls	r3, r3, #9
 8002826:	4013      	ands	r3, r2
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002832:	4909      	ldr	r1, [pc, #36]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 8002834:	2280      	movs	r2, #128	@ 0x80
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3301      	adds	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	40da      	lsrs	r2, r3
 8002848:	1e13      	subs	r3, r2, #0
 800284a:	d000      	beq.n	800284e <HAL_GPIO_Init+0x2ae>
 800284c:	e6b0      	b.n	80025b0 <HAL_GPIO_Init+0x10>
  }
}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	46c0      	nop			@ (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b006      	add	sp, #24
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021800 	.word	0x40021800
 800285c:	50000400 	.word	0x50000400
 8002860:	50000800 	.word	0x50000800
 8002864:	50000c00 	.word	0x50000c00

08002868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	0008      	movs	r0, r1
 8002872:	0011      	movs	r1, r2
 8002874:	1cbb      	adds	r3, r7, #2
 8002876:	1c02      	adds	r2, r0, #0
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	1c7b      	adds	r3, r7, #1
 800287c:	1c0a      	adds	r2, r1, #0
 800287e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002880:	1c7b      	adds	r3, r7, #1
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002888:	1cbb      	adds	r3, r7, #2
 800288a:	881a      	ldrh	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002890:	e003      	b.n	800289a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002892:	1cbb      	adds	r3, r7, #2
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b002      	add	sp, #8
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	000a      	movs	r2, r1
 80028ac:	1cbb      	adds	r3, r7, #2
 80028ae:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b6:	1cbb      	adds	r3, r7, #2
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	041a      	lsls	r2, r3, #16
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	1cb9      	adds	r1, r7, #2
 80028c6:	8809      	ldrh	r1, [r1, #0]
 80028c8:	400b      	ands	r3, r1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
}
 80028d0:	46c0      	nop			@ (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b004      	add	sp, #16
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	0002      	movs	r2, r0
 80028e0:	1dbb      	adds	r3, r7, #6
 80028e2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	1dba      	adds	r2, r7, #6
 80028ea:	8812      	ldrh	r2, [r2, #0]
 80028ec:	4013      	ands	r3, r2
 80028ee:	d008      	beq.n	8002902 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80028f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80028f2:	1dba      	adds	r2, r7, #6
 80028f4:	8812      	ldrh	r2, [r2, #0]
 80028f6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80028f8:	1dbb      	adds	r3, r7, #6
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7fd ffd9 	bl	80008b4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	1dba      	adds	r2, r7, #6
 8002908:	8812      	ldrh	r2, [r2, #0]
 800290a:	4013      	ands	r3, r2
 800290c:	d008      	beq.n	8002920 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002910:	1dba      	adds	r2, r7, #6
 8002912:	8812      	ldrh	r2, [r2, #0]
 8002914:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002916:	1dbb      	adds	r3, r7, #6
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	0018      	movs	r0, r3
 800291c:	f7fe f838 	bl	8000990 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002920:	46c0      	nop			@ (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021800 	.word	0x40021800

0800292c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a19      	ldr	r2, [pc, #100]	@ (80029a0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	4b17      	ldr	r3, [pc, #92]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d11f      	bne.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002950:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	0013      	movs	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	189b      	adds	r3, r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4912      	ldr	r1, [pc, #72]	@ (80029a8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800295e:	0018      	movs	r0, r3
 8002960:	f7fd fbda 	bl	8000118 <__udivsi3>
 8002964:	0003      	movs	r3, r0
 8002966:	3301      	adds	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800296a:	e008      	b.n	800297e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3b01      	subs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e001      	b.n	800297e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e009      	b.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	401a      	ands	r2, r3
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	429a      	cmp	r2, r3
 800298e:	d0ed      	beq.n	800296c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b004      	add	sp, #16
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	40007000 	.word	0x40007000
 80029a0:	fffff9ff 	.word	0xfffff9ff
 80029a4:	20000004 	.word	0x20000004
 80029a8:	000f4240 	.word	0x000f4240

080029ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	23e0      	movs	r3, #224	@ 0xe0
 80029b6:	01db      	lsls	r3, r3, #7
 80029b8:	4013      	ands	r3, r2
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e2fe      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2201      	movs	r2, #1
 80029dc:	4013      	ands	r3, r2
 80029de:	d100      	bne.n	80029e2 <HAL_RCC_OscConfig+0x1e>
 80029e0:	e07c      	b.n	8002adc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e2:	4bc3      	ldr	r3, [pc, #780]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2238      	movs	r2, #56	@ 0x38
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ec:	4bc0      	ldr	r3, [pc, #768]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2203      	movs	r2, #3
 80029f2:	4013      	ands	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d102      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3e>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d002      	beq.n	8002a08 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d10b      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	4bb9      	ldr	r3, [pc, #740]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	2380      	movs	r3, #128	@ 0x80
 8002a0e:	029b      	lsls	r3, r3, #10
 8002a10:	4013      	ands	r3, r2
 8002a12:	d062      	beq.n	8002ada <HAL_RCC_OscConfig+0x116>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d15e      	bne.n	8002ada <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e2d9      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	025b      	lsls	r3, r3, #9
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_OscConfig+0x78>
 8002a2c:	4bb0      	ldr	r3, [pc, #704]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4baf      	ldr	r3, [pc, #700]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	0249      	lsls	r1, r1, #9
 8002a36:	430a      	orrs	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e020      	b.n	8002a7e <HAL_RCC_OscConfig+0xba>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	23a0      	movs	r3, #160	@ 0xa0
 8002a42:	02db      	lsls	r3, r3, #11
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d10e      	bne.n	8002a66 <HAL_RCC_OscConfig+0xa2>
 8002a48:	4ba9      	ldr	r3, [pc, #676]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4ba8      	ldr	r3, [pc, #672]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a4e:	2180      	movs	r1, #128	@ 0x80
 8002a50:	02c9      	lsls	r1, r1, #11
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	4ba6      	ldr	r3, [pc, #664]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4ba5      	ldr	r3, [pc, #660]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a5c:	2180      	movs	r1, #128	@ 0x80
 8002a5e:	0249      	lsls	r1, r1, #9
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e00b      	b.n	8002a7e <HAL_RCC_OscConfig+0xba>
 8002a66:	4ba2      	ldr	r3, [pc, #648]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4ba1      	ldr	r3, [pc, #644]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a6c:	49a1      	ldr	r1, [pc, #644]	@ (8002cf4 <HAL_RCC_OscConfig+0x330>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	4b9f      	ldr	r3, [pc, #636]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b9e      	ldr	r3, [pc, #632]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002a78:	499f      	ldr	r1, [pc, #636]	@ (8002cf8 <HAL_RCC_OscConfig+0x334>)
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d014      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fe fc8f 	bl	80013a8 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe fc8a 	bl	80013a8 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e298      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa2:	4b93      	ldr	r3, [pc, #588]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	029b      	lsls	r3, r3, #10
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0xcc>
 8002aae:	e015      	b.n	8002adc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fc7a 	bl	80013a8 <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aba:	f7fe fc75 	bl	80013a8 <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b64      	cmp	r3, #100	@ 0x64
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e283      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002acc:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	029b      	lsls	r3, r3, #10
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0xf6>
 8002ad8:	e000      	b.n	8002adc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ada:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d100      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x124>
 8002ae6:	e099      	b.n	8002c1c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae8:	4b81      	ldr	r3, [pc, #516]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2238      	movs	r2, #56	@ 0x38
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af2:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2203      	movs	r2, #3
 8002af8:	4013      	ands	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0x144>
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d002      	beq.n	8002b0e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d135      	bne.n	8002b7a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b0e:	4b78      	ldr	r3, [pc, #480]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4013      	ands	r3, r2
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x162>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e256      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b72      	ldr	r3, [pc, #456]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a74      	ldr	r2, [pc, #464]	@ (8002cfc <HAL_RCC_OscConfig+0x338>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	021a      	lsls	r2, r3, #8
 8002b36:	4b6e      	ldr	r3, [pc, #440]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d112      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b42:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a6e      	ldr	r2, [pc, #440]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	4b67      	ldr	r3, [pc, #412]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b56:	4b66      	ldr	r3, [pc, #408]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0adb      	lsrs	r3, r3, #11
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	4013      	ands	r3, r2
 8002b60:	4a68      	ldr	r2, [pc, #416]	@ (8002d04 <HAL_RCC_OscConfig+0x340>)
 8002b62:	40da      	lsrs	r2, r3
 8002b64:	4b68      	ldr	r3, [pc, #416]	@ (8002d08 <HAL_RCC_OscConfig+0x344>)
 8002b66:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b68:	4b68      	ldr	r3, [pc, #416]	@ (8002d0c <HAL_RCC_OscConfig+0x348>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7fe fbbf 	bl	80012f0 <HAL_InitTick>
 8002b72:	1e03      	subs	r3, r0, #0
 8002b74:	d051      	beq.n	8002c1a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e22c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d030      	beq.n	8002be4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b82:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5e      	ldr	r2, [pc, #376]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	4b57      	ldr	r3, [pc, #348]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002b96:	4b56      	ldr	r3, [pc, #344]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b55      	ldr	r3, [pc, #340]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002b9c:	2180      	movs	r1, #128	@ 0x80
 8002b9e:	0049      	lsls	r1, r1, #1
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fc00 	bl	80013a8 <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe fbfb 	bl	80013a8 <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e209      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	@ 0x80
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b48      	ldr	r3, [pc, #288]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a4a      	ldr	r2, [pc, #296]	@ (8002cfc <HAL_RCC_OscConfig+0x338>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	021a      	lsls	r2, r3, #8
 8002bdc:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	e01b      	b.n	8002c1c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002be4:	4b42      	ldr	r3, [pc, #264]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b41      	ldr	r3, [pc, #260]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002bea:	4949      	ldr	r1, [pc, #292]	@ (8002d10 <HAL_RCC_OscConfig+0x34c>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fbda 	bl	80013a8 <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fbd5 	bl	80013a8 <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e1e3      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c0c:	4b38      	ldr	r3, [pc, #224]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4013      	ands	r3, r2
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x236>
 8002c18:	e000      	b.n	8002c1c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2208      	movs	r2, #8
 8002c22:	4013      	ands	r3, r2
 8002c24:	d047      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c26:	4b32      	ldr	r3, [pc, #200]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2238      	movs	r2, #56	@ 0x38
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b18      	cmp	r3, #24
 8002c30:	d10a      	bne.n	8002c48 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c32:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c36:	2202      	movs	r2, #2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d03c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2f2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d138      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e1c5      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d019      	beq.n	8002c84 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c50:	4b27      	ldr	r3, [pc, #156]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002c52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c54:	4b26      	ldr	r3, [pc, #152]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002c56:	2101      	movs	r1, #1
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fba4 	bl	80013a8 <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fe fb9f 	bl	80013a8 <HAL_GetTick>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e1ad      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c78:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d0f1      	beq.n	8002c66 <HAL_RCC_OscConfig+0x2a2>
 8002c82:	e018      	b.n	8002cb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002c84:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002c86:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c88:	4b19      	ldr	r3, [pc, #100]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fb8a 	bl	80013a8 <HAL_GetTick>
 8002c94:	0003      	movs	r3, r0
 8002c96:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9a:	f7fe fb85 	bl	80013a8 <HAL_GetTick>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e193      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cac:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d1f1      	bne.n	8002c9a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2204      	movs	r2, #4
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d100      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x2fe>
 8002cc0:	e0c6      	b.n	8002e50 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	231f      	movs	r3, #31
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002cca:	4b09      	ldr	r3, [pc, #36]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2238      	movs	r2, #56	@ 0x38
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d11e      	bne.n	8002d14 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_RCC_OscConfig+0x32c>)
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cda:	2202      	movs	r2, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d100      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x31e>
 8002ce0:	e0b6      	b.n	8002e50 <HAL_RCC_OscConfig+0x48c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d000      	beq.n	8002cec <HAL_RCC_OscConfig+0x328>
 8002cea:	e0b1      	b.n	8002e50 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e171      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	fffeffff 	.word	0xfffeffff
 8002cf8:	fffbffff 	.word	0xfffbffff
 8002cfc:	ffff80ff 	.word	0xffff80ff
 8002d00:	ffffc7ff 	.word	0xffffc7ff
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	20000008 	.word	0x20000008
 8002d10:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d14:	4bb1      	ldr	r3, [pc, #708]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d18:	2380      	movs	r3, #128	@ 0x80
 8002d1a:	055b      	lsls	r3, r3, #21
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_OscConfig+0x360>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x362>
 8002d24:	2300      	movs	r3, #0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d011      	beq.n	8002d4e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4bac      	ldr	r3, [pc, #688]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002d2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d2e:	4bab      	ldr	r3, [pc, #684]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002d30:	2180      	movs	r1, #128	@ 0x80
 8002d32:	0549      	lsls	r1, r1, #21
 8002d34:	430a      	orrs	r2, r1
 8002d36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d38:	4ba8      	ldr	r3, [pc, #672]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002d3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d3c:	2380      	movs	r3, #128	@ 0x80
 8002d3e:	055b      	lsls	r3, r3, #21
 8002d40:	4013      	ands	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d46:	231f      	movs	r3, #31
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4e:	4ba4      	ldr	r3, [pc, #656]	@ (8002fe0 <HAL_RCC_OscConfig+0x61c>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4013      	ands	r3, r2
 8002d58:	d11a      	bne.n	8002d90 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d5a:	4ba1      	ldr	r3, [pc, #644]	@ (8002fe0 <HAL_RCC_OscConfig+0x61c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4ba0      	ldr	r3, [pc, #640]	@ (8002fe0 <HAL_RCC_OscConfig+0x61c>)
 8002d60:	2180      	movs	r1, #128	@ 0x80
 8002d62:	0049      	lsls	r1, r1, #1
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d68:	f7fe fb1e 	bl	80013a8 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d72:	f7fe fb19 	bl	80013a8 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e127      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	4b96      	ldr	r3, [pc, #600]	@ (8002fe0 <HAL_RCC_OscConfig+0x61c>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2380      	movs	r3, #128	@ 0x80
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_OscConfig+0x3e2>
 8002d98:	4b90      	ldr	r3, [pc, #576]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002d9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	430a      	orrs	r2, r1
 8002da2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002da4:	e01c      	b.n	8002de0 <HAL_RCC_OscConfig+0x41c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x404>
 8002dae:	4b8b      	ldr	r3, [pc, #556]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002db0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002db2:	4b8a      	ldr	r3, [pc, #552]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002db4:	2104      	movs	r1, #4
 8002db6:	430a      	orrs	r2, r1
 8002db8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dba:	4b88      	ldr	r3, [pc, #544]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002dbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dbe:	4b87      	ldr	r3, [pc, #540]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0x41c>
 8002dc8:	4b84      	ldr	r3, [pc, #528]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002dca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dcc:	4b83      	ldr	r3, [pc, #524]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dd4:	4b81      	ldr	r3, [pc, #516]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002dd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dd8:	4b80      	ldr	r3, [pc, #512]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002dda:	2104      	movs	r1, #4
 8002ddc:	438a      	bics	r2, r1
 8002dde:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d014      	beq.n	8002e12 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe fade 	bl	80013a8 <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df0:	e009      	b.n	8002e06 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fe fad9 	bl	80013a8 <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	4a79      	ldr	r2, [pc, #484]	@ (8002fe4 <HAL_RCC_OscConfig+0x620>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0e6      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e06:	4b75      	ldr	r3, [pc, #468]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x42e>
 8002e10:	e013      	b.n	8002e3a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe fac9 	bl	80013a8 <HAL_GetTick>
 8002e16:	0003      	movs	r3, r0
 8002e18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e1a:	e009      	b.n	8002e30 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fac4 	bl	80013a8 <HAL_GetTick>
 8002e20:	0002      	movs	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	4a6f      	ldr	r2, [pc, #444]	@ (8002fe4 <HAL_RCC_OscConfig+0x620>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e0d1      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e30:	4b6a      	ldr	r3, [pc, #424]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e34:	2202      	movs	r2, #2
 8002e36:	4013      	ands	r3, r2
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e3a:	231f      	movs	r3, #31
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e44:	4b65      	ldr	r3, [pc, #404]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e48:	4b64      	ldr	r3, [pc, #400]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002e4a:	4967      	ldr	r1, [pc, #412]	@ (8002fe8 <HAL_RCC_OscConfig+0x624>)
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d100      	bne.n	8002e5a <HAL_RCC_OscConfig+0x496>
 8002e58:	e0bb      	b.n	8002fd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5a:	4b60      	ldr	r3, [pc, #384]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2238      	movs	r2, #56	@ 0x38
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d100      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4a4>
 8002e66:	e07b      	b.n	8002f60 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d156      	bne.n	8002f1e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e70:	4b5a      	ldr	r3, [pc, #360]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b59      	ldr	r3, [pc, #356]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002e76:	495d      	ldr	r1, [pc, #372]	@ (8002fec <HAL_RCC_OscConfig+0x628>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fa94 	bl	80013a8 <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fe fa8f 	bl	80013a8 <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e09d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e98:	4b50      	ldr	r3, [pc, #320]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	@ 0x80
 8002e9e:	049b      	lsls	r3, r3, #18
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a51      	ldr	r2, [pc, #324]	@ (8002ff0 <HAL_RCC_OscConfig+0x62c>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1a      	ldr	r2, [r3, #32]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	4b42      	ldr	r3, [pc, #264]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed8:	4b40      	ldr	r3, [pc, #256]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b3f      	ldr	r3, [pc, #252]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002ede:	2180      	movs	r1, #128	@ 0x80
 8002ee0:	0449      	lsls	r1, r1, #17
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	4b3c      	ldr	r3, [pc, #240]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002eec:	2180      	movs	r1, #128	@ 0x80
 8002eee:	0549      	lsls	r1, r1, #21
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fa58 	bl	80013a8 <HAL_GetTick>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fe fa53 	bl	80013a8 <HAL_GetTick>
 8002f02:	0002      	movs	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e061      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f10:	4b32      	ldr	r3, [pc, #200]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	049b      	lsls	r3, r3, #18
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x53a>
 8002f1c:	e059      	b.n	8002fd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b2e      	ldr	r3, [pc, #184]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002f24:	4931      	ldr	r1, [pc, #196]	@ (8002fec <HAL_RCC_OscConfig+0x628>)
 8002f26:	400a      	ands	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fa3d 	bl	80013a8 <HAL_GetTick>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe fa38 	bl	80013a8 <HAL_GetTick>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e046      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f46:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	049b      	lsls	r3, r3, #18
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002f52:	4b22      	ldr	r3, [pc, #136]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	4b21      	ldr	r3, [pc, #132]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002f58:	4926      	ldr	r1, [pc, #152]	@ (8002ff4 <HAL_RCC_OscConfig+0x630>)
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	e038      	b.n	8002fd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e033      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <HAL_RCC_OscConfig+0x618>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2203      	movs	r2, #3
 8002f76:	401a      	ands	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d126      	bne.n	8002fce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2270      	movs	r2, #112	@ 0x70
 8002f84:	401a      	ands	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d11f      	bne.n	8002fce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	23fe      	movs	r3, #254	@ 0xfe
 8002f92:	01db      	lsls	r3, r3, #7
 8002f94:	401a      	ands	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d116      	bne.n	8002fce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	23f8      	movs	r3, #248	@ 0xf8
 8002fa4:	039b      	lsls	r3, r3, #14
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d10e      	bne.n	8002fce <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	23e0      	movs	r3, #224	@ 0xe0
 8002fb4:	051b      	lsls	r3, r3, #20
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	0f5b      	lsrs	r3, r3, #29
 8002fc4:	075a      	lsls	r2, r3, #29
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b008      	add	sp, #32
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	00001388 	.word	0x00001388
 8002fe8:	efffffff 	.word	0xefffffff
 8002fec:	feffffff 	.word	0xfeffffff
 8002ff0:	11c1808c 	.word	0x11c1808c
 8002ff4:	eefefffc 	.word	0xeefefffc

08002ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0e9      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b76      	ldr	r3, [pc, #472]	@ (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2207      	movs	r2, #7
 8003012:	4013      	ands	r3, r2
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d91e      	bls.n	8003058 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b73      	ldr	r3, [pc, #460]	@ (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2207      	movs	r2, #7
 8003020:	4393      	bics	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	4b70      	ldr	r3, [pc, #448]	@ (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800302c:	f7fe f9bc 	bl	80013a8 <HAL_GetTick>
 8003030:	0003      	movs	r3, r0
 8003032:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003034:	e009      	b.n	800304a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003036:	f7fe f9b7 	bl	80013a8 <HAL_GetTick>
 800303a:	0002      	movs	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	4a6a      	ldr	r2, [pc, #424]	@ (80031ec <HAL_RCC_ClockConfig+0x1f4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0ca      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800304a:	4b67      	ldr	r3, [pc, #412]	@ (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2207      	movs	r2, #7
 8003050:	4013      	ands	r3, r2
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d1ee      	bne.n	8003036 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2202      	movs	r2, #2
 800305e:	4013      	ands	r3, r2
 8003060:	d015      	beq.n	800308e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2204      	movs	r2, #4
 8003068:	4013      	ands	r3, r2
 800306a:	d006      	beq.n	800307a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800306c:	4b60      	ldr	r3, [pc, #384]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	4b5f      	ldr	r3, [pc, #380]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003072:	21e0      	movs	r1, #224	@ 0xe0
 8003074:	01c9      	lsls	r1, r1, #7
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307a:	4b5d      	ldr	r3, [pc, #372]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4a5d      	ldr	r2, [pc, #372]	@ (80031f4 <HAL_RCC_ClockConfig+0x1fc>)
 8003080:	4013      	ands	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	4b59      	ldr	r3, [pc, #356]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	4013      	ands	r3, r2
 8003096:	d057      	beq.n	8003148 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a0:	4b53      	ldr	r3, [pc, #332]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	4013      	ands	r3, r2
 80030aa:	d12b      	bne.n	8003104 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e097      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b8:	4b4d      	ldr	r3, [pc, #308]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	049b      	lsls	r3, r3, #18
 80030c0:	4013      	ands	r3, r2
 80030c2:	d11f      	bne.n	8003104 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e08b      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d0:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4013      	ands	r3, r2
 80030da:	d113      	bne.n	8003104 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e07f      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e8:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 80030ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ec:	2202      	movs	r2, #2
 80030ee:	4013      	ands	r3, r2
 80030f0:	d108      	bne.n	8003104 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e074      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f6:	4b3e      	ldr	r3, [pc, #248]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	2202      	movs	r2, #2
 80030fc:	4013      	ands	r3, r2
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e06d      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003104:	4b3a      	ldr	r3, [pc, #232]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2207      	movs	r2, #7
 800310a:	4393      	bics	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4b37      	ldr	r3, [pc, #220]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003118:	f7fe f946 	bl	80013a8 <HAL_GetTick>
 800311c:	0003      	movs	r3, r0
 800311e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003120:	e009      	b.n	8003136 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003122:	f7fe f941 	bl	80013a8 <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	4a2f      	ldr	r2, [pc, #188]	@ (80031ec <HAL_RCC_ClockConfig+0x1f4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e054      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	4b2e      	ldr	r3, [pc, #184]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2238      	movs	r2, #56	@ 0x38
 800313c:	401a      	ands	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	429a      	cmp	r2, r3
 8003146:	d1ec      	bne.n	8003122 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003148:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2207      	movs	r2, #7
 800314e:	4013      	ands	r3, r2
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d21e      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b24      	ldr	r3, [pc, #144]	@ (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2207      	movs	r2, #7
 800315c:	4393      	bics	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	4b21      	ldr	r3, [pc, #132]	@ (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003168:	f7fe f91e 	bl	80013a8 <HAL_GetTick>
 800316c:	0003      	movs	r3, r0
 800316e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003170:	e009      	b.n	8003186 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003172:	f7fe f919 	bl	80013a8 <HAL_GetTick>
 8003176:	0002      	movs	r2, r0
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	4a1b      	ldr	r2, [pc, #108]	@ (80031ec <HAL_RCC_ClockConfig+0x1f4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e02c      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003186:	4b18      	ldr	r3, [pc, #96]	@ (80031e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2207      	movs	r2, #7
 800318c:	4013      	ands	r3, r2
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d1ee      	bne.n	8003172 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2204      	movs	r2, #4
 800319a:	4013      	ands	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800319e:	4b14      	ldr	r3, [pc, #80]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	4a15      	ldr	r2, [pc, #84]	@ (80031f8 <HAL_RCC_ClockConfig+0x200>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 80031ae:	430a      	orrs	r2, r1
 80031b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031b2:	f000 f829 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031b6:	0001      	movs	r1, r0
 80031b8:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <HAL_RCC_ClockConfig+0x1f8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	220f      	movs	r2, #15
 80031c0:	401a      	ands	r2, r3
 80031c2:	4b0e      	ldr	r3, [pc, #56]	@ (80031fc <HAL_RCC_ClockConfig+0x204>)
 80031c4:	0092      	lsls	r2, r2, #2
 80031c6:	58d3      	ldr	r3, [r2, r3]
 80031c8:	221f      	movs	r2, #31
 80031ca:	4013      	ands	r3, r2
 80031cc:	000a      	movs	r2, r1
 80031ce:	40da      	lsrs	r2, r3
 80031d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <HAL_RCC_ClockConfig+0x208>)
 80031d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_RCC_ClockConfig+0x20c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fe f889 	bl	80012f0 <HAL_InitTick>
 80031de:	0003      	movs	r3, r0
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b004      	add	sp, #16
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40022000 	.word	0x40022000
 80031ec:	00001388 	.word	0x00001388
 80031f0:	40021000 	.word	0x40021000
 80031f4:	fffff0ff 	.word	0xfffff0ff
 80031f8:	ffff8fff 	.word	0xffff8fff
 80031fc:	080070dc 	.word	0x080070dc
 8003200:	20000004 	.word	0x20000004
 8003204:	20000008 	.word	0x20000008

08003208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800320e:	4b3c      	ldr	r3, [pc, #240]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2238      	movs	r2, #56	@ 0x38
 8003214:	4013      	ands	r3, r2
 8003216:	d10f      	bne.n	8003238 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003218:	4b39      	ldr	r3, [pc, #228]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0adb      	lsrs	r3, r3, #11
 800321e:	2207      	movs	r2, #7
 8003220:	4013      	ands	r3, r2
 8003222:	2201      	movs	r2, #1
 8003224:	409a      	lsls	r2, r3
 8003226:	0013      	movs	r3, r2
 8003228:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800322a:	6839      	ldr	r1, [r7, #0]
 800322c:	4835      	ldr	r0, [pc, #212]	@ (8003304 <HAL_RCC_GetSysClockFreq+0xfc>)
 800322e:	f7fc ff73 	bl	8000118 <__udivsi3>
 8003232:	0003      	movs	r3, r0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	e05d      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003238:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2238      	movs	r2, #56	@ 0x38
 800323e:	4013      	ands	r3, r2
 8003240:	2b08      	cmp	r3, #8
 8003242:	d102      	bne.n	800324a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003244:	4b30      	ldr	r3, [pc, #192]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x100>)
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	e054      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800324a:	4b2d      	ldr	r3, [pc, #180]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2238      	movs	r2, #56	@ 0x38
 8003250:	4013      	ands	r3, r2
 8003252:	2b10      	cmp	r3, #16
 8003254:	d138      	bne.n	80032c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003256:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2203      	movs	r2, #3
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003260:	4b27      	ldr	r3, [pc, #156]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	2207      	movs	r2, #7
 8003268:	4013      	ands	r3, r2
 800326a:	3301      	adds	r3, #1
 800326c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d10d      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	4824      	ldr	r0, [pc, #144]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x100>)
 8003278:	f7fc ff4e 	bl	8000118 <__udivsi3>
 800327c:	0003      	movs	r3, r0
 800327e:	0019      	movs	r1, r3
 8003280:	4b1f      	ldr	r3, [pc, #124]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	227f      	movs	r2, #127	@ 0x7f
 8003288:	4013      	ands	r3, r2
 800328a:	434b      	muls	r3, r1
 800328c:	617b      	str	r3, [r7, #20]
        break;
 800328e:	e00d      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	481c      	ldr	r0, [pc, #112]	@ (8003304 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003294:	f7fc ff40 	bl	8000118 <__udivsi3>
 8003298:	0003      	movs	r3, r0
 800329a:	0019      	movs	r1, r3
 800329c:	4b18      	ldr	r3, [pc, #96]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	227f      	movs	r2, #127	@ 0x7f
 80032a4:	4013      	ands	r3, r2
 80032a6:	434b      	muls	r3, r1
 80032a8:	617b      	str	r3, [r7, #20]
        break;
 80032aa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80032ac:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0f5b      	lsrs	r3, r3, #29
 80032b2:	2207      	movs	r2, #7
 80032b4:	4013      	ands	r3, r2
 80032b6:	3301      	adds	r3, #1
 80032b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	6978      	ldr	r0, [r7, #20]
 80032be:	f7fc ff2b 	bl	8000118 <__udivsi3>
 80032c2:	0003      	movs	r3, r0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	e015      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2238      	movs	r2, #56	@ 0x38
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d103      	bne.n	80032dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80032d4:	2380      	movs	r3, #128	@ 0x80
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2238      	movs	r2, #56	@ 0x38
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b18      	cmp	r3, #24
 80032e6:	d103      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80032e8:	23fa      	movs	r3, #250	@ 0xfa
 80032ea:	01db      	lsls	r3, r3, #7
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	e001      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032f4:	693b      	ldr	r3, [r7, #16]
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b006      	add	sp, #24
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	40021000 	.word	0x40021000
 8003304:	00f42400 	.word	0x00f42400
 8003308:	007a1200 	.word	0x007a1200

0800330c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b02      	ldr	r3, [pc, #8]	@ (800331c <HAL_RCC_GetHCLKFreq+0x10>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	20000004 	.word	0x20000004

08003320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003324:	f7ff fff2 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003328:	0004      	movs	r4, r0
 800332a:	f7ff fb3f 	bl	80029ac <LL_RCC_GetAPB1Prescaler>
 800332e:	0003      	movs	r3, r0
 8003330:	0b1a      	lsrs	r2, r3, #12
 8003332:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003334:	0092      	lsls	r2, r2, #2
 8003336:	58d3      	ldr	r3, [r2, r3]
 8003338:	221f      	movs	r2, #31
 800333a:	4013      	ands	r3, r2
 800333c:	40dc      	lsrs	r4, r3
 800333e:	0023      	movs	r3, r4
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bdb0      	pop	{r4, r5, r7, pc}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	0800711c 	.word	0x0800711c

0800334c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003354:	2313      	movs	r3, #19
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800335c:	2312      	movs	r3, #18
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2380      	movs	r3, #128	@ 0x80
 800336a:	029b      	lsls	r3, r3, #10
 800336c:	4013      	ands	r3, r2
 800336e:	d100      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003370:	e0a3      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003372:	2011      	movs	r0, #17
 8003374:	183b      	adds	r3, r7, r0
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4bc3      	ldr	r3, [pc, #780]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800337c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	055b      	lsls	r3, r3, #21
 8003382:	4013      	ands	r3, r2
 8003384:	d110      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	4bc0      	ldr	r3, [pc, #768]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003388:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800338a:	4bbf      	ldr	r3, [pc, #764]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800338c:	2180      	movs	r1, #128	@ 0x80
 800338e:	0549      	lsls	r1, r1, #21
 8003390:	430a      	orrs	r2, r1
 8003392:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003394:	4bbc      	ldr	r3, [pc, #752]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003398:	2380      	movs	r3, #128	@ 0x80
 800339a:	055b      	lsls	r3, r3, #21
 800339c:	4013      	ands	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	183b      	adds	r3, r7, r0
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a8:	4bb8      	ldr	r3, [pc, #736]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4bb7      	ldr	r3, [pc, #732]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033ae:	2180      	movs	r1, #128	@ 0x80
 80033b0:	0049      	lsls	r1, r1, #1
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033b6:	f7fd fff7 	bl	80013a8 <HAL_GetTick>
 80033ba:	0003      	movs	r3, r0
 80033bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033be:	e00b      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c0:	f7fd fff2 	bl	80013a8 <HAL_GetTick>
 80033c4:	0002      	movs	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d904      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80033ce:	2313      	movs	r3, #19
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	2203      	movs	r2, #3
 80033d4:	701a      	strb	r2, [r3, #0]
        break;
 80033d6:	e005      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033d8:	4bac      	ldr	r3, [pc, #688]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	2380      	movs	r3, #128	@ 0x80
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4013      	ands	r3, r2
 80033e2:	d0ed      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80033e4:	2313      	movs	r3, #19
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d154      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ee:	4ba6      	ldr	r3, [pc, #664]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80033f2:	23c0      	movs	r3, #192	@ 0xc0
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4013      	ands	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d019      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	429a      	cmp	r2, r3
 8003408:	d014      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800340a:	4b9f      	ldr	r3, [pc, #636]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	4aa0      	ldr	r2, [pc, #640]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003410:	4013      	ands	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003414:	4b9c      	ldr	r3, [pc, #624]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003416:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003418:	4b9b      	ldr	r3, [pc, #620]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800341a:	2180      	movs	r1, #128	@ 0x80
 800341c:	0249      	lsls	r1, r1, #9
 800341e:	430a      	orrs	r2, r1
 8003420:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003422:	4b99      	ldr	r3, [pc, #612]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003424:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003426:	4b98      	ldr	r3, [pc, #608]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003428:	499a      	ldr	r1, [pc, #616]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800342a:	400a      	ands	r2, r1
 800342c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800342e:	4b96      	ldr	r3, [pc, #600]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2201      	movs	r2, #1
 8003438:	4013      	ands	r3, r2
 800343a:	d016      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd ffb4 	bl	80013a8 <HAL_GetTick>
 8003440:	0003      	movs	r3, r0
 8003442:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003444:	e00c      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fd ffaf 	bl	80013a8 <HAL_GetTick>
 800344a:	0002      	movs	r2, r0
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	4a91      	ldr	r2, [pc, #580]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d904      	bls.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003456:	2313      	movs	r3, #19
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	2203      	movs	r2, #3
 800345c:	701a      	strb	r2, [r3, #0]
            break;
 800345e:	e004      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003460:	4b89      	ldr	r3, [pc, #548]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003464:	2202      	movs	r2, #2
 8003466:	4013      	ands	r3, r2
 8003468:	d0ed      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800346a:	2313      	movs	r3, #19
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003474:	4b84      	ldr	r3, [pc, #528]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	4a85      	ldr	r2, [pc, #532]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003482:	4b81      	ldr	r3, [pc, #516]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003484:	430a      	orrs	r2, r1
 8003486:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003488:	e00c      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800348a:	2312      	movs	r3, #18
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2213      	movs	r2, #19
 8003490:	18ba      	adds	r2, r7, r2
 8003492:	7812      	ldrb	r2, [r2, #0]
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e005      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	2312      	movs	r3, #18
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	2213      	movs	r2, #19
 800349e:	18ba      	adds	r2, r7, r2
 80034a0:	7812      	ldrb	r2, [r2, #0]
 80034a2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034a4:	2311      	movs	r3, #17
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b76      	ldr	r3, [pc, #472]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034b2:	4b75      	ldr	r3, [pc, #468]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034b4:	4979      	ldr	r1, [pc, #484]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80034b6:	400a      	ands	r2, r1
 80034b8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	4013      	ands	r3, r2
 80034c2:	d009      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c4:	4b70      	ldr	r3, [pc, #448]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	2203      	movs	r2, #3
 80034ca:	4393      	bics	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034d4:	430a      	orrs	r2, r1
 80034d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034e2:	4b69      	ldr	r3, [pc, #420]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e6:	220c      	movs	r2, #12
 80034e8:	4393      	bics	r3, r2
 80034ea:	0019      	movs	r1, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	4b65      	ldr	r3, [pc, #404]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034f2:	430a      	orrs	r2, r1
 80034f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2210      	movs	r2, #16
 80034fc:	4013      	ands	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003500:	4b61      	ldr	r3, [pc, #388]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003504:	4a66      	ldr	r2, [pc, #408]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003506:	4013      	ands	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	4b5e      	ldr	r3, [pc, #376]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003510:	430a      	orrs	r2, r1
 8003512:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	2380      	movs	r3, #128	@ 0x80
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4013      	ands	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003520:	4b59      	ldr	r3, [pc, #356]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003524:	4a5f      	ldr	r2, [pc, #380]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003526:	4013      	ands	r3, r2
 8003528:	0019      	movs	r1, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	4b56      	ldr	r3, [pc, #344]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003530:	430a      	orrs	r2, r1
 8003532:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4013      	ands	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003540:	4b51      	ldr	r3, [pc, #324]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003544:	4a58      	ldr	r2, [pc, #352]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003546:	4013      	ands	r3, r2
 8003548:	0019      	movs	r1, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	4b4e      	ldr	r3, [pc, #312]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003550:	430a      	orrs	r2, r1
 8003552:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2220      	movs	r2, #32
 800355a:	4013      	ands	r3, r2
 800355c:	d009      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800355e:	4b4a      	ldr	r3, [pc, #296]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	4a52      	ldr	r2, [pc, #328]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003564:	4013      	ands	r3, r2
 8003566:	0019      	movs	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	4b46      	ldr	r3, [pc, #280]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800356e:	430a      	orrs	r2, r1
 8003570:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	2380      	movs	r3, #128	@ 0x80
 8003578:	01db      	lsls	r3, r3, #7
 800357a:	4013      	ands	r3, r2
 800357c:	d015      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800357e:	4b42      	ldr	r3, [pc, #264]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	0899      	lsrs	r1, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1a      	ldr	r2, [r3, #32]
 800358a:	4b3f      	ldr	r3, [pc, #252]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800358c:	430a      	orrs	r2, r1
 800358e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	05db      	lsls	r3, r3, #23
 8003598:	429a      	cmp	r2, r3
 800359a:	d106      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800359c:	4b3a      	ldr	r3, [pc, #232]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	4b39      	ldr	r3, [pc, #228]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035a2:	2180      	movs	r1, #128	@ 0x80
 80035a4:	0249      	lsls	r1, r1, #9
 80035a6:	430a      	orrs	r2, r1
 80035a8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	2380      	movs	r3, #128	@ 0x80
 80035b0:	031b      	lsls	r3, r3, #12
 80035b2:	4013      	ands	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035b6:	4b34      	ldr	r3, [pc, #208]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	2240      	movs	r2, #64	@ 0x40
 80035bc:	4393      	bics	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035c4:	4b30      	ldr	r3, [pc, #192]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035c6:	430a      	orrs	r2, r1
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	2380      	movs	r3, #128	@ 0x80
 80035d0:	039b      	lsls	r3, r3, #14
 80035d2:	4013      	ands	r3, r2
 80035d4:	d016      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035da:	4a35      	ldr	r2, [pc, #212]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035e4:	4b28      	ldr	r3, [pc, #160]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	03db      	lsls	r3, r3, #15
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d106      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80035f6:	4b24      	ldr	r3, [pc, #144]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	4b23      	ldr	r3, [pc, #140]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035fc:	2180      	movs	r1, #128	@ 0x80
 80035fe:	0449      	lsls	r1, r1, #17
 8003600:	430a      	orrs	r2, r1
 8003602:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2380      	movs	r3, #128	@ 0x80
 800360a:	03db      	lsls	r3, r3, #15
 800360c:	4013      	ands	r3, r2
 800360e:	d016      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003610:	4b1d      	ldr	r3, [pc, #116]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003614:	4a27      	ldr	r2, [pc, #156]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003616:	4013      	ands	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361e:	4b1a      	ldr	r3, [pc, #104]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003620:	430a      	orrs	r2, r1
 8003622:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003628:	2380      	movs	r3, #128	@ 0x80
 800362a:	045b      	lsls	r3, r3, #17
 800362c:	429a      	cmp	r2, r3
 800362e:	d106      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003630:	4b15      	ldr	r3, [pc, #84]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	4b14      	ldr	r3, [pc, #80]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003636:	2180      	movs	r1, #128	@ 0x80
 8003638:	0449      	lsls	r1, r1, #17
 800363a:	430a      	orrs	r2, r1
 800363c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	4013      	ands	r3, r2
 8003648:	d016      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800364a:	4b0f      	ldr	r3, [pc, #60]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800364c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364e:	4a1a      	ldr	r2, [pc, #104]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003650:	4013      	ands	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800365a:	430a      	orrs	r2, r1
 800365c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	2380      	movs	r3, #128	@ 0x80
 8003664:	01db      	lsls	r3, r3, #7
 8003666:	429a      	cmp	r2, r3
 8003668:	d106      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800366a:	4b07      	ldr	r3, [pc, #28]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003670:	2180      	movs	r1, #128	@ 0x80
 8003672:	0249      	lsls	r1, r1, #9
 8003674:	430a      	orrs	r2, r1
 8003676:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003678:	2312      	movs	r3, #18
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	781b      	ldrb	r3, [r3, #0]
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b006      	add	sp, #24
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
 8003690:	fffffcff 	.word	0xfffffcff
 8003694:	fffeffff 	.word	0xfffeffff
 8003698:	00001388 	.word	0x00001388
 800369c:	efffffff 	.word	0xefffffff
 80036a0:	fffff3ff 	.word	0xfffff3ff
 80036a4:	fff3ffff 	.word	0xfff3ffff
 80036a8:	ffcfffff 	.word	0xffcfffff
 80036ac:	ffffcfff 	.word	0xffffcfff
 80036b0:	ffbfffff 	.word	0xffbfffff
 80036b4:	feffffff 	.word	0xfeffffff
 80036b8:	ffff3fff 	.word	0xffff3fff

080036bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e04a      	b.n	8003764 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	223d      	movs	r2, #61	@ 0x3d
 80036d2:	5c9b      	ldrb	r3, [r3, r2]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d107      	bne.n	80036ea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	223c      	movs	r2, #60	@ 0x3c
 80036de:	2100      	movs	r1, #0
 80036e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7fd fc8f 	bl	8001008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	223d      	movs	r2, #61	@ 0x3d
 80036ee:	2102      	movs	r1, #2
 80036f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	0019      	movs	r1, r3
 80036fc:	0010      	movs	r0, r2
 80036fe:	f000 fa1f 	bl	8003b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2248      	movs	r2, #72	@ 0x48
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	223e      	movs	r2, #62	@ 0x3e
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	223f      	movs	r2, #63	@ 0x3f
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2240      	movs	r2, #64	@ 0x40
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2241      	movs	r2, #65	@ 0x41
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2242      	movs	r2, #66	@ 0x42
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2243      	movs	r2, #67	@ 0x43
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2244      	movs	r2, #68	@ 0x44
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2245      	movs	r2, #69	@ 0x45
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2246      	movs	r2, #70	@ 0x46
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2247      	movs	r2, #71	@ 0x47
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	223d      	movs	r2, #61	@ 0x3d
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b002      	add	sp, #8
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d108      	bne.n	800378e <HAL_TIM_PWM_Start+0x22>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	223e      	movs	r2, #62	@ 0x3e
 8003780:	5c9b      	ldrb	r3, [r3, r2]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	1e5a      	subs	r2, r3, #1
 8003788:	4193      	sbcs	r3, r2
 800378a:	b2db      	uxtb	r3, r3
 800378c:	e037      	b.n	80037fe <HAL_TIM_PWM_Start+0x92>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b04      	cmp	r3, #4
 8003792:	d108      	bne.n	80037a6 <HAL_TIM_PWM_Start+0x3a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	223f      	movs	r2, #63	@ 0x3f
 8003798:	5c9b      	ldrb	r3, [r3, r2]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	1e5a      	subs	r2, r3, #1
 80037a0:	4193      	sbcs	r3, r2
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	e02b      	b.n	80037fe <HAL_TIM_PWM_Start+0x92>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d108      	bne.n	80037be <HAL_TIM_PWM_Start+0x52>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2240      	movs	r2, #64	@ 0x40
 80037b0:	5c9b      	ldrb	r3, [r3, r2]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	4193      	sbcs	r3, r2
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e01f      	b.n	80037fe <HAL_TIM_PWM_Start+0x92>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	d108      	bne.n	80037d6 <HAL_TIM_PWM_Start+0x6a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2241      	movs	r2, #65	@ 0x41
 80037c8:	5c9b      	ldrb	r3, [r3, r2]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	1e5a      	subs	r2, r3, #1
 80037d0:	4193      	sbcs	r3, r2
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	e013      	b.n	80037fe <HAL_TIM_PWM_Start+0x92>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d108      	bne.n	80037ee <HAL_TIM_PWM_Start+0x82>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2242      	movs	r2, #66	@ 0x42
 80037e0:	5c9b      	ldrb	r3, [r3, r2]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	1e5a      	subs	r2, r3, #1
 80037e8:	4193      	sbcs	r3, r2
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e007      	b.n	80037fe <HAL_TIM_PWM_Start+0x92>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2243      	movs	r2, #67	@ 0x43
 80037f2:	5c9b      	ldrb	r3, [r3, r2]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	1e5a      	subs	r2, r3, #1
 80037fa:	4193      	sbcs	r3, r2
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e08b      	b.n	800391e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Start+0xaa>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	223e      	movs	r2, #62	@ 0x3e
 8003810:	2102      	movs	r1, #2
 8003812:	5499      	strb	r1, [r3, r2]
 8003814:	e023      	b.n	800385e <HAL_TIM_PWM_Start+0xf2>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d104      	bne.n	8003826 <HAL_TIM_PWM_Start+0xba>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	223f      	movs	r2, #63	@ 0x3f
 8003820:	2102      	movs	r1, #2
 8003822:	5499      	strb	r1, [r3, r2]
 8003824:	e01b      	b.n	800385e <HAL_TIM_PWM_Start+0xf2>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d104      	bne.n	8003836 <HAL_TIM_PWM_Start+0xca>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2240      	movs	r2, #64	@ 0x40
 8003830:	2102      	movs	r1, #2
 8003832:	5499      	strb	r1, [r3, r2]
 8003834:	e013      	b.n	800385e <HAL_TIM_PWM_Start+0xf2>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b0c      	cmp	r3, #12
 800383a:	d104      	bne.n	8003846 <HAL_TIM_PWM_Start+0xda>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2241      	movs	r2, #65	@ 0x41
 8003840:	2102      	movs	r1, #2
 8003842:	5499      	strb	r1, [r3, r2]
 8003844:	e00b      	b.n	800385e <HAL_TIM_PWM_Start+0xf2>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b10      	cmp	r3, #16
 800384a:	d104      	bne.n	8003856 <HAL_TIM_PWM_Start+0xea>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2242      	movs	r2, #66	@ 0x42
 8003850:	2102      	movs	r1, #2
 8003852:	5499      	strb	r1, [r3, r2]
 8003854:	e003      	b.n	800385e <HAL_TIM_PWM_Start+0xf2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2243      	movs	r2, #67	@ 0x43
 800385a:	2102      	movs	r1, #2
 800385c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6839      	ldr	r1, [r7, #0]
 8003864:	2201      	movs	r2, #1
 8003866:	0018      	movs	r0, r3
 8003868:	f000 fcbc 	bl	80041e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2d      	ldr	r2, [pc, #180]	@ (8003928 <HAL_TIM_PWM_Start+0x1bc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00e      	beq.n	8003894 <HAL_TIM_PWM_Start+0x128>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2c      	ldr	r2, [pc, #176]	@ (800392c <HAL_TIM_PWM_Start+0x1c0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_TIM_PWM_Start+0x128>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2a      	ldr	r2, [pc, #168]	@ (8003930 <HAL_TIM_PWM_Start+0x1c4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_TIM_PWM_Start+0x128>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a29      	ldr	r2, [pc, #164]	@ (8003934 <HAL_TIM_PWM_Start+0x1c8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_TIM_PWM_Start+0x12c>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_TIM_PWM_Start+0x12e>
 8003898:	2300      	movs	r3, #0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d008      	beq.n	80038b0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2180      	movs	r1, #128	@ 0x80
 80038aa:	0209      	lsls	r1, r1, #8
 80038ac:	430a      	orrs	r2, r1
 80038ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003928 <HAL_TIM_PWM_Start+0x1bc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00f      	beq.n	80038da <HAL_TIM_PWM_Start+0x16e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	2380      	movs	r3, #128	@ 0x80
 80038c0:	05db      	lsls	r3, r3, #23
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d009      	beq.n	80038da <HAL_TIM_PWM_Start+0x16e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003938 <HAL_TIM_PWM_Start+0x1cc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_TIM_PWM_Start+0x16e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a15      	ldr	r2, [pc, #84]	@ (800392c <HAL_TIM_PWM_Start+0x1c0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d116      	bne.n	8003908 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a16      	ldr	r2, [pc, #88]	@ (800393c <HAL_TIM_PWM_Start+0x1d0>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b06      	cmp	r3, #6
 80038ea:	d016      	beq.n	800391a <HAL_TIM_PWM_Start+0x1ae>
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	2380      	movs	r3, #128	@ 0x80
 80038f0:	025b      	lsls	r3, r3, #9
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d011      	beq.n	800391a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2101      	movs	r1, #1
 8003902:	430a      	orrs	r2, r1
 8003904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003906:	e008      	b.n	800391a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2101      	movs	r1, #1
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e000      	b.n	800391c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40014000 	.word	0x40014000
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800
 8003938:	40000400 	.word	0x40000400
 800393c:	00010007 	.word	0x00010007

08003940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2317      	movs	r3, #23
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	223c      	movs	r2, #60	@ 0x3c
 8003958:	5c9b      	ldrb	r3, [r3, r2]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_TIM_PWM_ConfigChannel+0x22>
 800395e:	2302      	movs	r3, #2
 8003960:	e0e5      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	223c      	movs	r2, #60	@ 0x3c
 8003966:	2101      	movs	r1, #1
 8003968:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b14      	cmp	r3, #20
 800396e:	d900      	bls.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003970:	e0d1      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	009a      	lsls	r2, r3, #2
 8003976:	4b70      	ldr	r3, [pc, #448]	@ (8003b38 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003978:	18d3      	adds	r3, r2, r3
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	0011      	movs	r1, r2
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f968 	bl	8003c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2108      	movs	r1, #8
 8003998:	430a      	orrs	r2, r1
 800399a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2104      	movs	r1, #4
 80039a8:	438a      	bics	r2, r1
 80039aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6999      	ldr	r1, [r3, #24]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	619a      	str	r2, [r3, #24]
      break;
 80039be:	e0af      	b.n	8003b20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	0011      	movs	r1, r2
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 f9d1 	bl	8003d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2180      	movs	r1, #128	@ 0x80
 80039da:	0109      	lsls	r1, r1, #4
 80039dc:	430a      	orrs	r2, r1
 80039de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4954      	ldr	r1, [pc, #336]	@ (8003b3c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6999      	ldr	r1, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	619a      	str	r2, [r3, #24]
      break;
 8003a04:	e08c      	b.n	8003b20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	0011      	movs	r1, r2
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f000 fa32 	bl	8003e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2108      	movs	r1, #8
 8003a20:	430a      	orrs	r2, r1
 8003a22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2104      	movs	r1, #4
 8003a30:	438a      	bics	r2, r1
 8003a32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69d9      	ldr	r1, [r3, #28]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	61da      	str	r2, [r3, #28]
      break;
 8003a46:	e06b      	b.n	8003b20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 fa99 	bl	8003f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2180      	movs	r1, #128	@ 0x80
 8003a62:	0109      	lsls	r1, r1, #4
 8003a64:	430a      	orrs	r2, r1
 8003a66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4932      	ldr	r1, [pc, #200]	@ (8003b3c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a74:	400a      	ands	r2, r1
 8003a76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69d9      	ldr	r1, [r3, #28]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	021a      	lsls	r2, r3, #8
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	61da      	str	r2, [r3, #28]
      break;
 8003a8c:	e048      	b.n	8003b20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	0011      	movs	r1, r2
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 fae0 	bl	800405c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2108      	movs	r1, #8
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2104      	movs	r1, #4
 8003ab8:	438a      	bics	r2, r1
 8003aba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ace:	e027      	b.n	8003b20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	0011      	movs	r1, r2
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f000 fb1f 	bl	800411c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2180      	movs	r1, #128	@ 0x80
 8003aea:	0109      	lsls	r1, r1, #4
 8003aec:	430a      	orrs	r2, r1
 8003aee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4910      	ldr	r1, [pc, #64]	@ (8003b3c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003afc:	400a      	ands	r2, r1
 8003afe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	021a      	lsls	r2, r3, #8
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b14:	e004      	b.n	8003b20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003b16:	2317      	movs	r3, #23
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
      break;
 8003b1e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	223c      	movs	r2, #60	@ 0x3c
 8003b24:	2100      	movs	r1, #0
 8003b26:	5499      	strb	r1, [r3, r2]

  return status;
 8003b28:	2317      	movs	r3, #23
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	781b      	ldrb	r3, [r3, #0]
}
 8003b2e:	0018      	movs	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b006      	add	sp, #24
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	0800713c 	.word	0x0800713c
 8003b3c:	fffffbff 	.word	0xfffffbff

08003b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a3b      	ldr	r2, [pc, #236]	@ (8003c40 <TIM_Base_SetConfig+0x100>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d008      	beq.n	8003b6a <TIM_Base_SetConfig+0x2a>
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	2380      	movs	r3, #128	@ 0x80
 8003b5c:	05db      	lsls	r3, r3, #23
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d003      	beq.n	8003b6a <TIM_Base_SetConfig+0x2a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a37      	ldr	r2, [pc, #220]	@ (8003c44 <TIM_Base_SetConfig+0x104>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2270      	movs	r2, #112	@ 0x70
 8003b6e:	4393      	bics	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a30      	ldr	r2, [pc, #192]	@ (8003c40 <TIM_Base_SetConfig+0x100>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d018      	beq.n	8003bb6 <TIM_Base_SetConfig+0x76>
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	2380      	movs	r3, #128	@ 0x80
 8003b88:	05db      	lsls	r3, r3, #23
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d013      	beq.n	8003bb6 <TIM_Base_SetConfig+0x76>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a2c      	ldr	r2, [pc, #176]	@ (8003c44 <TIM_Base_SetConfig+0x104>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00f      	beq.n	8003bb6 <TIM_Base_SetConfig+0x76>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2b      	ldr	r2, [pc, #172]	@ (8003c48 <TIM_Base_SetConfig+0x108>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00b      	beq.n	8003bb6 <TIM_Base_SetConfig+0x76>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c4c <TIM_Base_SetConfig+0x10c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d007      	beq.n	8003bb6 <TIM_Base_SetConfig+0x76>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a29      	ldr	r2, [pc, #164]	@ (8003c50 <TIM_Base_SetConfig+0x110>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <TIM_Base_SetConfig+0x76>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a28      	ldr	r2, [pc, #160]	@ (8003c54 <TIM_Base_SetConfig+0x114>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d108      	bne.n	8003bc8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a27      	ldr	r2, [pc, #156]	@ (8003c58 <TIM_Base_SetConfig+0x118>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2280      	movs	r2, #128	@ 0x80
 8003bcc:	4393      	bics	r3, r2
 8003bce:	001a      	movs	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a13      	ldr	r2, [pc, #76]	@ (8003c40 <TIM_Base_SetConfig+0x100>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00b      	beq.n	8003c0e <TIM_Base_SetConfig+0xce>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a14      	ldr	r2, [pc, #80]	@ (8003c4c <TIM_Base_SetConfig+0x10c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d007      	beq.n	8003c0e <TIM_Base_SetConfig+0xce>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a13      	ldr	r2, [pc, #76]	@ (8003c50 <TIM_Base_SetConfig+0x110>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d003      	beq.n	8003c0e <TIM_Base_SetConfig+0xce>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a12      	ldr	r2, [pc, #72]	@ (8003c54 <TIM_Base_SetConfig+0x114>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d103      	bne.n	8003c16 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2201      	movs	r2, #1
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d106      	bne.n	8003c36 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4393      	bics	r3, r2
 8003c30:	001a      	movs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	611a      	str	r2, [r3, #16]
  }
}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b004      	add	sp, #16
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40002000 	.word	0x40002000
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800
 8003c58:	fffffcff 	.word	0xfffffcff

08003c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	2201      	movs	r2, #1
 8003c72:	4393      	bics	r3, r2
 8003c74:	001a      	movs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a32      	ldr	r2, [pc, #200]	@ (8003d54 <TIM_OC1_SetConfig+0xf8>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2203      	movs	r2, #3
 8003c92:	4393      	bics	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a28      	ldr	r2, [pc, #160]	@ (8003d58 <TIM_OC1_SetConfig+0xfc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <TIM_OC1_SetConfig+0x76>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a27      	ldr	r2, [pc, #156]	@ (8003d5c <TIM_OC1_SetConfig+0x100>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <TIM_OC1_SetConfig+0x76>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a26      	ldr	r2, [pc, #152]	@ (8003d60 <TIM_OC1_SetConfig+0x104>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_OC1_SetConfig+0x76>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a25      	ldr	r2, [pc, #148]	@ (8003d64 <TIM_OC1_SetConfig+0x108>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10c      	bne.n	8003cec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	4393      	bics	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	4393      	bics	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a1a      	ldr	r2, [pc, #104]	@ (8003d58 <TIM_OC1_SetConfig+0xfc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00b      	beq.n	8003d0c <TIM_OC1_SetConfig+0xb0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a19      	ldr	r2, [pc, #100]	@ (8003d5c <TIM_OC1_SetConfig+0x100>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d007      	beq.n	8003d0c <TIM_OC1_SetConfig+0xb0>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <TIM_OC1_SetConfig+0x104>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_OC1_SetConfig+0xb0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <TIM_OC1_SetConfig+0x108>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d111      	bne.n	8003d30 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4a16      	ldr	r2, [pc, #88]	@ (8003d68 <TIM_OC1_SetConfig+0x10c>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4a15      	ldr	r2, [pc, #84]	@ (8003d6c <TIM_OC1_SetConfig+0x110>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b006      	add	sp, #24
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	fffeff8f 	.word	0xfffeff8f
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40014400 	.word	0x40014400
 8003d64:	40014800 	.word	0x40014800
 8003d68:	fffffeff 	.word	0xfffffeff
 8003d6c:	fffffdff 	.word	0xfffffdff

08003d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	2210      	movs	r2, #16
 8003d86:	4393      	bics	r3, r2
 8003d88:	001a      	movs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e58 <TIM_OC2_SetConfig+0xe8>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a2d      	ldr	r2, [pc, #180]	@ (8003e5c <TIM_OC2_SetConfig+0xec>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2220      	movs	r2, #32
 8003dba:	4393      	bics	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a24      	ldr	r2, [pc, #144]	@ (8003e60 <TIM_OC2_SetConfig+0xf0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10d      	bne.n	8003dee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2280      	movs	r2, #128	@ 0x80
 8003dd6:	4393      	bics	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2240      	movs	r2, #64	@ 0x40
 8003dea:	4393      	bics	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e60 <TIM_OC2_SetConfig+0xf0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_OC2_SetConfig+0x9e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e64 <TIM_OC2_SetConfig+0xf4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_OC2_SetConfig+0x9e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a19      	ldr	r2, [pc, #100]	@ (8003e68 <TIM_OC2_SetConfig+0xf8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_OC2_SetConfig+0x9e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a18      	ldr	r2, [pc, #96]	@ (8003e6c <TIM_OC2_SetConfig+0xfc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d113      	bne.n	8003e36 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4a17      	ldr	r2, [pc, #92]	@ (8003e70 <TIM_OC2_SetConfig+0x100>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4a16      	ldr	r2, [pc, #88]	@ (8003e74 <TIM_OC2_SetConfig+0x104>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	621a      	str	r2, [r3, #32]
}
 8003e50:	46c0      	nop			@ (mov r8, r8)
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b006      	add	sp, #24
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	feff8fff 	.word	0xfeff8fff
 8003e5c:	fffffcff 	.word	0xfffffcff
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40014000 	.word	0x40014000
 8003e68:	40014400 	.word	0x40014400
 8003e6c:	40014800 	.word	0x40014800
 8003e70:	fffffbff 	.word	0xfffffbff
 8003e74:	fffff7ff 	.word	0xfffff7ff

08003e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4a33      	ldr	r2, [pc, #204]	@ (8003f5c <TIM_OC3_SetConfig+0xe4>)
 8003e8e:	401a      	ands	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8003f60 <TIM_OC3_SetConfig+0xe8>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	4393      	bics	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	@ (8003f64 <TIM_OC3_SetConfig+0xec>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a25      	ldr	r2, [pc, #148]	@ (8003f68 <TIM_OC3_SetConfig+0xf0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10d      	bne.n	8003ef2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4a24      	ldr	r2, [pc, #144]	@ (8003f6c <TIM_OC3_SetConfig+0xf4>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	4a20      	ldr	r2, [pc, #128]	@ (8003f70 <TIM_OC3_SetConfig+0xf8>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f68 <TIM_OC3_SetConfig+0xf0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00b      	beq.n	8003f12 <TIM_OC3_SetConfig+0x9a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f74 <TIM_OC3_SetConfig+0xfc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d007      	beq.n	8003f12 <TIM_OC3_SetConfig+0x9a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a1c      	ldr	r2, [pc, #112]	@ (8003f78 <TIM_OC3_SetConfig+0x100>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d003      	beq.n	8003f12 <TIM_OC3_SetConfig+0x9a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f7c <TIM_OC3_SetConfig+0x104>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d113      	bne.n	8003f3a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4a1a      	ldr	r2, [pc, #104]	@ (8003f80 <TIM_OC3_SetConfig+0x108>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4a19      	ldr	r2, [pc, #100]	@ (8003f84 <TIM_OC3_SetConfig+0x10c>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	46c0      	nop			@ (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b006      	add	sp, #24
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	fffffeff 	.word	0xfffffeff
 8003f60:	fffeff8f 	.word	0xfffeff8f
 8003f64:	fffffdff 	.word	0xfffffdff
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	fffff7ff 	.word	0xfffff7ff
 8003f70:	fffffbff 	.word	0xfffffbff
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800
 8003f80:	ffffefff 	.word	0xffffefff
 8003f84:	ffffdfff 	.word	0xffffdfff

08003f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4a26      	ldr	r2, [pc, #152]	@ (8004038 <TIM_OC4_SetConfig+0xb0>)
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a22      	ldr	r2, [pc, #136]	@ (800403c <TIM_OC4_SetConfig+0xb4>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a21      	ldr	r2, [pc, #132]	@ (8004040 <TIM_OC4_SetConfig+0xb8>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4a1d      	ldr	r2, [pc, #116]	@ (8004044 <TIM_OC4_SetConfig+0xbc>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	031b      	lsls	r3, r3, #12
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a19      	ldr	r2, [pc, #100]	@ (8004048 <TIM_OC4_SetConfig+0xc0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <TIM_OC4_SetConfig+0x78>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a18      	ldr	r2, [pc, #96]	@ (800404c <TIM_OC4_SetConfig+0xc4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <TIM_OC4_SetConfig+0x78>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a17      	ldr	r2, [pc, #92]	@ (8004050 <TIM_OC4_SetConfig+0xc8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_OC4_SetConfig+0x78>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a16      	ldr	r2, [pc, #88]	@ (8004054 <TIM_OC4_SetConfig+0xcc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d109      	bne.n	8004014 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	4a15      	ldr	r2, [pc, #84]	@ (8004058 <TIM_OC4_SetConfig+0xd0>)
 8004004:	4013      	ands	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	019b      	lsls	r3, r3, #6
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b006      	add	sp, #24
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	ffffefff 	.word	0xffffefff
 800403c:	feff8fff 	.word	0xfeff8fff
 8004040:	fffffcff 	.word	0xfffffcff
 8004044:	ffffdfff 	.word	0xffffdfff
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40014000 	.word	0x40014000
 8004050:	40014400 	.word	0x40014400
 8004054:	40014800 	.word	0x40014800
 8004058:	ffffbfff 	.word	0xffffbfff

0800405c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4a23      	ldr	r2, [pc, #140]	@ (8004100 <TIM_OC5_SetConfig+0xa4>)
 8004072:	401a      	ands	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a1f      	ldr	r2, [pc, #124]	@ (8004104 <TIM_OC5_SetConfig+0xa8>)
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4a1b      	ldr	r2, [pc, #108]	@ (8004108 <TIM_OC5_SetConfig+0xac>)
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a17      	ldr	r2, [pc, #92]	@ (800410c <TIM_OC5_SetConfig+0xb0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_OC5_SetConfig+0x6e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a16      	ldr	r2, [pc, #88]	@ (8004110 <TIM_OC5_SetConfig+0xb4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_OC5_SetConfig+0x6e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a15      	ldr	r2, [pc, #84]	@ (8004114 <TIM_OC5_SetConfig+0xb8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC5_SetConfig+0x6e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a14      	ldr	r2, [pc, #80]	@ (8004118 <TIM_OC5_SetConfig+0xbc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d109      	bne.n	80040de <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004100 <TIM_OC5_SetConfig+0xa4>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	621a      	str	r2, [r3, #32]
}
 80040f8:	46c0      	nop			@ (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b006      	add	sp, #24
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	fffeffff 	.word	0xfffeffff
 8004104:	fffeff8f 	.word	0xfffeff8f
 8004108:	fffdffff 	.word	0xfffdffff
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40014000 	.word	0x40014000
 8004114:	40014400 	.word	0x40014400
 8004118:	40014800 	.word	0x40014800

0800411c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4a24      	ldr	r2, [pc, #144]	@ (80041c4 <TIM_OC6_SetConfig+0xa8>)
 8004132:	401a      	ands	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4a20      	ldr	r2, [pc, #128]	@ (80041c8 <TIM_OC6_SetConfig+0xac>)
 8004148:	4013      	ands	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4a1c      	ldr	r2, [pc, #112]	@ (80041cc <TIM_OC6_SetConfig+0xb0>)
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	051b      	lsls	r3, r3, #20
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a18      	ldr	r2, [pc, #96]	@ (80041d0 <TIM_OC6_SetConfig+0xb4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00b      	beq.n	800418c <TIM_OC6_SetConfig+0x70>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a17      	ldr	r2, [pc, #92]	@ (80041d4 <TIM_OC6_SetConfig+0xb8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d007      	beq.n	800418c <TIM_OC6_SetConfig+0x70>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a16      	ldr	r2, [pc, #88]	@ (80041d8 <TIM_OC6_SetConfig+0xbc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_OC6_SetConfig+0x70>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a15      	ldr	r2, [pc, #84]	@ (80041dc <TIM_OC6_SetConfig+0xc0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d109      	bne.n	80041a0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	4a14      	ldr	r2, [pc, #80]	@ (80041e0 <TIM_OC6_SetConfig+0xc4>)
 8004190:	4013      	ands	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	029b      	lsls	r3, r3, #10
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	46c0      	nop			@ (mov r8, r8)
 80041bc:	46bd      	mov	sp, r7
 80041be:	b006      	add	sp, #24
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	ffefffff 	.word	0xffefffff
 80041c8:	feff8fff 	.word	0xfeff8fff
 80041cc:	ffdfffff 	.word	0xffdfffff
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800
 80041e0:	fffbffff 	.word	0xfffbffff

080041e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	221f      	movs	r2, #31
 80041f4:	4013      	ands	r3, r2
 80041f6:	2201      	movs	r2, #1
 80041f8:	409a      	lsls	r2, r3
 80041fa:	0013      	movs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	43d2      	mvns	r2, r2
 8004206:	401a      	ands	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	211f      	movs	r1, #31
 8004214:	400b      	ands	r3, r1
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4099      	lsls	r1, r3
 800421a:	000b      	movs	r3, r1
 800421c:	431a      	orrs	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	621a      	str	r2, [r3, #32]
}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	46bd      	mov	sp, r7
 8004226:	b006      	add	sp, #24
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	223c      	movs	r2, #60	@ 0x3c
 800423a:	5c9b      	ldrb	r3, [r3, r2]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004240:	2302      	movs	r3, #2
 8004242:	e055      	b.n	80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	223c      	movs	r2, #60	@ 0x3c
 8004248:	2101      	movs	r1, #1
 800424a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	223d      	movs	r2, #61	@ 0x3d
 8004250:	2102      	movs	r1, #2
 8004252:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a23      	ldr	r2, [pc, #140]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d108      	bne.n	8004280 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a22      	ldr	r2, [pc, #136]	@ (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004272:	4013      	ands	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2270      	movs	r2, #112	@ 0x70
 8004284:	4393      	bics	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a16      	ldr	r2, [pc, #88]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00f      	beq.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2380      	movs	r3, #128	@ 0x80
 80042aa:	05db      	lsls	r3, r3, #23
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d009      	beq.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a12      	ldr	r2, [pc, #72]	@ (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a11      	ldr	r2, [pc, #68]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d10c      	bne.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2280      	movs	r2, #128	@ 0x80
 80042c8:	4393      	bics	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	223d      	movs	r2, #61	@ 0x3d
 80042e2:	2101      	movs	r1, #1
 80042e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	223c      	movs	r2, #60	@ 0x3c
 80042ea:	2100      	movs	r1, #0
 80042ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b004      	add	sp, #16
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	ff0fffff 	.word	0xff0fffff
 8004300:	40000400 	.word	0x40000400
 8004304:	40014000 	.word	0x40014000

08004308 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	223c      	movs	r2, #60	@ 0x3c
 800431a:	5c9b      	ldrb	r3, [r3, r2]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004320:	2302      	movs	r3, #2
 8004322:	e06f      	b.n	8004404 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	223c      	movs	r2, #60	@ 0x3c
 8004328:	2101      	movs	r1, #1
 800432a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	22ff      	movs	r2, #255	@ 0xff
 8004330:	4393      	bics	r3, r2
 8004332:	001a      	movs	r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a33      	ldr	r2, [pc, #204]	@ (800440c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004340:	401a      	ands	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a30      	ldr	r2, [pc, #192]	@ (8004410 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800434e:	401a      	ands	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4a2e      	ldr	r2, [pc, #184]	@ (8004414 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800435c:	401a      	ands	r2, r3
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a2b      	ldr	r2, [pc, #172]	@ (8004418 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800436a:	401a      	ands	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a29      	ldr	r2, [pc, #164]	@ (800441c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004378:	401a      	ands	r2, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a26      	ldr	r2, [pc, #152]	@ (8004420 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004386:	401a      	ands	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a24      	ldr	r2, [pc, #144]	@ (8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004394:	401a      	ands	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a21      	ldr	r2, [pc, #132]	@ (8004428 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80043a4:	401a      	ands	r2, r3
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1e      	ldr	r2, [pc, #120]	@ (800442c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d11c      	bne.n	80043f2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004430 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80043bc:	401a      	ands	r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	051b      	lsls	r3, r3, #20
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004434 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80043cc:	401a      	ands	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a17      	ldr	r2, [pc, #92]	@ (8004438 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80043da:	401a      	ands	r2, r3
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a15      	ldr	r2, [pc, #84]	@ (800443c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80043e8:	401a      	ands	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	223c      	movs	r2, #60	@ 0x3c
 80043fe:	2100      	movs	r1, #0
 8004400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b004      	add	sp, #16
 800440a:	bd80      	pop	{r7, pc}
 800440c:	fffffcff 	.word	0xfffffcff
 8004410:	fffffbff 	.word	0xfffffbff
 8004414:	fffff7ff 	.word	0xfffff7ff
 8004418:	ffffefff 	.word	0xffffefff
 800441c:	ffffdfff 	.word	0xffffdfff
 8004420:	ffffbfff 	.word	0xffffbfff
 8004424:	fff0ffff 	.word	0xfff0ffff
 8004428:	efffffff 	.word	0xefffffff
 800442c:	40012c00 	.word	0x40012c00
 8004430:	ff0fffff 	.word	0xff0fffff
 8004434:	feffffff 	.word	0xfeffffff
 8004438:	fdffffff 	.word	0xfdffffff
 800443c:	dfffffff 	.word	0xdfffffff

08004440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e046      	b.n	80044e0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2288      	movs	r2, #136	@ 0x88
 8004456:	589b      	ldr	r3, [r3, r2]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d107      	bne.n	800446c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2284      	movs	r2, #132	@ 0x84
 8004460:	2100      	movs	r1, #0
 8004462:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	0018      	movs	r0, r3
 8004468:	f7fc fe90 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2288      	movs	r2, #136	@ 0x88
 8004470:	2124      	movs	r1, #36	@ 0x24
 8004472:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2101      	movs	r1, #1
 8004480:	438a      	bics	r2, r1
 8004482:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	0018      	movs	r0, r3
 8004490:	f000 ff2e 	bl	80052f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	0018      	movs	r0, r3
 8004498:	f000 fc6c 	bl	8004d74 <UART_SetConfig>
 800449c:	0003      	movs	r3, r0
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e01c      	b.n	80044e0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	490d      	ldr	r1, [pc, #52]	@ (80044e8 <HAL_UART_Init+0xa8>)
 80044b2:	400a      	ands	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	212a      	movs	r1, #42	@ 0x2a
 80044c2:	438a      	bics	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	430a      	orrs	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 ffbd 	bl	8005458 <UART_CheckIdleState>
 80044de:	0003      	movs	r3, r0
}
 80044e0:	0018      	movs	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	ffffb7ff 	.word	0xffffb7ff

080044ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	@ 0x28
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	1dbb      	adds	r3, r7, #6
 80044fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2288      	movs	r2, #136	@ 0x88
 8004500:	589b      	ldr	r3, [r3, r2]
 8004502:	2b20      	cmp	r3, #32
 8004504:	d000      	beq.n	8004508 <HAL_UART_Transmit+0x1c>
 8004506:	e090      	b.n	800462a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_UART_Transmit+0x2a>
 800450e:	1dbb      	adds	r3, r7, #6
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e088      	b.n	800462c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	2380      	movs	r3, #128	@ 0x80
 8004520:	015b      	lsls	r3, r3, #5
 8004522:	429a      	cmp	r2, r3
 8004524:	d109      	bne.n	800453a <HAL_UART_Transmit+0x4e>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2201      	movs	r2, #1
 8004532:	4013      	ands	r3, r2
 8004534:	d001      	beq.n	800453a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e078      	b.n	800462c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2290      	movs	r2, #144	@ 0x90
 800453e:	2100      	movs	r1, #0
 8004540:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2288      	movs	r2, #136	@ 0x88
 8004546:	2121      	movs	r1, #33	@ 0x21
 8004548:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454a:	f7fc ff2d 	bl	80013a8 <HAL_GetTick>
 800454e:	0003      	movs	r3, r0
 8004550:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1dba      	adds	r2, r7, #6
 8004556:	2154      	movs	r1, #84	@ 0x54
 8004558:	8812      	ldrh	r2, [r2, #0]
 800455a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1dba      	adds	r2, r7, #6
 8004560:	2156      	movs	r1, #86	@ 0x56
 8004562:	8812      	ldrh	r2, [r2, #0]
 8004564:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	2380      	movs	r3, #128	@ 0x80
 800456c:	015b      	lsls	r3, r3, #5
 800456e:	429a      	cmp	r2, r3
 8004570:	d108      	bne.n	8004584 <HAL_UART_Transmit+0x98>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d104      	bne.n	8004584 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e003      	b.n	800458c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800458c:	e030      	b.n	80045f0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	0013      	movs	r3, r2
 8004598:	2200      	movs	r2, #0
 800459a:	2180      	movs	r1, #128	@ 0x80
 800459c:	f001 f806 	bl	80055ac <UART_WaitOnFlagUntilTimeout>
 80045a0:	1e03      	subs	r3, r0, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2288      	movs	r2, #136	@ 0x88
 80045a8:	2120      	movs	r1, #32
 80045aa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e03d      	b.n	800462c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	001a      	movs	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	05d2      	lsls	r2, r2, #23
 80045c2:	0dd2      	lsrs	r2, r2, #23
 80045c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	3302      	adds	r3, #2
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	e007      	b.n	80045de <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	3301      	adds	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2256      	movs	r2, #86	@ 0x56
 80045e2:	5a9b      	ldrh	r3, [r3, r2]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b299      	uxth	r1, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2256      	movs	r2, #86	@ 0x56
 80045ee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2256      	movs	r2, #86	@ 0x56
 80045f4:	5a9b      	ldrh	r3, [r3, r2]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1c8      	bne.n	800458e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	0013      	movs	r3, r2
 8004606:	2200      	movs	r2, #0
 8004608:	2140      	movs	r1, #64	@ 0x40
 800460a:	f000 ffcf 	bl	80055ac <UART_WaitOnFlagUntilTimeout>
 800460e:	1e03      	subs	r3, r0, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2288      	movs	r2, #136	@ 0x88
 8004616:	2120      	movs	r1, #32
 8004618:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e006      	b.n	800462c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2288      	movs	r2, #136	@ 0x88
 8004622:	2120      	movs	r1, #32
 8004624:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e000      	b.n	800462c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b008      	add	sp, #32
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	1dbb      	adds	r3, r7, #6
 8004640:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	228c      	movs	r2, #140	@ 0x8c
 8004646:	589b      	ldr	r3, [r3, r2]
 8004648:	2b20      	cmp	r3, #32
 800464a:	d14a      	bne.n	80046e2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_UART_Receive_IT+0x26>
 8004652:	1dbb      	adds	r3, r7, #6
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e042      	b.n	80046e4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	2380      	movs	r3, #128	@ 0x80
 8004664:	015b      	lsls	r3, r3, #5
 8004666:	429a      	cmp	r2, r3
 8004668:	d109      	bne.n	800467e <HAL_UART_Receive_IT+0x4a>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2201      	movs	r2, #1
 8004676:	4013      	ands	r3, r2
 8004678:	d001      	beq.n	800467e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e032      	b.n	80046e4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <HAL_UART_Receive_IT+0xb8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d020      	beq.n	80046d0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	2380      	movs	r3, #128	@ 0x80
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	4013      	ands	r3, r2
 800469a:	d019      	beq.n	80046d0 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469c:	f3ef 8310 	mrs	r3, PRIMASK
 80046a0:	613b      	str	r3, [r7, #16]
  return(result);
 80046a2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	2301      	movs	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f383 8810 	msr	PRIMASK, r3
}
 80046b0:	46c0      	nop			@ (mov r8, r8)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2180      	movs	r1, #128	@ 0x80
 80046be:	04c9      	lsls	r1, r1, #19
 80046c0:	430a      	orrs	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f383 8810 	msr	PRIMASK, r3
}
 80046ce:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046d0:	1dbb      	adds	r3, r7, #6
 80046d2:	881a      	ldrh	r2, [r3, #0]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	0018      	movs	r0, r3
 80046da:	f000 ffd7 	bl	800568c <UART_Start_Receive_IT>
 80046de:	0003      	movs	r3, r0
 80046e0:	e000      	b.n	80046e4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	0018      	movs	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b008      	add	sp, #32
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40008000 	.word	0x40008000

080046f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046f0:	b5b0      	push	{r4, r5, r7, lr}
 80046f2:	b0aa      	sub	sp, #168	@ 0xa8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	22a4      	movs	r2, #164	@ 0xa4
 8004700:	18b9      	adds	r1, r7, r2
 8004702:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	20a0      	movs	r0, #160	@ 0xa0
 800470c:	1839      	adds	r1, r7, r0
 800470e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	249c      	movs	r4, #156	@ 0x9c
 8004718:	1939      	adds	r1, r7, r4
 800471a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800471c:	0011      	movs	r1, r2
 800471e:	18bb      	adds	r3, r7, r2
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4aa2      	ldr	r2, [pc, #648]	@ (80049ac <HAL_UART_IRQHandler+0x2bc>)
 8004724:	4013      	ands	r3, r2
 8004726:	2298      	movs	r2, #152	@ 0x98
 8004728:	18bd      	adds	r5, r7, r2
 800472a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800472c:	18bb      	adds	r3, r7, r2
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11a      	bne.n	800476a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004734:	187b      	adds	r3, r7, r1
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2220      	movs	r2, #32
 800473a:	4013      	ands	r3, r2
 800473c:	d015      	beq.n	800476a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800473e:	183b      	adds	r3, r7, r0
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2220      	movs	r2, #32
 8004744:	4013      	ands	r3, r2
 8004746:	d105      	bne.n	8004754 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004748:	193b      	adds	r3, r7, r4
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	2380      	movs	r3, #128	@ 0x80
 800474e:	055b      	lsls	r3, r3, #21
 8004750:	4013      	ands	r3, r2
 8004752:	d00a      	beq.n	800476a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004758:	2b00      	cmp	r3, #0
 800475a:	d100      	bne.n	800475e <HAL_UART_IRQHandler+0x6e>
 800475c:	e2dc      	b.n	8004d18 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	0010      	movs	r0, r2
 8004766:	4798      	blx	r3
      }
      return;
 8004768:	e2d6      	b.n	8004d18 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800476a:	2398      	movs	r3, #152	@ 0x98
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d100      	bne.n	8004776 <HAL_UART_IRQHandler+0x86>
 8004774:	e122      	b.n	80049bc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004776:	239c      	movs	r3, #156	@ 0x9c
 8004778:	18fb      	adds	r3, r7, r3
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a8c      	ldr	r2, [pc, #560]	@ (80049b0 <HAL_UART_IRQHandler+0x2c0>)
 800477e:	4013      	ands	r3, r2
 8004780:	d106      	bne.n	8004790 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004782:	23a0      	movs	r3, #160	@ 0xa0
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a8a      	ldr	r2, [pc, #552]	@ (80049b4 <HAL_UART_IRQHandler+0x2c4>)
 800478a:	4013      	ands	r3, r2
 800478c:	d100      	bne.n	8004790 <HAL_UART_IRQHandler+0xa0>
 800478e:	e115      	b.n	80049bc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004790:	23a4      	movs	r3, #164	@ 0xa4
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2201      	movs	r2, #1
 8004798:	4013      	ands	r3, r2
 800479a:	d012      	beq.n	80047c2 <HAL_UART_IRQHandler+0xd2>
 800479c:	23a0      	movs	r3, #160	@ 0xa0
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	2380      	movs	r3, #128	@ 0x80
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	4013      	ands	r3, r2
 80047a8:	d00b      	beq.n	80047c2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2290      	movs	r2, #144	@ 0x90
 80047b6:	589b      	ldr	r3, [r3, r2]
 80047b8:	2201      	movs	r2, #1
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2190      	movs	r1, #144	@ 0x90
 80047c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047c2:	23a4      	movs	r3, #164	@ 0xa4
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2202      	movs	r2, #2
 80047ca:	4013      	ands	r3, r2
 80047cc:	d011      	beq.n	80047f2 <HAL_UART_IRQHandler+0x102>
 80047ce:	239c      	movs	r3, #156	@ 0x9c
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	4013      	ands	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2202      	movs	r2, #2
 80047e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2290      	movs	r2, #144	@ 0x90
 80047e6:	589b      	ldr	r3, [r3, r2]
 80047e8:	2204      	movs	r2, #4
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2190      	movs	r1, #144	@ 0x90
 80047f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047f2:	23a4      	movs	r3, #164	@ 0xa4
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2204      	movs	r2, #4
 80047fa:	4013      	ands	r3, r2
 80047fc:	d011      	beq.n	8004822 <HAL_UART_IRQHandler+0x132>
 80047fe:	239c      	movs	r3, #156	@ 0x9c
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2201      	movs	r2, #1
 8004806:	4013      	ands	r3, r2
 8004808:	d00b      	beq.n	8004822 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2204      	movs	r2, #4
 8004810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2290      	movs	r2, #144	@ 0x90
 8004816:	589b      	ldr	r3, [r3, r2]
 8004818:	2202      	movs	r2, #2
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2190      	movs	r1, #144	@ 0x90
 8004820:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004822:	23a4      	movs	r3, #164	@ 0xa4
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2208      	movs	r2, #8
 800482a:	4013      	ands	r3, r2
 800482c:	d017      	beq.n	800485e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800482e:	23a0      	movs	r3, #160	@ 0xa0
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2220      	movs	r2, #32
 8004836:	4013      	ands	r3, r2
 8004838:	d105      	bne.n	8004846 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800483a:	239c      	movs	r3, #156	@ 0x9c
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a5b      	ldr	r2, [pc, #364]	@ (80049b0 <HAL_UART_IRQHandler+0x2c0>)
 8004842:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004844:	d00b      	beq.n	800485e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2208      	movs	r2, #8
 800484c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2290      	movs	r2, #144	@ 0x90
 8004852:	589b      	ldr	r3, [r3, r2]
 8004854:	2208      	movs	r2, #8
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2190      	movs	r1, #144	@ 0x90
 800485c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800485e:	23a4      	movs	r3, #164	@ 0xa4
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	2380      	movs	r3, #128	@ 0x80
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	4013      	ands	r3, r2
 800486a:	d013      	beq.n	8004894 <HAL_UART_IRQHandler+0x1a4>
 800486c:	23a0      	movs	r3, #160	@ 0xa0
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	2380      	movs	r3, #128	@ 0x80
 8004874:	04db      	lsls	r3, r3, #19
 8004876:	4013      	ands	r3, r2
 8004878:	d00c      	beq.n	8004894 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2280      	movs	r2, #128	@ 0x80
 8004880:	0112      	lsls	r2, r2, #4
 8004882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2290      	movs	r2, #144	@ 0x90
 8004888:	589b      	ldr	r3, [r3, r2]
 800488a:	2220      	movs	r2, #32
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2190      	movs	r1, #144	@ 0x90
 8004892:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2290      	movs	r2, #144	@ 0x90
 8004898:	589b      	ldr	r3, [r3, r2]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d100      	bne.n	80048a0 <HAL_UART_IRQHandler+0x1b0>
 800489e:	e23d      	b.n	8004d1c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80048a0:	23a4      	movs	r3, #164	@ 0xa4
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2220      	movs	r2, #32
 80048a8:	4013      	ands	r3, r2
 80048aa:	d015      	beq.n	80048d8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048ac:	23a0      	movs	r3, #160	@ 0xa0
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2220      	movs	r2, #32
 80048b4:	4013      	ands	r3, r2
 80048b6:	d106      	bne.n	80048c6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048b8:	239c      	movs	r3, #156	@ 0x9c
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	055b      	lsls	r3, r3, #21
 80048c2:	4013      	ands	r3, r2
 80048c4:	d008      	beq.n	80048d8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	0010      	movs	r0, r2
 80048d6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2290      	movs	r2, #144	@ 0x90
 80048dc:	589b      	ldr	r3, [r3, r2]
 80048de:	2194      	movs	r1, #148	@ 0x94
 80048e0:	187a      	adds	r2, r7, r1
 80048e2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2240      	movs	r2, #64	@ 0x40
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d004      	beq.n	80048fc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048f2:	187b      	adds	r3, r7, r1
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2228      	movs	r2, #40	@ 0x28
 80048f8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048fa:	d04c      	beq.n	8004996 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	0018      	movs	r0, r3
 8004900:	f000 ffe8 	bl	80058d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2240      	movs	r2, #64	@ 0x40
 800490c:	4013      	ands	r3, r2
 800490e:	2b40      	cmp	r3, #64	@ 0x40
 8004910:	d13c      	bne.n	800498c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004912:	f3ef 8310 	mrs	r3, PRIMASK
 8004916:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800491a:	2090      	movs	r0, #144	@ 0x90
 800491c:	183a      	adds	r2, r7, r0
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	2301      	movs	r3, #1
 8004922:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004926:	f383 8810 	msr	PRIMASK, r3
}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2140      	movs	r1, #64	@ 0x40
 8004938:	438a      	bics	r2, r1
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	183b      	adds	r3, r7, r0
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004942:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004944:	f383 8810 	msr	PRIMASK, r3
}
 8004948:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2280      	movs	r2, #128	@ 0x80
 800494e:	589b      	ldr	r3, [r3, r2]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d016      	beq.n	8004982 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2280      	movs	r2, #128	@ 0x80
 8004958:	589b      	ldr	r3, [r3, r2]
 800495a:	4a17      	ldr	r2, [pc, #92]	@ (80049b8 <HAL_UART_IRQHandler+0x2c8>)
 800495c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2280      	movs	r2, #128	@ 0x80
 8004962:	589b      	ldr	r3, [r3, r2]
 8004964:	0018      	movs	r0, r3
 8004966:	f7fd fd71 	bl	800244c <HAL_DMA_Abort_IT>
 800496a:	1e03      	subs	r3, r0, #0
 800496c:	d01c      	beq.n	80049a8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2280      	movs	r2, #128	@ 0x80
 8004972:	589b      	ldr	r3, [r3, r2]
 8004974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	2180      	movs	r1, #128	@ 0x80
 800497a:	5852      	ldr	r2, [r2, r1]
 800497c:	0010      	movs	r0, r2
 800497e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	e012      	b.n	80049a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f000 f9e1 	bl	8004d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498a:	e00d      	b.n	80049a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	0018      	movs	r0, r3
 8004990:	f000 f9dc 	bl	8004d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004994:	e008      	b.n	80049a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0018      	movs	r0, r3
 800499a:	f000 f9d7 	bl	8004d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2290      	movs	r2, #144	@ 0x90
 80049a2:	2100      	movs	r1, #0
 80049a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80049a6:	e1b9      	b.n	8004d1c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a8:	46c0      	nop			@ (mov r8, r8)
    return;
 80049aa:	e1b7      	b.n	8004d1c <HAL_UART_IRQHandler+0x62c>
 80049ac:	0000080f 	.word	0x0000080f
 80049b0:	10000001 	.word	0x10000001
 80049b4:	04000120 	.word	0x04000120
 80049b8:	080059a1 	.word	0x080059a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d000      	beq.n	80049c6 <HAL_UART_IRQHandler+0x2d6>
 80049c4:	e13e      	b.n	8004c44 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049c6:	23a4      	movs	r3, #164	@ 0xa4
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2210      	movs	r2, #16
 80049ce:	4013      	ands	r3, r2
 80049d0:	d100      	bne.n	80049d4 <HAL_UART_IRQHandler+0x2e4>
 80049d2:	e137      	b.n	8004c44 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049d4:	23a0      	movs	r3, #160	@ 0xa0
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2210      	movs	r2, #16
 80049dc:	4013      	ands	r3, r2
 80049de:	d100      	bne.n	80049e2 <HAL_UART_IRQHandler+0x2f2>
 80049e0:	e130      	b.n	8004c44 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2210      	movs	r2, #16
 80049e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2240      	movs	r2, #64	@ 0x40
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d000      	beq.n	80049fa <HAL_UART_IRQHandler+0x30a>
 80049f8:	e0a4      	b.n	8004b44 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2280      	movs	r2, #128	@ 0x80
 80049fe:	589b      	ldr	r3, [r3, r2]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	217e      	movs	r1, #126	@ 0x7e
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004a0a:	187b      	adds	r3, r7, r1
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d100      	bne.n	8004a14 <HAL_UART_IRQHandler+0x324>
 8004a12:	e185      	b.n	8004d20 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	225c      	movs	r2, #92	@ 0x5c
 8004a18:	5a9b      	ldrh	r3, [r3, r2]
 8004a1a:	187a      	adds	r2, r7, r1
 8004a1c:	8812      	ldrh	r2, [r2, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d300      	bcc.n	8004a24 <HAL_UART_IRQHandler+0x334>
 8004a22:	e17d      	b.n	8004d20 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	187a      	adds	r2, r7, r1
 8004a28:	215e      	movs	r1, #94	@ 0x5e
 8004a2a:	8812      	ldrh	r2, [r2, #0]
 8004a2c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2280      	movs	r2, #128	@ 0x80
 8004a32:	589b      	ldr	r3, [r3, r2]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d170      	bne.n	8004b20 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a42:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a48:	2301      	movs	r3, #1
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4e:	f383 8810 	msr	PRIMASK, r3
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	49b4      	ldr	r1, [pc, #720]	@ (8004d30 <HAL_UART_IRQHandler+0x640>)
 8004a60:	400a      	ands	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6a:	f383 8810 	msr	PRIMASK, r3
}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a70:	f3ef 8310 	mrs	r3, PRIMASK
 8004a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a78:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2101      	movs	r1, #1
 8004a92:	438a      	bics	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
 8004a96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a98:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a9c:	f383 8810 	msr	PRIMASK, r3
}
 8004aa0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8004aac:	2301      	movs	r3, #1
 8004aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2140      	movs	r1, #64	@ 0x40
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	228c      	movs	r2, #140	@ 0x8c
 8004ad8:	2120      	movs	r1, #32
 8004ada:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004aec:	2301      	movs	r3, #1
 8004aee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004af2:	f383 8810 	msr	PRIMASK, r3
}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2110      	movs	r1, #16
 8004b04:	438a      	bics	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b0e:	f383 8810 	msr	PRIMASK, r3
}
 8004b12:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2280      	movs	r2, #128	@ 0x80
 8004b18:	589b      	ldr	r3, [r3, r2]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f7fd fc34 	bl	8002388 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	225c      	movs	r2, #92	@ 0x5c
 8004b2a:	5a9a      	ldrh	r2, [r3, r2]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	215e      	movs	r1, #94	@ 0x5e
 8004b30:	5a5b      	ldrh	r3, [r3, r1]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	0011      	movs	r1, r2
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f000 f90d 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b42:	e0ed      	b.n	8004d20 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	225c      	movs	r2, #92	@ 0x5c
 8004b48:	5a99      	ldrh	r1, [r3, r2]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	225e      	movs	r2, #94	@ 0x5e
 8004b4e:	5a9b      	ldrh	r3, [r3, r2]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	208e      	movs	r0, #142	@ 0x8e
 8004b54:	183b      	adds	r3, r7, r0
 8004b56:	1a8a      	subs	r2, r1, r2
 8004b58:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	225e      	movs	r2, #94	@ 0x5e
 8004b5e:	5a9b      	ldrh	r3, [r3, r2]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d100      	bne.n	8004b68 <HAL_UART_IRQHandler+0x478>
 8004b66:	e0dd      	b.n	8004d24 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004b68:	183b      	adds	r3, r7, r0
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d100      	bne.n	8004b72 <HAL_UART_IRQHandler+0x482>
 8004b70:	e0d8      	b.n	8004d24 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b72:	f3ef 8310 	mrs	r3, PRIMASK
 8004b76:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b78:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b7a:	2488      	movs	r4, #136	@ 0x88
 8004b7c:	193a      	adds	r2, r7, r4
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	2301      	movs	r3, #1
 8004b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4967      	ldr	r1, [pc, #412]	@ (8004d34 <HAL_UART_IRQHandler+0x644>)
 8004b98:	400a      	ands	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	193b      	adds	r3, r7, r4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f383 8810 	msr	PRIMASK, r3
}
 8004ba8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004baa:	f3ef 8310 	mrs	r3, PRIMASK
 8004bae:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bb0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bb2:	2484      	movs	r4, #132	@ 0x84
 8004bb4:	193a      	adds	r2, r7, r4
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	2301      	movs	r3, #1
 8004bba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f383 8810 	msr	PRIMASK, r3
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	495a      	ldr	r1, [pc, #360]	@ (8004d38 <HAL_UART_IRQHandler+0x648>)
 8004bd0:	400a      	ands	r2, r1
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	193b      	adds	r3, r7, r4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	f383 8810 	msr	PRIMASK, r3
}
 8004be0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	228c      	movs	r2, #140	@ 0x8c
 8004be6:	2120      	movs	r1, #32
 8004be8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfe:	2480      	movs	r4, #128	@ 0x80
 8004c00:	193a      	adds	r2, r7, r4
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	2301      	movs	r3, #1
 8004c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2110      	movs	r1, #16
 8004c1c:	438a      	bics	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c34:	183b      	adds	r3, r7, r0
 8004c36:	881a      	ldrh	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 f88d 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c42:	e06f      	b.n	8004d24 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c44:	23a4      	movs	r3, #164	@ 0xa4
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	2380      	movs	r3, #128	@ 0x80
 8004c4c:	035b      	lsls	r3, r3, #13
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d010      	beq.n	8004c74 <HAL_UART_IRQHandler+0x584>
 8004c52:	239c      	movs	r3, #156	@ 0x9c
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	2380      	movs	r3, #128	@ 0x80
 8004c5a:	03db      	lsls	r3, r3, #15
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2280      	movs	r2, #128	@ 0x80
 8004c66:	0352      	lsls	r2, r2, #13
 8004c68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f001 fbeb 	bl	8006448 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c72:	e05a      	b.n	8004d2a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c74:	23a4      	movs	r3, #164	@ 0xa4
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2280      	movs	r2, #128	@ 0x80
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d016      	beq.n	8004cae <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c80:	23a0      	movs	r3, #160	@ 0xa0
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2280      	movs	r2, #128	@ 0x80
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d106      	bne.n	8004c9a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c8c:	239c      	movs	r3, #156	@ 0x9c
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	2380      	movs	r3, #128	@ 0x80
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	4013      	ands	r3, r2
 8004c98:	d009      	beq.n	8004cae <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d042      	beq.n	8004d28 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	0010      	movs	r0, r2
 8004caa:	4798      	blx	r3
    }
    return;
 8004cac:	e03c      	b.n	8004d28 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004cae:	23a4      	movs	r3, #164	@ 0xa4
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2240      	movs	r2, #64	@ 0x40
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x5e0>
 8004cba:	23a0      	movs	r3, #160	@ 0xa0
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2240      	movs	r2, #64	@ 0x40
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f000 fe80 	bl	80059ce <UART_EndTransmit_IT>
    return;
 8004cce:	e02c      	b.n	8004d2a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004cd0:	23a4      	movs	r3, #164	@ 0xa4
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	2380      	movs	r3, #128	@ 0x80
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x606>
 8004cde:	23a0      	movs	r3, #160	@ 0xa0
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	2380      	movs	r3, #128	@ 0x80
 8004ce6:	05db      	lsls	r3, r3, #23
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f001 fbba 	bl	8006468 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cf4:	e019      	b.n	8004d2a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004cf6:	23a4      	movs	r3, #164	@ 0xa4
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	045b      	lsls	r3, r3, #17
 8004d00:	4013      	ands	r3, r2
 8004d02:	d012      	beq.n	8004d2a <HAL_UART_IRQHandler+0x63a>
 8004d04:	23a0      	movs	r3, #160	@ 0xa0
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da0d      	bge.n	8004d2a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f001 fba1 	bl	8006458 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d16:	e008      	b.n	8004d2a <HAL_UART_IRQHandler+0x63a>
      return;
 8004d18:	46c0      	nop			@ (mov r8, r8)
 8004d1a:	e006      	b.n	8004d2a <HAL_UART_IRQHandler+0x63a>
    return;
 8004d1c:	46c0      	nop			@ (mov r8, r8)
 8004d1e:	e004      	b.n	8004d2a <HAL_UART_IRQHandler+0x63a>
      return;
 8004d20:	46c0      	nop			@ (mov r8, r8)
 8004d22:	e002      	b.n	8004d2a <HAL_UART_IRQHandler+0x63a>
      return;
 8004d24:	46c0      	nop			@ (mov r8, r8)
 8004d26:	e000      	b.n	8004d2a <HAL_UART_IRQHandler+0x63a>
    return;
 8004d28:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b02a      	add	sp, #168	@ 0xa8
 8004d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d30:	fffffeff 	.word	0xfffffeff
 8004d34:	fffffedf 	.word	0xfffffedf
 8004d38:	effffffe 	.word	0xeffffffe

08004d3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d44:	46c0      	nop			@ (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d54:	46c0      	nop			@ (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b002      	add	sp, #8
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	000a      	movs	r2, r1
 8004d66:	1cbb      	adds	r3, r7, #2
 8004d68:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b002      	add	sp, #8
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d74:	b5b0      	push	{r4, r5, r7, lr}
 8004d76:	b090      	sub	sp, #64	@ 0x40
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d7c:	231a      	movs	r3, #26
 8004d7e:	2220      	movs	r2, #32
 8004d80:	189b      	adds	r3, r3, r2
 8004d82:	19db      	adds	r3, r3, r7
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4aaf      	ldr	r2, [pc, #700]	@ (8005064 <UART_SetConfig+0x2f0>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	0019      	movs	r1, r3
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db2:	430b      	orrs	r3, r1
 8004db4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4aaa      	ldr	r2, [pc, #680]	@ (8005068 <UART_SetConfig+0x2f4>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	68d9      	ldr	r1, [r3, #12]
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	0003      	movs	r3, r0
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4aa4      	ldr	r2, [pc, #656]	@ (800506c <UART_SetConfig+0x2f8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d004      	beq.n	8004dea <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004de6:	4313      	orrs	r3, r2
 8004de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a9f      	ldr	r2, [pc, #636]	@ (8005070 <UART_SetConfig+0x2fc>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	0019      	movs	r1, r3
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	220f      	movs	r2, #15
 8004e08:	4393      	bics	r3, r2
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	0003      	movs	r3, r0
 8004e16:	430b      	orrs	r3, r1
 8004e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a95      	ldr	r2, [pc, #596]	@ (8005074 <UART_SetConfig+0x300>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d131      	bne.n	8004e88 <UART_SetConfig+0x114>
 8004e24:	4b94      	ldr	r3, [pc, #592]	@ (8005078 <UART_SetConfig+0x304>)
 8004e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e28:	2203      	movs	r2, #3
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d01d      	beq.n	8004e6c <UART_SetConfig+0xf8>
 8004e30:	d823      	bhi.n	8004e7a <UART_SetConfig+0x106>
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d00c      	beq.n	8004e50 <UART_SetConfig+0xdc>
 8004e36:	d820      	bhi.n	8004e7a <UART_SetConfig+0x106>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <UART_SetConfig+0xce>
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d00e      	beq.n	8004e5e <UART_SetConfig+0xea>
 8004e40:	e01b      	b.n	8004e7a <UART_SetConfig+0x106>
 8004e42:	231b      	movs	r3, #27
 8004e44:	2220      	movs	r2, #32
 8004e46:	189b      	adds	r3, r3, r2
 8004e48:	19db      	adds	r3, r3, r7
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e0b4      	b.n	8004fba <UART_SetConfig+0x246>
 8004e50:	231b      	movs	r3, #27
 8004e52:	2220      	movs	r2, #32
 8004e54:	189b      	adds	r3, r3, r2
 8004e56:	19db      	adds	r3, r3, r7
 8004e58:	2202      	movs	r2, #2
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	e0ad      	b.n	8004fba <UART_SetConfig+0x246>
 8004e5e:	231b      	movs	r3, #27
 8004e60:	2220      	movs	r2, #32
 8004e62:	189b      	adds	r3, r3, r2
 8004e64:	19db      	adds	r3, r3, r7
 8004e66:	2204      	movs	r2, #4
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e0a6      	b.n	8004fba <UART_SetConfig+0x246>
 8004e6c:	231b      	movs	r3, #27
 8004e6e:	2220      	movs	r2, #32
 8004e70:	189b      	adds	r3, r3, r2
 8004e72:	19db      	adds	r3, r3, r7
 8004e74:	2208      	movs	r2, #8
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	e09f      	b.n	8004fba <UART_SetConfig+0x246>
 8004e7a:	231b      	movs	r3, #27
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	189b      	adds	r3, r3, r2
 8004e80:	19db      	adds	r3, r3, r7
 8004e82:	2210      	movs	r2, #16
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e098      	b.n	8004fba <UART_SetConfig+0x246>
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a7b      	ldr	r2, [pc, #492]	@ (800507c <UART_SetConfig+0x308>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d131      	bne.n	8004ef6 <UART_SetConfig+0x182>
 8004e92:	4b79      	ldr	r3, [pc, #484]	@ (8005078 <UART_SetConfig+0x304>)
 8004e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e96:	220c      	movs	r2, #12
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d01d      	beq.n	8004eda <UART_SetConfig+0x166>
 8004e9e:	d823      	bhi.n	8004ee8 <UART_SetConfig+0x174>
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d00c      	beq.n	8004ebe <UART_SetConfig+0x14a>
 8004ea4:	d820      	bhi.n	8004ee8 <UART_SetConfig+0x174>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <UART_SetConfig+0x13c>
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d00e      	beq.n	8004ecc <UART_SetConfig+0x158>
 8004eae:	e01b      	b.n	8004ee8 <UART_SetConfig+0x174>
 8004eb0:	231b      	movs	r3, #27
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	189b      	adds	r3, r3, r2
 8004eb6:	19db      	adds	r3, r3, r7
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	e07d      	b.n	8004fba <UART_SetConfig+0x246>
 8004ebe:	231b      	movs	r3, #27
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	189b      	adds	r3, r3, r2
 8004ec4:	19db      	adds	r3, r3, r7
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e076      	b.n	8004fba <UART_SetConfig+0x246>
 8004ecc:	231b      	movs	r3, #27
 8004ece:	2220      	movs	r2, #32
 8004ed0:	189b      	adds	r3, r3, r2
 8004ed2:	19db      	adds	r3, r3, r7
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e06f      	b.n	8004fba <UART_SetConfig+0x246>
 8004eda:	231b      	movs	r3, #27
 8004edc:	2220      	movs	r2, #32
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	19db      	adds	r3, r3, r7
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e068      	b.n	8004fba <UART_SetConfig+0x246>
 8004ee8:	231b      	movs	r3, #27
 8004eea:	2220      	movs	r2, #32
 8004eec:	189b      	adds	r3, r3, r2
 8004eee:	19db      	adds	r3, r3, r7
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e061      	b.n	8004fba <UART_SetConfig+0x246>
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a61      	ldr	r2, [pc, #388]	@ (8005080 <UART_SetConfig+0x30c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d106      	bne.n	8004f0e <UART_SetConfig+0x19a>
 8004f00:	231b      	movs	r3, #27
 8004f02:	2220      	movs	r2, #32
 8004f04:	189b      	adds	r3, r3, r2
 8004f06:	19db      	adds	r3, r3, r7
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	e055      	b.n	8004fba <UART_SetConfig+0x246>
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5c      	ldr	r2, [pc, #368]	@ (8005084 <UART_SetConfig+0x310>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d106      	bne.n	8004f26 <UART_SetConfig+0x1b2>
 8004f18:	231b      	movs	r3, #27
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	189b      	adds	r3, r3, r2
 8004f1e:	19db      	adds	r3, r3, r7
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e049      	b.n	8004fba <UART_SetConfig+0x246>
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a50      	ldr	r2, [pc, #320]	@ (800506c <UART_SetConfig+0x2f8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d13e      	bne.n	8004fae <UART_SetConfig+0x23a>
 8004f30:	4b51      	ldr	r3, [pc, #324]	@ (8005078 <UART_SetConfig+0x304>)
 8004f32:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f34:	23c0      	movs	r3, #192	@ 0xc0
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	4013      	ands	r3, r2
 8004f3a:	22c0      	movs	r2, #192	@ 0xc0
 8004f3c:	0112      	lsls	r2, r2, #4
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d027      	beq.n	8004f92 <UART_SetConfig+0x21e>
 8004f42:	22c0      	movs	r2, #192	@ 0xc0
 8004f44:	0112      	lsls	r2, r2, #4
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d82a      	bhi.n	8004fa0 <UART_SetConfig+0x22c>
 8004f4a:	2280      	movs	r2, #128	@ 0x80
 8004f4c:	0112      	lsls	r2, r2, #4
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d011      	beq.n	8004f76 <UART_SetConfig+0x202>
 8004f52:	2280      	movs	r2, #128	@ 0x80
 8004f54:	0112      	lsls	r2, r2, #4
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d822      	bhi.n	8004fa0 <UART_SetConfig+0x22c>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <UART_SetConfig+0x1f4>
 8004f5e:	2280      	movs	r2, #128	@ 0x80
 8004f60:	00d2      	lsls	r2, r2, #3
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00e      	beq.n	8004f84 <UART_SetConfig+0x210>
 8004f66:	e01b      	b.n	8004fa0 <UART_SetConfig+0x22c>
 8004f68:	231b      	movs	r3, #27
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	189b      	adds	r3, r3, r2
 8004f6e:	19db      	adds	r3, r3, r7
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e021      	b.n	8004fba <UART_SetConfig+0x246>
 8004f76:	231b      	movs	r3, #27
 8004f78:	2220      	movs	r2, #32
 8004f7a:	189b      	adds	r3, r3, r2
 8004f7c:	19db      	adds	r3, r3, r7
 8004f7e:	2202      	movs	r2, #2
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	e01a      	b.n	8004fba <UART_SetConfig+0x246>
 8004f84:	231b      	movs	r3, #27
 8004f86:	2220      	movs	r2, #32
 8004f88:	189b      	adds	r3, r3, r2
 8004f8a:	19db      	adds	r3, r3, r7
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	e013      	b.n	8004fba <UART_SetConfig+0x246>
 8004f92:	231b      	movs	r3, #27
 8004f94:	2220      	movs	r2, #32
 8004f96:	189b      	adds	r3, r3, r2
 8004f98:	19db      	adds	r3, r3, r7
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	e00c      	b.n	8004fba <UART_SetConfig+0x246>
 8004fa0:	231b      	movs	r3, #27
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	189b      	adds	r3, r3, r2
 8004fa6:	19db      	adds	r3, r3, r7
 8004fa8:	2210      	movs	r2, #16
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e005      	b.n	8004fba <UART_SetConfig+0x246>
 8004fae:	231b      	movs	r3, #27
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	189b      	adds	r3, r3, r2
 8004fb4:	19db      	adds	r3, r3, r7
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800506c <UART_SetConfig+0x2f8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d000      	beq.n	8004fc6 <UART_SetConfig+0x252>
 8004fc4:	e0a9      	b.n	800511a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fc6:	231b      	movs	r3, #27
 8004fc8:	2220      	movs	r2, #32
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	19db      	adds	r3, r3, r7
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d015      	beq.n	8005000 <UART_SetConfig+0x28c>
 8004fd4:	dc18      	bgt.n	8005008 <UART_SetConfig+0x294>
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d00d      	beq.n	8004ff6 <UART_SetConfig+0x282>
 8004fda:	dc15      	bgt.n	8005008 <UART_SetConfig+0x294>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <UART_SetConfig+0x272>
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d005      	beq.n	8004ff0 <UART_SetConfig+0x27c>
 8004fe4:	e010      	b.n	8005008 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7fe f99b 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 8004fea:	0003      	movs	r3, r0
 8004fec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fee:	e014      	b.n	800501a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff0:	4b25      	ldr	r3, [pc, #148]	@ (8005088 <UART_SetConfig+0x314>)
 8004ff2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ff4:	e011      	b.n	800501a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff6:	f7fe f907 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ffe:	e00c      	b.n	800501a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005000:	2380      	movs	r3, #128	@ 0x80
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005006:	e008      	b.n	800501a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800500c:	231a      	movs	r3, #26
 800500e:	2220      	movs	r2, #32
 8005010:	189b      	adds	r3, r3, r2
 8005012:	19db      	adds	r3, r3, r7
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
        break;
 8005018:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800501a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501c:	2b00      	cmp	r3, #0
 800501e:	d100      	bne.n	8005022 <UART_SetConfig+0x2ae>
 8005020:	e14b      	b.n	80052ba <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005026:	4b19      	ldr	r3, [pc, #100]	@ (800508c <UART_SetConfig+0x318>)
 8005028:	0052      	lsls	r2, r2, #1
 800502a:	5ad3      	ldrh	r3, [r2, r3]
 800502c:	0019      	movs	r1, r3
 800502e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005030:	f7fb f872 	bl	8000118 <__udivsi3>
 8005034:	0003      	movs	r3, r0
 8005036:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	0013      	movs	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	189b      	adds	r3, r3, r2
 8005042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005044:	429a      	cmp	r2, r3
 8005046:	d305      	bcc.n	8005054 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800504e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005050:	429a      	cmp	r2, r3
 8005052:	d91d      	bls.n	8005090 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005054:	231a      	movs	r3, #26
 8005056:	2220      	movs	r2, #32
 8005058:	189b      	adds	r3, r3, r2
 800505a:	19db      	adds	r3, r3, r7
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	e12b      	b.n	80052ba <UART_SetConfig+0x546>
 8005062:	46c0      	nop			@ (mov r8, r8)
 8005064:	cfff69f3 	.word	0xcfff69f3
 8005068:	ffffcfff 	.word	0xffffcfff
 800506c:	40008000 	.word	0x40008000
 8005070:	11fff4ff 	.word	0x11fff4ff
 8005074:	40013800 	.word	0x40013800
 8005078:	40021000 	.word	0x40021000
 800507c:	40004400 	.word	0x40004400
 8005080:	40004800 	.word	0x40004800
 8005084:	40004c00 	.word	0x40004c00
 8005088:	00f42400 	.word	0x00f42400
 800508c:	08007190 	.word	0x08007190
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800509c:	4b92      	ldr	r3, [pc, #584]	@ (80052e8 <UART_SetConfig+0x574>)
 800509e:	0052      	lsls	r2, r2, #1
 80050a0:	5ad3      	ldrh	r3, [r2, r3]
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	69b8      	ldr	r0, [r7, #24]
 80050ae:	69f9      	ldr	r1, [r7, #28]
 80050b0:	f7fb f9a8 	bl	8000404 <__aeabi_uldivmod>
 80050b4:	0002      	movs	r2, r0
 80050b6:	000b      	movs	r3, r1
 80050b8:	0e11      	lsrs	r1, r2, #24
 80050ba:	021d      	lsls	r5, r3, #8
 80050bc:	430d      	orrs	r5, r1
 80050be:	0214      	lsls	r4, r2, #8
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68b8      	ldr	r0, [r7, #8]
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	1900      	adds	r0, r0, r4
 80050d2:	4169      	adcs	r1, r5
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	603b      	str	r3, [r7, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f7fb f98f 	bl	8000404 <__aeabi_uldivmod>
 80050e6:	0002      	movs	r2, r0
 80050e8:	000b      	movs	r3, r1
 80050ea:	0013      	movs	r3, r2
 80050ec:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f0:	23c0      	movs	r3, #192	@ 0xc0
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d309      	bcc.n	800510c <UART_SetConfig+0x398>
 80050f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050fa:	2380      	movs	r3, #128	@ 0x80
 80050fc:	035b      	lsls	r3, r3, #13
 80050fe:	429a      	cmp	r2, r3
 8005100:	d204      	bcs.n	800510c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	e0d6      	b.n	80052ba <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800510c:	231a      	movs	r3, #26
 800510e:	2220      	movs	r2, #32
 8005110:	189b      	adds	r3, r3, r2
 8005112:	19db      	adds	r3, r3, r7
 8005114:	2201      	movs	r2, #1
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	e0cf      	b.n	80052ba <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	2380      	movs	r3, #128	@ 0x80
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	429a      	cmp	r2, r3
 8005124:	d000      	beq.n	8005128 <UART_SetConfig+0x3b4>
 8005126:	e070      	b.n	800520a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005128:	231b      	movs	r3, #27
 800512a:	2220      	movs	r2, #32
 800512c:	189b      	adds	r3, r3, r2
 800512e:	19db      	adds	r3, r3, r7
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b08      	cmp	r3, #8
 8005134:	d015      	beq.n	8005162 <UART_SetConfig+0x3ee>
 8005136:	dc18      	bgt.n	800516a <UART_SetConfig+0x3f6>
 8005138:	2b04      	cmp	r3, #4
 800513a:	d00d      	beq.n	8005158 <UART_SetConfig+0x3e4>
 800513c:	dc15      	bgt.n	800516a <UART_SetConfig+0x3f6>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <UART_SetConfig+0x3d4>
 8005142:	2b02      	cmp	r3, #2
 8005144:	d005      	beq.n	8005152 <UART_SetConfig+0x3de>
 8005146:	e010      	b.n	800516a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fe f8ea 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 800514c:	0003      	movs	r3, r0
 800514e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005150:	e014      	b.n	800517c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005152:	4b66      	ldr	r3, [pc, #408]	@ (80052ec <UART_SetConfig+0x578>)
 8005154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005156:	e011      	b.n	800517c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005158:	f7fe f856 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 800515c:	0003      	movs	r3, r0
 800515e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005160:	e00c      	b.n	800517c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005162:	2380      	movs	r3, #128	@ 0x80
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005168:	e008      	b.n	800517c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800516e:	231a      	movs	r3, #26
 8005170:	2220      	movs	r2, #32
 8005172:	189b      	adds	r3, r3, r2
 8005174:	19db      	adds	r3, r3, r7
 8005176:	2201      	movs	r2, #1
 8005178:	701a      	strb	r2, [r3, #0]
        break;
 800517a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800517c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517e:	2b00      	cmp	r3, #0
 8005180:	d100      	bne.n	8005184 <UART_SetConfig+0x410>
 8005182:	e09a      	b.n	80052ba <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005188:	4b57      	ldr	r3, [pc, #348]	@ (80052e8 <UART_SetConfig+0x574>)
 800518a:	0052      	lsls	r2, r2, #1
 800518c:	5ad3      	ldrh	r3, [r2, r3]
 800518e:	0019      	movs	r1, r3
 8005190:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005192:	f7fa ffc1 	bl	8000118 <__udivsi3>
 8005196:	0003      	movs	r3, r0
 8005198:	005a      	lsls	r2, r3, #1
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	18d2      	adds	r2, r2, r3
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	0019      	movs	r1, r3
 80051a8:	0010      	movs	r0, r2
 80051aa:	f7fa ffb5 	bl	8000118 <__udivsi3>
 80051ae:	0003      	movs	r3, r0
 80051b0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	2b0f      	cmp	r3, #15
 80051b6:	d921      	bls.n	80051fc <UART_SetConfig+0x488>
 80051b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ba:	2380      	movs	r3, #128	@ 0x80
 80051bc:	025b      	lsls	r3, r3, #9
 80051be:	429a      	cmp	r2, r3
 80051c0:	d21c      	bcs.n	80051fc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	200e      	movs	r0, #14
 80051c8:	2420      	movs	r4, #32
 80051ca:	1903      	adds	r3, r0, r4
 80051cc:	19db      	adds	r3, r3, r7
 80051ce:	210f      	movs	r1, #15
 80051d0:	438a      	bics	r2, r1
 80051d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2207      	movs	r2, #7
 80051dc:	4013      	ands	r3, r2
 80051de:	b299      	uxth	r1, r3
 80051e0:	1903      	adds	r3, r0, r4
 80051e2:	19db      	adds	r3, r3, r7
 80051e4:	1902      	adds	r2, r0, r4
 80051e6:	19d2      	adds	r2, r2, r7
 80051e8:	8812      	ldrh	r2, [r2, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	1902      	adds	r2, r0, r4
 80051f4:	19d2      	adds	r2, r2, r7
 80051f6:	8812      	ldrh	r2, [r2, #0]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	e05e      	b.n	80052ba <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80051fc:	231a      	movs	r3, #26
 80051fe:	2220      	movs	r2, #32
 8005200:	189b      	adds	r3, r3, r2
 8005202:	19db      	adds	r3, r3, r7
 8005204:	2201      	movs	r2, #1
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e057      	b.n	80052ba <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800520a:	231b      	movs	r3, #27
 800520c:	2220      	movs	r2, #32
 800520e:	189b      	adds	r3, r3, r2
 8005210:	19db      	adds	r3, r3, r7
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d015      	beq.n	8005244 <UART_SetConfig+0x4d0>
 8005218:	dc18      	bgt.n	800524c <UART_SetConfig+0x4d8>
 800521a:	2b04      	cmp	r3, #4
 800521c:	d00d      	beq.n	800523a <UART_SetConfig+0x4c6>
 800521e:	dc15      	bgt.n	800524c <UART_SetConfig+0x4d8>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <UART_SetConfig+0x4b6>
 8005224:	2b02      	cmp	r3, #2
 8005226:	d005      	beq.n	8005234 <UART_SetConfig+0x4c0>
 8005228:	e010      	b.n	800524c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522a:	f7fe f879 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 800522e:	0003      	movs	r3, r0
 8005230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005232:	e014      	b.n	800525e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005234:	4b2d      	ldr	r3, [pc, #180]	@ (80052ec <UART_SetConfig+0x578>)
 8005236:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005238:	e011      	b.n	800525e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800523a:	f7fd ffe5 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 800523e:	0003      	movs	r3, r0
 8005240:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005242:	e00c      	b.n	800525e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005244:	2380      	movs	r3, #128	@ 0x80
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800524a:	e008      	b.n	800525e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005250:	231a      	movs	r3, #26
 8005252:	2220      	movs	r2, #32
 8005254:	189b      	adds	r3, r3, r2
 8005256:	19db      	adds	r3, r3, r7
 8005258:	2201      	movs	r2, #1
 800525a:	701a      	strb	r2, [r3, #0]
        break;
 800525c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800525e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005260:	2b00      	cmp	r3, #0
 8005262:	d02a      	beq.n	80052ba <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005268:	4b1f      	ldr	r3, [pc, #124]	@ (80052e8 <UART_SetConfig+0x574>)
 800526a:	0052      	lsls	r2, r2, #1
 800526c:	5ad3      	ldrh	r3, [r2, r3]
 800526e:	0019      	movs	r1, r3
 8005270:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005272:	f7fa ff51 	bl	8000118 <__udivsi3>
 8005276:	0003      	movs	r3, r0
 8005278:	001a      	movs	r2, r3
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	085b      	lsrs	r3, r3, #1
 8005280:	18d2      	adds	r2, r2, r3
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	0019      	movs	r1, r3
 8005288:	0010      	movs	r0, r2
 800528a:	f7fa ff45 	bl	8000118 <__udivsi3>
 800528e:	0003      	movs	r3, r0
 8005290:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005294:	2b0f      	cmp	r3, #15
 8005296:	d90a      	bls.n	80052ae <UART_SetConfig+0x53a>
 8005298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529a:	2380      	movs	r3, #128	@ 0x80
 800529c:	025b      	lsls	r3, r3, #9
 800529e:	429a      	cmp	r2, r3
 80052a0:	d205      	bcs.n	80052ae <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60da      	str	r2, [r3, #12]
 80052ac:	e005      	b.n	80052ba <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80052ae:	231a      	movs	r3, #26
 80052b0:	2220      	movs	r2, #32
 80052b2:	189b      	adds	r3, r3, r2
 80052b4:	19db      	adds	r3, r3, r7
 80052b6:	2201      	movs	r2, #1
 80052b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	226a      	movs	r2, #106	@ 0x6a
 80052be:	2101      	movs	r1, #1
 80052c0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	2268      	movs	r2, #104	@ 0x68
 80052c6:	2101      	movs	r1, #1
 80052c8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	2200      	movs	r2, #0
 80052ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	2200      	movs	r2, #0
 80052d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80052d6:	231a      	movs	r3, #26
 80052d8:	2220      	movs	r2, #32
 80052da:	189b      	adds	r3, r3, r2
 80052dc:	19db      	adds	r3, r3, r7
 80052de:	781b      	ldrb	r3, [r3, #0]
}
 80052e0:	0018      	movs	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b010      	add	sp, #64	@ 0x40
 80052e6:	bdb0      	pop	{r4, r5, r7, pc}
 80052e8:	08007190 	.word	0x08007190
 80052ec:	00f42400 	.word	0x00f42400

080052f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fc:	2208      	movs	r2, #8
 80052fe:	4013      	ands	r3, r2
 8005300:	d00b      	beq.n	800531a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4a4a      	ldr	r2, [pc, #296]	@ (8005434 <UART_AdvFeatureConfig+0x144>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	2201      	movs	r2, #1
 8005320:	4013      	ands	r3, r2
 8005322:	d00b      	beq.n	800533c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4a43      	ldr	r2, [pc, #268]	@ (8005438 <UART_AdvFeatureConfig+0x148>)
 800532c:	4013      	ands	r3, r2
 800532e:	0019      	movs	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005340:	2202      	movs	r2, #2
 8005342:	4013      	ands	r3, r2
 8005344:	d00b      	beq.n	800535e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a3b      	ldr	r2, [pc, #236]	@ (800543c <UART_AdvFeatureConfig+0x14c>)
 800534e:	4013      	ands	r3, r2
 8005350:	0019      	movs	r1, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005362:	2204      	movs	r2, #4
 8005364:	4013      	ands	r3, r2
 8005366:	d00b      	beq.n	8005380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4a34      	ldr	r2, [pc, #208]	@ (8005440 <UART_AdvFeatureConfig+0x150>)
 8005370:	4013      	ands	r3, r2
 8005372:	0019      	movs	r1, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	2210      	movs	r2, #16
 8005386:	4013      	ands	r3, r2
 8005388:	d00b      	beq.n	80053a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a2c      	ldr	r2, [pc, #176]	@ (8005444 <UART_AdvFeatureConfig+0x154>)
 8005392:	4013      	ands	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	2220      	movs	r2, #32
 80053a8:	4013      	ands	r3, r2
 80053aa:	d00b      	beq.n	80053c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	4a25      	ldr	r2, [pc, #148]	@ (8005448 <UART_AdvFeatureConfig+0x158>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	0019      	movs	r1, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	2240      	movs	r2, #64	@ 0x40
 80053ca:	4013      	ands	r3, r2
 80053cc:	d01d      	beq.n	800540a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4a1d      	ldr	r2, [pc, #116]	@ (800544c <UART_AdvFeatureConfig+0x15c>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	0019      	movs	r1, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ea:	2380      	movs	r3, #128	@ 0x80
 80053ec:	035b      	lsls	r3, r3, #13
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d10b      	bne.n	800540a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4a15      	ldr	r2, [pc, #84]	@ (8005450 <UART_AdvFeatureConfig+0x160>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	0019      	movs	r1, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	2280      	movs	r2, #128	@ 0x80
 8005410:	4013      	ands	r3, r2
 8005412:	d00b      	beq.n	800542c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4a0e      	ldr	r2, [pc, #56]	@ (8005454 <UART_AdvFeatureConfig+0x164>)
 800541c:	4013      	ands	r3, r2
 800541e:	0019      	movs	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	605a      	str	r2, [r3, #4]
  }
}
 800542c:	46c0      	nop			@ (mov r8, r8)
 800542e:	46bd      	mov	sp, r7
 8005430:	b002      	add	sp, #8
 8005432:	bd80      	pop	{r7, pc}
 8005434:	ffff7fff 	.word	0xffff7fff
 8005438:	fffdffff 	.word	0xfffdffff
 800543c:	fffeffff 	.word	0xfffeffff
 8005440:	fffbffff 	.word	0xfffbffff
 8005444:	ffffefff 	.word	0xffffefff
 8005448:	ffffdfff 	.word	0xffffdfff
 800544c:	ffefffff 	.word	0xffefffff
 8005450:	ff9fffff 	.word	0xff9fffff
 8005454:	fff7ffff 	.word	0xfff7ffff

08005458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b092      	sub	sp, #72	@ 0x48
 800545c:	af02      	add	r7, sp, #8
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2290      	movs	r2, #144	@ 0x90
 8005464:	2100      	movs	r1, #0
 8005466:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005468:	f7fb ff9e 	bl	80013a8 <HAL_GetTick>
 800546c:	0003      	movs	r3, r0
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2208      	movs	r2, #8
 8005478:	4013      	ands	r3, r2
 800547a:	2b08      	cmp	r3, #8
 800547c:	d12d      	bne.n	80054da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800547e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005480:	2280      	movs	r2, #128	@ 0x80
 8005482:	0391      	lsls	r1, r2, #14
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4a47      	ldr	r2, [pc, #284]	@ (80055a4 <UART_CheckIdleState+0x14c>)
 8005488:	9200      	str	r2, [sp, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	f000 f88e 	bl	80055ac <UART_WaitOnFlagUntilTimeout>
 8005490:	1e03      	subs	r3, r0, #0
 8005492:	d022      	beq.n	80054da <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005494:	f3ef 8310 	mrs	r3, PRIMASK
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800549c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800549e:	2301      	movs	r3, #1
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	f383 8810 	msr	PRIMASK, r3
}
 80054a8:	46c0      	nop			@ (mov r8, r8)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2180      	movs	r1, #128	@ 0x80
 80054b6:	438a      	bics	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	f383 8810 	msr	PRIMASK, r3
}
 80054c4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2288      	movs	r2, #136	@ 0x88
 80054ca:	2120      	movs	r1, #32
 80054cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2284      	movs	r2, #132	@ 0x84
 80054d2:	2100      	movs	r1, #0
 80054d4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e060      	b.n	800559c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2204      	movs	r2, #4
 80054e2:	4013      	ands	r3, r2
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d146      	bne.n	8005576 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ea:	2280      	movs	r2, #128	@ 0x80
 80054ec:	03d1      	lsls	r1, r2, #15
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	4a2c      	ldr	r2, [pc, #176]	@ (80055a4 <UART_CheckIdleState+0x14c>)
 80054f2:	9200      	str	r2, [sp, #0]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f000 f859 	bl	80055ac <UART_WaitOnFlagUntilTimeout>
 80054fa:	1e03      	subs	r3, r0, #0
 80054fc:	d03b      	beq.n	8005576 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005502:	60fb      	str	r3, [r7, #12]
  return(result);
 8005504:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005506:	637b      	str	r3, [r7, #52]	@ 0x34
 8005508:	2301      	movs	r3, #1
 800550a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f383 8810 	msr	PRIMASK, r3
}
 8005512:	46c0      	nop			@ (mov r8, r8)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4922      	ldr	r1, [pc, #136]	@ (80055a8 <UART_CheckIdleState+0x150>)
 8005520:	400a      	ands	r2, r1
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005526:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f383 8810 	msr	PRIMASK, r3
}
 800552e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005530:	f3ef 8310 	mrs	r3, PRIMASK
 8005534:	61bb      	str	r3, [r7, #24]
  return(result);
 8005536:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005538:	633b      	str	r3, [r7, #48]	@ 0x30
 800553a:	2301      	movs	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	f383 8810 	msr	PRIMASK, r3
}
 8005544:	46c0      	nop			@ (mov r8, r8)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2101      	movs	r1, #1
 8005552:	438a      	bics	r2, r1
 8005554:	609a      	str	r2, [r3, #8]
 8005556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005558:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	f383 8810 	msr	PRIMASK, r3
}
 8005560:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	228c      	movs	r2, #140	@ 0x8c
 8005566:	2120      	movs	r1, #32
 8005568:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2284      	movs	r2, #132	@ 0x84
 800556e:	2100      	movs	r1, #0
 8005570:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e012      	b.n	800559c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2288      	movs	r2, #136	@ 0x88
 800557a:	2120      	movs	r1, #32
 800557c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	228c      	movs	r2, #140	@ 0x8c
 8005582:	2120      	movs	r1, #32
 8005584:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2284      	movs	r2, #132	@ 0x84
 8005596:	2100      	movs	r1, #0
 8005598:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	0018      	movs	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	b010      	add	sp, #64	@ 0x40
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	01ffffff 	.word	0x01ffffff
 80055a8:	fffffedf 	.word	0xfffffedf

080055ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	1dfb      	adds	r3, r7, #7
 80055ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055bc:	e051      	b.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	3301      	adds	r3, #1
 80055c2:	d04e      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c4:	f7fb fef0 	bl	80013a8 <HAL_GetTick>
 80055c8:	0002      	movs	r2, r0
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d302      	bcc.n	80055da <UART_WaitOnFlagUntilTimeout+0x2e>
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e051      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2204      	movs	r2, #4
 80055e6:	4013      	ands	r3, r2
 80055e8:	d03b      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb6>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b80      	cmp	r3, #128	@ 0x80
 80055ee:	d038      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb6>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b40      	cmp	r3, #64	@ 0x40
 80055f4:	d035      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	2208      	movs	r2, #8
 80055fe:	4013      	ands	r3, r2
 8005600:	2b08      	cmp	r3, #8
 8005602:	d111      	bne.n	8005628 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2208      	movs	r2, #8
 800560a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	0018      	movs	r0, r3
 8005610:	f000 f960 	bl	80058d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2290      	movs	r2, #144	@ 0x90
 8005618:	2108      	movs	r1, #8
 800561a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2284      	movs	r2, #132	@ 0x84
 8005620:	2100      	movs	r1, #0
 8005622:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e02c      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	2380      	movs	r3, #128	@ 0x80
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	401a      	ands	r2, r3
 8005634:	2380      	movs	r3, #128	@ 0x80
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	429a      	cmp	r2, r3
 800563a:	d112      	bne.n	8005662 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2280      	movs	r2, #128	@ 0x80
 8005642:	0112      	lsls	r2, r2, #4
 8005644:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	0018      	movs	r0, r3
 800564a:	f000 f943 	bl	80058d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2290      	movs	r2, #144	@ 0x90
 8005652:	2120      	movs	r1, #32
 8005654:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2284      	movs	r2, #132	@ 0x84
 800565a:	2100      	movs	r1, #0
 800565c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e00f      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	4013      	ands	r3, r2
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	425a      	negs	r2, r3
 8005672:	4153      	adcs	r3, r2
 8005674:	b2db      	uxtb	r3, r3
 8005676:	001a      	movs	r2, r3
 8005678:	1dfb      	adds	r3, r7, #7
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d09e      	beq.n	80055be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b004      	add	sp, #16
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b098      	sub	sp, #96	@ 0x60
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	1dbb      	adds	r3, r7, #6
 8005698:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1dba      	adds	r2, r7, #6
 80056a4:	215c      	movs	r1, #92	@ 0x5c
 80056a6:	8812      	ldrh	r2, [r2, #0]
 80056a8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	1dba      	adds	r2, r7, #6
 80056ae:	215e      	movs	r1, #94	@ 0x5e
 80056b0:	8812      	ldrh	r2, [r2, #0]
 80056b2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	2380      	movs	r3, #128	@ 0x80
 80056c0:	015b      	lsls	r3, r3, #5
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d10d      	bne.n	80056e2 <UART_Start_Receive_IT+0x56>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d104      	bne.n	80056d8 <UART_Start_Receive_IT+0x4c>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2260      	movs	r2, #96	@ 0x60
 80056d2:	497b      	ldr	r1, [pc, #492]	@ (80058c0 <UART_Start_Receive_IT+0x234>)
 80056d4:	5299      	strh	r1, [r3, r2]
 80056d6:	e02e      	b.n	8005736 <UART_Start_Receive_IT+0xaa>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2260      	movs	r2, #96	@ 0x60
 80056dc:	21ff      	movs	r1, #255	@ 0xff
 80056de:	5299      	strh	r1, [r3, r2]
 80056e0:	e029      	b.n	8005736 <UART_Start_Receive_IT+0xaa>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10d      	bne.n	8005706 <UART_Start_Receive_IT+0x7a>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d104      	bne.n	80056fc <UART_Start_Receive_IT+0x70>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2260      	movs	r2, #96	@ 0x60
 80056f6:	21ff      	movs	r1, #255	@ 0xff
 80056f8:	5299      	strh	r1, [r3, r2]
 80056fa:	e01c      	b.n	8005736 <UART_Start_Receive_IT+0xaa>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2260      	movs	r2, #96	@ 0x60
 8005700:	217f      	movs	r1, #127	@ 0x7f
 8005702:	5299      	strh	r1, [r3, r2]
 8005704:	e017      	b.n	8005736 <UART_Start_Receive_IT+0xaa>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	2380      	movs	r3, #128	@ 0x80
 800570c:	055b      	lsls	r3, r3, #21
 800570e:	429a      	cmp	r2, r3
 8005710:	d10d      	bne.n	800572e <UART_Start_Receive_IT+0xa2>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d104      	bne.n	8005724 <UART_Start_Receive_IT+0x98>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2260      	movs	r2, #96	@ 0x60
 800571e:	217f      	movs	r1, #127	@ 0x7f
 8005720:	5299      	strh	r1, [r3, r2]
 8005722:	e008      	b.n	8005736 <UART_Start_Receive_IT+0xaa>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2260      	movs	r2, #96	@ 0x60
 8005728:	213f      	movs	r1, #63	@ 0x3f
 800572a:	5299      	strh	r1, [r3, r2]
 800572c:	e003      	b.n	8005736 <UART_Start_Receive_IT+0xaa>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2260      	movs	r2, #96	@ 0x60
 8005732:	2100      	movs	r1, #0
 8005734:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2290      	movs	r2, #144	@ 0x90
 800573a:	2100      	movs	r1, #0
 800573c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	228c      	movs	r2, #140	@ 0x8c
 8005742:	2122      	movs	r1, #34	@ 0x22
 8005744:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005746:	f3ef 8310 	mrs	r3, PRIMASK
 800574a:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 800574c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005750:	2301      	movs	r3, #1
 8005752:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005756:	f383 8810 	msr	PRIMASK, r3
}
 800575a:	46c0      	nop			@ (mov r8, r8)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2101      	movs	r1, #1
 8005768:	430a      	orrs	r2, r1
 800576a:	609a      	str	r2, [r3, #8]
 800576c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800576e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005772:	f383 8810 	msr	PRIMASK, r3
}
 8005776:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800577c:	2380      	movs	r3, #128	@ 0x80
 800577e:	059b      	lsls	r3, r3, #22
 8005780:	429a      	cmp	r2, r3
 8005782:	d150      	bne.n	8005826 <UART_Start_Receive_IT+0x19a>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2268      	movs	r2, #104	@ 0x68
 8005788:	5a9b      	ldrh	r3, [r3, r2]
 800578a:	1dba      	adds	r2, r7, #6
 800578c:	8812      	ldrh	r2, [r2, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d349      	bcc.n	8005826 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	2380      	movs	r3, #128	@ 0x80
 8005798:	015b      	lsls	r3, r3, #5
 800579a:	429a      	cmp	r2, r3
 800579c:	d107      	bne.n	80057ae <UART_Start_Receive_IT+0x122>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d103      	bne.n	80057ae <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4a46      	ldr	r2, [pc, #280]	@ (80058c4 <UART_Start_Receive_IT+0x238>)
 80057aa:	675a      	str	r2, [r3, #116]	@ 0x74
 80057ac:	e002      	b.n	80057b4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a45      	ldr	r2, [pc, #276]	@ (80058c8 <UART_Start_Receive_IT+0x23c>)
 80057b2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d019      	beq.n	80057f0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057bc:	f3ef 8310 	mrs	r3, PRIMASK
 80057c0:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80057c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057c6:	2301      	movs	r3, #1
 80057c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057cc:	f383 8810 	msr	PRIMASK, r3
}
 80057d0:	46c0      	nop			@ (mov r8, r8)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2180      	movs	r1, #128	@ 0x80
 80057de:	0049      	lsls	r1, r1, #1
 80057e0:	430a      	orrs	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f0:	f3ef 8310 	mrs	r3, PRIMASK
 80057f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80057fa:	2301      	movs	r3, #1
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005800:	f383 8810 	msr	PRIMASK, r3
}
 8005804:	46c0      	nop			@ (mov r8, r8)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2180      	movs	r1, #128	@ 0x80
 8005812:	0549      	lsls	r1, r1, #21
 8005814:	430a      	orrs	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
 8005818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800581a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	f383 8810 	msr	PRIMASK, r3
}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	e047      	b.n	80058b6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	2380      	movs	r3, #128	@ 0x80
 800582c:	015b      	lsls	r3, r3, #5
 800582e:	429a      	cmp	r2, r3
 8005830:	d107      	bne.n	8005842 <UART_Start_Receive_IT+0x1b6>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a23      	ldr	r2, [pc, #140]	@ (80058cc <UART_Start_Receive_IT+0x240>)
 800583e:	675a      	str	r2, [r3, #116]	@ 0x74
 8005840:	e002      	b.n	8005848 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a22      	ldr	r2, [pc, #136]	@ (80058d0 <UART_Start_Receive_IT+0x244>)
 8005846:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d019      	beq.n	8005884 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005850:	f3ef 8310 	mrs	r3, PRIMASK
 8005854:	61fb      	str	r3, [r7, #28]
  return(result);
 8005856:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005858:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800585a:	2301      	movs	r3, #1
 800585c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	f383 8810 	msr	PRIMASK, r3
}
 8005864:	46c0      	nop			@ (mov r8, r8)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2190      	movs	r1, #144	@ 0x90
 8005872:	0049      	lsls	r1, r1, #1
 8005874:	430a      	orrs	r2, r1
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	f383 8810 	msr	PRIMASK, r3
}
 8005882:	e018      	b.n	80058b6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005884:	f3ef 8310 	mrs	r3, PRIMASK
 8005888:	613b      	str	r3, [r7, #16]
  return(result);
 800588a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800588c:	653b      	str	r3, [r7, #80]	@ 0x50
 800588e:	2301      	movs	r3, #1
 8005890:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f383 8810 	msr	PRIMASK, r3
}
 8005898:	46c0      	nop			@ (mov r8, r8)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2120      	movs	r1, #32
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f383 8810 	msr	PRIMASK, r3
}
 80058b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	0018      	movs	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b018      	add	sp, #96	@ 0x60
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	000001ff 	.word	0x000001ff
 80058c4:	080060f1 	.word	0x080060f1
 80058c8:	08005db1 	.word	0x08005db1
 80058cc:	08005bed 	.word	0x08005bed
 80058d0:	08005a29 	.word	0x08005a29

080058d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08e      	sub	sp, #56	@ 0x38
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058dc:	f3ef 8310 	mrs	r3, PRIMASK
 80058e0:	617b      	str	r3, [r7, #20]
  return(result);
 80058e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058e6:	2301      	movs	r3, #1
 80058e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f383 8810 	msr	PRIMASK, r3
}
 80058f0:	46c0      	nop			@ (mov r8, r8)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4926      	ldr	r1, [pc, #152]	@ (8005998 <UART_EndRxTransfer+0xc4>)
 80058fe:	400a      	ands	r2, r1
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005904:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f383 8810 	msr	PRIMASK, r3
}
 800590c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590e:	f3ef 8310 	mrs	r3, PRIMASK
 8005912:	623b      	str	r3, [r7, #32]
  return(result);
 8005914:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005916:	633b      	str	r3, [r7, #48]	@ 0x30
 8005918:	2301      	movs	r3, #1
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	f383 8810 	msr	PRIMASK, r3
}
 8005922:	46c0      	nop			@ (mov r8, r8)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	491b      	ldr	r1, [pc, #108]	@ (800599c <UART_EndRxTransfer+0xc8>)
 8005930:	400a      	ands	r2, r1
 8005932:	609a      	str	r2, [r3, #8]
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593a:	f383 8810 	msr	PRIMASK, r3
}
 800593e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d118      	bne.n	800597a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005948:	f3ef 8310 	mrs	r3, PRIMASK
 800594c:	60bb      	str	r3, [r7, #8]
  return(result);
 800594e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005952:	2301      	movs	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			@ (mov r8, r8)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2110      	movs	r1, #16
 800596a:	438a      	bics	r2, r1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f383 8810 	msr	PRIMASK, r3
}
 8005978:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	228c      	movs	r2, #140	@ 0x8c
 800597e:	2120      	movs	r1, #32
 8005980:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	46bd      	mov	sp, r7
 8005992:	b00e      	add	sp, #56	@ 0x38
 8005994:	bd80      	pop	{r7, pc}
 8005996:	46c0      	nop			@ (mov r8, r8)
 8005998:	fffffedf 	.word	0xfffffedf
 800599c:	effffffe 	.word	0xeffffffe

080059a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	225e      	movs	r2, #94	@ 0x5e
 80059b2:	2100      	movs	r1, #0
 80059b4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2256      	movs	r2, #86	@ 0x56
 80059ba:	2100      	movs	r1, #0
 80059bc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	0018      	movs	r0, r3
 80059c2:	f7ff f9c3 	bl	8004d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b004      	add	sp, #16
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d6:	f3ef 8310 	mrs	r3, PRIMASK
 80059da:	60bb      	str	r3, [r7, #8]
  return(result);
 80059dc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	2301      	movs	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f383 8810 	msr	PRIMASK, r3
}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2140      	movs	r1, #64	@ 0x40
 80059f8:	438a      	bics	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f383 8810 	msr	PRIMASK, r3
}
 8005a06:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2288      	movs	r2, #136	@ 0x88
 8005a0c:	2120      	movs	r1, #32
 8005a0e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f7ff f98f 	bl	8004d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b006      	add	sp, #24
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b094      	sub	sp, #80	@ 0x50
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a30:	204e      	movs	r0, #78	@ 0x4e
 8005a32:	183b      	adds	r3, r7, r0
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	2160      	movs	r1, #96	@ 0x60
 8005a38:	5a52      	ldrh	r2, [r2, r1]
 8005a3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	228c      	movs	r2, #140	@ 0x8c
 8005a40:	589b      	ldr	r3, [r3, r2]
 8005a42:	2b22      	cmp	r3, #34	@ 0x22
 8005a44:	d000      	beq.n	8005a48 <UART_RxISR_8BIT+0x20>
 8005a46:	e0bf      	b.n	8005bc8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a4e:	214c      	movs	r1, #76	@ 0x4c
 8005a50:	187b      	adds	r3, r7, r1
 8005a52:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a54:	187b      	adds	r3, r7, r1
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	183b      	adds	r3, r7, r0
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b2d9      	uxtb	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a64:	400a      	ands	r2, r1
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	225e      	movs	r2, #94	@ 0x5e
 8005a78:	5a9b      	ldrh	r3, [r3, r2]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b299      	uxth	r1, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	225e      	movs	r2, #94	@ 0x5e
 8005a84:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	225e      	movs	r2, #94	@ 0x5e
 8005a8a:	5a9b      	ldrh	r3, [r3, r2]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d000      	beq.n	8005a94 <UART_RxISR_8BIT+0x6c>
 8005a92:	e0a1      	b.n	8005bd8 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a94:	f3ef 8310 	mrs	r3, PRIMASK
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	f383 8810 	msr	PRIMASK, r3
}
 8005aa8:	46c0      	nop			@ (mov r8, r8)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	494a      	ldr	r1, [pc, #296]	@ (8005be0 <UART_RxISR_8BIT+0x1b8>)
 8005ab6:	400a      	ands	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac0:	f383 8810 	msr	PRIMASK, r3
}
 8005ac4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	f383 8810 	msr	PRIMASK, r3
}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	438a      	bics	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]
 8005aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af2:	f383 8810 	msr	PRIMASK, r3
}
 8005af6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	228c      	movs	r2, #140	@ 0x8c
 8005afc:	2120      	movs	r1, #32
 8005afe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a34      	ldr	r2, [pc, #208]	@ (8005be4 <UART_RxISR_8BIT+0x1bc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01f      	beq.n	8005b56 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	2380      	movs	r3, #128	@ 0x80
 8005b1e:	041b      	lsls	r3, r3, #16
 8005b20:	4013      	ands	r3, r2
 8005b22:	d018      	beq.n	8005b56 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b24:	f3ef 8310 	mrs	r3, PRIMASK
 8005b28:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b2e:	2301      	movs	r3, #1
 8005b30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f383 8810 	msr	PRIMASK, r3
}
 8005b38:	46c0      	nop			@ (mov r8, r8)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4928      	ldr	r1, [pc, #160]	@ (8005be8 <UART_RxISR_8BIT+0x1c0>)
 8005b46:	400a      	ands	r2, r1
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	f383 8810 	msr	PRIMASK, r3
}
 8005b54:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d12f      	bne.n	8005bbe <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b64:	f3ef 8310 	mrs	r3, PRIMASK
 8005b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b6a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b6e:	2301      	movs	r3, #1
 8005b70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f383 8810 	msr	PRIMASK, r3
}
 8005b78:	46c0      	nop			@ (mov r8, r8)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2110      	movs	r1, #16
 8005b86:	438a      	bics	r2, r1
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f383 8810 	msr	PRIMASK, r3
}
 8005b94:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d103      	bne.n	8005bac <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2210      	movs	r2, #16
 8005baa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	225c      	movs	r2, #92	@ 0x5c
 8005bb0:	5a9a      	ldrh	r2, [r3, r2]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	0011      	movs	r1, r2
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7ff f8d0 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bbc:	e00c      	b.n	8005bd8 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f7fa ff17 	bl	80009f4 <HAL_UART_RxCpltCallback>
}
 8005bc6:	e007      	b.n	8005bd8 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2108      	movs	r1, #8
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	619a      	str	r2, [r3, #24]
}
 8005bd8:	46c0      	nop			@ (mov r8, r8)
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b014      	add	sp, #80	@ 0x50
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	fffffedf 	.word	0xfffffedf
 8005be4:	40008000 	.word	0x40008000
 8005be8:	fbffffff 	.word	0xfbffffff

08005bec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b094      	sub	sp, #80	@ 0x50
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bf4:	204e      	movs	r0, #78	@ 0x4e
 8005bf6:	183b      	adds	r3, r7, r0
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	2160      	movs	r1, #96	@ 0x60
 8005bfc:	5a52      	ldrh	r2, [r2, r1]
 8005bfe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	228c      	movs	r2, #140	@ 0x8c
 8005c04:	589b      	ldr	r3, [r3, r2]
 8005c06:	2b22      	cmp	r3, #34	@ 0x22
 8005c08:	d000      	beq.n	8005c0c <UART_RxISR_16BIT+0x20>
 8005c0a:	e0bf      	b.n	8005d8c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c12:	214c      	movs	r1, #76	@ 0x4c
 8005c14:	187b      	adds	r3, r7, r1
 8005c16:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c1e:	187b      	adds	r3, r7, r1
 8005c20:	183a      	adds	r2, r7, r0
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	8812      	ldrh	r2, [r2, #0]
 8005c26:	4013      	ands	r3, r2
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c32:	1c9a      	adds	r2, r3, #2
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	225e      	movs	r2, #94	@ 0x5e
 8005c3c:	5a9b      	ldrh	r3, [r3, r2]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b299      	uxth	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	225e      	movs	r2, #94	@ 0x5e
 8005c48:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	225e      	movs	r2, #94	@ 0x5e
 8005c4e:	5a9b      	ldrh	r3, [r3, r2]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d000      	beq.n	8005c58 <UART_RxISR_16BIT+0x6c>
 8005c56:	e0a1      	b.n	8005d9c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c58:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5c:	623b      	str	r3, [r7, #32]
  return(result);
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c62:	2301      	movs	r3, #1
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	f383 8810 	msr	PRIMASK, r3
}
 8005c6c:	46c0      	nop			@ (mov r8, r8)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	494a      	ldr	r1, [pc, #296]	@ (8005da4 <UART_RxISR_16BIT+0x1b8>)
 8005c7a:	400a      	ands	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	f383 8810 	msr	PRIMASK, r3
}
 8005c88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c94:	2301      	movs	r3, #1
 8005c96:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	f383 8810 	msr	PRIMASK, r3
}
 8005c9e:	46c0      	nop			@ (mov r8, r8)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2101      	movs	r1, #1
 8005cac:	438a      	bics	r2, r1
 8005cae:	609a      	str	r2, [r3, #8]
 8005cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb6:	f383 8810 	msr	PRIMASK, r3
}
 8005cba:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	228c      	movs	r2, #140	@ 0x8c
 8005cc0:	2120      	movs	r1, #32
 8005cc2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a34      	ldr	r2, [pc, #208]	@ (8005da8 <UART_RxISR_16BIT+0x1bc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01f      	beq.n	8005d1a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d018      	beq.n	8005d1a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cec:	617b      	str	r3, [r7, #20]
  return(result);
 8005cee:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	f383 8810 	msr	PRIMASK, r3
}
 8005cfc:	46c0      	nop			@ (mov r8, r8)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4928      	ldr	r1, [pc, #160]	@ (8005dac <UART_RxISR_16BIT+0x1c0>)
 8005d0a:	400a      	ands	r2, r1
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f383 8810 	msr	PRIMASK, r3
}
 8005d18:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d12f      	bne.n	8005d82 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d28:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d2e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d32:	2301      	movs	r3, #1
 8005d34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f383 8810 	msr	PRIMASK, r3
}
 8005d3c:	46c0      	nop			@ (mov r8, r8)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2110      	movs	r1, #16
 8005d4a:	438a      	bics	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f383 8810 	msr	PRIMASK, r3
}
 8005d58:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	2210      	movs	r2, #16
 8005d62:	4013      	ands	r3, r2
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d103      	bne.n	8005d70 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2210      	movs	r2, #16
 8005d6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	225c      	movs	r2, #92	@ 0x5c
 8005d74:	5a9a      	ldrh	r2, [r3, r2]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0011      	movs	r1, r2
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	f7fe ffee 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d80:	e00c      	b.n	8005d9c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7fa fe35 	bl	80009f4 <HAL_UART_RxCpltCallback>
}
 8005d8a:	e007      	b.n	8005d9c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2108      	movs	r1, #8
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	619a      	str	r2, [r3, #24]
}
 8005d9c:	46c0      	nop			@ (mov r8, r8)
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b014      	add	sp, #80	@ 0x50
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	fffffedf 	.word	0xfffffedf
 8005da8:	40008000 	.word	0x40008000
 8005dac:	fbffffff 	.word	0xfbffffff

08005db0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b0a0      	sub	sp, #128	@ 0x80
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005db8:	237a      	movs	r3, #122	@ 0x7a
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	2160      	movs	r1, #96	@ 0x60
 8005dc0:	5a52      	ldrh	r2, [r2, r1]
 8005dc2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	228c      	movs	r2, #140	@ 0x8c
 8005de0:	589b      	ldr	r3, [r3, r2]
 8005de2:	2b22      	cmp	r3, #34	@ 0x22
 8005de4:	d000      	beq.n	8005de8 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005de6:	e16a      	b.n	80060be <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005de8:	236e      	movs	r3, #110	@ 0x6e
 8005dea:	18fb      	adds	r3, r7, r3
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	2168      	movs	r1, #104	@ 0x68
 8005df0:	5a52      	ldrh	r2, [r2, r1]
 8005df2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005df4:	e111      	b.n	800601a <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dfc:	216c      	movs	r1, #108	@ 0x6c
 8005dfe:	187b      	adds	r3, r7, r1
 8005e00:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e02:	187b      	adds	r3, r7, r1
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	237a      	movs	r3, #122	@ 0x7a
 8005e0a:	18fb      	adds	r3, r7, r3
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b2d9      	uxtb	r1, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e14:	400a      	ands	r2, r1
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	225e      	movs	r2, #94	@ 0x5e
 8005e28:	5a9b      	ldrh	r3, [r3, r2]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b299      	uxth	r1, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	225e      	movs	r2, #94	@ 0x5e
 8005e34:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e40:	2207      	movs	r2, #7
 8005e42:	4013      	ands	r3, r2
 8005e44:	d049      	beq.n	8005eda <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e48:	2201      	movs	r2, #1
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d010      	beq.n	8005e70 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005e4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005e50:	2380      	movs	r3, #128	@ 0x80
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4013      	ands	r3, r2
 8005e56:	d00b      	beq.n	8005e70 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2290      	movs	r2, #144	@ 0x90
 8005e64:	589b      	ldr	r3, [r3, r2]
 8005e66:	2201      	movs	r2, #1
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2190      	movs	r1, #144	@ 0x90
 8005e6e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e72:	2202      	movs	r2, #2
 8005e74:	4013      	ands	r3, r2
 8005e76:	d00f      	beq.n	8005e98 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005e78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d00b      	beq.n	8005e98 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2202      	movs	r2, #2
 8005e86:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2290      	movs	r2, #144	@ 0x90
 8005e8c:	589b      	ldr	r3, [r3, r2]
 8005e8e:	2204      	movs	r2, #4
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2190      	movs	r1, #144	@ 0x90
 8005e96:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e9a:	2204      	movs	r2, #4
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d00f      	beq.n	8005ec0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005ea0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2204      	movs	r2, #4
 8005eae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2290      	movs	r2, #144	@ 0x90
 8005eb4:	589b      	ldr	r3, [r3, r2]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2190      	movs	r1, #144	@ 0x90
 8005ebe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2290      	movs	r2, #144	@ 0x90
 8005ec4:	589b      	ldr	r3, [r3, r2]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f7fe ff3d 	bl	8004d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2290      	movs	r2, #144	@ 0x90
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	225e      	movs	r2, #94	@ 0x5e
 8005ede:	5a9b      	ldrh	r3, [r3, r2]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d000      	beq.n	8005ee8 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005ee6:	e098      	b.n	800601a <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8005eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef8:	f383 8810 	msr	PRIMASK, r3
}
 8005efc:	46c0      	nop			@ (mov r8, r8)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4973      	ldr	r1, [pc, #460]	@ (80060d8 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005f0a:	400a      	ands	r2, r1
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f10:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f14:	f383 8810 	msr	PRIMASK, r3
}
 8005f18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f1e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f22:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f24:	2301      	movs	r3, #1
 8005f26:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f2a:	f383 8810 	msr	PRIMASK, r3
}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4968      	ldr	r1, [pc, #416]	@ (80060dc <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005f3c:	400a      	ands	r2, r1
 8005f3e:	609a      	str	r2, [r3, #8]
 8005f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f46:	f383 8810 	msr	PRIMASK, r3
}
 8005f4a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	228c      	movs	r2, #140	@ 0x8c
 8005f50:	2120      	movs	r1, #32
 8005f52:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a5e      	ldr	r2, [pc, #376]	@ (80060e0 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01f      	beq.n	8005faa <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	2380      	movs	r3, #128	@ 0x80
 8005f72:	041b      	lsls	r3, r3, #16
 8005f74:	4013      	ands	r3, r2
 8005f76:	d018      	beq.n	8005faa <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f78:	f3ef 8310 	mrs	r3, PRIMASK
 8005f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f80:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f82:	2301      	movs	r3, #1
 8005f84:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	f383 8810 	msr	PRIMASK, r3
}
 8005f8c:	46c0      	nop			@ (mov r8, r8)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4952      	ldr	r1, [pc, #328]	@ (80060e4 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8005f9a:	400a      	ands	r2, r1
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa4:	f383 8810 	msr	PRIMASK, r3
}
 8005fa8:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d12f      	bne.n	8006012 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fbc:	623b      	str	r3, [r7, #32]
  return(result);
 8005fbe:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	f383 8810 	msr	PRIMASK, r3
}
 8005fcc:	46c0      	nop			@ (mov r8, r8)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2110      	movs	r1, #16
 8005fda:	438a      	bics	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe4:	f383 8810 	msr	PRIMASK, r3
}
 8005fe8:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d103      	bne.n	8006000 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	225c      	movs	r2, #92	@ 0x5c
 8006004:	5a9a      	ldrh	r2, [r3, r2]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	0011      	movs	r1, r2
 800600a:	0018      	movs	r0, r3
 800600c:	f7fe fea6 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
 8006010:	e003      	b.n	800601a <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	0018      	movs	r0, r3
 8006016:	f7fa fced 	bl	80009f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800601a:	236e      	movs	r3, #110	@ 0x6e
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8006024:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006026:	2220      	movs	r2, #32
 8006028:	4013      	ands	r3, r2
 800602a:	d000      	beq.n	800602e <UART_RxISR_8BIT_FIFOEN+0x27e>
 800602c:	e6e3      	b.n	8005df6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800602e:	205a      	movs	r0, #90	@ 0x5a
 8006030:	183b      	adds	r3, r7, r0
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	215e      	movs	r1, #94	@ 0x5e
 8006036:	5a52      	ldrh	r2, [r2, r1]
 8006038:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800603a:	0001      	movs	r1, r0
 800603c:	187b      	adds	r3, r7, r1
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d044      	beq.n	80060ce <UART_RxISR_8BIT_FIFOEN+0x31e>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2268      	movs	r2, #104	@ 0x68
 8006048:	5a9b      	ldrh	r3, [r3, r2]
 800604a:	187a      	adds	r2, r7, r1
 800604c:	8812      	ldrh	r2, [r2, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d23d      	bcs.n	80060ce <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006052:	f3ef 8310 	mrs	r3, PRIMASK
 8006056:	60bb      	str	r3, [r7, #8]
  return(result);
 8006058:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800605a:	657b      	str	r3, [r7, #84]	@ 0x54
 800605c:	2301      	movs	r3, #1
 800605e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f383 8810 	msr	PRIMASK, r3
}
 8006066:	46c0      	nop			@ (mov r8, r8)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	491d      	ldr	r1, [pc, #116]	@ (80060e8 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8006074:	400a      	ands	r2, r1
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800607a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f383 8810 	msr	PRIMASK, r3
}
 8006082:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a19      	ldr	r2, [pc, #100]	@ (80060ec <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8006088:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608a:	f3ef 8310 	mrs	r3, PRIMASK
 800608e:	617b      	str	r3, [r7, #20]
  return(result);
 8006090:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006092:	653b      	str	r3, [r7, #80]	@ 0x50
 8006094:	2301      	movs	r3, #1
 8006096:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f383 8810 	msr	PRIMASK, r3
}
 800609e:	46c0      	nop			@ (mov r8, r8)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2120      	movs	r1, #32
 80060ac:	430a      	orrs	r2, r1
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f383 8810 	msr	PRIMASK, r3
}
 80060ba:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060bc:	e007      	b.n	80060ce <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699a      	ldr	r2, [r3, #24]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2108      	movs	r1, #8
 80060ca:	430a      	orrs	r2, r1
 80060cc:	619a      	str	r2, [r3, #24]
}
 80060ce:	46c0      	nop			@ (mov r8, r8)
 80060d0:	46bd      	mov	sp, r7
 80060d2:	b020      	add	sp, #128	@ 0x80
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	fffffeff 	.word	0xfffffeff
 80060dc:	effffffe 	.word	0xeffffffe
 80060e0:	40008000 	.word	0x40008000
 80060e4:	fbffffff 	.word	0xfbffffff
 80060e8:	efffffff 	.word	0xefffffff
 80060ec:	08005a29 	.word	0x08005a29

080060f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b0a2      	sub	sp, #136	@ 0x88
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80060f8:	2382      	movs	r3, #130	@ 0x82
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	2160      	movs	r1, #96	@ 0x60
 8006100:	5a52      	ldrh	r2, [r2, r1]
 8006102:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	2284      	movs	r2, #132	@ 0x84
 800610c:	18ba      	adds	r2, r7, r2
 800610e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	228c      	movs	r2, #140	@ 0x8c
 8006124:	589b      	ldr	r3, [r3, r2]
 8006126:	2b22      	cmp	r3, #34	@ 0x22
 8006128:	d000      	beq.n	800612c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800612a:	e174      	b.n	8006416 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800612c:	2376      	movs	r3, #118	@ 0x76
 800612e:	18fb      	adds	r3, r7, r3
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	2168      	movs	r1, #104	@ 0x68
 8006134:	5a52      	ldrh	r2, [r2, r1]
 8006136:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006138:	e119      	b.n	800636e <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006140:	2174      	movs	r1, #116	@ 0x74
 8006142:	187b      	adds	r3, r7, r1
 8006144:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800614a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800614c:	187b      	adds	r3, r7, r1
 800614e:	2282      	movs	r2, #130	@ 0x82
 8006150:	18ba      	adds	r2, r7, r2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	8812      	ldrh	r2, [r2, #0]
 8006156:	4013      	ands	r3, r2
 8006158:	b29a      	uxth	r2, r3
 800615a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800615c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006162:	1c9a      	adds	r2, r3, #2
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	225e      	movs	r2, #94	@ 0x5e
 800616c:	5a9b      	ldrh	r3, [r3, r2]
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b299      	uxth	r1, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	225e      	movs	r2, #94	@ 0x5e
 8006178:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2184      	movs	r1, #132	@ 0x84
 8006182:	187a      	adds	r2, r7, r1
 8006184:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006186:	187b      	adds	r3, r7, r1
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2207      	movs	r2, #7
 800618c:	4013      	ands	r3, r2
 800618e:	d04e      	beq.n	800622e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006190:	187b      	adds	r3, r7, r1
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2201      	movs	r2, #1
 8006196:	4013      	ands	r3, r2
 8006198:	d010      	beq.n	80061bc <UART_RxISR_16BIT_FIFOEN+0xcc>
 800619a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800619c:	2380      	movs	r3, #128	@ 0x80
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	4013      	ands	r3, r2
 80061a2:	d00b      	beq.n	80061bc <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2201      	movs	r2, #1
 80061aa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2290      	movs	r2, #144	@ 0x90
 80061b0:	589b      	ldr	r3, [r3, r2]
 80061b2:	2201      	movs	r2, #1
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2190      	movs	r1, #144	@ 0x90
 80061ba:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061bc:	2384      	movs	r3, #132	@ 0x84
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2202      	movs	r2, #2
 80061c4:	4013      	ands	r3, r2
 80061c6:	d00f      	beq.n	80061e8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80061c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061ca:	2201      	movs	r2, #1
 80061cc:	4013      	ands	r3, r2
 80061ce:	d00b      	beq.n	80061e8 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2202      	movs	r2, #2
 80061d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2290      	movs	r2, #144	@ 0x90
 80061dc:	589b      	ldr	r3, [r3, r2]
 80061de:	2204      	movs	r2, #4
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2190      	movs	r1, #144	@ 0x90
 80061e6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e8:	2384      	movs	r3, #132	@ 0x84
 80061ea:	18fb      	adds	r3, r7, r3
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2204      	movs	r2, #4
 80061f0:	4013      	ands	r3, r2
 80061f2:	d00f      	beq.n	8006214 <UART_RxISR_16BIT_FIFOEN+0x124>
 80061f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061f6:	2201      	movs	r2, #1
 80061f8:	4013      	ands	r3, r2
 80061fa:	d00b      	beq.n	8006214 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2204      	movs	r2, #4
 8006202:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2290      	movs	r2, #144	@ 0x90
 8006208:	589b      	ldr	r3, [r3, r2]
 800620a:	2202      	movs	r2, #2
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2190      	movs	r1, #144	@ 0x90
 8006212:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2290      	movs	r2, #144	@ 0x90
 8006218:	589b      	ldr	r3, [r3, r2]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	0018      	movs	r0, r3
 8006222:	f7fe fd93 	bl	8004d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2290      	movs	r2, #144	@ 0x90
 800622a:	2100      	movs	r1, #0
 800622c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	225e      	movs	r2, #94	@ 0x5e
 8006232:	5a9b      	ldrh	r3, [r3, r2]
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d000      	beq.n	800623c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800623a:	e098      	b.n	800636e <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800623c:	f3ef 8310 	mrs	r3, PRIMASK
 8006240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006244:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006246:	2301      	movs	r3, #1
 8006248:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800624a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624c:	f383 8810 	msr	PRIMASK, r3
}
 8006250:	46c0      	nop			@ (mov r8, r8)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4974      	ldr	r1, [pc, #464]	@ (8006430 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800625e:	400a      	ands	r2, r1
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006264:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006268:	f383 8810 	msr	PRIMASK, r3
}
 800626c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800626e:	f3ef 8310 	mrs	r3, PRIMASK
 8006272:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006276:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006278:	2301      	movs	r3, #1
 800627a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800627e:	f383 8810 	msr	PRIMASK, r3
}
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4969      	ldr	r1, [pc, #420]	@ (8006434 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8006290:	400a      	ands	r2, r1
 8006292:	609a      	str	r2, [r3, #8]
 8006294:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006296:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800629a:	f383 8810 	msr	PRIMASK, r3
}
 800629e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	228c      	movs	r2, #140	@ 0x8c
 80062a4:	2120      	movs	r1, #32
 80062a6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a5f      	ldr	r2, [pc, #380]	@ (8006438 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01f      	beq.n	80062fe <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	2380      	movs	r3, #128	@ 0x80
 80062c6:	041b      	lsls	r3, r3, #16
 80062c8:	4013      	ands	r3, r2
 80062ca:	d018      	beq.n	80062fe <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062cc:	f3ef 8310 	mrs	r3, PRIMASK
 80062d0:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80062d6:	2301      	movs	r3, #1
 80062d8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062dc:	f383 8810 	msr	PRIMASK, r3
}
 80062e0:	46c0      	nop			@ (mov r8, r8)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4953      	ldr	r1, [pc, #332]	@ (800643c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80062ee:	400a      	ands	r2, r1
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f8:	f383 8810 	msr	PRIMASK, r3
}
 80062fc:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006302:	2b01      	cmp	r3, #1
 8006304:	d12f      	bne.n	8006366 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800630c:	f3ef 8310 	mrs	r3, PRIMASK
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006314:	663b      	str	r3, [r7, #96]	@ 0x60
 8006316:	2301      	movs	r3, #1
 8006318:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631c:	f383 8810 	msr	PRIMASK, r3
}
 8006320:	46c0      	nop			@ (mov r8, r8)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2110      	movs	r1, #16
 800632e:	438a      	bics	r2, r1
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006338:	f383 8810 	msr	PRIMASK, r3
}
 800633c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	2210      	movs	r2, #16
 8006346:	4013      	ands	r3, r2
 8006348:	2b10      	cmp	r3, #16
 800634a:	d103      	bne.n	8006354 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2210      	movs	r2, #16
 8006352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	225c      	movs	r2, #92	@ 0x5c
 8006358:	5a9a      	ldrh	r2, [r3, r2]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0011      	movs	r1, r2
 800635e:	0018      	movs	r0, r3
 8006360:	f7fe fcfc 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
 8006364:	e003      	b.n	800636e <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	0018      	movs	r0, r3
 800636a:	f7fa fb43 	bl	80009f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800636e:	2376      	movs	r3, #118	@ 0x76
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d006      	beq.n	8006386 <UART_RxISR_16BIT_FIFOEN+0x296>
 8006378:	2384      	movs	r3, #132	@ 0x84
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2220      	movs	r2, #32
 8006380:	4013      	ands	r3, r2
 8006382:	d000      	beq.n	8006386 <UART_RxISR_16BIT_FIFOEN+0x296>
 8006384:	e6d9      	b.n	800613a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006386:	205e      	movs	r0, #94	@ 0x5e
 8006388:	183b      	adds	r3, r7, r0
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	215e      	movs	r1, #94	@ 0x5e
 800638e:	5a52      	ldrh	r2, [r2, r1]
 8006390:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006392:	0001      	movs	r1, r0
 8006394:	187b      	adds	r3, r7, r1
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d044      	beq.n	8006426 <UART_RxISR_16BIT_FIFOEN+0x336>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2268      	movs	r2, #104	@ 0x68
 80063a0:	5a9b      	ldrh	r3, [r3, r2]
 80063a2:	187a      	adds	r2, r7, r1
 80063a4:	8812      	ldrh	r2, [r2, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d23d      	bcs.n	8006426 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063aa:	f3ef 8310 	mrs	r3, PRIMASK
 80063ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80063b0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063b4:	2301      	movs	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f383 8810 	msr	PRIMASK, r3
}
 80063be:	46c0      	nop			@ (mov r8, r8)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	491d      	ldr	r1, [pc, #116]	@ (8006440 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80063cc:	400a      	ands	r2, r1
 80063ce:	609a      	str	r2, [r3, #8]
 80063d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f383 8810 	msr	PRIMASK, r3
}
 80063da:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a19      	ldr	r2, [pc, #100]	@ (8006444 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80063e0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e2:	f3ef 8310 	mrs	r3, PRIMASK
 80063e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80063e8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80063ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80063ec:	2301      	movs	r3, #1
 80063ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f383 8810 	msr	PRIMASK, r3
}
 80063f6:	46c0      	nop			@ (mov r8, r8)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2120      	movs	r1, #32
 8006404:	430a      	orrs	r2, r1
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	f383 8810 	msr	PRIMASK, r3
}
 8006412:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006414:	e007      	b.n	8006426 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2108      	movs	r1, #8
 8006422:	430a      	orrs	r2, r1
 8006424:	619a      	str	r2, [r3, #24]
}
 8006426:	46c0      	nop			@ (mov r8, r8)
 8006428:	46bd      	mov	sp, r7
 800642a:	b022      	add	sp, #136	@ 0x88
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	fffffeff 	.word	0xfffffeff
 8006434:	effffffe 	.word	0xeffffffe
 8006438:	40008000 	.word	0x40008000
 800643c:	fbffffff 	.word	0xfbffffff
 8006440:	efffffff 	.word	0xefffffff
 8006444:	08005bed 	.word	0x08005bed

08006448 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006450:	46c0      	nop			@ (mov r8, r8)
 8006452:	46bd      	mov	sp, r7
 8006454:	b002      	add	sp, #8
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006460:	46c0      	nop			@ (mov r8, r8)
 8006462:	46bd      	mov	sp, r7
 8006464:	b002      	add	sp, #8
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006470:	46c0      	nop			@ (mov r8, r8)
 8006472:	46bd      	mov	sp, r7
 8006474:	b002      	add	sp, #8
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2284      	movs	r2, #132	@ 0x84
 8006484:	5c9b      	ldrb	r3, [r3, r2]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_UARTEx_DisableFifoMode+0x16>
 800648a:	2302      	movs	r3, #2
 800648c:	e027      	b.n	80064de <HAL_UARTEx_DisableFifoMode+0x66>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2284      	movs	r2, #132	@ 0x84
 8006492:	2101      	movs	r1, #1
 8006494:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2288      	movs	r2, #136	@ 0x88
 800649a:	2124      	movs	r1, #36	@ 0x24
 800649c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2101      	movs	r1, #1
 80064b2:	438a      	bics	r2, r1
 80064b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a0b      	ldr	r2, [pc, #44]	@ (80064e8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2288      	movs	r2, #136	@ 0x88
 80064d0:	2120      	movs	r1, #32
 80064d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2284      	movs	r2, #132	@ 0x84
 80064d8:	2100      	movs	r1, #0
 80064da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	0018      	movs	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b004      	add	sp, #16
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			@ (mov r8, r8)
 80064e8:	dfffffff 	.word	0xdfffffff

080064ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2284      	movs	r2, #132	@ 0x84
 80064fa:	5c9b      	ldrb	r3, [r3, r2]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006500:	2302      	movs	r3, #2
 8006502:	e02e      	b.n	8006562 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2284      	movs	r2, #132	@ 0x84
 8006508:	2101      	movs	r1, #1
 800650a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2288      	movs	r2, #136	@ 0x88
 8006510:	2124      	movs	r1, #36	@ 0x24
 8006512:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2101      	movs	r1, #1
 8006528:	438a      	bics	r2, r1
 800652a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	08d9      	lsrs	r1, r3, #3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	0018      	movs	r0, r3
 8006544:	f000 f854 	bl	80065f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2288      	movs	r2, #136	@ 0x88
 8006554:	2120      	movs	r1, #32
 8006556:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2284      	movs	r2, #132	@ 0x84
 800655c:	2100      	movs	r1, #0
 800655e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	0018      	movs	r0, r3
 8006564:	46bd      	mov	sp, r7
 8006566:	b004      	add	sp, #16
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2284      	movs	r2, #132	@ 0x84
 800657a:	5c9b      	ldrb	r3, [r3, r2]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006580:	2302      	movs	r3, #2
 8006582:	e02f      	b.n	80065e4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2284      	movs	r2, #132	@ 0x84
 8006588:	2101      	movs	r1, #1
 800658a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2288      	movs	r2, #136	@ 0x88
 8006590:	2124      	movs	r1, #36	@ 0x24
 8006592:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2101      	movs	r1, #1
 80065a8:	438a      	bics	r2, r1
 80065aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	4a0e      	ldr	r2, [pc, #56]	@ (80065ec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	0019      	movs	r1, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	0018      	movs	r0, r3
 80065c6:	f000 f813 	bl	80065f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2288      	movs	r2, #136	@ 0x88
 80065d6:	2120      	movs	r1, #32
 80065d8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2284      	movs	r2, #132	@ 0x84
 80065de:	2100      	movs	r1, #0
 80065e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	0018      	movs	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b004      	add	sp, #16
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	f1ffffff 	.word	0xf1ffffff

080065f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d108      	bne.n	8006612 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	226a      	movs	r2, #106	@ 0x6a
 8006604:	2101      	movs	r1, #1
 8006606:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2268      	movs	r2, #104	@ 0x68
 800660c:	2101      	movs	r1, #1
 800660e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006610:	e043      	b.n	800669a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006612:	260f      	movs	r6, #15
 8006614:	19bb      	adds	r3, r7, r6
 8006616:	2208      	movs	r2, #8
 8006618:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800661a:	200e      	movs	r0, #14
 800661c:	183b      	adds	r3, r7, r0
 800661e:	2208      	movs	r2, #8
 8006620:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	0e5b      	lsrs	r3, r3, #25
 800662a:	b2da      	uxtb	r2, r3
 800662c:	240d      	movs	r4, #13
 800662e:	193b      	adds	r3, r7, r4
 8006630:	2107      	movs	r1, #7
 8006632:	400a      	ands	r2, r1
 8006634:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	0f5b      	lsrs	r3, r3, #29
 800663e:	b2da      	uxtb	r2, r3
 8006640:	250c      	movs	r5, #12
 8006642:	197b      	adds	r3, r7, r5
 8006644:	2107      	movs	r1, #7
 8006646:	400a      	ands	r2, r1
 8006648:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800664a:	183b      	adds	r3, r7, r0
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	197a      	adds	r2, r7, r5
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	4914      	ldr	r1, [pc, #80]	@ (80066a4 <UARTEx_SetNbDataToProcess+0xb4>)
 8006654:	5c8a      	ldrb	r2, [r1, r2]
 8006656:	435a      	muls	r2, r3
 8006658:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800665a:	197b      	adds	r3, r7, r5
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	4a12      	ldr	r2, [pc, #72]	@ (80066a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8006660:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006662:	0019      	movs	r1, r3
 8006664:	f7f9 fde2 	bl	800022c <__divsi3>
 8006668:	0003      	movs	r3, r0
 800666a:	b299      	uxth	r1, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	226a      	movs	r2, #106	@ 0x6a
 8006670:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006672:	19bb      	adds	r3, r7, r6
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	193a      	adds	r2, r7, r4
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	490a      	ldr	r1, [pc, #40]	@ (80066a4 <UARTEx_SetNbDataToProcess+0xb4>)
 800667c:	5c8a      	ldrb	r2, [r1, r2]
 800667e:	435a      	muls	r2, r3
 8006680:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006682:	193b      	adds	r3, r7, r4
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	4a08      	ldr	r2, [pc, #32]	@ (80066a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8006688:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800668a:	0019      	movs	r1, r3
 800668c:	f7f9 fdce 	bl	800022c <__divsi3>
 8006690:	0003      	movs	r3, r0
 8006692:	b299      	uxth	r1, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2268      	movs	r2, #104	@ 0x68
 8006698:	5299      	strh	r1, [r3, r2]
}
 800669a:	46c0      	nop			@ (mov r8, r8)
 800669c:	46bd      	mov	sp, r7
 800669e:	b005      	add	sp, #20
 80066a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066a2:	46c0      	nop			@ (mov r8, r8)
 80066a4:	080071a8 	.word	0x080071a8
 80066a8:	080071b0 	.word	0x080071b0

080066ac <_vsniprintf_r>:
 80066ac:	b530      	push	{r4, r5, lr}
 80066ae:	0005      	movs	r5, r0
 80066b0:	0014      	movs	r4, r2
 80066b2:	0008      	movs	r0, r1
 80066b4:	001a      	movs	r2, r3
 80066b6:	b09b      	sub	sp, #108	@ 0x6c
 80066b8:	2c00      	cmp	r4, #0
 80066ba:	da05      	bge.n	80066c8 <_vsniprintf_r+0x1c>
 80066bc:	238b      	movs	r3, #139	@ 0x8b
 80066be:	2001      	movs	r0, #1
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	4240      	negs	r0, r0
 80066c4:	b01b      	add	sp, #108	@ 0x6c
 80066c6:	bd30      	pop	{r4, r5, pc}
 80066c8:	2382      	movs	r3, #130	@ 0x82
 80066ca:	4669      	mov	r1, sp
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	818b      	strh	r3, [r1, #12]
 80066d0:	2100      	movs	r1, #0
 80066d2:	9000      	str	r0, [sp, #0]
 80066d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80066d6:	9004      	str	r0, [sp, #16]
 80066d8:	428c      	cmp	r4, r1
 80066da:	d000      	beq.n	80066de <_vsniprintf_r+0x32>
 80066dc:	1e61      	subs	r1, r4, #1
 80066de:	2301      	movs	r3, #1
 80066e0:	9102      	str	r1, [sp, #8]
 80066e2:	9105      	str	r1, [sp, #20]
 80066e4:	4669      	mov	r1, sp
 80066e6:	425b      	negs	r3, r3
 80066e8:	81cb      	strh	r3, [r1, #14]
 80066ea:	0028      	movs	r0, r5
 80066ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80066ee:	f000 f9a7 	bl	8006a40 <_svfiprintf_r>
 80066f2:	1c43      	adds	r3, r0, #1
 80066f4:	da01      	bge.n	80066fa <_vsniprintf_r+0x4e>
 80066f6:	238b      	movs	r3, #139	@ 0x8b
 80066f8:	602b      	str	r3, [r5, #0]
 80066fa:	2c00      	cmp	r4, #0
 80066fc:	d0e2      	beq.n	80066c4 <_vsniprintf_r+0x18>
 80066fe:	2200      	movs	r2, #0
 8006700:	9b00      	ldr	r3, [sp, #0]
 8006702:	701a      	strb	r2, [r3, #0]
 8006704:	e7de      	b.n	80066c4 <_vsniprintf_r+0x18>
	...

08006708 <vsniprintf>:
 8006708:	b513      	push	{r0, r1, r4, lr}
 800670a:	4c04      	ldr	r4, [pc, #16]	@ (800671c <vsniprintf+0x14>)
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	0013      	movs	r3, r2
 8006710:	000a      	movs	r2, r1
 8006712:	0001      	movs	r1, r0
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	f7ff ffc9 	bl	80066ac <_vsniprintf_r>
 800671a:	bd16      	pop	{r1, r2, r4, pc}
 800671c:	20000010 	.word	0x20000010

08006720 <memset>:
 8006720:	0003      	movs	r3, r0
 8006722:	1882      	adds	r2, r0, r2
 8006724:	4293      	cmp	r3, r2
 8006726:	d100      	bne.n	800672a <memset+0xa>
 8006728:	4770      	bx	lr
 800672a:	7019      	strb	r1, [r3, #0]
 800672c:	3301      	adds	r3, #1
 800672e:	e7f9      	b.n	8006724 <memset+0x4>

08006730 <__errno>:
 8006730:	4b01      	ldr	r3, [pc, #4]	@ (8006738 <__errno+0x8>)
 8006732:	6818      	ldr	r0, [r3, #0]
 8006734:	4770      	bx	lr
 8006736:	46c0      	nop			@ (mov r8, r8)
 8006738:	20000010 	.word	0x20000010

0800673c <__libc_init_array>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	2600      	movs	r6, #0
 8006740:	4c0c      	ldr	r4, [pc, #48]	@ (8006774 <__libc_init_array+0x38>)
 8006742:	4d0d      	ldr	r5, [pc, #52]	@ (8006778 <__libc_init_array+0x3c>)
 8006744:	1b64      	subs	r4, r4, r5
 8006746:	10a4      	asrs	r4, r4, #2
 8006748:	42a6      	cmp	r6, r4
 800674a:	d109      	bne.n	8006760 <__libc_init_array+0x24>
 800674c:	2600      	movs	r6, #0
 800674e:	f000 fc61 	bl	8007014 <_init>
 8006752:	4c0a      	ldr	r4, [pc, #40]	@ (800677c <__libc_init_array+0x40>)
 8006754:	4d0a      	ldr	r5, [pc, #40]	@ (8006780 <__libc_init_array+0x44>)
 8006756:	1b64      	subs	r4, r4, r5
 8006758:	10a4      	asrs	r4, r4, #2
 800675a:	42a6      	cmp	r6, r4
 800675c:	d105      	bne.n	800676a <__libc_init_array+0x2e>
 800675e:	bd70      	pop	{r4, r5, r6, pc}
 8006760:	00b3      	lsls	r3, r6, #2
 8006762:	58eb      	ldr	r3, [r5, r3]
 8006764:	4798      	blx	r3
 8006766:	3601      	adds	r6, #1
 8006768:	e7ee      	b.n	8006748 <__libc_init_array+0xc>
 800676a:	00b3      	lsls	r3, r6, #2
 800676c:	58eb      	ldr	r3, [r5, r3]
 800676e:	4798      	blx	r3
 8006770:	3601      	adds	r6, #1
 8006772:	e7f2      	b.n	800675a <__libc_init_array+0x1e>
 8006774:	080071f4 	.word	0x080071f4
 8006778:	080071f4 	.word	0x080071f4
 800677c:	080071f8 	.word	0x080071f8
 8006780:	080071f4 	.word	0x080071f4

08006784 <__retarget_lock_acquire_recursive>:
 8006784:	4770      	bx	lr

08006786 <__retarget_lock_release_recursive>:
 8006786:	4770      	bx	lr

08006788 <_free_r>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	0005      	movs	r5, r0
 800678c:	1e0c      	subs	r4, r1, #0
 800678e:	d010      	beq.n	80067b2 <_free_r+0x2a>
 8006790:	3c04      	subs	r4, #4
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	da00      	bge.n	800679a <_free_r+0x12>
 8006798:	18e4      	adds	r4, r4, r3
 800679a:	0028      	movs	r0, r5
 800679c:	f000 f8e0 	bl	8006960 <__malloc_lock>
 80067a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006818 <_free_r+0x90>)
 80067a2:	6813      	ldr	r3, [r2, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <_free_r+0x2c>
 80067a8:	6063      	str	r3, [r4, #4]
 80067aa:	6014      	str	r4, [r2, #0]
 80067ac:	0028      	movs	r0, r5
 80067ae:	f000 f8df 	bl	8006970 <__malloc_unlock>
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	d908      	bls.n	80067ca <_free_r+0x42>
 80067b8:	6820      	ldr	r0, [r4, #0]
 80067ba:	1821      	adds	r1, r4, r0
 80067bc:	428b      	cmp	r3, r1
 80067be:	d1f3      	bne.n	80067a8 <_free_r+0x20>
 80067c0:	6819      	ldr	r1, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	1809      	adds	r1, r1, r0
 80067c6:	6021      	str	r1, [r4, #0]
 80067c8:	e7ee      	b.n	80067a8 <_free_r+0x20>
 80067ca:	001a      	movs	r2, r3
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <_free_r+0x4e>
 80067d2:	42a3      	cmp	r3, r4
 80067d4:	d9f9      	bls.n	80067ca <_free_r+0x42>
 80067d6:	6811      	ldr	r1, [r2, #0]
 80067d8:	1850      	adds	r0, r2, r1
 80067da:	42a0      	cmp	r0, r4
 80067dc:	d10b      	bne.n	80067f6 <_free_r+0x6e>
 80067de:	6820      	ldr	r0, [r4, #0]
 80067e0:	1809      	adds	r1, r1, r0
 80067e2:	1850      	adds	r0, r2, r1
 80067e4:	6011      	str	r1, [r2, #0]
 80067e6:	4283      	cmp	r3, r0
 80067e8:	d1e0      	bne.n	80067ac <_free_r+0x24>
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	1841      	adds	r1, r0, r1
 80067f0:	6011      	str	r1, [r2, #0]
 80067f2:	6053      	str	r3, [r2, #4]
 80067f4:	e7da      	b.n	80067ac <_free_r+0x24>
 80067f6:	42a0      	cmp	r0, r4
 80067f8:	d902      	bls.n	8006800 <_free_r+0x78>
 80067fa:	230c      	movs	r3, #12
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	e7d5      	b.n	80067ac <_free_r+0x24>
 8006800:	6820      	ldr	r0, [r4, #0]
 8006802:	1821      	adds	r1, r4, r0
 8006804:	428b      	cmp	r3, r1
 8006806:	d103      	bne.n	8006810 <_free_r+0x88>
 8006808:	6819      	ldr	r1, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	1809      	adds	r1, r1, r0
 800680e:	6021      	str	r1, [r4, #0]
 8006810:	6063      	str	r3, [r4, #4]
 8006812:	6054      	str	r4, [r2, #4]
 8006814:	e7ca      	b.n	80067ac <_free_r+0x24>
 8006816:	46c0      	nop			@ (mov r8, r8)
 8006818:	20000348 	.word	0x20000348

0800681c <sbrk_aligned>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	4e0f      	ldr	r6, [pc, #60]	@ (800685c <sbrk_aligned+0x40>)
 8006820:	000d      	movs	r5, r1
 8006822:	6831      	ldr	r1, [r6, #0]
 8006824:	0004      	movs	r4, r0
 8006826:	2900      	cmp	r1, #0
 8006828:	d102      	bne.n	8006830 <sbrk_aligned+0x14>
 800682a:	f000 fb95 	bl	8006f58 <_sbrk_r>
 800682e:	6030      	str	r0, [r6, #0]
 8006830:	0029      	movs	r1, r5
 8006832:	0020      	movs	r0, r4
 8006834:	f000 fb90 	bl	8006f58 <_sbrk_r>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d103      	bne.n	8006844 <sbrk_aligned+0x28>
 800683c:	2501      	movs	r5, #1
 800683e:	426d      	negs	r5, r5
 8006840:	0028      	movs	r0, r5
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	2303      	movs	r3, #3
 8006846:	1cc5      	adds	r5, r0, #3
 8006848:	439d      	bics	r5, r3
 800684a:	42a8      	cmp	r0, r5
 800684c:	d0f8      	beq.n	8006840 <sbrk_aligned+0x24>
 800684e:	1a29      	subs	r1, r5, r0
 8006850:	0020      	movs	r0, r4
 8006852:	f000 fb81 	bl	8006f58 <_sbrk_r>
 8006856:	3001      	adds	r0, #1
 8006858:	d1f2      	bne.n	8006840 <sbrk_aligned+0x24>
 800685a:	e7ef      	b.n	800683c <sbrk_aligned+0x20>
 800685c:	20000344 	.word	0x20000344

08006860 <_malloc_r>:
 8006860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006862:	2203      	movs	r2, #3
 8006864:	1ccb      	adds	r3, r1, #3
 8006866:	4393      	bics	r3, r2
 8006868:	3308      	adds	r3, #8
 800686a:	0005      	movs	r5, r0
 800686c:	001f      	movs	r7, r3
 800686e:	2b0c      	cmp	r3, #12
 8006870:	d234      	bcs.n	80068dc <_malloc_r+0x7c>
 8006872:	270c      	movs	r7, #12
 8006874:	42b9      	cmp	r1, r7
 8006876:	d833      	bhi.n	80068e0 <_malloc_r+0x80>
 8006878:	0028      	movs	r0, r5
 800687a:	f000 f871 	bl	8006960 <__malloc_lock>
 800687e:	4e37      	ldr	r6, [pc, #220]	@ (800695c <_malloc_r+0xfc>)
 8006880:	6833      	ldr	r3, [r6, #0]
 8006882:	001c      	movs	r4, r3
 8006884:	2c00      	cmp	r4, #0
 8006886:	d12f      	bne.n	80068e8 <_malloc_r+0x88>
 8006888:	0039      	movs	r1, r7
 800688a:	0028      	movs	r0, r5
 800688c:	f7ff ffc6 	bl	800681c <sbrk_aligned>
 8006890:	0004      	movs	r4, r0
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	d15f      	bne.n	8006956 <_malloc_r+0xf6>
 8006896:	6834      	ldr	r4, [r6, #0]
 8006898:	9400      	str	r4, [sp, #0]
 800689a:	9b00      	ldr	r3, [sp, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d14a      	bne.n	8006936 <_malloc_r+0xd6>
 80068a0:	2c00      	cmp	r4, #0
 80068a2:	d052      	beq.n	800694a <_malloc_r+0xea>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	0028      	movs	r0, r5
 80068a8:	18e3      	adds	r3, r4, r3
 80068aa:	9900      	ldr	r1, [sp, #0]
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	f000 fb53 	bl	8006f58 <_sbrk_r>
 80068b2:	9b01      	ldr	r3, [sp, #4]
 80068b4:	4283      	cmp	r3, r0
 80068b6:	d148      	bne.n	800694a <_malloc_r+0xea>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	0028      	movs	r0, r5
 80068bc:	1aff      	subs	r7, r7, r3
 80068be:	0039      	movs	r1, r7
 80068c0:	f7ff ffac 	bl	800681c <sbrk_aligned>
 80068c4:	3001      	adds	r0, #1
 80068c6:	d040      	beq.n	800694a <_malloc_r+0xea>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	19db      	adds	r3, r3, r7
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	6833      	ldr	r3, [r6, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	d133      	bne.n	800693e <_malloc_r+0xde>
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	6033      	str	r3, [r6, #0]
 80068da:	e019      	b.n	8006910 <_malloc_r+0xb0>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dac9      	bge.n	8006874 <_malloc_r+0x14>
 80068e0:	230c      	movs	r3, #12
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	2000      	movs	r0, #0
 80068e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068e8:	6821      	ldr	r1, [r4, #0]
 80068ea:	1bc9      	subs	r1, r1, r7
 80068ec:	d420      	bmi.n	8006930 <_malloc_r+0xd0>
 80068ee:	290b      	cmp	r1, #11
 80068f0:	d90a      	bls.n	8006908 <_malloc_r+0xa8>
 80068f2:	19e2      	adds	r2, r4, r7
 80068f4:	6027      	str	r7, [r4, #0]
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	d104      	bne.n	8006904 <_malloc_r+0xa4>
 80068fa:	6032      	str	r2, [r6, #0]
 80068fc:	6863      	ldr	r3, [r4, #4]
 80068fe:	6011      	str	r1, [r2, #0]
 8006900:	6053      	str	r3, [r2, #4]
 8006902:	e005      	b.n	8006910 <_malloc_r+0xb0>
 8006904:	605a      	str	r2, [r3, #4]
 8006906:	e7f9      	b.n	80068fc <_malloc_r+0x9c>
 8006908:	6862      	ldr	r2, [r4, #4]
 800690a:	42a3      	cmp	r3, r4
 800690c:	d10e      	bne.n	800692c <_malloc_r+0xcc>
 800690e:	6032      	str	r2, [r6, #0]
 8006910:	0028      	movs	r0, r5
 8006912:	f000 f82d 	bl	8006970 <__malloc_unlock>
 8006916:	0020      	movs	r0, r4
 8006918:	2207      	movs	r2, #7
 800691a:	300b      	adds	r0, #11
 800691c:	1d23      	adds	r3, r4, #4
 800691e:	4390      	bics	r0, r2
 8006920:	1ac2      	subs	r2, r0, r3
 8006922:	4298      	cmp	r0, r3
 8006924:	d0df      	beq.n	80068e6 <_malloc_r+0x86>
 8006926:	1a1b      	subs	r3, r3, r0
 8006928:	50a3      	str	r3, [r4, r2]
 800692a:	e7dc      	b.n	80068e6 <_malloc_r+0x86>
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	e7ef      	b.n	8006910 <_malloc_r+0xb0>
 8006930:	0023      	movs	r3, r4
 8006932:	6864      	ldr	r4, [r4, #4]
 8006934:	e7a6      	b.n	8006884 <_malloc_r+0x24>
 8006936:	9c00      	ldr	r4, [sp, #0]
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	e7ad      	b.n	800689a <_malloc_r+0x3a>
 800693e:	001a      	movs	r2, r3
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	42a3      	cmp	r3, r4
 8006944:	d1fb      	bne.n	800693e <_malloc_r+0xde>
 8006946:	2300      	movs	r3, #0
 8006948:	e7da      	b.n	8006900 <_malloc_r+0xa0>
 800694a:	230c      	movs	r3, #12
 800694c:	0028      	movs	r0, r5
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	f000 f80e 	bl	8006970 <__malloc_unlock>
 8006954:	e7c6      	b.n	80068e4 <_malloc_r+0x84>
 8006956:	6007      	str	r7, [r0, #0]
 8006958:	e7da      	b.n	8006910 <_malloc_r+0xb0>
 800695a:	46c0      	nop			@ (mov r8, r8)
 800695c:	20000348 	.word	0x20000348

08006960 <__malloc_lock>:
 8006960:	b510      	push	{r4, lr}
 8006962:	4802      	ldr	r0, [pc, #8]	@ (800696c <__malloc_lock+0xc>)
 8006964:	f7ff ff0e 	bl	8006784 <__retarget_lock_acquire_recursive>
 8006968:	bd10      	pop	{r4, pc}
 800696a:	46c0      	nop			@ (mov r8, r8)
 800696c:	20000340 	.word	0x20000340

08006970 <__malloc_unlock>:
 8006970:	b510      	push	{r4, lr}
 8006972:	4802      	ldr	r0, [pc, #8]	@ (800697c <__malloc_unlock+0xc>)
 8006974:	f7ff ff07 	bl	8006786 <__retarget_lock_release_recursive>
 8006978:	bd10      	pop	{r4, pc}
 800697a:	46c0      	nop			@ (mov r8, r8)
 800697c:	20000340 	.word	0x20000340

08006980 <__ssputs_r>:
 8006980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006982:	688e      	ldr	r6, [r1, #8]
 8006984:	b085      	sub	sp, #20
 8006986:	001f      	movs	r7, r3
 8006988:	000c      	movs	r4, r1
 800698a:	680b      	ldr	r3, [r1, #0]
 800698c:	9002      	str	r0, [sp, #8]
 800698e:	9203      	str	r2, [sp, #12]
 8006990:	42be      	cmp	r6, r7
 8006992:	d830      	bhi.n	80069f6 <__ssputs_r+0x76>
 8006994:	210c      	movs	r1, #12
 8006996:	5e62      	ldrsh	r2, [r4, r1]
 8006998:	2190      	movs	r1, #144	@ 0x90
 800699a:	00c9      	lsls	r1, r1, #3
 800699c:	420a      	tst	r2, r1
 800699e:	d028      	beq.n	80069f2 <__ssputs_r+0x72>
 80069a0:	2003      	movs	r0, #3
 80069a2:	6921      	ldr	r1, [r4, #16]
 80069a4:	1a5b      	subs	r3, r3, r1
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	6963      	ldr	r3, [r4, #20]
 80069aa:	4343      	muls	r3, r0
 80069ac:	9801      	ldr	r0, [sp, #4]
 80069ae:	0fdd      	lsrs	r5, r3, #31
 80069b0:	18ed      	adds	r5, r5, r3
 80069b2:	1c7b      	adds	r3, r7, #1
 80069b4:	181b      	adds	r3, r3, r0
 80069b6:	106d      	asrs	r5, r5, #1
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	d900      	bls.n	80069be <__ssputs_r+0x3e>
 80069bc:	001d      	movs	r5, r3
 80069be:	0552      	lsls	r2, r2, #21
 80069c0:	d528      	bpl.n	8006a14 <__ssputs_r+0x94>
 80069c2:	0029      	movs	r1, r5
 80069c4:	9802      	ldr	r0, [sp, #8]
 80069c6:	f7ff ff4b 	bl	8006860 <_malloc_r>
 80069ca:	1e06      	subs	r6, r0, #0
 80069cc:	d02c      	beq.n	8006a28 <__ssputs_r+0xa8>
 80069ce:	9a01      	ldr	r2, [sp, #4]
 80069d0:	6921      	ldr	r1, [r4, #16]
 80069d2:	f000 fade 	bl	8006f92 <memcpy>
 80069d6:	89a2      	ldrh	r2, [r4, #12]
 80069d8:	4b18      	ldr	r3, [pc, #96]	@ (8006a3c <__ssputs_r+0xbc>)
 80069da:	401a      	ands	r2, r3
 80069dc:	2380      	movs	r3, #128	@ 0x80
 80069de:	4313      	orrs	r3, r2
 80069e0:	81a3      	strh	r3, [r4, #12]
 80069e2:	9b01      	ldr	r3, [sp, #4]
 80069e4:	6126      	str	r6, [r4, #16]
 80069e6:	18f6      	adds	r6, r6, r3
 80069e8:	6026      	str	r6, [r4, #0]
 80069ea:	003e      	movs	r6, r7
 80069ec:	6165      	str	r5, [r4, #20]
 80069ee:	1aed      	subs	r5, r5, r3
 80069f0:	60a5      	str	r5, [r4, #8]
 80069f2:	42be      	cmp	r6, r7
 80069f4:	d900      	bls.n	80069f8 <__ssputs_r+0x78>
 80069f6:	003e      	movs	r6, r7
 80069f8:	0032      	movs	r2, r6
 80069fa:	9903      	ldr	r1, [sp, #12]
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	f000 fa99 	bl	8006f34 <memmove>
 8006a02:	2000      	movs	r0, #0
 8006a04:	68a3      	ldr	r3, [r4, #8]
 8006a06:	1b9b      	subs	r3, r3, r6
 8006a08:	60a3      	str	r3, [r4, #8]
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	199b      	adds	r3, r3, r6
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	b005      	add	sp, #20
 8006a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a14:	002a      	movs	r2, r5
 8006a16:	9802      	ldr	r0, [sp, #8]
 8006a18:	f000 fac4 	bl	8006fa4 <_realloc_r>
 8006a1c:	1e06      	subs	r6, r0, #0
 8006a1e:	d1e0      	bne.n	80069e2 <__ssputs_r+0x62>
 8006a20:	6921      	ldr	r1, [r4, #16]
 8006a22:	9802      	ldr	r0, [sp, #8]
 8006a24:	f7ff feb0 	bl	8006788 <_free_r>
 8006a28:	230c      	movs	r3, #12
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	9a02      	ldr	r2, [sp, #8]
 8006a2e:	4240      	negs	r0, r0
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	89a2      	ldrh	r2, [r4, #12]
 8006a34:	3334      	adds	r3, #52	@ 0x34
 8006a36:	4313      	orrs	r3, r2
 8006a38:	81a3      	strh	r3, [r4, #12]
 8006a3a:	e7e9      	b.n	8006a10 <__ssputs_r+0x90>
 8006a3c:	fffffb7f 	.word	0xfffffb7f

08006a40 <_svfiprintf_r>:
 8006a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a42:	b0a1      	sub	sp, #132	@ 0x84
 8006a44:	9003      	str	r0, [sp, #12]
 8006a46:	001d      	movs	r5, r3
 8006a48:	898b      	ldrh	r3, [r1, #12]
 8006a4a:	000f      	movs	r7, r1
 8006a4c:	0016      	movs	r6, r2
 8006a4e:	061b      	lsls	r3, r3, #24
 8006a50:	d511      	bpl.n	8006a76 <_svfiprintf_r+0x36>
 8006a52:	690b      	ldr	r3, [r1, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10e      	bne.n	8006a76 <_svfiprintf_r+0x36>
 8006a58:	2140      	movs	r1, #64	@ 0x40
 8006a5a:	f7ff ff01 	bl	8006860 <_malloc_r>
 8006a5e:	6038      	str	r0, [r7, #0]
 8006a60:	6138      	str	r0, [r7, #16]
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d105      	bne.n	8006a72 <_svfiprintf_r+0x32>
 8006a66:	230c      	movs	r3, #12
 8006a68:	9a03      	ldr	r2, [sp, #12]
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	2001      	movs	r0, #1
 8006a6e:	4240      	negs	r0, r0
 8006a70:	e0cf      	b.n	8006c12 <_svfiprintf_r+0x1d2>
 8006a72:	2340      	movs	r3, #64	@ 0x40
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	2300      	movs	r3, #0
 8006a78:	ac08      	add	r4, sp, #32
 8006a7a:	6163      	str	r3, [r4, #20]
 8006a7c:	3320      	adds	r3, #32
 8006a7e:	7663      	strb	r3, [r4, #25]
 8006a80:	3310      	adds	r3, #16
 8006a82:	76a3      	strb	r3, [r4, #26]
 8006a84:	9507      	str	r5, [sp, #28]
 8006a86:	0035      	movs	r5, r6
 8006a88:	782b      	ldrb	r3, [r5, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <_svfiprintf_r+0x52>
 8006a8e:	2b25      	cmp	r3, #37	@ 0x25
 8006a90:	d148      	bne.n	8006b24 <_svfiprintf_r+0xe4>
 8006a92:	1bab      	subs	r3, r5, r6
 8006a94:	9305      	str	r3, [sp, #20]
 8006a96:	42b5      	cmp	r5, r6
 8006a98:	d00b      	beq.n	8006ab2 <_svfiprintf_r+0x72>
 8006a9a:	0032      	movs	r2, r6
 8006a9c:	0039      	movs	r1, r7
 8006a9e:	9803      	ldr	r0, [sp, #12]
 8006aa0:	f7ff ff6e 	bl	8006980 <__ssputs_r>
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d100      	bne.n	8006aaa <_svfiprintf_r+0x6a>
 8006aa8:	e0ae      	b.n	8006c08 <_svfiprintf_r+0x1c8>
 8006aaa:	6963      	ldr	r3, [r4, #20]
 8006aac:	9a05      	ldr	r2, [sp, #20]
 8006aae:	189b      	adds	r3, r3, r2
 8006ab0:	6163      	str	r3, [r4, #20]
 8006ab2:	782b      	ldrb	r3, [r5, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d100      	bne.n	8006aba <_svfiprintf_r+0x7a>
 8006ab8:	e0a6      	b.n	8006c08 <_svfiprintf_r+0x1c8>
 8006aba:	2201      	movs	r2, #1
 8006abc:	2300      	movs	r3, #0
 8006abe:	4252      	negs	r2, r2
 8006ac0:	6062      	str	r2, [r4, #4]
 8006ac2:	a904      	add	r1, sp, #16
 8006ac4:	3254      	adds	r2, #84	@ 0x54
 8006ac6:	1852      	adds	r2, r2, r1
 8006ac8:	1c6e      	adds	r6, r5, #1
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	60e3      	str	r3, [r4, #12]
 8006ace:	60a3      	str	r3, [r4, #8]
 8006ad0:	7013      	strb	r3, [r2, #0]
 8006ad2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006ad4:	4b54      	ldr	r3, [pc, #336]	@ (8006c28 <_svfiprintf_r+0x1e8>)
 8006ad6:	2205      	movs	r2, #5
 8006ad8:	0018      	movs	r0, r3
 8006ada:	7831      	ldrb	r1, [r6, #0]
 8006adc:	9305      	str	r3, [sp, #20]
 8006ade:	f000 fa4d 	bl	8006f7c <memchr>
 8006ae2:	1c75      	adds	r5, r6, #1
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d11f      	bne.n	8006b28 <_svfiprintf_r+0xe8>
 8006ae8:	6822      	ldr	r2, [r4, #0]
 8006aea:	06d3      	lsls	r3, r2, #27
 8006aec:	d504      	bpl.n	8006af8 <_svfiprintf_r+0xb8>
 8006aee:	2353      	movs	r3, #83	@ 0x53
 8006af0:	a904      	add	r1, sp, #16
 8006af2:	185b      	adds	r3, r3, r1
 8006af4:	2120      	movs	r1, #32
 8006af6:	7019      	strb	r1, [r3, #0]
 8006af8:	0713      	lsls	r3, r2, #28
 8006afa:	d504      	bpl.n	8006b06 <_svfiprintf_r+0xc6>
 8006afc:	2353      	movs	r3, #83	@ 0x53
 8006afe:	a904      	add	r1, sp, #16
 8006b00:	185b      	adds	r3, r3, r1
 8006b02:	212b      	movs	r1, #43	@ 0x2b
 8006b04:	7019      	strb	r1, [r3, #0]
 8006b06:	7833      	ldrb	r3, [r6, #0]
 8006b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b0a:	d016      	beq.n	8006b3a <_svfiprintf_r+0xfa>
 8006b0c:	0035      	movs	r5, r6
 8006b0e:	2100      	movs	r1, #0
 8006b10:	200a      	movs	r0, #10
 8006b12:	68e3      	ldr	r3, [r4, #12]
 8006b14:	782a      	ldrb	r2, [r5, #0]
 8006b16:	1c6e      	adds	r6, r5, #1
 8006b18:	3a30      	subs	r2, #48	@ 0x30
 8006b1a:	2a09      	cmp	r2, #9
 8006b1c:	d950      	bls.n	8006bc0 <_svfiprintf_r+0x180>
 8006b1e:	2900      	cmp	r1, #0
 8006b20:	d111      	bne.n	8006b46 <_svfiprintf_r+0x106>
 8006b22:	e017      	b.n	8006b54 <_svfiprintf_r+0x114>
 8006b24:	3501      	adds	r5, #1
 8006b26:	e7af      	b.n	8006a88 <_svfiprintf_r+0x48>
 8006b28:	9b05      	ldr	r3, [sp, #20]
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	1ac0      	subs	r0, r0, r3
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4083      	lsls	r3, r0
 8006b32:	4313      	orrs	r3, r2
 8006b34:	002e      	movs	r6, r5
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	e7cc      	b.n	8006ad4 <_svfiprintf_r+0x94>
 8006b3a:	9b07      	ldr	r3, [sp, #28]
 8006b3c:	1d19      	adds	r1, r3, #4
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	9107      	str	r1, [sp, #28]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	db01      	blt.n	8006b4a <_svfiprintf_r+0x10a>
 8006b46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b48:	e004      	b.n	8006b54 <_svfiprintf_r+0x114>
 8006b4a:	425b      	negs	r3, r3
 8006b4c:	60e3      	str	r3, [r4, #12]
 8006b4e:	2302      	movs	r3, #2
 8006b50:	4313      	orrs	r3, r2
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	782b      	ldrb	r3, [r5, #0]
 8006b56:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b58:	d10c      	bne.n	8006b74 <_svfiprintf_r+0x134>
 8006b5a:	786b      	ldrb	r3, [r5, #1]
 8006b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b5e:	d134      	bne.n	8006bca <_svfiprintf_r+0x18a>
 8006b60:	9b07      	ldr	r3, [sp, #28]
 8006b62:	3502      	adds	r5, #2
 8006b64:	1d1a      	adds	r2, r3, #4
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	9207      	str	r2, [sp, #28]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	da01      	bge.n	8006b72 <_svfiprintf_r+0x132>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	425b      	negs	r3, r3
 8006b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b74:	4e2d      	ldr	r6, [pc, #180]	@ (8006c2c <_svfiprintf_r+0x1ec>)
 8006b76:	2203      	movs	r2, #3
 8006b78:	0030      	movs	r0, r6
 8006b7a:	7829      	ldrb	r1, [r5, #0]
 8006b7c:	f000 f9fe 	bl	8006f7c <memchr>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d006      	beq.n	8006b92 <_svfiprintf_r+0x152>
 8006b84:	2340      	movs	r3, #64	@ 0x40
 8006b86:	1b80      	subs	r0, r0, r6
 8006b88:	4083      	lsls	r3, r0
 8006b8a:	6822      	ldr	r2, [r4, #0]
 8006b8c:	3501      	adds	r5, #1
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	7829      	ldrb	r1, [r5, #0]
 8006b94:	2206      	movs	r2, #6
 8006b96:	4826      	ldr	r0, [pc, #152]	@ (8006c30 <_svfiprintf_r+0x1f0>)
 8006b98:	1c6e      	adds	r6, r5, #1
 8006b9a:	7621      	strb	r1, [r4, #24]
 8006b9c:	f000 f9ee 	bl	8006f7c <memchr>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d038      	beq.n	8006c16 <_svfiprintf_r+0x1d6>
 8006ba4:	4b23      	ldr	r3, [pc, #140]	@ (8006c34 <_svfiprintf_r+0x1f4>)
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d122      	bne.n	8006bf0 <_svfiprintf_r+0x1b0>
 8006baa:	2207      	movs	r2, #7
 8006bac:	9b07      	ldr	r3, [sp, #28]
 8006bae:	3307      	adds	r3, #7
 8006bb0:	4393      	bics	r3, r2
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	9307      	str	r3, [sp, #28]
 8006bb6:	6963      	ldr	r3, [r4, #20]
 8006bb8:	9a04      	ldr	r2, [sp, #16]
 8006bba:	189b      	adds	r3, r3, r2
 8006bbc:	6163      	str	r3, [r4, #20]
 8006bbe:	e762      	b.n	8006a86 <_svfiprintf_r+0x46>
 8006bc0:	4343      	muls	r3, r0
 8006bc2:	0035      	movs	r5, r6
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	189b      	adds	r3, r3, r2
 8006bc8:	e7a4      	b.n	8006b14 <_svfiprintf_r+0xd4>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	200a      	movs	r0, #10
 8006bce:	0019      	movs	r1, r3
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	6063      	str	r3, [r4, #4]
 8006bd4:	782a      	ldrb	r2, [r5, #0]
 8006bd6:	1c6e      	adds	r6, r5, #1
 8006bd8:	3a30      	subs	r2, #48	@ 0x30
 8006bda:	2a09      	cmp	r2, #9
 8006bdc:	d903      	bls.n	8006be6 <_svfiprintf_r+0x1a6>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0c8      	beq.n	8006b74 <_svfiprintf_r+0x134>
 8006be2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006be4:	e7c6      	b.n	8006b74 <_svfiprintf_r+0x134>
 8006be6:	4341      	muls	r1, r0
 8006be8:	0035      	movs	r5, r6
 8006bea:	2301      	movs	r3, #1
 8006bec:	1889      	adds	r1, r1, r2
 8006bee:	e7f1      	b.n	8006bd4 <_svfiprintf_r+0x194>
 8006bf0:	aa07      	add	r2, sp, #28
 8006bf2:	9200      	str	r2, [sp, #0]
 8006bf4:	0021      	movs	r1, r4
 8006bf6:	003a      	movs	r2, r7
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8006c38 <_svfiprintf_r+0x1f8>)
 8006bfa:	9803      	ldr	r0, [sp, #12]
 8006bfc:	e000      	b.n	8006c00 <_svfiprintf_r+0x1c0>
 8006bfe:	bf00      	nop
 8006c00:	9004      	str	r0, [sp, #16]
 8006c02:	9b04      	ldr	r3, [sp, #16]
 8006c04:	3301      	adds	r3, #1
 8006c06:	d1d6      	bne.n	8006bb6 <_svfiprintf_r+0x176>
 8006c08:	89bb      	ldrh	r3, [r7, #12]
 8006c0a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006c0c:	065b      	lsls	r3, r3, #25
 8006c0e:	d500      	bpl.n	8006c12 <_svfiprintf_r+0x1d2>
 8006c10:	e72c      	b.n	8006a6c <_svfiprintf_r+0x2c>
 8006c12:	b021      	add	sp, #132	@ 0x84
 8006c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c16:	aa07      	add	r2, sp, #28
 8006c18:	9200      	str	r2, [sp, #0]
 8006c1a:	0021      	movs	r1, r4
 8006c1c:	003a      	movs	r2, r7
 8006c1e:	4b06      	ldr	r3, [pc, #24]	@ (8006c38 <_svfiprintf_r+0x1f8>)
 8006c20:	9803      	ldr	r0, [sp, #12]
 8006c22:	f000 f87b 	bl	8006d1c <_printf_i>
 8006c26:	e7eb      	b.n	8006c00 <_svfiprintf_r+0x1c0>
 8006c28:	080071b8 	.word	0x080071b8
 8006c2c:	080071be 	.word	0x080071be
 8006c30:	080071c2 	.word	0x080071c2
 8006c34:	00000000 	.word	0x00000000
 8006c38:	08006981 	.word	0x08006981

08006c3c <_printf_common>:
 8006c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c3e:	0016      	movs	r6, r2
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	688a      	ldr	r2, [r1, #8]
 8006c44:	690b      	ldr	r3, [r1, #16]
 8006c46:	000c      	movs	r4, r1
 8006c48:	9000      	str	r0, [sp, #0]
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	da00      	bge.n	8006c50 <_printf_common+0x14>
 8006c4e:	0013      	movs	r3, r2
 8006c50:	0022      	movs	r2, r4
 8006c52:	6033      	str	r3, [r6, #0]
 8006c54:	3243      	adds	r2, #67	@ 0x43
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	d001      	beq.n	8006c60 <_printf_common+0x24>
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	6033      	str	r3, [r6, #0]
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	069b      	lsls	r3, r3, #26
 8006c64:	d502      	bpl.n	8006c6c <_printf_common+0x30>
 8006c66:	6833      	ldr	r3, [r6, #0]
 8006c68:	3302      	adds	r3, #2
 8006c6a:	6033      	str	r3, [r6, #0]
 8006c6c:	6822      	ldr	r2, [r4, #0]
 8006c6e:	2306      	movs	r3, #6
 8006c70:	0015      	movs	r5, r2
 8006c72:	401d      	ands	r5, r3
 8006c74:	421a      	tst	r2, r3
 8006c76:	d027      	beq.n	8006cc8 <_printf_common+0x8c>
 8006c78:	0023      	movs	r3, r4
 8006c7a:	3343      	adds	r3, #67	@ 0x43
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	1e5a      	subs	r2, r3, #1
 8006c80:	4193      	sbcs	r3, r2
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	0692      	lsls	r2, r2, #26
 8006c86:	d430      	bmi.n	8006cea <_printf_common+0xae>
 8006c88:	0022      	movs	r2, r4
 8006c8a:	9901      	ldr	r1, [sp, #4]
 8006c8c:	9800      	ldr	r0, [sp, #0]
 8006c8e:	9d08      	ldr	r5, [sp, #32]
 8006c90:	3243      	adds	r2, #67	@ 0x43
 8006c92:	47a8      	blx	r5
 8006c94:	3001      	adds	r0, #1
 8006c96:	d025      	beq.n	8006ce4 <_printf_common+0xa8>
 8006c98:	2206      	movs	r2, #6
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	2500      	movs	r5, #0
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d105      	bne.n	8006cb0 <_printf_common+0x74>
 8006ca4:	6833      	ldr	r3, [r6, #0]
 8006ca6:	68e5      	ldr	r5, [r4, #12]
 8006ca8:	1aed      	subs	r5, r5, r3
 8006caa:	43eb      	mvns	r3, r5
 8006cac:	17db      	asrs	r3, r3, #31
 8006cae:	401d      	ands	r5, r3
 8006cb0:	68a3      	ldr	r3, [r4, #8]
 8006cb2:	6922      	ldr	r2, [r4, #16]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	dd01      	ble.n	8006cbc <_printf_common+0x80>
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	18ed      	adds	r5, r5, r3
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	42b5      	cmp	r5, r6
 8006cc0:	d120      	bne.n	8006d04 <_printf_common+0xc8>
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e010      	b.n	8006ce8 <_printf_common+0xac>
 8006cc6:	3501      	adds	r5, #1
 8006cc8:	68e3      	ldr	r3, [r4, #12]
 8006cca:	6832      	ldr	r2, [r6, #0]
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	42ab      	cmp	r3, r5
 8006cd0:	ddd2      	ble.n	8006c78 <_printf_common+0x3c>
 8006cd2:	0022      	movs	r2, r4
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	9901      	ldr	r1, [sp, #4]
 8006cd8:	9800      	ldr	r0, [sp, #0]
 8006cda:	9f08      	ldr	r7, [sp, #32]
 8006cdc:	3219      	adds	r2, #25
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d1f0      	bne.n	8006cc6 <_printf_common+0x8a>
 8006ce4:	2001      	movs	r0, #1
 8006ce6:	4240      	negs	r0, r0
 8006ce8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cea:	2030      	movs	r0, #48	@ 0x30
 8006cec:	18e1      	adds	r1, r4, r3
 8006cee:	3143      	adds	r1, #67	@ 0x43
 8006cf0:	7008      	strb	r0, [r1, #0]
 8006cf2:	0021      	movs	r1, r4
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	3145      	adds	r1, #69	@ 0x45
 8006cf8:	7809      	ldrb	r1, [r1, #0]
 8006cfa:	18a2      	adds	r2, r4, r2
 8006cfc:	3243      	adds	r2, #67	@ 0x43
 8006cfe:	3302      	adds	r3, #2
 8006d00:	7011      	strb	r1, [r2, #0]
 8006d02:	e7c1      	b.n	8006c88 <_printf_common+0x4c>
 8006d04:	0022      	movs	r2, r4
 8006d06:	2301      	movs	r3, #1
 8006d08:	9901      	ldr	r1, [sp, #4]
 8006d0a:	9800      	ldr	r0, [sp, #0]
 8006d0c:	9f08      	ldr	r7, [sp, #32]
 8006d0e:	321a      	adds	r2, #26
 8006d10:	47b8      	blx	r7
 8006d12:	3001      	adds	r0, #1
 8006d14:	d0e6      	beq.n	8006ce4 <_printf_common+0xa8>
 8006d16:	3601      	adds	r6, #1
 8006d18:	e7d1      	b.n	8006cbe <_printf_common+0x82>
	...

08006d1c <_printf_i>:
 8006d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d1e:	b08b      	sub	sp, #44	@ 0x2c
 8006d20:	9206      	str	r2, [sp, #24]
 8006d22:	000a      	movs	r2, r1
 8006d24:	3243      	adds	r2, #67	@ 0x43
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	9005      	str	r0, [sp, #20]
 8006d2a:	9203      	str	r2, [sp, #12]
 8006d2c:	7e0a      	ldrb	r2, [r1, #24]
 8006d2e:	000c      	movs	r4, r1
 8006d30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d32:	2a78      	cmp	r2, #120	@ 0x78
 8006d34:	d809      	bhi.n	8006d4a <_printf_i+0x2e>
 8006d36:	2a62      	cmp	r2, #98	@ 0x62
 8006d38:	d80b      	bhi.n	8006d52 <_printf_i+0x36>
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	d100      	bne.n	8006d40 <_printf_i+0x24>
 8006d3e:	e0ba      	b.n	8006eb6 <_printf_i+0x19a>
 8006d40:	497a      	ldr	r1, [pc, #488]	@ (8006f2c <_printf_i+0x210>)
 8006d42:	9104      	str	r1, [sp, #16]
 8006d44:	2a58      	cmp	r2, #88	@ 0x58
 8006d46:	d100      	bne.n	8006d4a <_printf_i+0x2e>
 8006d48:	e08e      	b.n	8006e68 <_printf_i+0x14c>
 8006d4a:	0025      	movs	r5, r4
 8006d4c:	3542      	adds	r5, #66	@ 0x42
 8006d4e:	702a      	strb	r2, [r5, #0]
 8006d50:	e022      	b.n	8006d98 <_printf_i+0x7c>
 8006d52:	0010      	movs	r0, r2
 8006d54:	3863      	subs	r0, #99	@ 0x63
 8006d56:	2815      	cmp	r0, #21
 8006d58:	d8f7      	bhi.n	8006d4a <_printf_i+0x2e>
 8006d5a:	f7f9 f9d3 	bl	8000104 <__gnu_thumb1_case_shi>
 8006d5e:	0016      	.short	0x0016
 8006d60:	fff6001f 	.word	0xfff6001f
 8006d64:	fff6fff6 	.word	0xfff6fff6
 8006d68:	001ffff6 	.word	0x001ffff6
 8006d6c:	fff6fff6 	.word	0xfff6fff6
 8006d70:	fff6fff6 	.word	0xfff6fff6
 8006d74:	0036009f 	.word	0x0036009f
 8006d78:	fff6007e 	.word	0xfff6007e
 8006d7c:	00b0fff6 	.word	0x00b0fff6
 8006d80:	0036fff6 	.word	0x0036fff6
 8006d84:	fff6fff6 	.word	0xfff6fff6
 8006d88:	0082      	.short	0x0082
 8006d8a:	0025      	movs	r5, r4
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	3542      	adds	r5, #66	@ 0x42
 8006d90:	1d11      	adds	r1, r2, #4
 8006d92:	6019      	str	r1, [r3, #0]
 8006d94:	6813      	ldr	r3, [r2, #0]
 8006d96:	702b      	strb	r3, [r5, #0]
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e09e      	b.n	8006eda <_printf_i+0x1be>
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	6809      	ldr	r1, [r1, #0]
 8006da0:	1d02      	adds	r2, r0, #4
 8006da2:	060d      	lsls	r5, r1, #24
 8006da4:	d50b      	bpl.n	8006dbe <_printf_i+0xa2>
 8006da6:	6806      	ldr	r6, [r0, #0]
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	da03      	bge.n	8006db6 <_printf_i+0x9a>
 8006dae:	232d      	movs	r3, #45	@ 0x2d
 8006db0:	9a03      	ldr	r2, [sp, #12]
 8006db2:	4276      	negs	r6, r6
 8006db4:	7013      	strb	r3, [r2, #0]
 8006db6:	4b5d      	ldr	r3, [pc, #372]	@ (8006f2c <_printf_i+0x210>)
 8006db8:	270a      	movs	r7, #10
 8006dba:	9304      	str	r3, [sp, #16]
 8006dbc:	e018      	b.n	8006df0 <_printf_i+0xd4>
 8006dbe:	6806      	ldr	r6, [r0, #0]
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	0649      	lsls	r1, r1, #25
 8006dc4:	d5f1      	bpl.n	8006daa <_printf_i+0x8e>
 8006dc6:	b236      	sxth	r6, r6
 8006dc8:	e7ef      	b.n	8006daa <_printf_i+0x8e>
 8006dca:	6808      	ldr	r0, [r1, #0]
 8006dcc:	6819      	ldr	r1, [r3, #0]
 8006dce:	c940      	ldmia	r1!, {r6}
 8006dd0:	0605      	lsls	r5, r0, #24
 8006dd2:	d402      	bmi.n	8006dda <_printf_i+0xbe>
 8006dd4:	0640      	lsls	r0, r0, #25
 8006dd6:	d500      	bpl.n	8006dda <_printf_i+0xbe>
 8006dd8:	b2b6      	uxth	r6, r6
 8006dda:	6019      	str	r1, [r3, #0]
 8006ddc:	4b53      	ldr	r3, [pc, #332]	@ (8006f2c <_printf_i+0x210>)
 8006dde:	270a      	movs	r7, #10
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	2a6f      	cmp	r2, #111	@ 0x6f
 8006de4:	d100      	bne.n	8006de8 <_printf_i+0xcc>
 8006de6:	3f02      	subs	r7, #2
 8006de8:	0023      	movs	r3, r4
 8006dea:	2200      	movs	r2, #0
 8006dec:	3343      	adds	r3, #67	@ 0x43
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	6863      	ldr	r3, [r4, #4]
 8006df2:	60a3      	str	r3, [r4, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	db06      	blt.n	8006e06 <_printf_i+0xea>
 8006df8:	2104      	movs	r1, #4
 8006dfa:	6822      	ldr	r2, [r4, #0]
 8006dfc:	9d03      	ldr	r5, [sp, #12]
 8006dfe:	438a      	bics	r2, r1
 8006e00:	6022      	str	r2, [r4, #0]
 8006e02:	4333      	orrs	r3, r6
 8006e04:	d00c      	beq.n	8006e20 <_printf_i+0x104>
 8006e06:	9d03      	ldr	r5, [sp, #12]
 8006e08:	0030      	movs	r0, r6
 8006e0a:	0039      	movs	r1, r7
 8006e0c:	f7f9 fa0a 	bl	8000224 <__aeabi_uidivmod>
 8006e10:	9b04      	ldr	r3, [sp, #16]
 8006e12:	3d01      	subs	r5, #1
 8006e14:	5c5b      	ldrb	r3, [r3, r1]
 8006e16:	702b      	strb	r3, [r5, #0]
 8006e18:	0033      	movs	r3, r6
 8006e1a:	0006      	movs	r6, r0
 8006e1c:	429f      	cmp	r7, r3
 8006e1e:	d9f3      	bls.n	8006e08 <_printf_i+0xec>
 8006e20:	2f08      	cmp	r7, #8
 8006e22:	d109      	bne.n	8006e38 <_printf_i+0x11c>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	07db      	lsls	r3, r3, #31
 8006e28:	d506      	bpl.n	8006e38 <_printf_i+0x11c>
 8006e2a:	6862      	ldr	r2, [r4, #4]
 8006e2c:	6923      	ldr	r3, [r4, #16]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	dc02      	bgt.n	8006e38 <_printf_i+0x11c>
 8006e32:	2330      	movs	r3, #48	@ 0x30
 8006e34:	3d01      	subs	r5, #1
 8006e36:	702b      	strb	r3, [r5, #0]
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	1b5b      	subs	r3, r3, r5
 8006e3c:	6123      	str	r3, [r4, #16]
 8006e3e:	9b07      	ldr	r3, [sp, #28]
 8006e40:	0021      	movs	r1, r4
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	9805      	ldr	r0, [sp, #20]
 8006e46:	9b06      	ldr	r3, [sp, #24]
 8006e48:	aa09      	add	r2, sp, #36	@ 0x24
 8006e4a:	f7ff fef7 	bl	8006c3c <_printf_common>
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d148      	bne.n	8006ee4 <_printf_i+0x1c8>
 8006e52:	2001      	movs	r0, #1
 8006e54:	4240      	negs	r0, r0
 8006e56:	b00b      	add	sp, #44	@ 0x2c
 8006e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	6809      	ldr	r1, [r1, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	2278      	movs	r2, #120	@ 0x78
 8006e64:	4932      	ldr	r1, [pc, #200]	@ (8006f30 <_printf_i+0x214>)
 8006e66:	9104      	str	r1, [sp, #16]
 8006e68:	0021      	movs	r1, r4
 8006e6a:	3145      	adds	r1, #69	@ 0x45
 8006e6c:	700a      	strb	r2, [r1, #0]
 8006e6e:	6819      	ldr	r1, [r3, #0]
 8006e70:	6822      	ldr	r2, [r4, #0]
 8006e72:	c940      	ldmia	r1!, {r6}
 8006e74:	0610      	lsls	r0, r2, #24
 8006e76:	d402      	bmi.n	8006e7e <_printf_i+0x162>
 8006e78:	0650      	lsls	r0, r2, #25
 8006e7a:	d500      	bpl.n	8006e7e <_printf_i+0x162>
 8006e7c:	b2b6      	uxth	r6, r6
 8006e7e:	6019      	str	r1, [r3, #0]
 8006e80:	07d3      	lsls	r3, r2, #31
 8006e82:	d502      	bpl.n	8006e8a <_printf_i+0x16e>
 8006e84:	2320      	movs	r3, #32
 8006e86:	4313      	orrs	r3, r2
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	d001      	beq.n	8006e92 <_printf_i+0x176>
 8006e8e:	2710      	movs	r7, #16
 8006e90:	e7aa      	b.n	8006de8 <_printf_i+0xcc>
 8006e92:	2220      	movs	r2, #32
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	4393      	bics	r3, r2
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	e7f8      	b.n	8006e8e <_printf_i+0x172>
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	680d      	ldr	r5, [r1, #0]
 8006ea0:	1d10      	adds	r0, r2, #4
 8006ea2:	6949      	ldr	r1, [r1, #20]
 8006ea4:	6018      	str	r0, [r3, #0]
 8006ea6:	6813      	ldr	r3, [r2, #0]
 8006ea8:	062e      	lsls	r6, r5, #24
 8006eaa:	d501      	bpl.n	8006eb0 <_printf_i+0x194>
 8006eac:	6019      	str	r1, [r3, #0]
 8006eae:	e002      	b.n	8006eb6 <_printf_i+0x19a>
 8006eb0:	066d      	lsls	r5, r5, #25
 8006eb2:	d5fb      	bpl.n	8006eac <_printf_i+0x190>
 8006eb4:	8019      	strh	r1, [r3, #0]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	9d03      	ldr	r5, [sp, #12]
 8006eba:	6123      	str	r3, [r4, #16]
 8006ebc:	e7bf      	b.n	8006e3e <_printf_i+0x122>
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	1d11      	adds	r1, r2, #4
 8006ec2:	6019      	str	r1, [r3, #0]
 8006ec4:	6815      	ldr	r5, [r2, #0]
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	0028      	movs	r0, r5
 8006eca:	6862      	ldr	r2, [r4, #4]
 8006ecc:	f000 f856 	bl	8006f7c <memchr>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d001      	beq.n	8006ed8 <_printf_i+0x1bc>
 8006ed4:	1b40      	subs	r0, r0, r5
 8006ed6:	6060      	str	r0, [r4, #4]
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	2300      	movs	r3, #0
 8006ede:	9a03      	ldr	r2, [sp, #12]
 8006ee0:	7013      	strb	r3, [r2, #0]
 8006ee2:	e7ac      	b.n	8006e3e <_printf_i+0x122>
 8006ee4:	002a      	movs	r2, r5
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	9906      	ldr	r1, [sp, #24]
 8006eea:	9805      	ldr	r0, [sp, #20]
 8006eec:	9d07      	ldr	r5, [sp, #28]
 8006eee:	47a8      	blx	r5
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d0ae      	beq.n	8006e52 <_printf_i+0x136>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	079b      	lsls	r3, r3, #30
 8006ef8:	d415      	bmi.n	8006f26 <_printf_i+0x20a>
 8006efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006efc:	68e0      	ldr	r0, [r4, #12]
 8006efe:	4298      	cmp	r0, r3
 8006f00:	daa9      	bge.n	8006e56 <_printf_i+0x13a>
 8006f02:	0018      	movs	r0, r3
 8006f04:	e7a7      	b.n	8006e56 <_printf_i+0x13a>
 8006f06:	0022      	movs	r2, r4
 8006f08:	2301      	movs	r3, #1
 8006f0a:	9906      	ldr	r1, [sp, #24]
 8006f0c:	9805      	ldr	r0, [sp, #20]
 8006f0e:	9e07      	ldr	r6, [sp, #28]
 8006f10:	3219      	adds	r2, #25
 8006f12:	47b0      	blx	r6
 8006f14:	3001      	adds	r0, #1
 8006f16:	d09c      	beq.n	8006e52 <_printf_i+0x136>
 8006f18:	3501      	adds	r5, #1
 8006f1a:	68e3      	ldr	r3, [r4, #12]
 8006f1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	dcf0      	bgt.n	8006f06 <_printf_i+0x1ea>
 8006f24:	e7e9      	b.n	8006efa <_printf_i+0x1de>
 8006f26:	2500      	movs	r5, #0
 8006f28:	e7f7      	b.n	8006f1a <_printf_i+0x1fe>
 8006f2a:	46c0      	nop			@ (mov r8, r8)
 8006f2c:	080071c9 	.word	0x080071c9
 8006f30:	080071da 	.word	0x080071da

08006f34 <memmove>:
 8006f34:	b510      	push	{r4, lr}
 8006f36:	4288      	cmp	r0, r1
 8006f38:	d902      	bls.n	8006f40 <memmove+0xc>
 8006f3a:	188b      	adds	r3, r1, r2
 8006f3c:	4298      	cmp	r0, r3
 8006f3e:	d308      	bcc.n	8006f52 <memmove+0x1e>
 8006f40:	2300      	movs	r3, #0
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d007      	beq.n	8006f56 <memmove+0x22>
 8006f46:	5ccc      	ldrb	r4, [r1, r3]
 8006f48:	54c4      	strb	r4, [r0, r3]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	e7f9      	b.n	8006f42 <memmove+0xe>
 8006f4e:	5c8b      	ldrb	r3, [r1, r2]
 8006f50:	5483      	strb	r3, [r0, r2]
 8006f52:	3a01      	subs	r2, #1
 8006f54:	d2fb      	bcs.n	8006f4e <memmove+0x1a>
 8006f56:	bd10      	pop	{r4, pc}

08006f58 <_sbrk_r>:
 8006f58:	2300      	movs	r3, #0
 8006f5a:	b570      	push	{r4, r5, r6, lr}
 8006f5c:	4d06      	ldr	r5, [pc, #24]	@ (8006f78 <_sbrk_r+0x20>)
 8006f5e:	0004      	movs	r4, r0
 8006f60:	0008      	movs	r0, r1
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	f7f9 ff7a 	bl	8000e5c <_sbrk>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d103      	bne.n	8006f74 <_sbrk_r+0x1c>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d000      	beq.n	8006f74 <_sbrk_r+0x1c>
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	bd70      	pop	{r4, r5, r6, pc}
 8006f76:	46c0      	nop			@ (mov r8, r8)
 8006f78:	2000033c 	.word	0x2000033c

08006f7c <memchr>:
 8006f7c:	b2c9      	uxtb	r1, r1
 8006f7e:	1882      	adds	r2, r0, r2
 8006f80:	4290      	cmp	r0, r2
 8006f82:	d101      	bne.n	8006f88 <memchr+0xc>
 8006f84:	2000      	movs	r0, #0
 8006f86:	4770      	bx	lr
 8006f88:	7803      	ldrb	r3, [r0, #0]
 8006f8a:	428b      	cmp	r3, r1
 8006f8c:	d0fb      	beq.n	8006f86 <memchr+0xa>
 8006f8e:	3001      	adds	r0, #1
 8006f90:	e7f6      	b.n	8006f80 <memchr+0x4>

08006f92 <memcpy>:
 8006f92:	2300      	movs	r3, #0
 8006f94:	b510      	push	{r4, lr}
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d100      	bne.n	8006f9c <memcpy+0xa>
 8006f9a:	bd10      	pop	{r4, pc}
 8006f9c:	5ccc      	ldrb	r4, [r1, r3]
 8006f9e:	54c4      	strb	r4, [r0, r3]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	e7f8      	b.n	8006f96 <memcpy+0x4>

08006fa4 <_realloc_r>:
 8006fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fa6:	0006      	movs	r6, r0
 8006fa8:	000c      	movs	r4, r1
 8006faa:	0015      	movs	r5, r2
 8006fac:	2900      	cmp	r1, #0
 8006fae:	d105      	bne.n	8006fbc <_realloc_r+0x18>
 8006fb0:	0011      	movs	r1, r2
 8006fb2:	f7ff fc55 	bl	8006860 <_malloc_r>
 8006fb6:	0004      	movs	r4, r0
 8006fb8:	0020      	movs	r0, r4
 8006fba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fbc:	2a00      	cmp	r2, #0
 8006fbe:	d103      	bne.n	8006fc8 <_realloc_r+0x24>
 8006fc0:	f7ff fbe2 	bl	8006788 <_free_r>
 8006fc4:	002c      	movs	r4, r5
 8006fc6:	e7f7      	b.n	8006fb8 <_realloc_r+0x14>
 8006fc8:	f000 f81c 	bl	8007004 <_malloc_usable_size_r>
 8006fcc:	0007      	movs	r7, r0
 8006fce:	4285      	cmp	r5, r0
 8006fd0:	d802      	bhi.n	8006fd8 <_realloc_r+0x34>
 8006fd2:	0843      	lsrs	r3, r0, #1
 8006fd4:	42ab      	cmp	r3, r5
 8006fd6:	d3ef      	bcc.n	8006fb8 <_realloc_r+0x14>
 8006fd8:	0029      	movs	r1, r5
 8006fda:	0030      	movs	r0, r6
 8006fdc:	f7ff fc40 	bl	8006860 <_malloc_r>
 8006fe0:	9001      	str	r0, [sp, #4]
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d101      	bne.n	8006fea <_realloc_r+0x46>
 8006fe6:	9c01      	ldr	r4, [sp, #4]
 8006fe8:	e7e6      	b.n	8006fb8 <_realloc_r+0x14>
 8006fea:	002a      	movs	r2, r5
 8006fec:	42bd      	cmp	r5, r7
 8006fee:	d900      	bls.n	8006ff2 <_realloc_r+0x4e>
 8006ff0:	003a      	movs	r2, r7
 8006ff2:	0021      	movs	r1, r4
 8006ff4:	9801      	ldr	r0, [sp, #4]
 8006ff6:	f7ff ffcc 	bl	8006f92 <memcpy>
 8006ffa:	0021      	movs	r1, r4
 8006ffc:	0030      	movs	r0, r6
 8006ffe:	f7ff fbc3 	bl	8006788 <_free_r>
 8007002:	e7f0      	b.n	8006fe6 <_realloc_r+0x42>

08007004 <_malloc_usable_size_r>:
 8007004:	1f0b      	subs	r3, r1, #4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	1f18      	subs	r0, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	da01      	bge.n	8007012 <_malloc_usable_size_r+0xe>
 800700e:	580b      	ldr	r3, [r1, r0]
 8007010:	18c0      	adds	r0, r0, r3
 8007012:	4770      	bx	lr

08007014 <_init>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr

08007020 <_fini>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	46c0      	nop			@ (mov r8, r8)
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr
