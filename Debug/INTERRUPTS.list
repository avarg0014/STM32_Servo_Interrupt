
INTERRUPTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c04  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003cc0  08003cc0  00004cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d9c  08003d9c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003d9c  08003d9c  00004d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da4  08003da4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003da4  08003da4  00004da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dac  08003dac  00004dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003db0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08003dbc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003dbc  0000511c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103d1  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002276  00000000  00000000  00015405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00017680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0c  00000000  00000000  00018488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019329  00000000  00000000  00018f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113c3  00000000  00000000  000322bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dfa9  00000000  00000000  00043680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1629  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032cc  00000000  00000000  000e166c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e4938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003ca8 	.word	0x08003ca8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003ca8 	.word	0x08003ca8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <maincpp>:
const uint32_t LONG_BUTTON_PRESS = 2000;

#define SERVO_TIMER htim15

void maincpp(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	SERVO_TIMER.Instance->CCR1 = 1500;
 8000620:	4b3f      	ldr	r3, [pc, #252]	@ (8000720 <maincpp+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a3f      	ldr	r2, [pc, #252]	@ (8000724 <maincpp+0x108>)
 8000626:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_PWM_Start(&SERVO_TIMER, TIM_CHANNEL_1);
 8000628:	4b3d      	ldr	r3, [pc, #244]	@ (8000720 <maincpp+0x104>)
 800062a:	2100      	movs	r1, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f001 fe43 	bl	80022b8 <HAL_TIM_PWM_Start>

	buttonAction = PRESS_TYPE::UNDEFINED;
 8000632:	4b3d      	ldr	r3, [pc, #244]	@ (8000728 <maincpp+0x10c>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		switch(buttonAction)
 8000638:	4b3b      	ldr	r3, [pc, #236]	@ (8000728 <maincpp+0x10c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d047      	beq.n	80006d0 <maincpp+0xb4>
 8000640:	dcfa      	bgt.n	8000638 <maincpp+0x1c>
 8000642:	2b02      	cmp	r3, #2
 8000644:	d025      	beq.n	8000692 <maincpp+0x76>
 8000646:	dcf7      	bgt.n	8000638 <maincpp+0x1c>
 8000648:	2b00      	cmp	r3, #0
 800064a:	d060      	beq.n	800070e <maincpp+0xf2>
 800064c:	2b01      	cmp	r3, #1
 800064e:	d1f3      	bne.n	8000638 <maincpp+0x1c>
		{
		case PRESS_TYPE::NORMAL:
			if(SERVO_TIMER.Instance->CCR1 > 500)
 8000650:	4b33      	ldr	r3, [pc, #204]	@ (8000720 <maincpp+0x104>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000656:	22fa      	movs	r2, #250	@ 0xfa
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	429a      	cmp	r2, r3
 800065c:	419b      	sbcs	r3, r3
 800065e:	425b      	negs	r3, r3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d004      	beq.n	8000670 <maincpp+0x54>
			{
				SERVO_TIMER.Instance->CCR1--;
 8000666:	4b2e      	ldr	r3, [pc, #184]	@ (8000720 <maincpp+0x104>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800066c:	3a01      	subs	r2, #1
 800066e:	635a      	str	r2, [r3, #52]	@ 0x34
			}
			if(SERVO_TIMER.Instance->CCR1 < 500)
 8000670:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <maincpp+0x104>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000676:	23fa      	movs	r3, #250	@ 0xfa
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	429a      	cmp	r2, r3
 800067c:	419b      	sbcs	r3, r3
 800067e:	425b      	negs	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d045      	beq.n	8000712 <maincpp+0xf6>
						{
							SERVO_TIMER.Instance->CCR1++;
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <maincpp+0x104>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800068c:	3201      	adds	r2, #1
 800068e:	635a      	str	r2, [r3, #52]	@ 0x34
						}
			break;
 8000690:	e03f      	b.n	8000712 <maincpp+0xf6>

		case PRESS_TYPE::LONG_PRESS:
			if(SERVO_TIMER.Instance->CCR1 > 1500)
 8000692:	4b23      	ldr	r3, [pc, #140]	@ (8000720 <maincpp+0x104>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000698:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <maincpp+0x108>)
 800069a:	429a      	cmp	r2, r3
 800069c:	419b      	sbcs	r3, r3
 800069e:	425b      	negs	r3, r3
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <maincpp+0x94>
						{
							SERVO_TIMER.Instance->CCR1--;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <maincpp+0x104>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ac:	3a01      	subs	r2, #1
 80006ae:	635a      	str	r2, [r3, #52]	@ 0x34
						}
						if(SERVO_TIMER.Instance->CCR1 < 1500)
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <maincpp+0x104>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b6:	491d      	ldr	r1, [pc, #116]	@ (800072c <maincpp+0x110>)
 80006b8:	2300      	movs	r3, #0
 80006ba:	4291      	cmp	r1, r2
 80006bc:	415b      	adcs	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d028      	beq.n	8000716 <maincpp+0xfa>
									{
										SERVO_TIMER.Instance->CCR1++;
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <maincpp+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ca:	3201      	adds	r2, #1
 80006cc:	635a      	str	r2, [r3, #52]	@ 0x34
									}
						break;
 80006ce:	e022      	b.n	8000716 <maincpp+0xfa>

		case PRESS_TYPE::SUPER_LONG_PRESS:
					if(SERVO_TIMER.Instance->CCR1 > 2500)
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <maincpp+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d6:	4a16      	ldr	r2, [pc, #88]	@ (8000730 <maincpp+0x114>)
 80006d8:	429a      	cmp	r2, r3
 80006da:	419b      	sbcs	r3, r3
 80006dc:	425b      	negs	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d004      	beq.n	80006ee <maincpp+0xd2>
								{
									SERVO_TIMER.Instance->CCR1--;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <maincpp+0x104>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ea:	3a01      	subs	r2, #1
 80006ec:	635a      	str	r2, [r3, #52]	@ 0x34
								}
								if(SERVO_TIMER.Instance->CCR1 < 2500)
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <maincpp+0x104>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006f4:	490f      	ldr	r1, [pc, #60]	@ (8000734 <maincpp+0x118>)
 80006f6:	2300      	movs	r3, #0
 80006f8:	4291      	cmp	r1, r2
 80006fa:	415b      	adcs	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00b      	beq.n	800071a <maincpp+0xfe>
											{
												SERVO_TIMER.Instance->CCR1++;
 8000702:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <maincpp+0x104>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000708:	3201      	adds	r2, #1
 800070a:	635a      	str	r2, [r3, #52]	@ 0x34
											}
								break;
 800070c:	e005      	b.n	800071a <maincpp+0xfe>

								break;

					case PRESS_TYPE::UNDEFINED:
						break;
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	e792      	b.n	8000638 <maincpp+0x1c>
			break;
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	e790      	b.n	8000638 <maincpp+0x1c>
						break;
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	e78e      	b.n	8000638 <maincpp+0x1c>
								break;
 800071a:	46c0      	nop			@ (mov r8, r8)
		switch(buttonAction)
 800071c:	e78c      	b.n	8000638 <maincpp+0x1c>
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	20000038 	.word	0x20000038
 8000724:	000005dc 	.word	0x000005dc
 8000728:	20000028 	.word	0x20000028
 800072c:	000005db 	.word	0x000005db
 8000730:	000009c4 	.word	0x000009c4
 8000734:	000009c3 	.word	0x000009c3

08000738 <HAL_GPIO_EXTI_Rising_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	0002      	movs	r2, r0
 8000740:	1dbb      	adds	r3, r7, #6
 8000742:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_INT13_Pin)
 8000744:	1dbb      	adds	r3, r7, #6
 8000746:	881a      	ldrh	r2, [r3, #0]
 8000748:	2380      	movs	r3, #128	@ 0x80
 800074a:	019b      	lsls	r3, r3, #6
 800074c:	429a      	cmp	r2, r3
 800074e:	d12b      	bne.n	80007a8 <HAL_GPIO_EXTI_Rising_Callback+0x70>
	{
		uint32_t now = HAL_GetTick();
 8000750:	f000 fbfe 	bl	8000f50 <HAL_GetTick>
 8000754:	0003      	movs	r3, r0
 8000756:	60fb      	str	r3, [r7, #12]

		if( ( now - time_since_button_pressed) < NORMAL_BUTTON_PRESS)
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	1ad2      	subs	r2, r2, r3
 8000760:	23fa      	movs	r3, #250	@ 0xfa
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	429a      	cmp	r2, r3
 8000766:	419b      	sbcs	r3, r3
 8000768:	425b      	negs	r3, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d003      	beq.n	8000778 <HAL_GPIO_EXTI_Rising_Callback+0x40>
		{
			buttonAction = PRESS_TYPE::NORMAL;
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e012      	b.n	800079e <HAL_GPIO_EXTI_Rising_Callback+0x66>
		}
		else if( ( now - time_since_button_pressed) < LONG_BUTTON_PRESS)
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	1ad2      	subs	r2, r2, r3
 8000780:	23fa      	movs	r3, #250	@ 0xfa
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	429a      	cmp	r2, r3
 8000786:	419b      	sbcs	r3, r3
 8000788:	425b      	negs	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <HAL_GPIO_EXTI_Rising_Callback+0x60>
		{
			buttonAction = PRESS_TYPE::LONG_PRESS;
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 8000792:	2202      	movs	r2, #2
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	e002      	b.n	800079e <HAL_GPIO_EXTI_Rising_Callback+0x66>
		}
		else
		{
			buttonAction = PRESS_TYPE::SUPER_LONG_PRESS;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 800079a:	2203      	movs	r2, #3
 800079c:	701a      	strb	r2, [r3, #0]
		}
		button_releases++;
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 80007a6:	601a      	str	r2, [r3, #0]
	}
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b004      	add	sp, #16
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000034 	.word	0x20000034
 80007b4:	20000028 	.word	0x20000028
 80007b8:	20000030 	.word	0x20000030

080007bc <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	0002      	movs	r2, r0
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_INT13_Pin)
 80007c8:	1dbb      	adds	r3, r7, #6
 80007ca:	881a      	ldrh	r2, [r3, #0]
 80007cc:	2380      	movs	r3, #128	@ 0x80
 80007ce:	019b      	lsls	r3, r3, #6
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d109      	bne.n	80007e8 <HAL_GPIO_EXTI_Falling_Callback+0x2c>
	{
		time_since_button_pressed = HAL_GetTick();
 80007d4:	f000 fbbc 	bl	8000f50 <HAL_GetTick>
 80007d8:	0002      	movs	r2, r0
 80007da:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 80007dc:	601a      	str	r2, [r3, #0]
		button_pressed++;
 80007de:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	4b03      	ldr	r3, [pc, #12]	@ (80007f4 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 80007e6:	601a      	str	r2, [r3, #0]
	}
}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b002      	add	sp, #8
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000034 	.word	0x20000034
 80007f4:	2000002c 	.word	0x2000002c

080007f8 <_Z41__static_initialization_and_destruction_0v>:
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
volatile uint32_t time_since_button_pressed = HAL_GetTick();
 80007fc:	f000 fba8 	bl	8000f50 <HAL_GetTick>
 8000800:	0002      	movs	r2, r0
 8000802:	4b02      	ldr	r3, [pc, #8]	@ (800080c <_Z41__static_initialization_and_destruction_0v+0x14>)
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000034 	.word	0x20000034

08000810 <_GLOBAL__sub_I_buttonAction>:
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
 8000814:	f7ff fff0 	bl	80007f8 <_Z41__static_initialization_and_destruction_0v>
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 fb1a 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f80a 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f000 f94e 	bl	8000ac8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800082c:	f000 f8fe 	bl	8000a2c <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8000830:	f000 f862 	bl	80008f8 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  maincpp();
 8000834:	f7ff fef2 	bl	800061c <maincpp>
  while (1)
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	e7fd      	b.n	8000838 <main+0x1c>

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b093      	sub	sp, #76	@ 0x4c
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	2410      	movs	r4, #16
 8000844:	193b      	adds	r3, r7, r4
 8000846:	0018      	movs	r0, r3
 8000848:	2338      	movs	r3, #56	@ 0x38
 800084a:	001a      	movs	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f003 f9ff 	bl	8003c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000852:	003b      	movs	r3, r7
 8000854:	0018      	movs	r0, r3
 8000856:	2310      	movs	r3, #16
 8000858:	001a      	movs	r2, r3
 800085a:	2100      	movs	r1, #0
 800085c:	f003 f9f8 	bl	8003c50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	0018      	movs	r0, r3
 8000866:	f000 fe07 	bl	8001478 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2202      	movs	r2, #2
 800086e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	0052      	lsls	r2, r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000878:	0021      	movs	r1, r4
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2240      	movs	r2, #64	@ 0x40
 8000884:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2202      	movs	r2, #2
 800088a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2202      	movs	r2, #2
 8000890:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2208      	movs	r2, #8
 800089c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	0292      	lsls	r2, r2, #10
 80008a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	22c0      	movs	r2, #192	@ 0xc0
 80008aa:	04d2      	lsls	r2, r2, #19
 80008ac:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	0592      	lsls	r2, r2, #22
 80008b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fe29 	bl	8001510 <HAL_RCC_OscConfig>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008c2:	f000 f979 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	003b      	movs	r3, r7
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	003b      	movs	r3, r7
 80008ce:	2202      	movs	r2, #2
 80008d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	003b      	movs	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	003b      	movs	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008de:	003b      	movs	r3, r7
 80008e0:	2102      	movs	r1, #2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 f92e 	bl	8001b44 <HAL_RCC_ClockConfig>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008ec:	f000 f964 	bl	8000bb8 <Error_Handler>
  }
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b013      	add	sp, #76	@ 0x4c
 80008f6:	bd90      	pop	{r4, r7, pc}

080008f8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b098      	sub	sp, #96	@ 0x60
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	2354      	movs	r3, #84	@ 0x54
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	230c      	movs	r3, #12
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f003 f9a1 	bl	8003c50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090e:	2338      	movs	r3, #56	@ 0x38
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	231c      	movs	r3, #28
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f003 f999 	bl	8003c50 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	0018      	movs	r0, r3
 8000922:	2334      	movs	r3, #52	@ 0x34
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f003 f992 	bl	8003c50 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800092c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a20 <MX_TIM15_Init+0x128>)
 800092e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a24 <MX_TIM15_Init+0x12c>)
 8000930:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 8000932:	4b3b      	ldr	r3, [pc, #236]	@ (8000a20 <MX_TIM15_Init+0x128>)
 8000934:	223f      	movs	r2, #63	@ 0x3f
 8000936:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b39      	ldr	r3, [pc, #228]	@ (8000a20 <MX_TIM15_Init+0x128>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000;
 800093e:	4b38      	ldr	r3, [pc, #224]	@ (8000a20 <MX_TIM15_Init+0x128>)
 8000940:	4a39      	ldr	r2, [pc, #228]	@ (8000a28 <MX_TIM15_Init+0x130>)
 8000942:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000944:	4b36      	ldr	r3, [pc, #216]	@ (8000a20 <MX_TIM15_Init+0x128>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800094a:	4b35      	ldr	r3, [pc, #212]	@ (8000a20 <MX_TIM15_Init+0x128>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b33      	ldr	r3, [pc, #204]	@ (8000a20 <MX_TIM15_Init+0x128>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000956:	4b32      	ldr	r3, [pc, #200]	@ (8000a20 <MX_TIM15_Init+0x128>)
 8000958:	0018      	movs	r0, r3
 800095a:	f001 fc55 	bl	8002208 <HAL_TIM_PWM_Init>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 f929 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2154      	movs	r1, #84	@ 0x54
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000974:	187a      	adds	r2, r7, r1
 8000976:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <MX_TIM15_Init+0x128>)
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f002 f9fc 	bl	8002d78 <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000984:	f000 f918 	bl	8000bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000988:	2138      	movs	r1, #56	@ 0x38
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2260      	movs	r2, #96	@ 0x60
 800098e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	1879      	adds	r1, r7, r1
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_TIM15_Init+0x128>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fd66 	bl	800248c <HAL_TIM_PWM_ConfigChannel>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 80009c4:	f000 f8f8 	bl	8000bb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2280      	movs	r2, #128	@ 0x80
 80009ea:	0192      	lsls	r2, r2, #6
 80009ec:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80009fa:	1d3a      	adds	r2, r7, #4
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_TIM15_Init+0x128>)
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f002 fa27 	bl	8002e54 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8000a0a:	f000 f8d5 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a0e:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <MX_TIM15_Init+0x128>)
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 f931 	bl	8000c78 <HAL_TIM_MspPostInit>

}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b018      	add	sp, #96	@ 0x60
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	20000038 	.word	0x20000038
 8000a24:	40014000 	.word	0x40014000
 8000a28:	00004e20 	.word	0x00004e20

08000a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a30:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a32:	4a24      	ldr	r2, [pc, #144]	@ (8000ac4 <MX_USART2_UART_Init+0x98>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a36:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a38:	22e1      	movs	r2, #225	@ 0xe1
 8000a3a:	0252      	lsls	r2, r2, #9
 8000a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f002 fa88 	bl	8002f8c <HAL_UART_Init>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 f89a 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f003 f801 	bl	8003a90 <HAL_UARTEx_SetTxFifoThreshold>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 f891 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f003 f838 	bl	8003b10 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 f888 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f002 ffb6 	bl	8003a1c <HAL_UARTEx_DisableFifoMode>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab4:	f000 f880 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	20000084 	.word	0x20000084
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b08b      	sub	sp, #44	@ 0x2c
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	2414      	movs	r4, #20
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2314      	movs	r3, #20
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f003 f8b9 	bl	8003c50 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b34      	ldr	r3, [pc, #208]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ae2:	4b33      	ldr	r3, [pc, #204]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aea:	4b31      	ldr	r3, [pc, #196]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aee:	2204      	movs	r2, #4
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af6:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000afa:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000afc:	2120      	movs	r1, #32
 8000afe:	430a      	orrs	r2, r1
 8000b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b02:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b06:	2220      	movs	r2, #32
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b28      	ldr	r3, [pc, #160]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b12:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b14:	2101      	movs	r1, #1
 8000b16:	430a      	orrs	r2, r1
 8000b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b1a:	4b25      	ldr	r3, [pc, #148]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b2a:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b32:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <MX_GPIO_Init+0xe8>)
 8000b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b36:	2202      	movs	r2, #2
 8000b38:	4013      	ands	r3, r2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b3e:	23a0      	movs	r3, #160	@ 0xa0
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	2200      	movs	r2, #0
 8000b44:	2120      	movs	r1, #32
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fc4e 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INT13_Pin */
  GPIO_InitStruct.Pin = BUTTON_INT13_Pin;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	0192      	lsls	r2, r2, #6
 8000b52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	22c4      	movs	r2, #196	@ 0xc4
 8000b58:	0392      	lsls	r2, r2, #14
 8000b5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INT13_GPIO_Port, &GPIO_InitStruct);
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	4a13      	ldr	r2, [pc, #76]	@ (8000bb4 <MX_GPIO_Init+0xec>)
 8000b66:	0019      	movs	r1, r3
 8000b68:	0010      	movs	r0, r2
 8000b6a:	f000 fad9 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b6e:	0021      	movs	r1, r4
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2220      	movs	r2, #32
 8000b74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2201      	movs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2202      	movs	r2, #2
 8000b86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b88:	187a      	adds	r2, r7, r1
 8000b8a:	23a0      	movs	r3, #160	@ 0xa0
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 fac5 	bl	8001120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2007      	movs	r0, #7
 8000b9c:	f000 fa8e 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ba0:	2007      	movs	r0, #7
 8000ba2:	f000 faa0 	bl	80010e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b00b      	add	sp, #44	@ 0x2c
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	50000800 	.word	0x50000800

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	e7fd      	b.n	8000bc0 <Error_Handler+0x8>

08000bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <HAL_MspInit+0x44>)
 8000bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <HAL_MspInit+0x44>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <HAL_MspInit+0x44>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4013      	ands	r3, r2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_MspInit+0x44>)
 8000be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HAL_MspInit+0x44>)
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0549      	lsls	r1, r1, #21
 8000bec:	430a      	orrs	r2, r1
 8000bee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_MspInit+0x44>)
 8000bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	055b      	lsls	r3, r3, #21
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b091      	sub	sp, #68	@ 0x44
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c14:	240c      	movs	r4, #12
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2334      	movs	r3, #52	@ 0x34
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f003 f816 	bl	8003c50 <memset>
  if(htim_pwm->Instance==TIM15)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a11      	ldr	r2, [pc, #68]	@ (8000c70 <HAL_TIM_PWM_MspInit+0x64>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d11c      	bne.n	8000c68 <HAL_TIM_PWM_MspInit+0x5c>

    /* USER CODE END TIM15_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	2280      	movs	r2, #128	@ 0x80
 8000c32:	03d2      	lsls	r2, r2, #15
 8000c34:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 f92a 	bl	8001e98 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000c48:	f7ff ffb6 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <HAL_TIM_PWM_MspInit+0x68>)
 8000c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <HAL_TIM_PWM_MspInit+0x68>)
 8000c52:	2180      	movs	r1, #128	@ 0x80
 8000c54:	0249      	lsls	r1, r1, #9
 8000c56:	430a      	orrs	r2, r1
 8000c58:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_TIM_PWM_MspInit+0x68>)
 8000c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c5e:	2380      	movs	r3, #128	@ 0x80
 8000c60:	025b      	lsls	r3, r3, #9
 8000c62:	4013      	ands	r3, r2
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END TIM15_MspInit 1 */

  }

}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b011      	add	sp, #68	@ 0x44
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	40014000 	.word	0x40014000
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b089      	sub	sp, #36	@ 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	240c      	movs	r4, #12
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	0018      	movs	r0, r3
 8000c86:	2314      	movs	r3, #20
 8000c88:	001a      	movs	r2, r3
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f002 ffe0 	bl	8003c50 <memset>
  if(htim->Instance==TIM15)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <HAL_TIM_MspPostInit+0x70>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d122      	bne.n	8000ce0 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM15_MspPostInit 0 */

    /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <HAL_TIM_MspPostInit+0x74>)
 8000c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <HAL_TIM_MspPostInit+0x74>)
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <HAL_TIM_MspPostInit+0x74>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000caa:	2202      	movs	r2, #2
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2280      	movs	r2, #128	@ 0x80
 8000cb6:	01d2      	lsls	r2, r2, #7
 8000cb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	0021      	movs	r1, r4
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2205      	movs	r2, #5
 8000cd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	4a06      	ldr	r2, [pc, #24]	@ (8000cf0 <HAL_TIM_MspPostInit+0x78>)
 8000cd8:	0019      	movs	r1, r3
 8000cda:	0010      	movs	r0, r2
 8000cdc:	f000 fa20 	bl	8001120 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b009      	add	sp, #36	@ 0x24
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	40014000 	.word	0x40014000
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	50000400 	.word	0x50000400

08000cf4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b097      	sub	sp, #92	@ 0x5c
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	2344      	movs	r3, #68	@ 0x44
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	0018      	movs	r0, r3
 8000d02:	2314      	movs	r3, #20
 8000d04:	001a      	movs	r2, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	f002 ffa2 	bl	8003c50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0c:	2410      	movs	r4, #16
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	0018      	movs	r0, r3
 8000d12:	2334      	movs	r3, #52	@ 0x34
 8000d14:	001a      	movs	r2, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	f002 ff9a 	bl	8003c50 <memset>
  if(huart->Instance==USART2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a22      	ldr	r2, [pc, #136]	@ (8000dac <HAL_UART_MspInit+0xb8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d13e      	bne.n	8000da4 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	2202      	movs	r2, #2
 8000d2a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	0018      	movs	r0, r3
 8000d36:	f001 f8af 	bl	8001e98 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	1e03      	subs	r3, r0, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d3e:	f7ff ff3b 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d42:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <HAL_UART_MspInit+0xbc>)
 8000d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <HAL_UART_MspInit+0xbc>)
 8000d48:	2180      	movs	r1, #128	@ 0x80
 8000d4a:	0289      	lsls	r1, r1, #10
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <HAL_UART_MspInit+0xbc>)
 8000d52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	029b      	lsls	r3, r3, #10
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <HAL_UART_MspInit+0xbc>)
 8000d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <HAL_UART_MspInit+0xbc>)
 8000d64:	2101      	movs	r1, #1
 8000d66:	430a      	orrs	r2, r1
 8000d68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <HAL_UART_MspInit+0xbc>)
 8000d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d76:	2144      	movs	r1, #68	@ 0x44
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2202      	movs	r2, #2
 8000d82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2201      	movs	r2, #1
 8000d88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2201      	movs	r2, #1
 8000d94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	187a      	adds	r2, r7, r1
 8000d98:	23a0      	movs	r3, #160	@ 0xa0
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 f9be 	bl	8001120 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b017      	add	sp, #92	@ 0x5c
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	40004400 	.word	0x40004400
 8000db0:	40021000 	.word	0x40021000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db8:	46c0      	nop			@ (mov r8, r8)
 8000dba:	e7fd      	b.n	8000db8 <NMI_Handler+0x4>

08000dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	e7fd      	b.n	8000dc0 <HardFault_Handler+0x4>

08000dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f8a6 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT13_Pin);
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	019b      	lsls	r3, r3, #6
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 fb18 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e04:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e08:	f7ff fff7 	bl	8000dfa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	@ (8000e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	@ (8000e50 <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e32:	f002 ff15 	bl	8003c60 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e36:	f7ff fcf1 	bl	800081c <main>

08000e3a <LoopForever>:

LoopForever:
  b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   r0, =_estack
 8000e3c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e48:	08003db0 	.word	0x08003db0
  ldr r2, =_sbss
 8000e4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e50:	2000011c 	.word	0x2000011c

08000e54 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_COMP_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <HAL_Init+0x3c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <HAL_Init+0x3c>)
 8000e6a:	2180      	movs	r1, #128	@ 0x80
 8000e6c:	0049      	lsls	r1, r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f810 	bl	8000e98 <HAL_InitTick>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e001      	b.n	8000e88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fe9e 	bl	8000bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	781b      	ldrb	r3, [r3, #0]
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <HAL_InitTick+0x88>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d02b      	beq.n	8000f08 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <HAL_InitTick+0x8c>)
 8000eb2:	681c      	ldr	r4, [r3, #0]
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <HAL_InitTick+0x88>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	0019      	movs	r1, r3
 8000eba:	23fa      	movs	r3, #250	@ 0xfa
 8000ebc:	0098      	lsls	r0, r3, #2
 8000ebe:	f7ff f921 	bl	8000104 <__udivsi3>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	f7ff f91c 	bl	8000104 <__udivsi3>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 f919 	bl	8001106 <HAL_SYSTICK_Config>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d112      	bne.n	8000efe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d80a      	bhi.n	8000ef4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 f8e8 	bl	80010bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <HAL_InitTick+0x90>)
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e00d      	b.n	8000f10 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e008      	b.n	8000f10 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000efe:	230f      	movs	r3, #15
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e003      	b.n	8000f10 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f08:	230f      	movs	r3, #15
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	781b      	ldrb	r3, [r3, #0]
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b005      	add	sp, #20
 8000f1c:	bd90      	pop	{r4, r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <HAL_IncTick+0x1c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	001a      	movs	r2, r3
 8000f36:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HAL_IncTick+0x20>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	18d2      	adds	r2, r2, r3
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <HAL_IncTick+0x20>)
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000118 	.word	0x20000118

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b02      	ldr	r3, [pc, #8]	@ (8000f60 <HAL_GetTick+0x10>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	20000118 	.word	0x20000118

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f76:	d809      	bhi.n	8000f8c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	231f      	movs	r3, #31
 8000f80:	401a      	ands	r2, r3
 8000f82:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <__NVIC_EnableIRQ+0x30>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	4091      	lsls	r1, r2
 8000f88:	000a      	movs	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fac:	d828      	bhi.n	8001000 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fae:	4a2f      	ldr	r2, [pc, #188]	@ (800106c <__NVIC_SetPriority+0xd4>)
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	33c0      	adds	r3, #192	@ 0xc0
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	589b      	ldr	r3, [r3, r2]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	21ff      	movs	r1, #255	@ 0xff
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	43d2      	mvns	r2, r2
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	019b      	lsls	r3, r3, #6
 8000fda:	22ff      	movs	r2, #255	@ 0xff
 8000fdc:	401a      	ands	r2, r3
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	4003      	ands	r3, r0
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fec:	481f      	ldr	r0, [pc, #124]	@ (800106c <__NVIC_SetPriority+0xd4>)
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	33c0      	adds	r3, #192	@ 0xc0
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ffe:	e031      	b.n	8001064 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001000:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <__NVIC_SetPriority+0xd8>)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	0019      	movs	r1, r3
 8001008:	230f      	movs	r3, #15
 800100a:	400b      	ands	r3, r1
 800100c:	3b08      	subs	r3, #8
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3306      	adds	r3, #6
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	18d3      	adds	r3, r2, r3
 8001016:	3304      	adds	r3, #4
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1dfa      	adds	r2, r7, #7
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	0011      	movs	r1, r2
 8001020:	2203      	movs	r2, #3
 8001022:	400a      	ands	r2, r1
 8001024:	00d2      	lsls	r2, r2, #3
 8001026:	21ff      	movs	r1, #255	@ 0xff
 8001028:	4091      	lsls	r1, r2
 800102a:	000a      	movs	r2, r1
 800102c:	43d2      	mvns	r2, r2
 800102e:	401a      	ands	r2, r3
 8001030:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	019b      	lsls	r3, r3, #6
 8001036:	22ff      	movs	r2, #255	@ 0xff
 8001038:	401a      	ands	r2, r3
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	0018      	movs	r0, r3
 8001040:	2303      	movs	r3, #3
 8001042:	4003      	ands	r3, r0
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001048:	4809      	ldr	r0, [pc, #36]	@ (8001070 <__NVIC_SetPriority+0xd8>)
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	001c      	movs	r4, r3
 8001050:	230f      	movs	r3, #15
 8001052:	4023      	ands	r3, r4
 8001054:	3b08      	subs	r3, #8
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	430a      	orrs	r2, r1
 800105a:	3306      	adds	r3, #6
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	18c3      	adds	r3, r0, r3
 8001060:	3304      	adds	r3, #4
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	46c0      	nop			@ (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b003      	add	sp, #12
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1e5a      	subs	r2, r3, #1
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	045b      	lsls	r3, r3, #17
 8001084:	429a      	cmp	r2, r3
 8001086:	d301      	bcc.n	800108c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001088:	2301      	movs	r3, #1
 800108a:	e010      	b.n	80010ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <SysTick_Config+0x44>)
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	3a01      	subs	r2, #1
 8001092:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001094:	2301      	movs	r3, #1
 8001096:	425b      	negs	r3, r3
 8001098:	2103      	movs	r1, #3
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff ff7c 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <SysTick_Config+0x44>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <SysTick_Config+0x44>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	210f      	movs	r1, #15
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	1c02      	adds	r2, r0, #0
 80010cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b004      	add	sp, #16
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	0002      	movs	r2, r0
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ff33 	bl	8000f64 <__NVIC_EnableIRQ>
}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ffaf 	bl	8001074 <SysTick_Config>
 8001116:	0003      	movs	r3, r0
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e147      	b.n	80013c0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <HAL_GPIO_Init+0x28>
 8001146:	e138      	b.n	80013ba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2203      	movs	r2, #3
 800114e:	4013      	ands	r3, r2
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x40>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	4013      	ands	r3, r2
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	43da      	mvns	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	409a      	lsls	r2, r3
 8001182:	0013      	movs	r3, r2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	43da      	mvns	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	2201      	movs	r2, #1
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2203      	movs	r2, #3
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	409a      	lsls	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2203      	movs	r2, #3
 8001204:	4013      	ands	r3, r2
 8001206:	2b02      	cmp	r3, #2
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	58d3      	ldr	r3, [r2, r3]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2207      	movs	r2, #7
 800121c:	4013      	ands	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2107      	movs	r1, #7
 8001236:	400b      	ands	r3, r1
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	6939      	ldr	r1, [r7, #16]
 8001250:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2203      	movs	r2, #3
 8001270:	401a      	ands	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	23c0      	movs	r3, #192	@ 0xc0
 800128c:	029b      	lsls	r3, r3, #10
 800128e:	4013      	ands	r3, r2
 8001290:	d100      	bne.n	8001294 <HAL_GPIO_Init+0x174>
 8001292:	e092      	b.n	80013ba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001294:	4a50      	ldr	r2, [pc, #320]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3318      	adds	r3, #24
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	589b      	ldr	r3, [r3, r2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2203      	movs	r2, #3
 80012a6:	4013      	ands	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	220f      	movs	r2, #15
 80012ac:	409a      	lsls	r2, r3
 80012ae:	0013      	movs	r3, r2
 80012b0:	43da      	mvns	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	23a0      	movs	r3, #160	@ 0xa0
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	429a      	cmp	r2, r3
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x1ca>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a45      	ldr	r2, [pc, #276]	@ (80013dc <HAL_GPIO_Init+0x2bc>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x1c6>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a44      	ldr	r2, [pc, #272]	@ (80013e0 <HAL_GPIO_Init+0x2c0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x1c2>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a43      	ldr	r2, [pc, #268]	@ (80013e4 <HAL_GPIO_Init+0x2c4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x1be>
 80012da:	2303      	movs	r3, #3
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x1cc>
 80012de:	2305      	movs	r3, #5
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x1cc>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x1cc>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x1cc>
 80012ea:	2300      	movs	r3, #0
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	2103      	movs	r1, #3
 80012f0:	400a      	ands	r2, r1
 80012f2:	00d2      	lsls	r2, r2, #3
 80012f4:	4093      	lsls	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012fc:	4936      	ldr	r1, [pc, #216]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3318      	adds	r3, #24
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800130a:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	2380      	movs	r3, #128	@ 0x80
 8001320:	035b      	lsls	r3, r3, #13
 8001322:	4013      	ands	r3, r2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800132e:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43da      	mvns	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	039b      	lsls	r3, r3, #14
 800134c:	4013      	ands	r3, r2
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001358:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800135e:	4a1e      	ldr	r2, [pc, #120]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 8001360:	2384      	movs	r3, #132	@ 0x84
 8001362:	58d3      	ldr	r3, [r2, r3]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43da      	mvns	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	2380      	movs	r3, #128	@ 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001384:	4914      	ldr	r1, [pc, #80]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 8001386:	2284      	movs	r2, #132	@ 0x84
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800138c:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 800138e:	2380      	movs	r3, #128	@ 0x80
 8001390:	58d3      	ldr	r3, [r2, r3]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43da      	mvns	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	025b      	lsls	r3, r3, #9
 80013a6:	4013      	ands	r3, r2
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b2:	4909      	ldr	r1, [pc, #36]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 80013b4:	2280      	movs	r2, #128	@ 0x80
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	1e13      	subs	r3, r2, #0
 80013ca:	d000      	beq.n	80013ce <HAL_GPIO_Init+0x2ae>
 80013cc:	e6b0      	b.n	8001130 <HAL_GPIO_Init+0x10>
  }
}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	46c0      	nop			@ (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b006      	add	sp, #24
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021800 	.word	0x40021800
 80013dc:	50000400 	.word	0x50000400
 80013e0:	50000800 	.word	0x50000800
 80013e4:	50000c00 	.word	0x50000c00

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	0008      	movs	r0, r1
 80013f2:	0011      	movs	r1, r2
 80013f4:	1cbb      	adds	r3, r7, #2
 80013f6:	1c02      	adds	r2, r0, #0
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	1c7b      	adds	r3, r7, #1
 80013fc:	1c0a      	adds	r2, r1, #0
 80013fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	1c7b      	adds	r3, r7, #1
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001408:	1cbb      	adds	r3, r7, #2
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001410:	e003      	b.n	800141a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001412:	1cbb      	adds	r3, r7, #2
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	0002      	movs	r2, r0
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	1dba      	adds	r2, r7, #6
 8001436:	8812      	ldrh	r2, [r2, #0]
 8001438:	4013      	ands	r3, r2
 800143a:	d008      	beq.n	800144e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800143e:	1dba      	adds	r2, r7, #6
 8001440:	8812      	ldrh	r2, [r2, #0]
 8001442:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001444:	1dbb      	adds	r3, r7, #6
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff f975 	bl	8000738 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	1dba      	adds	r2, r7, #6
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	4013      	ands	r3, r2
 8001458:	d008      	beq.n	800146c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800145c:	1dba      	adds	r2, r7, #6
 800145e:	8812      	ldrh	r2, [r2, #0]
 8001460:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001462:	1dbb      	adds	r3, r7, #6
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff f9a8 	bl	80007bc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800146c:	46c0      	nop			@ (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021800 	.word	0x40021800

08001478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001480:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a19      	ldr	r2, [pc, #100]	@ (80014ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001486:	4013      	ands	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	429a      	cmp	r2, r3
 800149a:	d11f      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	0013      	movs	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	189b      	adds	r3, r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4912      	ldr	r1, [pc, #72]	@ (80014f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7fe fe2a 	bl	8000104 <__udivsi3>
 80014b0:	0003      	movs	r3, r0
 80014b2:	3301      	adds	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014b6:	e008      	b.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e001      	b.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e009      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	401a      	ands	r2, r3
 80014d4:	2380      	movs	r3, #128	@ 0x80
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	429a      	cmp	r2, r3
 80014da:	d0ed      	beq.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	40007000 	.word	0x40007000
 80014ec:	fffff9ff 	.word	0xfffff9ff
 80014f0:	20000000 	.word	0x20000000
 80014f4:	000f4240 	.word	0x000f4240

080014f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <LL_RCC_GetAPB1Prescaler+0x14>)
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	23e0      	movs	r3, #224	@ 0xe0
 8001502:	01db      	lsls	r3, r3, #7
 8001504:	4013      	ands	r3, r2
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e2fe      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2201      	movs	r2, #1
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x1e>
 800152c:	e07c      	b.n	8001628 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152e:	4bc3      	ldr	r3, [pc, #780]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2238      	movs	r2, #56	@ 0x38
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001538:	4bc0      	ldr	r3, [pc, #768]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2203      	movs	r2, #3
 800153e:	4013      	ands	r3, r2
 8001540:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b10      	cmp	r3, #16
 8001546:	d102      	bne.n	800154e <HAL_RCC_OscConfig+0x3e>
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d002      	beq.n	8001554 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d10b      	bne.n	800156c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	4bb9      	ldr	r3, [pc, #740]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	029b      	lsls	r3, r3, #10
 800155c:	4013      	ands	r3, r2
 800155e:	d062      	beq.n	8001626 <HAL_RCC_OscConfig+0x116>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d15e      	bne.n	8001626 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e2d9      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	025b      	lsls	r3, r3, #9
 8001574:	429a      	cmp	r2, r3
 8001576:	d107      	bne.n	8001588 <HAL_RCC_OscConfig+0x78>
 8001578:	4bb0      	ldr	r3, [pc, #704]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4baf      	ldr	r3, [pc, #700]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800157e:	2180      	movs	r1, #128	@ 0x80
 8001580:	0249      	lsls	r1, r1, #9
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e020      	b.n	80015ca <HAL_RCC_OscConfig+0xba>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	23a0      	movs	r3, #160	@ 0xa0
 800158e:	02db      	lsls	r3, r3, #11
 8001590:	429a      	cmp	r2, r3
 8001592:	d10e      	bne.n	80015b2 <HAL_RCC_OscConfig+0xa2>
 8001594:	4ba9      	ldr	r3, [pc, #676]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4ba8      	ldr	r3, [pc, #672]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800159a:	2180      	movs	r1, #128	@ 0x80
 800159c:	02c9      	lsls	r1, r1, #11
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	4ba6      	ldr	r3, [pc, #664]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4ba5      	ldr	r3, [pc, #660]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80015a8:	2180      	movs	r1, #128	@ 0x80
 80015aa:	0249      	lsls	r1, r1, #9
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e00b      	b.n	80015ca <HAL_RCC_OscConfig+0xba>
 80015b2:	4ba2      	ldr	r3, [pc, #648]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4ba1      	ldr	r3, [pc, #644]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80015b8:	49a1      	ldr	r1, [pc, #644]	@ (8001840 <HAL_RCC_OscConfig+0x330>)
 80015ba:	400a      	ands	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	4b9f      	ldr	r3, [pc, #636]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b9e      	ldr	r3, [pc, #632]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80015c4:	499f      	ldr	r1, [pc, #636]	@ (8001844 <HAL_RCC_OscConfig+0x334>)
 80015c6:	400a      	ands	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d014      	beq.n	80015fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d2:	f7ff fcbd 	bl	8000f50 <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fcb8 	bl	8000f50 <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	@ 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e298      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ee:	4b93      	ldr	r3, [pc, #588]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xcc>
 80015fa:	e015      	b.n	8001628 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fca8 	bl	8000f50 <HAL_GetTick>
 8001600:	0003      	movs	r3, r0
 8001602:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001606:	f7ff fca3 	bl	8000f50 <HAL_GetTick>
 800160a:	0002      	movs	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b64      	cmp	r3, #100	@ 0x64
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e283      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001618:	4b88      	ldr	r3, [pc, #544]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	029b      	lsls	r3, r3, #10
 8001620:	4013      	ands	r3, r2
 8001622:	d1f0      	bne.n	8001606 <HAL_RCC_OscConfig+0xf6>
 8001624:	e000      	b.n	8001628 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2202      	movs	r2, #2
 800162e:	4013      	ands	r3, r2
 8001630:	d100      	bne.n	8001634 <HAL_RCC_OscConfig+0x124>
 8001632:	e099      	b.n	8001768 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001634:	4b81      	ldr	r3, [pc, #516]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2238      	movs	r2, #56	@ 0x38
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800163e:	4b7f      	ldr	r3, [pc, #508]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2203      	movs	r2, #3
 8001644:	4013      	ands	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b10      	cmp	r3, #16
 800164c:	d102      	bne.n	8001654 <HAL_RCC_OscConfig+0x144>
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d002      	beq.n	800165a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d135      	bne.n	80016c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800165a:	4b78      	ldr	r3, [pc, #480]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	2380      	movs	r3, #128	@ 0x80
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4013      	ands	r3, r2
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x162>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e256      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b72      	ldr	r3, [pc, #456]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a74      	ldr	r2, [pc, #464]	@ (8001848 <HAL_RCC_OscConfig+0x338>)
 8001678:	4013      	ands	r3, r2
 800167a:	0019      	movs	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	021a      	lsls	r2, r3, #8
 8001682:	4b6e      	ldr	r3, [pc, #440]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d112      	bne.n	80016b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800168e:	4b6b      	ldr	r3, [pc, #428]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6e      	ldr	r2, [pc, #440]	@ (800184c <HAL_RCC_OscConfig+0x33c>)
 8001694:	4013      	ands	r3, r2
 8001696:	0019      	movs	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	4b67      	ldr	r3, [pc, #412]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016a2:	4b66      	ldr	r3, [pc, #408]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	0adb      	lsrs	r3, r3, #11
 80016a8:	2207      	movs	r2, #7
 80016aa:	4013      	ands	r3, r2
 80016ac:	4a68      	ldr	r2, [pc, #416]	@ (8001850 <HAL_RCC_OscConfig+0x340>)
 80016ae:	40da      	lsrs	r2, r3
 80016b0:	4b68      	ldr	r3, [pc, #416]	@ (8001854 <HAL_RCC_OscConfig+0x344>)
 80016b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016b4:	4b68      	ldr	r3, [pc, #416]	@ (8001858 <HAL_RCC_OscConfig+0x348>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7ff fbed 	bl	8000e98 <HAL_InitTick>
 80016be:	1e03      	subs	r3, r0, #0
 80016c0:	d051      	beq.n	8001766 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e22c      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d030      	beq.n	8001730 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016ce:	4b5b      	ldr	r3, [pc, #364]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a5e      	ldr	r2, [pc, #376]	@ (800184c <HAL_RCC_OscConfig+0x33c>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	4b57      	ldr	r3, [pc, #348]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016e2:	4b56      	ldr	r3, [pc, #344]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b55      	ldr	r3, [pc, #340]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80016e8:	2180      	movs	r1, #128	@ 0x80
 80016ea:	0049      	lsls	r1, r1, #1
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fc2e 	bl	8000f50 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff fc29 	bl	8000f50 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e209      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170c:	4b4b      	ldr	r3, [pc, #300]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	@ 0x80
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4013      	ands	r3, r2
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b48      	ldr	r3, [pc, #288]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a4a      	ldr	r2, [pc, #296]	@ (8001848 <HAL_RCC_OscConfig+0x338>)
 800171e:	4013      	ands	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	021a      	lsls	r2, r3, #8
 8001728:	4b44      	ldr	r3, [pc, #272]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800172a:	430a      	orrs	r2, r1
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	e01b      	b.n	8001768 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001730:	4b42      	ldr	r3, [pc, #264]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b41      	ldr	r3, [pc, #260]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001736:	4949      	ldr	r1, [pc, #292]	@ (800185c <HAL_RCC_OscConfig+0x34c>)
 8001738:	400a      	ands	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fc08 	bl	8000f50 <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff fc03 	bl	8000f50 <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e1e3      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001758:	4b38      	ldr	r3, [pc, #224]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4013      	ands	r3, r2
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x236>
 8001764:	e000      	b.n	8001768 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001766:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2208      	movs	r2, #8
 800176e:	4013      	ands	r3, r2
 8001770:	d047      	beq.n	8001802 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001772:	4b32      	ldr	r3, [pc, #200]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2238      	movs	r2, #56	@ 0x38
 8001778:	4013      	ands	r3, r2
 800177a:	2b18      	cmp	r3, #24
 800177c:	d10a      	bne.n	8001794 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800177e:	4b2f      	ldr	r3, [pc, #188]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001782:	2202      	movs	r2, #2
 8001784:	4013      	ands	r3, r2
 8001786:	d03c      	beq.n	8001802 <HAL_RCC_OscConfig+0x2f2>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d138      	bne.n	8001802 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e1c5      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d019      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800179c:	4b27      	ldr	r3, [pc, #156]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 800179e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017a0:	4b26      	ldr	r3, [pc, #152]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fbd2 	bl	8000f50 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b2:	f7ff fbcd 	bl	8000f50 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e1ad      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c4:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80017c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d0f1      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2a2>
 80017ce:	e018      	b.n	8001802 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80017d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	438a      	bics	r2, r1
 80017da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff fbb8 	bl	8000f50 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fbb3 	bl	8000f50 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e193      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f8:	4b10      	ldr	r3, [pc, #64]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 80017fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fc:	2202      	movs	r2, #2
 80017fe:	4013      	ands	r3, r2
 8001800:	d1f1      	bne.n	80017e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2204      	movs	r2, #4
 8001808:	4013      	ands	r3, r2
 800180a:	d100      	bne.n	800180e <HAL_RCC_OscConfig+0x2fe>
 800180c:	e0c6      	b.n	800199c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	231f      	movs	r3, #31
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2238      	movs	r2, #56	@ 0x38
 800181c:	4013      	ands	r3, r2
 800181e:	2b20      	cmp	r3, #32
 8001820:	d11e      	bne.n	8001860 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_RCC_OscConfig+0x32c>)
 8001824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001826:	2202      	movs	r2, #2
 8001828:	4013      	ands	r3, r2
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x31e>
 800182c:	e0b6      	b.n	800199c <HAL_RCC_OscConfig+0x48c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d000      	beq.n	8001838 <HAL_RCC_OscConfig+0x328>
 8001836:	e0b1      	b.n	800199c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e171      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
 800183c:	40021000 	.word	0x40021000
 8001840:	fffeffff 	.word	0xfffeffff
 8001844:	fffbffff 	.word	0xfffbffff
 8001848:	ffff80ff 	.word	0xffff80ff
 800184c:	ffffc7ff 	.word	0xffffc7ff
 8001850:	00f42400 	.word	0x00f42400
 8001854:	20000000 	.word	0x20000000
 8001858:	20000004 	.word	0x20000004
 800185c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001860:	4bb1      	ldr	r3, [pc, #708]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001862:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	055b      	lsls	r3, r3, #21
 8001868:	4013      	ands	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_RCC_OscConfig+0x360>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x362>
 8001870:	2300      	movs	r3, #0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d011      	beq.n	800189a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4bac      	ldr	r3, [pc, #688]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800187a:	4bab      	ldr	r3, [pc, #684]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 800187c:	2180      	movs	r1, #128	@ 0x80
 800187e:	0549      	lsls	r1, r1, #21
 8001880:	430a      	orrs	r2, r1
 8001882:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001884:	4ba8      	ldr	r3, [pc, #672]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	055b      	lsls	r3, r3, #21
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001892:	231f      	movs	r3, #31
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189a:	4ba4      	ldr	r3, [pc, #656]	@ (8001b2c <HAL_RCC_OscConfig+0x61c>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	d11a      	bne.n	80018dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018a6:	4ba1      	ldr	r3, [pc, #644]	@ (8001b2c <HAL_RCC_OscConfig+0x61c>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4ba0      	ldr	r3, [pc, #640]	@ (8001b2c <HAL_RCC_OscConfig+0x61c>)
 80018ac:	2180      	movs	r1, #128	@ 0x80
 80018ae:	0049      	lsls	r1, r1, #1
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb4c 	bl	8000f50 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018be:	f7ff fb47 	bl	8000f50 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e127      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d0:	4b96      	ldr	r3, [pc, #600]	@ (8001b2c <HAL_RCC_OscConfig+0x61c>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4013      	ands	r3, r2
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3e2>
 80018e4:	4b90      	ldr	r3, [pc, #576]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 80018e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018f0:	e01c      	b.n	800192c <HAL_RCC_OscConfig+0x41c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x404>
 80018fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 80018fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018fe:	4b8a      	ldr	r3, [pc, #552]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001900:	2104      	movs	r1, #4
 8001902:	430a      	orrs	r2, r1
 8001904:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001906:	4b88      	ldr	r3, [pc, #544]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001908:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800190a:	4b87      	ldr	r3, [pc, #540]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 800190c:	2101      	movs	r1, #1
 800190e:	430a      	orrs	r2, r1
 8001910:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0x41c>
 8001914:	4b84      	ldr	r3, [pc, #528]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001916:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001918:	4b83      	ldr	r3, [pc, #524]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 800191a:	2101      	movs	r1, #1
 800191c:	438a      	bics	r2, r1
 800191e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001920:	4b81      	ldr	r3, [pc, #516]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001922:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001924:	4b80      	ldr	r3, [pc, #512]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001926:	2104      	movs	r1, #4
 8001928:	438a      	bics	r2, r1
 800192a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d014      	beq.n	800195e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff fb0c 	bl	8000f50 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193c:	e009      	b.n	8001952 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff fb07 	bl	8000f50 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	4a79      	ldr	r2, [pc, #484]	@ (8001b30 <HAL_RCC_OscConfig+0x620>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0e6      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001952:	4b75      	ldr	r3, [pc, #468]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x42e>
 800195c:	e013      	b.n	8001986 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff faf7 	bl	8000f50 <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001966:	e009      	b.n	800197c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7ff faf2 	bl	8000f50 <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	4a6f      	ldr	r2, [pc, #444]	@ (8001b30 <HAL_RCC_OscConfig+0x620>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e0d1      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800197c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 800197e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001986:	231f      	movs	r3, #31
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001990:	4b65      	ldr	r3, [pc, #404]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001994:	4b64      	ldr	r3, [pc, #400]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001996:	4967      	ldr	r1, [pc, #412]	@ (8001b34 <HAL_RCC_OscConfig+0x624>)
 8001998:	400a      	ands	r2, r1
 800199a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x496>
 80019a4:	e0bb      	b.n	8001b1e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a6:	4b60      	ldr	r3, [pc, #384]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2238      	movs	r2, #56	@ 0x38
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b10      	cmp	r3, #16
 80019b0:	d100      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4a4>
 80019b2:	e07b      	b.n	8001aac <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d156      	bne.n	8001a6a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b59      	ldr	r3, [pc, #356]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 80019c2:	495d      	ldr	r1, [pc, #372]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 80019c4:	400a      	ands	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff fac2 	bl	8000f50 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff fabd 	bl	8000f50 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e09d      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e4:	4b50      	ldr	r3, [pc, #320]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	049b      	lsls	r3, r3, #18
 80019ec:	4013      	ands	r3, r2
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4a51      	ldr	r2, [pc, #324]	@ (8001b3c <HAL_RCC_OscConfig+0x62c>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1a      	ldr	r2, [r3, #32]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	4b42      	ldr	r3, [pc, #264]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001a20:	430a      	orrs	r2, r1
 8001a22:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a24:	4b40      	ldr	r3, [pc, #256]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b3f      	ldr	r3, [pc, #252]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001a2a:	2180      	movs	r1, #128	@ 0x80
 8001a2c:	0449      	lsls	r1, r1, #17
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a32:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4b3c      	ldr	r3, [pc, #240]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001a38:	2180      	movs	r1, #128	@ 0x80
 8001a3a:	0549      	lsls	r1, r1, #21
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fa86 	bl	8000f50 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff fa81 	bl	8000f50 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e061      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5c:	4b32      	ldr	r3, [pc, #200]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	049b      	lsls	r3, r3, #18
 8001a64:	4013      	ands	r3, r2
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x53a>
 8001a68:	e059      	b.n	8001b1e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001a70:	4931      	ldr	r1, [pc, #196]	@ (8001b38 <HAL_RCC_OscConfig+0x628>)
 8001a72:	400a      	ands	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff fa6b 	bl	8000f50 <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff fa66 	bl	8000f50 <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e046      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	049b      	lsls	r3, r3, #18
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001aa4:	4926      	ldr	r1, [pc, #152]	@ (8001b40 <HAL_RCC_OscConfig+0x630>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	e038      	b.n	8001b1e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e033      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <HAL_RCC_OscConfig+0x618>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d126      	bne.n	8001b1a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2270      	movs	r2, #112	@ 0x70
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d11f      	bne.n	8001b1a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	23fe      	movs	r3, #254	@ 0xfe
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d116      	bne.n	8001b1a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	23f8      	movs	r3, #248	@ 0xf8
 8001af0:	039b      	lsls	r3, r3, #14
 8001af2:	401a      	ands	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d10e      	bne.n	8001b1a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	23e0      	movs	r3, #224	@ 0xe0
 8001b00:	051b      	lsls	r3, r3, #20
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	0f5b      	lsrs	r3, r3, #29
 8001b10:	075a      	lsls	r2, r3, #29
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b008      	add	sp, #32
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40007000 	.word	0x40007000
 8001b30:	00001388 	.word	0x00001388
 8001b34:	efffffff 	.word	0xefffffff
 8001b38:	feffffff 	.word	0xfeffffff
 8001b3c:	11c1808c 	.word	0x11c1808c
 8001b40:	eefefffc 	.word	0xeefefffc

08001b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0e9      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b76      	ldr	r3, [pc, #472]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d91e      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b73      	ldr	r3, [pc, #460]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	4b70      	ldr	r3, [pc, #448]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b78:	f7ff f9ea 	bl	8000f50 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7ff f9e5 	bl	8000f50 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	4a6a      	ldr	r2, [pc, #424]	@ (8001d38 <HAL_RCC_ClockConfig+0x1f4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0ca      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b96:	4b67      	ldr	r3, [pc, #412]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1ee      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	d015      	beq.n	8001bda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d006      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bb8:	4b60      	ldr	r3, [pc, #384]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001bbe:	21e0      	movs	r1, #224	@ 0xe0
 8001bc0:	01c9      	lsls	r1, r1, #7
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	4a5d      	ldr	r2, [pc, #372]	@ (8001d40 <HAL_RCC_ClockConfig+0x1fc>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b59      	ldr	r3, [pc, #356]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	d057      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bec:	4b53      	ldr	r3, [pc, #332]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	029b      	lsls	r3, r3, #10
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d12b      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e097      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c04:	4b4d      	ldr	r3, [pc, #308]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	049b      	lsls	r3, r3, #18
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d11f      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e08b      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	4b47      	ldr	r3, [pc, #284]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4013      	ands	r3, r2
 8001c26:	d113      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e07f      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c34:	4b41      	ldr	r3, [pc, #260]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c38:	2202      	movs	r2, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d108      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e074      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c42:	4b3e      	ldr	r3, [pc, #248]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e06d      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c50:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2207      	movs	r2, #7
 8001c56:	4393      	bics	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4b37      	ldr	r3, [pc, #220]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c64:	f7ff f974 	bl	8000f50 <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6c:	e009      	b.n	8001c82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7ff f96f 	bl	8000f50 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	4a2f      	ldr	r2, [pc, #188]	@ (8001d38 <HAL_RCC_ClockConfig+0x1f4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e054      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b2e      	ldr	r3, [pc, #184]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2238      	movs	r2, #56	@ 0x38
 8001c88:	401a      	ands	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1ec      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2207      	movs	r2, #7
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d21e      	bcs.n	8001ce0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	4393      	bics	r3, r2
 8001caa:	0019      	movs	r1, r3
 8001cac:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cb4:	f7ff f94c 	bl	8000f50 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cbc:	e009      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbe:	f7ff f947 	bl	8000f50 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d38 <HAL_RCC_ClockConfig+0x1f4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e02c      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd2:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	4013      	ands	r3, r2
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1ee      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4a15      	ldr	r2, [pc, #84]	@ (8001d44 <HAL_RCC_ClockConfig+0x200>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cfe:	f000 f829 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d02:	0001      	movs	r1, r0
 8001d04:	4b0d      	ldr	r3, [pc, #52]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <HAL_RCC_ClockConfig+0x204>)
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	58d3      	ldr	r3, [r2, r3]
 8001d14:	221f      	movs	r2, #31
 8001d16:	4013      	ands	r3, r2
 8001d18:	000a      	movs	r2, r1
 8001d1a:	40da      	lsrs	r2, r3
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_RCC_ClockConfig+0x208>)
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d20:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <HAL_RCC_ClockConfig+0x20c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff f8b7 	bl	8000e98 <HAL_InitTick>
 8001d2a:	0003      	movs	r3, r0
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b004      	add	sp, #16
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40022000 	.word	0x40022000
 8001d38:	00001388 	.word	0x00001388
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	fffff0ff 	.word	0xfffff0ff
 8001d44:	ffff8fff 	.word	0xffff8fff
 8001d48:	08003cc0 	.word	0x08003cc0
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2238      	movs	r2, #56	@ 0x38
 8001d60:	4013      	ands	r3, r2
 8001d62:	d10f      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d64:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0adb      	lsrs	r3, r3, #11
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2201      	movs	r2, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	0013      	movs	r3, r2
 8001d74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	4835      	ldr	r0, [pc, #212]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d7a:	f7fe f9c3 	bl	8000104 <__udivsi3>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	e05d      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d84:	4b31      	ldr	r3, [pc, #196]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2238      	movs	r2, #56	@ 0x38
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d90:	4b30      	ldr	r3, [pc, #192]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e054      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2238      	movs	r2, #56	@ 0x38
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d138      	bne.n	8001e14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001da2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2203      	movs	r2, #3
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	2207      	movs	r2, #7
 8001db4:	4013      	ands	r3, r2
 8001db6:	3301      	adds	r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d10d      	bne.n	8001ddc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	4824      	ldr	r0, [pc, #144]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x100>)
 8001dc4:	f7fe f99e 	bl	8000104 <__udivsi3>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	0019      	movs	r1, r3
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	227f      	movs	r2, #127	@ 0x7f
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	434b      	muls	r3, r1
 8001dd8:	617b      	str	r3, [r7, #20]
        break;
 8001dda:	e00d      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	481c      	ldr	r0, [pc, #112]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001de0:	f7fe f990 	bl	8000104 <__udivsi3>
 8001de4:	0003      	movs	r3, r0
 8001de6:	0019      	movs	r1, r3
 8001de8:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	227f      	movs	r2, #127	@ 0x7f
 8001df0:	4013      	ands	r3, r2
 8001df2:	434b      	muls	r3, r1
 8001df4:	617b      	str	r3, [r7, #20]
        break;
 8001df6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0f5b      	lsrs	r3, r3, #29
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4013      	ands	r3, r2
 8001e02:	3301      	adds	r3, #1
 8001e04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	6978      	ldr	r0, [r7, #20]
 8001e0a:	f7fe f97b 	bl	8000104 <__udivsi3>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e015      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e14:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2238      	movs	r2, #56	@ 0x38
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d103      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2238      	movs	r2, #56	@ 0x38
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b18      	cmp	r3, #24
 8001e32:	d103      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e34:	23fa      	movs	r3, #250	@ 0xfa
 8001e36:	01db      	lsls	r3, r3, #7
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	e001      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e40:	693b      	ldr	r3, [r7, #16]
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b006      	add	sp, #24
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b02      	ldr	r3, [pc, #8]	@ (8001e68 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			@ (mov r8, r8)
 8001e68:	20000000 	.word	0x20000000

08001e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e6c:	b5b0      	push	{r4, r5, r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e70:	f7ff fff2 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e74:	0004      	movs	r4, r0
 8001e76:	f7ff fb3f 	bl	80014f8 <LL_RCC_GetAPB1Prescaler>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	0b1a      	lsrs	r2, r3, #12
 8001e7e:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e80:	0092      	lsls	r2, r2, #2
 8001e82:	58d3      	ldr	r3, [r2, r3]
 8001e84:	221f      	movs	r2, #31
 8001e86:	4013      	ands	r3, r2
 8001e88:	40dc      	lsrs	r4, r3
 8001e8a:	0023      	movs	r3, r4
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bdb0      	pop	{r4, r5, r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	08003d00 	.word	0x08003d00

08001e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ea0:	2313      	movs	r3, #19
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	029b      	lsls	r3, r3, #10
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d100      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ebc:	e0a3      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebe:	2011      	movs	r0, #17
 8001ec0:	183b      	adds	r3, r7, r0
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec6:	4bc3      	ldr	r3, [pc, #780]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eca:	2380      	movs	r3, #128	@ 0x80
 8001ecc:	055b      	lsls	r3, r3, #21
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d110      	bne.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4bc0      	ldr	r3, [pc, #768]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ed6:	4bbf      	ldr	r3, [pc, #764]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed8:	2180      	movs	r1, #128	@ 0x80
 8001eda:	0549      	lsls	r1, r1, #21
 8001edc:	430a      	orrs	r2, r1
 8001ede:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ee0:	4bbc      	ldr	r3, [pc, #752]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	055b      	lsls	r3, r3, #21
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eee:	183b      	adds	r3, r7, r0
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef4:	4bb8      	ldr	r3, [pc, #736]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4bb7      	ldr	r3, [pc, #732]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001efa:	2180      	movs	r1, #128	@ 0x80
 8001efc:	0049      	lsls	r1, r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f02:	f7ff f825 	bl	8000f50 <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0c:	f7ff f820 	bl	8000f50 <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d904      	bls.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f1a:	2313      	movs	r3, #19
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2203      	movs	r2, #3
 8001f20:	701a      	strb	r2, [r3, #0]
        break;
 8001f22:	e005      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f24:	4bac      	ldr	r3, [pc, #688]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d0ed      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f30:	2313      	movs	r3, #19
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d154      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f3a:	4ba6      	ldr	r3, [pc, #664]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f3e:	23c0      	movs	r3, #192	@ 0xc0
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4013      	ands	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d019      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d014      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f56:	4b9f      	ldr	r3, [pc, #636]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	4aa0      	ldr	r2, [pc, #640]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f60:	4b9c      	ldr	r3, [pc, #624]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f64:	4b9b      	ldr	r3, [pc, #620]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f66:	2180      	movs	r1, #128	@ 0x80
 8001f68:	0249      	lsls	r1, r1, #9
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f6e:	4b99      	ldr	r3, [pc, #612]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f72:	4b98      	ldr	r3, [pc, #608]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f74:	499a      	ldr	r1, [pc, #616]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001f76:	400a      	ands	r2, r1
 8001f78:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f7a:	4b96      	ldr	r3, [pc, #600]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	d016      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7fe ffe2 	bl	8000f50 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f90:	e00c      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7fe ffdd 	bl	8000f50 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	4a91      	ldr	r2, [pc, #580]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d904      	bls.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001fa2:	2313      	movs	r3, #19
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	701a      	strb	r2, [r3, #0]
            break;
 8001faa:	e004      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fac:	4b89      	ldr	r3, [pc, #548]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d0ed      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001fb6:	2313      	movs	r3, #19
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10a      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc0:	4b84      	ldr	r3, [pc, #528]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	4a85      	ldr	r2, [pc, #532]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fce:	4b81      	ldr	r3, [pc, #516]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fd4:	e00c      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fd6:	2312      	movs	r3, #18
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	2213      	movs	r2, #19
 8001fdc:	18ba      	adds	r2, r7, r2
 8001fde:	7812      	ldrb	r2, [r2, #0]
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e005      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	2213      	movs	r2, #19
 8001fea:	18ba      	adds	r2, r7, r2
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ff0:	2311      	movs	r3, #17
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d105      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	4b76      	ldr	r3, [pc, #472]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ffe:	4b75      	ldr	r3, [pc, #468]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002000:	4979      	ldr	r1, [pc, #484]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002002:	400a      	ands	r2, r1
 8002004:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2201      	movs	r2, #1
 800200c:	4013      	ands	r3, r2
 800200e:	d009      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002010:	4b70      	ldr	r3, [pc, #448]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002014:	2203      	movs	r2, #3
 8002016:	4393      	bics	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4b6d      	ldr	r3, [pc, #436]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002020:	430a      	orrs	r2, r1
 8002022:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2202      	movs	r2, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d009      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800202e:	4b69      	ldr	r3, [pc, #420]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002032:	220c      	movs	r2, #12
 8002034:	4393      	bics	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	4b65      	ldr	r3, [pc, #404]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800203e:	430a      	orrs	r2, r1
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2210      	movs	r2, #16
 8002048:	4013      	ands	r3, r2
 800204a:	d009      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800204c:	4b61      	ldr	r3, [pc, #388]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800204e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002050:	4a66      	ldr	r2, [pc, #408]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002052:	4013      	ands	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	4b5e      	ldr	r3, [pc, #376]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800205c:	430a      	orrs	r2, r1
 800205e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800206c:	4b59      	ldr	r3, [pc, #356]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	4a5f      	ldr	r2, [pc, #380]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002072:	4013      	ands	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	4b56      	ldr	r3, [pc, #344]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800207c:	430a      	orrs	r2, r1
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	@ 0x80
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4013      	ands	r3, r2
 800208a:	d009      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800208c:	4b51      	ldr	r3, [pc, #324]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800208e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002090:	4a58      	ldr	r2, [pc, #352]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002092:	4013      	ands	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	4b4e      	ldr	r3, [pc, #312]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800209c:	430a      	orrs	r2, r1
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2220      	movs	r2, #32
 80020a6:	4013      	ands	r3, r2
 80020a8:	d009      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020aa:	4b4a      	ldr	r3, [pc, #296]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ae:	4a52      	ldr	r2, [pc, #328]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	4b46      	ldr	r3, [pc, #280]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	01db      	lsls	r3, r3, #7
 80020c6:	4013      	ands	r3, r2
 80020c8:	d015      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020ca:	4b42      	ldr	r3, [pc, #264]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	0899      	lsrs	r1, r3, #2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	4b3f      	ldr	r3, [pc, #252]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d8:	430a      	orrs	r2, r1
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	05db      	lsls	r3, r3, #23
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d106      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020e8:	4b3a      	ldr	r3, [pc, #232]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4b39      	ldr	r3, [pc, #228]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ee:	2180      	movs	r1, #128	@ 0x80
 80020f0:	0249      	lsls	r1, r1, #9
 80020f2:	430a      	orrs	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	031b      	lsls	r3, r3, #12
 80020fe:	4013      	ands	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002102:	4b34      	ldr	r3, [pc, #208]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002106:	2240      	movs	r2, #64	@ 0x40
 8002108:	4393      	bics	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002110:	4b30      	ldr	r3, [pc, #192]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002112:	430a      	orrs	r2, r1
 8002114:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	@ 0x80
 800211c:	039b      	lsls	r3, r3, #14
 800211e:	4013      	ands	r3, r2
 8002120:	d016      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002122:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002126:	4a35      	ldr	r2, [pc, #212]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002130:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002132:	430a      	orrs	r2, r1
 8002134:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	03db      	lsls	r3, r3, #15
 800213e:	429a      	cmp	r2, r3
 8002140:	d106      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002142:	4b24      	ldr	r3, [pc, #144]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	4b23      	ldr	r3, [pc, #140]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002148:	2180      	movs	r1, #128	@ 0x80
 800214a:	0449      	lsls	r1, r1, #17
 800214c:	430a      	orrs	r2, r1
 800214e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	@ 0x80
 8002156:	03db      	lsls	r3, r3, #15
 8002158:	4013      	ands	r3, r2
 800215a:	d016      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800215c:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	4a27      	ldr	r2, [pc, #156]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002162:	4013      	ands	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216a:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800216c:	430a      	orrs	r2, r1
 800216e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	045b      	lsls	r3, r3, #17
 8002178:	429a      	cmp	r2, r3
 800217a:	d106      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800217c:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002182:	2180      	movs	r1, #128	@ 0x80
 8002184:	0449      	lsls	r1, r1, #17
 8002186:	430a      	orrs	r2, r1
 8002188:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	4013      	ands	r3, r2
 8002194:	d016      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002196:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219a:	4a1a      	ldr	r2, [pc, #104]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800219c:	4013      	ands	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a6:	430a      	orrs	r2, r1
 80021a8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	2380      	movs	r3, #128	@ 0x80
 80021b0:	01db      	lsls	r3, r3, #7
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d106      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021b6:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021bc:	2180      	movs	r1, #128	@ 0x80
 80021be:	0249      	lsls	r1, r1, #9
 80021c0:	430a      	orrs	r2, r1
 80021c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80021c4:	2312      	movs	r3, #18
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	781b      	ldrb	r3, [r3, #0]
}
 80021ca:	0018      	movs	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b006      	add	sp, #24
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40007000 	.word	0x40007000
 80021dc:	fffffcff 	.word	0xfffffcff
 80021e0:	fffeffff 	.word	0xfffeffff
 80021e4:	00001388 	.word	0x00001388
 80021e8:	efffffff 	.word	0xefffffff
 80021ec:	fffff3ff 	.word	0xfffff3ff
 80021f0:	fff3ffff 	.word	0xfff3ffff
 80021f4:	ffcfffff 	.word	0xffcfffff
 80021f8:	ffffcfff 	.word	0xffffcfff
 80021fc:	ffbfffff 	.word	0xffbfffff
 8002200:	feffffff 	.word	0xfeffffff
 8002204:	ffff3fff 	.word	0xffff3fff

08002208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e04a      	b.n	80022b0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	223d      	movs	r2, #61	@ 0x3d
 800221e:	5c9b      	ldrb	r3, [r3, r2]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d107      	bne.n	8002236 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	223c      	movs	r2, #60	@ 0x3c
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f7fe fceb 	bl	8000c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	223d      	movs	r2, #61	@ 0x3d
 800223a:	2102      	movs	r1, #2
 800223c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	0019      	movs	r1, r3
 8002248:	0010      	movs	r0, r2
 800224a:	f000 fa1f 	bl	800268c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2248      	movs	r2, #72	@ 0x48
 8002252:	2101      	movs	r1, #1
 8002254:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	223e      	movs	r2, #62	@ 0x3e
 800225a:	2101      	movs	r1, #1
 800225c:	5499      	strb	r1, [r3, r2]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	223f      	movs	r2, #63	@ 0x3f
 8002262:	2101      	movs	r1, #1
 8002264:	5499      	strb	r1, [r3, r2]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2240      	movs	r2, #64	@ 0x40
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2241      	movs	r2, #65	@ 0x41
 8002272:	2101      	movs	r1, #1
 8002274:	5499      	strb	r1, [r3, r2]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2242      	movs	r2, #66	@ 0x42
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2243      	movs	r2, #67	@ 0x43
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2244      	movs	r2, #68	@ 0x44
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2245      	movs	r2, #69	@ 0x45
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2246      	movs	r2, #70	@ 0x46
 800229a:	2101      	movs	r1, #1
 800229c:	5499      	strb	r1, [r3, r2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2247      	movs	r2, #71	@ 0x47
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223d      	movs	r2, #61	@ 0x3d
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d108      	bne.n	80022da <HAL_TIM_PWM_Start+0x22>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	223e      	movs	r2, #62	@ 0x3e
 80022cc:	5c9b      	ldrb	r3, [r3, r2]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	4193      	sbcs	r3, r2
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	e037      	b.n	800234a <HAL_TIM_PWM_Start+0x92>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d108      	bne.n	80022f2 <HAL_TIM_PWM_Start+0x3a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	223f      	movs	r2, #63	@ 0x3f
 80022e4:	5c9b      	ldrb	r3, [r3, r2]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	4193      	sbcs	r3, r2
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	e02b      	b.n	800234a <HAL_TIM_PWM_Start+0x92>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d108      	bne.n	800230a <HAL_TIM_PWM_Start+0x52>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2240      	movs	r2, #64	@ 0x40
 80022fc:	5c9b      	ldrb	r3, [r3, r2]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	1e5a      	subs	r2, r3, #1
 8002304:	4193      	sbcs	r3, r2
 8002306:	b2db      	uxtb	r3, r3
 8002308:	e01f      	b.n	800234a <HAL_TIM_PWM_Start+0x92>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d108      	bne.n	8002322 <HAL_TIM_PWM_Start+0x6a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2241      	movs	r2, #65	@ 0x41
 8002314:	5c9b      	ldrb	r3, [r3, r2]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	1e5a      	subs	r2, r3, #1
 800231c:	4193      	sbcs	r3, r2
 800231e:	b2db      	uxtb	r3, r3
 8002320:	e013      	b.n	800234a <HAL_TIM_PWM_Start+0x92>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b10      	cmp	r3, #16
 8002326:	d108      	bne.n	800233a <HAL_TIM_PWM_Start+0x82>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2242      	movs	r2, #66	@ 0x42
 800232c:	5c9b      	ldrb	r3, [r3, r2]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	1e5a      	subs	r2, r3, #1
 8002334:	4193      	sbcs	r3, r2
 8002336:	b2db      	uxtb	r3, r3
 8002338:	e007      	b.n	800234a <HAL_TIM_PWM_Start+0x92>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2243      	movs	r2, #67	@ 0x43
 800233e:	5c9b      	ldrb	r3, [r3, r2]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	1e5a      	subs	r2, r3, #1
 8002346:	4193      	sbcs	r3, r2
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e08b      	b.n	800246a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d104      	bne.n	8002362 <HAL_TIM_PWM_Start+0xaa>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	223e      	movs	r2, #62	@ 0x3e
 800235c:	2102      	movs	r1, #2
 800235e:	5499      	strb	r1, [r3, r2]
 8002360:	e023      	b.n	80023aa <HAL_TIM_PWM_Start+0xf2>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d104      	bne.n	8002372 <HAL_TIM_PWM_Start+0xba>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	223f      	movs	r2, #63	@ 0x3f
 800236c:	2102      	movs	r1, #2
 800236e:	5499      	strb	r1, [r3, r2]
 8002370:	e01b      	b.n	80023aa <HAL_TIM_PWM_Start+0xf2>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b08      	cmp	r3, #8
 8002376:	d104      	bne.n	8002382 <HAL_TIM_PWM_Start+0xca>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2240      	movs	r2, #64	@ 0x40
 800237c:	2102      	movs	r1, #2
 800237e:	5499      	strb	r1, [r3, r2]
 8002380:	e013      	b.n	80023aa <HAL_TIM_PWM_Start+0xf2>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b0c      	cmp	r3, #12
 8002386:	d104      	bne.n	8002392 <HAL_TIM_PWM_Start+0xda>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2241      	movs	r2, #65	@ 0x41
 800238c:	2102      	movs	r1, #2
 800238e:	5499      	strb	r1, [r3, r2]
 8002390:	e00b      	b.n	80023aa <HAL_TIM_PWM_Start+0xf2>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b10      	cmp	r3, #16
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_PWM_Start+0xea>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2242      	movs	r2, #66	@ 0x42
 800239c:	2102      	movs	r1, #2
 800239e:	5499      	strb	r1, [r3, r2]
 80023a0:	e003      	b.n	80023aa <HAL_TIM_PWM_Start+0xf2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2243      	movs	r2, #67	@ 0x43
 80023a6:	2102      	movs	r1, #2
 80023a8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6839      	ldr	r1, [r7, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 fcbc 	bl	8002d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002474 <HAL_TIM_PWM_Start+0x1bc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00e      	beq.n	80023e0 <HAL_TIM_PWM_Start+0x128>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002478 <HAL_TIM_PWM_Start+0x1c0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_TIM_PWM_Start+0x128>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2a      	ldr	r2, [pc, #168]	@ (800247c <HAL_TIM_PWM_Start+0x1c4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_TIM_PWM_Start+0x128>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a29      	ldr	r2, [pc, #164]	@ (8002480 <HAL_TIM_PWM_Start+0x1c8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_TIM_PWM_Start+0x12c>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_TIM_PWM_Start+0x12e>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	0209      	lsls	r1, r1, #8
 80023f8:	430a      	orrs	r2, r1
 80023fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1c      	ldr	r2, [pc, #112]	@ (8002474 <HAL_TIM_PWM_Start+0x1bc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00f      	beq.n	8002426 <HAL_TIM_PWM_Start+0x16e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	@ 0x80
 800240c:	05db      	lsls	r3, r3, #23
 800240e:	429a      	cmp	r2, r3
 8002410:	d009      	beq.n	8002426 <HAL_TIM_PWM_Start+0x16e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1b      	ldr	r2, [pc, #108]	@ (8002484 <HAL_TIM_PWM_Start+0x1cc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_TIM_PWM_Start+0x16e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a15      	ldr	r2, [pc, #84]	@ (8002478 <HAL_TIM_PWM_Start+0x1c0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d116      	bne.n	8002454 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <HAL_TIM_PWM_Start+0x1d0>)
 800242e:	4013      	ands	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b06      	cmp	r3, #6
 8002436:	d016      	beq.n	8002466 <HAL_TIM_PWM_Start+0x1ae>
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	2380      	movs	r3, #128	@ 0x80
 800243c:	025b      	lsls	r3, r3, #9
 800243e:	429a      	cmp	r2, r3
 8002440:	d011      	beq.n	8002466 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002452:	e008      	b.n	8002466 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2101      	movs	r1, #1
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e000      	b.n	8002468 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002466:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b004      	add	sp, #16
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	40012c00 	.word	0x40012c00
 8002478:	40014000 	.word	0x40014000
 800247c:	40014400 	.word	0x40014400
 8002480:	40014800 	.word	0x40014800
 8002484:	40000400 	.word	0x40000400
 8002488:	00010007 	.word	0x00010007

0800248c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002498:	2317      	movs	r3, #23
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	223c      	movs	r2, #60	@ 0x3c
 80024a4:	5c9b      	ldrb	r3, [r3, r2]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_PWM_ConfigChannel+0x22>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0e5      	b.n	800267a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	223c      	movs	r2, #60	@ 0x3c
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b14      	cmp	r3, #20
 80024ba:	d900      	bls.n	80024be <HAL_TIM_PWM_ConfigChannel+0x32>
 80024bc:	e0d1      	b.n	8002662 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	009a      	lsls	r2, r3, #2
 80024c2:	4b70      	ldr	r3, [pc, #448]	@ (8002684 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80024c4:	18d3      	adds	r3, r2, r3
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	0011      	movs	r1, r2
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 f968 	bl	80027a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2108      	movs	r1, #8
 80024e4:	430a      	orrs	r2, r1
 80024e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2104      	movs	r1, #4
 80024f4:	438a      	bics	r2, r1
 80024f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6999      	ldr	r1, [r3, #24]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	619a      	str	r2, [r3, #24]
      break;
 800250a:	e0af      	b.n	800266c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	0011      	movs	r1, r2
 8002514:	0018      	movs	r0, r3
 8002516:	f000 f9d1 	bl	80028bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	0109      	lsls	r1, r1, #4
 8002528:	430a      	orrs	r2, r1
 800252a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4954      	ldr	r1, [pc, #336]	@ (8002688 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002538:	400a      	ands	r2, r1
 800253a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6999      	ldr	r1, [r3, #24]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	021a      	lsls	r2, r3, #8
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	619a      	str	r2, [r3, #24]
      break;
 8002550:	e08c      	b.n	800266c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	0011      	movs	r1, r2
 800255a:	0018      	movs	r0, r3
 800255c:	f000 fa32 	bl	80029c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2108      	movs	r1, #8
 800256c:	430a      	orrs	r2, r1
 800256e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2104      	movs	r1, #4
 800257c:	438a      	bics	r2, r1
 800257e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69d9      	ldr	r1, [r3, #28]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	61da      	str	r2, [r3, #28]
      break;
 8002592:	e06b      	b.n	800266c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	0011      	movs	r1, r2
 800259c:	0018      	movs	r0, r3
 800259e:	f000 fa99 	bl	8002ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2180      	movs	r1, #128	@ 0x80
 80025ae:	0109      	lsls	r1, r1, #4
 80025b0:	430a      	orrs	r2, r1
 80025b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4932      	ldr	r1, [pc, #200]	@ (8002688 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69d9      	ldr	r1, [r3, #28]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	021a      	lsls	r2, r3, #8
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	61da      	str	r2, [r3, #28]
      break;
 80025d8:	e048      	b.n	800266c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fae0 	bl	8002ba8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2108      	movs	r1, #8
 80025f4:	430a      	orrs	r2, r1
 80025f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2104      	movs	r1, #4
 8002604:	438a      	bics	r2, r1
 8002606:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800261a:	e027      	b.n	800266c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f000 fb1f 	bl	8002c68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2180      	movs	r1, #128	@ 0x80
 8002636:	0109      	lsls	r1, r1, #4
 8002638:	430a      	orrs	r2, r1
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4910      	ldr	r1, [pc, #64]	@ (8002688 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002648:	400a      	ands	r2, r1
 800264a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	021a      	lsls	r2, r3, #8
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002660:	e004      	b.n	800266c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002662:	2317      	movs	r3, #23
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
      break;
 800266a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	223c      	movs	r2, #60	@ 0x3c
 8002670:	2100      	movs	r1, #0
 8002672:	5499      	strb	r1, [r3, r2]

  return status;
 8002674:	2317      	movs	r3, #23
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	781b      	ldrb	r3, [r3, #0]
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b006      	add	sp, #24
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	08003d20 	.word	0x08003d20
 8002688:	fffffbff 	.word	0xfffffbff

0800268c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3b      	ldr	r2, [pc, #236]	@ (800278c <TIM_Base_SetConfig+0x100>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d008      	beq.n	80026b6 <TIM_Base_SetConfig+0x2a>
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	2380      	movs	r3, #128	@ 0x80
 80026a8:	05db      	lsls	r3, r3, #23
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d003      	beq.n	80026b6 <TIM_Base_SetConfig+0x2a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a37      	ldr	r2, [pc, #220]	@ (8002790 <TIM_Base_SetConfig+0x104>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d108      	bne.n	80026c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2270      	movs	r2, #112	@ 0x70
 80026ba:	4393      	bics	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a30      	ldr	r2, [pc, #192]	@ (800278c <TIM_Base_SetConfig+0x100>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d018      	beq.n	8002702 <TIM_Base_SetConfig+0x76>
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	05db      	lsls	r3, r3, #23
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d013      	beq.n	8002702 <TIM_Base_SetConfig+0x76>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002790 <TIM_Base_SetConfig+0x104>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00f      	beq.n	8002702 <TIM_Base_SetConfig+0x76>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002794 <TIM_Base_SetConfig+0x108>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00b      	beq.n	8002702 <TIM_Base_SetConfig+0x76>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002798 <TIM_Base_SetConfig+0x10c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <TIM_Base_SetConfig+0x76>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a29      	ldr	r2, [pc, #164]	@ (800279c <TIM_Base_SetConfig+0x110>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0x76>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a28      	ldr	r2, [pc, #160]	@ (80027a0 <TIM_Base_SetConfig+0x114>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4a27      	ldr	r2, [pc, #156]	@ (80027a4 <TIM_Base_SetConfig+0x118>)
 8002706:	4013      	ands	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2280      	movs	r2, #128	@ 0x80
 8002718:	4393      	bics	r3, r2
 800271a:	001a      	movs	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a13      	ldr	r2, [pc, #76]	@ (800278c <TIM_Base_SetConfig+0x100>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00b      	beq.n	800275a <TIM_Base_SetConfig+0xce>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a14      	ldr	r2, [pc, #80]	@ (8002798 <TIM_Base_SetConfig+0x10c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <TIM_Base_SetConfig+0xce>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a13      	ldr	r2, [pc, #76]	@ (800279c <TIM_Base_SetConfig+0x110>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d003      	beq.n	800275a <TIM_Base_SetConfig+0xce>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a12      	ldr	r2, [pc, #72]	@ (80027a0 <TIM_Base_SetConfig+0x114>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d103      	bne.n	8002762 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2201      	movs	r2, #1
 800276e:	4013      	ands	r3, r2
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2201      	movs	r2, #1
 800277a:	4393      	bics	r3, r2
 800277c:	001a      	movs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	611a      	str	r2, [r3, #16]
  }
}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	46bd      	mov	sp, r7
 8002786:	b004      	add	sp, #16
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	40012c00 	.word	0x40012c00
 8002790:	40000400 	.word	0x40000400
 8002794:	40002000 	.word	0x40002000
 8002798:	40014000 	.word	0x40014000
 800279c:	40014400 	.word	0x40014400
 80027a0:	40014800 	.word	0x40014800
 80027a4:	fffffcff 	.word	0xfffffcff

080027a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	2201      	movs	r2, #1
 80027be:	4393      	bics	r3, r2
 80027c0:	001a      	movs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a32      	ldr	r2, [pc, #200]	@ (80028a0 <TIM_OC1_SetConfig+0xf8>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2203      	movs	r2, #3
 80027de:	4393      	bics	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2202      	movs	r2, #2
 80027f0:	4393      	bics	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a28      	ldr	r2, [pc, #160]	@ (80028a4 <TIM_OC1_SetConfig+0xfc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00b      	beq.n	800281e <TIM_OC1_SetConfig+0x76>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a27      	ldr	r2, [pc, #156]	@ (80028a8 <TIM_OC1_SetConfig+0x100>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <TIM_OC1_SetConfig+0x76>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a26      	ldr	r2, [pc, #152]	@ (80028ac <TIM_OC1_SetConfig+0x104>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d003      	beq.n	800281e <TIM_OC1_SetConfig+0x76>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a25      	ldr	r2, [pc, #148]	@ (80028b0 <TIM_OC1_SetConfig+0x108>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10c      	bne.n	8002838 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2208      	movs	r2, #8
 8002822:	4393      	bics	r3, r2
 8002824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2204      	movs	r2, #4
 8002834:	4393      	bics	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a1a      	ldr	r2, [pc, #104]	@ (80028a4 <TIM_OC1_SetConfig+0xfc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00b      	beq.n	8002858 <TIM_OC1_SetConfig+0xb0>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a19      	ldr	r2, [pc, #100]	@ (80028a8 <TIM_OC1_SetConfig+0x100>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <TIM_OC1_SetConfig+0xb0>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a18      	ldr	r2, [pc, #96]	@ (80028ac <TIM_OC1_SetConfig+0x104>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_OC1_SetConfig+0xb0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a17      	ldr	r2, [pc, #92]	@ (80028b0 <TIM_OC1_SetConfig+0x108>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d111      	bne.n	800287c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4a16      	ldr	r2, [pc, #88]	@ (80028b4 <TIM_OC1_SetConfig+0x10c>)
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4a15      	ldr	r2, [pc, #84]	@ (80028b8 <TIM_OC1_SetConfig+0x110>)
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	621a      	str	r2, [r3, #32]
}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b006      	add	sp, #24
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	fffeff8f 	.word	0xfffeff8f
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40014000 	.word	0x40014000
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40014800 	.word	0x40014800
 80028b4:	fffffeff 	.word	0xfffffeff
 80028b8:	fffffdff 	.word	0xfffffdff

080028bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	2210      	movs	r2, #16
 80028d2:	4393      	bics	r3, r2
 80028d4:	001a      	movs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a2e      	ldr	r2, [pc, #184]	@ (80029a4 <TIM_OC2_SetConfig+0xe8>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <TIM_OC2_SetConfig+0xec>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2220      	movs	r2, #32
 8002906:	4393      	bics	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a24      	ldr	r2, [pc, #144]	@ (80029ac <TIM_OC2_SetConfig+0xf0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10d      	bne.n	800293a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2280      	movs	r2, #128	@ 0x80
 8002922:	4393      	bics	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2240      	movs	r2, #64	@ 0x40
 8002936:	4393      	bics	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1b      	ldr	r2, [pc, #108]	@ (80029ac <TIM_OC2_SetConfig+0xf0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_OC2_SetConfig+0x9e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1a      	ldr	r2, [pc, #104]	@ (80029b0 <TIM_OC2_SetConfig+0xf4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_OC2_SetConfig+0x9e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a19      	ldr	r2, [pc, #100]	@ (80029b4 <TIM_OC2_SetConfig+0xf8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_OC2_SetConfig+0x9e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a18      	ldr	r2, [pc, #96]	@ (80029b8 <TIM_OC2_SetConfig+0xfc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d113      	bne.n	8002982 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4a17      	ldr	r2, [pc, #92]	@ (80029bc <TIM_OC2_SetConfig+0x100>)
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4a16      	ldr	r2, [pc, #88]	@ (80029c0 <TIM_OC2_SetConfig+0x104>)
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	621a      	str	r2, [r3, #32]
}
 800299c:	46c0      	nop			@ (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b006      	add	sp, #24
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	feff8fff 	.word	0xfeff8fff
 80029a8:	fffffcff 	.word	0xfffffcff
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40014000 	.word	0x40014000
 80029b4:	40014400 	.word	0x40014400
 80029b8:	40014800 	.word	0x40014800
 80029bc:	fffffbff 	.word	0xfffffbff
 80029c0:	fffff7ff 	.word	0xfffff7ff

080029c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	4a33      	ldr	r2, [pc, #204]	@ (8002aa8 <TIM_OC3_SetConfig+0xe4>)
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a2f      	ldr	r2, [pc, #188]	@ (8002aac <TIM_OC3_SetConfig+0xe8>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2203      	movs	r2, #3
 80029f8:	4393      	bics	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	4a29      	ldr	r2, [pc, #164]	@ (8002ab0 <TIM_OC3_SetConfig+0xec>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a25      	ldr	r2, [pc, #148]	@ (8002ab4 <TIM_OC3_SetConfig+0xf0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d10d      	bne.n	8002a3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	4a24      	ldr	r2, [pc, #144]	@ (8002ab8 <TIM_OC3_SetConfig+0xf4>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4a20      	ldr	r2, [pc, #128]	@ (8002abc <TIM_OC3_SetConfig+0xf8>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab4 <TIM_OC3_SetConfig+0xf0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00b      	beq.n	8002a5e <TIM_OC3_SetConfig+0x9a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac0 <TIM_OC3_SetConfig+0xfc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d007      	beq.n	8002a5e <TIM_OC3_SetConfig+0x9a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac4 <TIM_OC3_SetConfig+0x100>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d003      	beq.n	8002a5e <TIM_OC3_SetConfig+0x9a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac8 <TIM_OC3_SetConfig+0x104>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d113      	bne.n	8002a86 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4a1a      	ldr	r2, [pc, #104]	@ (8002acc <TIM_OC3_SetConfig+0x108>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4a19      	ldr	r2, [pc, #100]	@ (8002ad0 <TIM_OC3_SetConfig+0x10c>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	621a      	str	r2, [r3, #32]
}
 8002aa0:	46c0      	nop			@ (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b006      	add	sp, #24
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	fffffeff 	.word	0xfffffeff
 8002aac:	fffeff8f 	.word	0xfffeff8f
 8002ab0:	fffffdff 	.word	0xfffffdff
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	fffff7ff 	.word	0xfffff7ff
 8002abc:	fffffbff 	.word	0xfffffbff
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40014400 	.word	0x40014400
 8002ac8:	40014800 	.word	0x40014800
 8002acc:	ffffefff 	.word	0xffffefff
 8002ad0:	ffffdfff 	.word	0xffffdfff

08002ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4a26      	ldr	r2, [pc, #152]	@ (8002b84 <TIM_OC4_SetConfig+0xb0>)
 8002aea:	401a      	ands	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a22      	ldr	r2, [pc, #136]	@ (8002b88 <TIM_OC4_SetConfig+0xb4>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a21      	ldr	r2, [pc, #132]	@ (8002b8c <TIM_OC4_SetConfig+0xb8>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002b90 <TIM_OC4_SetConfig+0xbc>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	031b      	lsls	r3, r3, #12
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <TIM_OC4_SetConfig+0xc0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00b      	beq.n	8002b4c <TIM_OC4_SetConfig+0x78>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <TIM_OC4_SetConfig+0xc4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d007      	beq.n	8002b4c <TIM_OC4_SetConfig+0x78>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a17      	ldr	r2, [pc, #92]	@ (8002b9c <TIM_OC4_SetConfig+0xc8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d003      	beq.n	8002b4c <TIM_OC4_SetConfig+0x78>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <TIM_OC4_SetConfig+0xcc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d109      	bne.n	8002b60 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ba4 <TIM_OC4_SetConfig+0xd0>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	621a      	str	r2, [r3, #32]
}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b006      	add	sp, #24
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			@ (mov r8, r8)
 8002b84:	ffffefff 	.word	0xffffefff
 8002b88:	feff8fff 	.word	0xfeff8fff
 8002b8c:	fffffcff 	.word	0xfffffcff
 8002b90:	ffffdfff 	.word	0xffffdfff
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800
 8002ba4:	ffffbfff 	.word	0xffffbfff

08002ba8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4a23      	ldr	r2, [pc, #140]	@ (8002c4c <TIM_OC5_SetConfig+0xa4>)
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <TIM_OC5_SetConfig+0xa8>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c54 <TIM_OC5_SetConfig+0xac>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a17      	ldr	r2, [pc, #92]	@ (8002c58 <TIM_OC5_SetConfig+0xb0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00b      	beq.n	8002c16 <TIM_OC5_SetConfig+0x6e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a16      	ldr	r2, [pc, #88]	@ (8002c5c <TIM_OC5_SetConfig+0xb4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <TIM_OC5_SetConfig+0x6e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a15      	ldr	r2, [pc, #84]	@ (8002c60 <TIM_OC5_SetConfig+0xb8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <TIM_OC5_SetConfig+0x6e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <TIM_OC5_SetConfig+0xbc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d109      	bne.n	8002c2a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	4a0c      	ldr	r2, [pc, #48]	@ (8002c4c <TIM_OC5_SetConfig+0xa4>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	621a      	str	r2, [r3, #32]
}
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b006      	add	sp, #24
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	fffeffff 	.word	0xfffeffff
 8002c50:	fffeff8f 	.word	0xfffeff8f
 8002c54:	fffdffff 	.word	0xfffdffff
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40014000 	.word	0x40014000
 8002c60:	40014400 	.word	0x40014400
 8002c64:	40014800 	.word	0x40014800

08002c68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a24      	ldr	r2, [pc, #144]	@ (8002d10 <TIM_OC6_SetConfig+0xa8>)
 8002c7e:	401a      	ands	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a20      	ldr	r2, [pc, #128]	@ (8002d14 <TIM_OC6_SetConfig+0xac>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <TIM_OC6_SetConfig+0xb0>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	051b      	lsls	r3, r3, #20
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <TIM_OC6_SetConfig+0xb4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_OC6_SetConfig+0x70>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a17      	ldr	r2, [pc, #92]	@ (8002d20 <TIM_OC6_SetConfig+0xb8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_OC6_SetConfig+0x70>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a16      	ldr	r2, [pc, #88]	@ (8002d24 <TIM_OC6_SetConfig+0xbc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_OC6_SetConfig+0x70>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a15      	ldr	r2, [pc, #84]	@ (8002d28 <TIM_OC6_SetConfig+0xc0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d109      	bne.n	8002cec <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <TIM_OC6_SetConfig+0xc4>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	029b      	lsls	r3, r3, #10
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	621a      	str	r2, [r3, #32]
}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b006      	add	sp, #24
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	ffefffff 	.word	0xffefffff
 8002d14:	feff8fff 	.word	0xfeff8fff
 8002d18:	ffdfffff 	.word	0xffdfffff
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40014000 	.word	0x40014000
 8002d24:	40014400 	.word	0x40014400
 8002d28:	40014800 	.word	0x40014800
 8002d2c:	fffbffff 	.word	0xfffbffff

08002d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	221f      	movs	r2, #31
 8002d40:	4013      	ands	r3, r2
 8002d42:	2201      	movs	r2, #1
 8002d44:	409a      	lsls	r2, r3
 8002d46:	0013      	movs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	43d2      	mvns	r2, r2
 8002d52:	401a      	ands	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	211f      	movs	r1, #31
 8002d60:	400b      	ands	r3, r1
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4099      	lsls	r1, r3
 8002d66:	000b      	movs	r3, r1
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b006      	add	sp, #24
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	223c      	movs	r2, #60	@ 0x3c
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e055      	b.n	8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	223c      	movs	r2, #60	@ 0x3c
 8002d94:	2101      	movs	r1, #1
 8002d96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	223d      	movs	r2, #61	@ 0x3d
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a23      	ldr	r2, [pc, #140]	@ (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d108      	bne.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a22      	ldr	r2, [pc, #136]	@ (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2270      	movs	r2, #112	@ 0x70
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a16      	ldr	r2, [pc, #88]	@ (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00f      	beq.n	8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	@ 0x80
 8002df6:	05db      	lsls	r3, r3, #23
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d009      	beq.n	8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a12      	ldr	r2, [pc, #72]	@ (8002e4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a11      	ldr	r2, [pc, #68]	@ (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d10c      	bne.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2280      	movs	r2, #128	@ 0x80
 8002e14:	4393      	bics	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	223d      	movs	r2, #61	@ 0x3d
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	223c      	movs	r2, #60	@ 0x3c
 8002e36:	2100      	movs	r1, #0
 8002e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b004      	add	sp, #16
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	ff0fffff 	.word	0xff0fffff
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40014000 	.word	0x40014000

08002e54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	223c      	movs	r2, #60	@ 0x3c
 8002e66:	5c9b      	ldrb	r3, [r3, r2]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e06f      	b.n	8002f50 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	223c      	movs	r2, #60	@ 0x3c
 8002e74:	2101      	movs	r1, #1
 8002e76:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	22ff      	movs	r2, #255	@ 0xff
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	001a      	movs	r2, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a33      	ldr	r2, [pc, #204]	@ (8002f58 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a30      	ldr	r2, [pc, #192]	@ (8002f5c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a2e      	ldr	r2, [pc, #184]	@ (8002f60 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f64 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a29      	ldr	r2, [pc, #164]	@ (8002f68 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a26      	ldr	r2, [pc, #152]	@ (8002f6c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a24      	ldr	r2, [pc, #144]	@ (8002f70 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	041b      	lsls	r3, r3, #16
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a21      	ldr	r2, [pc, #132]	@ (8002f74 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1e      	ldr	r2, [pc, #120]	@ (8002f78 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d11c      	bne.n	8002f3e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a1d      	ldr	r2, [pc, #116]	@ (8002f7c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002f08:	401a      	ands	r2, r3
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	051b      	lsls	r3, r3, #20
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a1a      	ldr	r2, [pc, #104]	@ (8002f80 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002f18:	401a      	ands	r2, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a17      	ldr	r2, [pc, #92]	@ (8002f84 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002f26:	401a      	ands	r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a15      	ldr	r2, [pc, #84]	@ (8002f88 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002f34:	401a      	ands	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	223c      	movs	r2, #60	@ 0x3c
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b004      	add	sp, #16
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	fffffcff 	.word	0xfffffcff
 8002f5c:	fffffbff 	.word	0xfffffbff
 8002f60:	fffff7ff 	.word	0xfffff7ff
 8002f64:	ffffefff 	.word	0xffffefff
 8002f68:	ffffdfff 	.word	0xffffdfff
 8002f6c:	ffffbfff 	.word	0xffffbfff
 8002f70:	fff0ffff 	.word	0xfff0ffff
 8002f74:	efffffff 	.word	0xefffffff
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	ff0fffff 	.word	0xff0fffff
 8002f80:	feffffff 	.word	0xfeffffff
 8002f84:	fdffffff 	.word	0xfdffffff
 8002f88:	dfffffff 	.word	0xdfffffff

08002f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e046      	b.n	800302c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2288      	movs	r2, #136	@ 0x88
 8002fa2:	589b      	ldr	r3, [r3, r2]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2284      	movs	r2, #132	@ 0x84
 8002fac:	2100      	movs	r1, #0
 8002fae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7fd fe9e 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2288      	movs	r2, #136	@ 0x88
 8002fbc:	2124      	movs	r1, #36	@ 0x24
 8002fbe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2101      	movs	r1, #1
 8002fcc:	438a      	bics	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 faea 	bl	80035b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 f828 	bl	8003038 <UART_SetConfig>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e01c      	b.n	800302c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	490d      	ldr	r1, [pc, #52]	@ (8003034 <HAL_UART_Init+0xa8>)
 8002ffe:	400a      	ands	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	212a      	movs	r1, #42	@ 0x2a
 800300e:	438a      	bics	r2, r1
 8003010:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2101      	movs	r1, #1
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0018      	movs	r0, r3
 8003026:	f000 fb79 	bl	800371c <UART_CheckIdleState>
 800302a:	0003      	movs	r3, r0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b002      	add	sp, #8
 8003032:	bd80      	pop	{r7, pc}
 8003034:	ffffb7ff 	.word	0xffffb7ff

08003038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	b090      	sub	sp, #64	@ 0x40
 800303c:	af00      	add	r7, sp, #0
 800303e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003040:	231a      	movs	r3, #26
 8003042:	2220      	movs	r2, #32
 8003044:	189b      	adds	r3, r3, r2
 8003046:	19db      	adds	r3, r3, r7
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	431a      	orrs	r2, r3
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	431a      	orrs	r2, r3
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4313      	orrs	r3, r2
 8003062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4aaf      	ldr	r2, [pc, #700]	@ (8003328 <UART_SetConfig+0x2f0>)
 800306c:	4013      	ands	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003076:	430b      	orrs	r3, r1
 8003078:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4aaa      	ldr	r2, [pc, #680]	@ (800332c <UART_SetConfig+0x2f4>)
 8003082:	4013      	ands	r3, r2
 8003084:	0018      	movs	r0, r3
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	68d9      	ldr	r1, [r3, #12]
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	0003      	movs	r3, r0
 8003090:	430b      	orrs	r3, r1
 8003092:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4aa4      	ldr	r2, [pc, #656]	@ (8003330 <UART_SetConfig+0x2f8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d004      	beq.n	80030ae <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030aa:	4313      	orrs	r3, r2
 80030ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a9f      	ldr	r2, [pc, #636]	@ (8003334 <UART_SetConfig+0x2fc>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	220f      	movs	r2, #15
 80030cc:	4393      	bics	r3, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	0003      	movs	r3, r0
 80030da:	430b      	orrs	r3, r1
 80030dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a95      	ldr	r2, [pc, #596]	@ (8003338 <UART_SetConfig+0x300>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d131      	bne.n	800314c <UART_SetConfig+0x114>
 80030e8:	4b94      	ldr	r3, [pc, #592]	@ (800333c <UART_SetConfig+0x304>)
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ec:	2203      	movs	r2, #3
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d01d      	beq.n	8003130 <UART_SetConfig+0xf8>
 80030f4:	d823      	bhi.n	800313e <UART_SetConfig+0x106>
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d00c      	beq.n	8003114 <UART_SetConfig+0xdc>
 80030fa:	d820      	bhi.n	800313e <UART_SetConfig+0x106>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <UART_SetConfig+0xce>
 8003100:	2b01      	cmp	r3, #1
 8003102:	d00e      	beq.n	8003122 <UART_SetConfig+0xea>
 8003104:	e01b      	b.n	800313e <UART_SetConfig+0x106>
 8003106:	231b      	movs	r3, #27
 8003108:	2220      	movs	r2, #32
 800310a:	189b      	adds	r3, r3, r2
 800310c:	19db      	adds	r3, r3, r7
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e0b4      	b.n	800327e <UART_SetConfig+0x246>
 8003114:	231b      	movs	r3, #27
 8003116:	2220      	movs	r2, #32
 8003118:	189b      	adds	r3, r3, r2
 800311a:	19db      	adds	r3, r3, r7
 800311c:	2202      	movs	r2, #2
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	e0ad      	b.n	800327e <UART_SetConfig+0x246>
 8003122:	231b      	movs	r3, #27
 8003124:	2220      	movs	r2, #32
 8003126:	189b      	adds	r3, r3, r2
 8003128:	19db      	adds	r3, r3, r7
 800312a:	2204      	movs	r2, #4
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e0a6      	b.n	800327e <UART_SetConfig+0x246>
 8003130:	231b      	movs	r3, #27
 8003132:	2220      	movs	r2, #32
 8003134:	189b      	adds	r3, r3, r2
 8003136:	19db      	adds	r3, r3, r7
 8003138:	2208      	movs	r2, #8
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e09f      	b.n	800327e <UART_SetConfig+0x246>
 800313e:	231b      	movs	r3, #27
 8003140:	2220      	movs	r2, #32
 8003142:	189b      	adds	r3, r3, r2
 8003144:	19db      	adds	r3, r3, r7
 8003146:	2210      	movs	r2, #16
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e098      	b.n	800327e <UART_SetConfig+0x246>
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a7b      	ldr	r2, [pc, #492]	@ (8003340 <UART_SetConfig+0x308>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d131      	bne.n	80031ba <UART_SetConfig+0x182>
 8003156:	4b79      	ldr	r3, [pc, #484]	@ (800333c <UART_SetConfig+0x304>)
 8003158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315a:	220c      	movs	r2, #12
 800315c:	4013      	ands	r3, r2
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d01d      	beq.n	800319e <UART_SetConfig+0x166>
 8003162:	d823      	bhi.n	80031ac <UART_SetConfig+0x174>
 8003164:	2b08      	cmp	r3, #8
 8003166:	d00c      	beq.n	8003182 <UART_SetConfig+0x14a>
 8003168:	d820      	bhi.n	80031ac <UART_SetConfig+0x174>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <UART_SetConfig+0x13c>
 800316e:	2b04      	cmp	r3, #4
 8003170:	d00e      	beq.n	8003190 <UART_SetConfig+0x158>
 8003172:	e01b      	b.n	80031ac <UART_SetConfig+0x174>
 8003174:	231b      	movs	r3, #27
 8003176:	2220      	movs	r2, #32
 8003178:	189b      	adds	r3, r3, r2
 800317a:	19db      	adds	r3, r3, r7
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e07d      	b.n	800327e <UART_SetConfig+0x246>
 8003182:	231b      	movs	r3, #27
 8003184:	2220      	movs	r2, #32
 8003186:	189b      	adds	r3, r3, r2
 8003188:	19db      	adds	r3, r3, r7
 800318a:	2202      	movs	r2, #2
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	e076      	b.n	800327e <UART_SetConfig+0x246>
 8003190:	231b      	movs	r3, #27
 8003192:	2220      	movs	r2, #32
 8003194:	189b      	adds	r3, r3, r2
 8003196:	19db      	adds	r3, r3, r7
 8003198:	2204      	movs	r2, #4
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e06f      	b.n	800327e <UART_SetConfig+0x246>
 800319e:	231b      	movs	r3, #27
 80031a0:	2220      	movs	r2, #32
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	19db      	adds	r3, r3, r7
 80031a6:	2208      	movs	r2, #8
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e068      	b.n	800327e <UART_SetConfig+0x246>
 80031ac:	231b      	movs	r3, #27
 80031ae:	2220      	movs	r2, #32
 80031b0:	189b      	adds	r3, r3, r2
 80031b2:	19db      	adds	r3, r3, r7
 80031b4:	2210      	movs	r2, #16
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	e061      	b.n	800327e <UART_SetConfig+0x246>
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a61      	ldr	r2, [pc, #388]	@ (8003344 <UART_SetConfig+0x30c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d106      	bne.n	80031d2 <UART_SetConfig+0x19a>
 80031c4:	231b      	movs	r3, #27
 80031c6:	2220      	movs	r2, #32
 80031c8:	189b      	adds	r3, r3, r2
 80031ca:	19db      	adds	r3, r3, r7
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e055      	b.n	800327e <UART_SetConfig+0x246>
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003348 <UART_SetConfig+0x310>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d106      	bne.n	80031ea <UART_SetConfig+0x1b2>
 80031dc:	231b      	movs	r3, #27
 80031de:	2220      	movs	r2, #32
 80031e0:	189b      	adds	r3, r3, r2
 80031e2:	19db      	adds	r3, r3, r7
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
 80031e8:	e049      	b.n	800327e <UART_SetConfig+0x246>
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a50      	ldr	r2, [pc, #320]	@ (8003330 <UART_SetConfig+0x2f8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d13e      	bne.n	8003272 <UART_SetConfig+0x23a>
 80031f4:	4b51      	ldr	r3, [pc, #324]	@ (800333c <UART_SetConfig+0x304>)
 80031f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031f8:	23c0      	movs	r3, #192	@ 0xc0
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	4013      	ands	r3, r2
 80031fe:	22c0      	movs	r2, #192	@ 0xc0
 8003200:	0112      	lsls	r2, r2, #4
 8003202:	4293      	cmp	r3, r2
 8003204:	d027      	beq.n	8003256 <UART_SetConfig+0x21e>
 8003206:	22c0      	movs	r2, #192	@ 0xc0
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	4293      	cmp	r3, r2
 800320c:	d82a      	bhi.n	8003264 <UART_SetConfig+0x22c>
 800320e:	2280      	movs	r2, #128	@ 0x80
 8003210:	0112      	lsls	r2, r2, #4
 8003212:	4293      	cmp	r3, r2
 8003214:	d011      	beq.n	800323a <UART_SetConfig+0x202>
 8003216:	2280      	movs	r2, #128	@ 0x80
 8003218:	0112      	lsls	r2, r2, #4
 800321a:	4293      	cmp	r3, r2
 800321c:	d822      	bhi.n	8003264 <UART_SetConfig+0x22c>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <UART_SetConfig+0x1f4>
 8003222:	2280      	movs	r2, #128	@ 0x80
 8003224:	00d2      	lsls	r2, r2, #3
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <UART_SetConfig+0x210>
 800322a:	e01b      	b.n	8003264 <UART_SetConfig+0x22c>
 800322c:	231b      	movs	r3, #27
 800322e:	2220      	movs	r2, #32
 8003230:	189b      	adds	r3, r3, r2
 8003232:	19db      	adds	r3, r3, r7
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e021      	b.n	800327e <UART_SetConfig+0x246>
 800323a:	231b      	movs	r3, #27
 800323c:	2220      	movs	r2, #32
 800323e:	189b      	adds	r3, r3, r2
 8003240:	19db      	adds	r3, r3, r7
 8003242:	2202      	movs	r2, #2
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e01a      	b.n	800327e <UART_SetConfig+0x246>
 8003248:	231b      	movs	r3, #27
 800324a:	2220      	movs	r2, #32
 800324c:	189b      	adds	r3, r3, r2
 800324e:	19db      	adds	r3, r3, r7
 8003250:	2204      	movs	r2, #4
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e013      	b.n	800327e <UART_SetConfig+0x246>
 8003256:	231b      	movs	r3, #27
 8003258:	2220      	movs	r2, #32
 800325a:	189b      	adds	r3, r3, r2
 800325c:	19db      	adds	r3, r3, r7
 800325e:	2208      	movs	r2, #8
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e00c      	b.n	800327e <UART_SetConfig+0x246>
 8003264:	231b      	movs	r3, #27
 8003266:	2220      	movs	r2, #32
 8003268:	189b      	adds	r3, r3, r2
 800326a:	19db      	adds	r3, r3, r7
 800326c:	2210      	movs	r2, #16
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e005      	b.n	800327e <UART_SetConfig+0x246>
 8003272:	231b      	movs	r3, #27
 8003274:	2220      	movs	r2, #32
 8003276:	189b      	adds	r3, r3, r2
 8003278:	19db      	adds	r3, r3, r7
 800327a:	2210      	movs	r2, #16
 800327c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2b      	ldr	r2, [pc, #172]	@ (8003330 <UART_SetConfig+0x2f8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d000      	beq.n	800328a <UART_SetConfig+0x252>
 8003288:	e0a9      	b.n	80033de <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800328a:	231b      	movs	r3, #27
 800328c:	2220      	movs	r2, #32
 800328e:	189b      	adds	r3, r3, r2
 8003290:	19db      	adds	r3, r3, r7
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d015      	beq.n	80032c4 <UART_SetConfig+0x28c>
 8003298:	dc18      	bgt.n	80032cc <UART_SetConfig+0x294>
 800329a:	2b04      	cmp	r3, #4
 800329c:	d00d      	beq.n	80032ba <UART_SetConfig+0x282>
 800329e:	dc15      	bgt.n	80032cc <UART_SetConfig+0x294>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <UART_SetConfig+0x272>
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d005      	beq.n	80032b4 <UART_SetConfig+0x27c>
 80032a8:	e010      	b.n	80032cc <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032aa:	f7fe fddf 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 80032ae:	0003      	movs	r3, r0
 80032b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032b2:	e014      	b.n	80032de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <UART_SetConfig+0x314>)
 80032b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032b8:	e011      	b.n	80032de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7fe fd4b 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 80032be:	0003      	movs	r3, r0
 80032c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032c2:	e00c      	b.n	80032de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c4:	2380      	movs	r3, #128	@ 0x80
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032ca:	e008      	b.n	80032de <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80032d0:	231a      	movs	r3, #26
 80032d2:	2220      	movs	r2, #32
 80032d4:	189b      	adds	r3, r3, r2
 80032d6:	19db      	adds	r3, r3, r7
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
        break;
 80032dc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d100      	bne.n	80032e6 <UART_SetConfig+0x2ae>
 80032e4:	e14b      	b.n	800357e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ea:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <UART_SetConfig+0x318>)
 80032ec:	0052      	lsls	r2, r2, #1
 80032ee:	5ad3      	ldrh	r3, [r2, r3]
 80032f0:	0019      	movs	r1, r3
 80032f2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80032f4:	f7fc ff06 	bl	8000104 <__udivsi3>
 80032f8:	0003      	movs	r3, r0
 80032fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	0013      	movs	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	189b      	adds	r3, r3, r2
 8003306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003308:	429a      	cmp	r2, r3
 800330a:	d305      	bcc.n	8003318 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003314:	429a      	cmp	r2, r3
 8003316:	d91d      	bls.n	8003354 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003318:	231a      	movs	r3, #26
 800331a:	2220      	movs	r2, #32
 800331c:	189b      	adds	r3, r3, r2
 800331e:	19db      	adds	r3, r3, r7
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e12b      	b.n	800357e <UART_SetConfig+0x546>
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	cfff69f3 	.word	0xcfff69f3
 800332c:	ffffcfff 	.word	0xffffcfff
 8003330:	40008000 	.word	0x40008000
 8003334:	11fff4ff 	.word	0x11fff4ff
 8003338:	40013800 	.word	0x40013800
 800333c:	40021000 	.word	0x40021000
 8003340:	40004400 	.word	0x40004400
 8003344:	40004800 	.word	0x40004800
 8003348:	40004c00 	.word	0x40004c00
 800334c:	00f42400 	.word	0x00f42400
 8003350:	08003d74 	.word	0x08003d74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	2300      	movs	r3, #0
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003360:	4b92      	ldr	r3, [pc, #584]	@ (80035ac <UART_SetConfig+0x574>)
 8003362:	0052      	lsls	r2, r2, #1
 8003364:	5ad3      	ldrh	r3, [r2, r3]
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	69b8      	ldr	r0, [r7, #24]
 8003372:	69f9      	ldr	r1, [r7, #28]
 8003374:	f7fd f83c 	bl	80003f0 <__aeabi_uldivmod>
 8003378:	0002      	movs	r2, r0
 800337a:	000b      	movs	r3, r1
 800337c:	0e11      	lsrs	r1, r2, #24
 800337e:	021d      	lsls	r5, r3, #8
 8003380:	430d      	orrs	r5, r1
 8003382:	0214      	lsls	r4, r2, #8
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68b8      	ldr	r0, [r7, #8]
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	1900      	adds	r0, r0, r4
 8003396:	4169      	adcs	r1, r5
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f7fd f823 	bl	80003f0 <__aeabi_uldivmod>
 80033aa:	0002      	movs	r2, r0
 80033ac:	000b      	movs	r3, r1
 80033ae:	0013      	movs	r3, r2
 80033b0:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033b4:	23c0      	movs	r3, #192	@ 0xc0
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d309      	bcc.n	80033d0 <UART_SetConfig+0x398>
 80033bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	035b      	lsls	r3, r3, #13
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d204      	bcs.n	80033d0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	e0d6      	b.n	800357e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80033d0:	231a      	movs	r3, #26
 80033d2:	2220      	movs	r2, #32
 80033d4:	189b      	adds	r3, r3, r2
 80033d6:	19db      	adds	r3, r3, r7
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e0cf      	b.n	800357e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d000      	beq.n	80033ec <UART_SetConfig+0x3b4>
 80033ea:	e070      	b.n	80034ce <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80033ec:	231b      	movs	r3, #27
 80033ee:	2220      	movs	r2, #32
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d015      	beq.n	8003426 <UART_SetConfig+0x3ee>
 80033fa:	dc18      	bgt.n	800342e <UART_SetConfig+0x3f6>
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d00d      	beq.n	800341c <UART_SetConfig+0x3e4>
 8003400:	dc15      	bgt.n	800342e <UART_SetConfig+0x3f6>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <UART_SetConfig+0x3d4>
 8003406:	2b02      	cmp	r3, #2
 8003408:	d005      	beq.n	8003416 <UART_SetConfig+0x3de>
 800340a:	e010      	b.n	800342e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800340c:	f7fe fd2e 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 8003410:	0003      	movs	r3, r0
 8003412:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003414:	e014      	b.n	8003440 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003416:	4b66      	ldr	r3, [pc, #408]	@ (80035b0 <UART_SetConfig+0x578>)
 8003418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800341a:	e011      	b.n	8003440 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341c:	f7fe fc9a 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8003420:	0003      	movs	r3, r0
 8003422:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003424:	e00c      	b.n	8003440 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800342c:	e008      	b.n	8003440 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003432:	231a      	movs	r3, #26
 8003434:	2220      	movs	r2, #32
 8003436:	189b      	adds	r3, r3, r2
 8003438:	19db      	adds	r3, r3, r7
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
        break;
 800343e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003442:	2b00      	cmp	r3, #0
 8003444:	d100      	bne.n	8003448 <UART_SetConfig+0x410>
 8003446:	e09a      	b.n	800357e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800344c:	4b57      	ldr	r3, [pc, #348]	@ (80035ac <UART_SetConfig+0x574>)
 800344e:	0052      	lsls	r2, r2, #1
 8003450:	5ad3      	ldrh	r3, [r2, r3]
 8003452:	0019      	movs	r1, r3
 8003454:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003456:	f7fc fe55 	bl	8000104 <__udivsi3>
 800345a:	0003      	movs	r3, r0
 800345c:	005a      	lsls	r2, r3, #1
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	18d2      	adds	r2, r2, r3
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	0019      	movs	r1, r3
 800346c:	0010      	movs	r0, r2
 800346e:	f7fc fe49 	bl	8000104 <__udivsi3>
 8003472:	0003      	movs	r3, r0
 8003474:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	2b0f      	cmp	r3, #15
 800347a:	d921      	bls.n	80034c0 <UART_SetConfig+0x488>
 800347c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	025b      	lsls	r3, r3, #9
 8003482:	429a      	cmp	r2, r3
 8003484:	d21c      	bcs.n	80034c0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	b29a      	uxth	r2, r3
 800348a:	200e      	movs	r0, #14
 800348c:	2420      	movs	r4, #32
 800348e:	1903      	adds	r3, r0, r4
 8003490:	19db      	adds	r3, r3, r7
 8003492:	210f      	movs	r1, #15
 8003494:	438a      	bics	r2, r1
 8003496:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	b29b      	uxth	r3, r3
 800349e:	2207      	movs	r2, #7
 80034a0:	4013      	ands	r3, r2
 80034a2:	b299      	uxth	r1, r3
 80034a4:	1903      	adds	r3, r0, r4
 80034a6:	19db      	adds	r3, r3, r7
 80034a8:	1902      	adds	r2, r0, r4
 80034aa:	19d2      	adds	r2, r2, r7
 80034ac:	8812      	ldrh	r2, [r2, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	1902      	adds	r2, r0, r4
 80034b8:	19d2      	adds	r2, r2, r7
 80034ba:	8812      	ldrh	r2, [r2, #0]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	e05e      	b.n	800357e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80034c0:	231a      	movs	r3, #26
 80034c2:	2220      	movs	r2, #32
 80034c4:	189b      	adds	r3, r3, r2
 80034c6:	19db      	adds	r3, r3, r7
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e057      	b.n	800357e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034ce:	231b      	movs	r3, #27
 80034d0:	2220      	movs	r2, #32
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	19db      	adds	r3, r3, r7
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d015      	beq.n	8003508 <UART_SetConfig+0x4d0>
 80034dc:	dc18      	bgt.n	8003510 <UART_SetConfig+0x4d8>
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d00d      	beq.n	80034fe <UART_SetConfig+0x4c6>
 80034e2:	dc15      	bgt.n	8003510 <UART_SetConfig+0x4d8>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <UART_SetConfig+0x4b6>
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d005      	beq.n	80034f8 <UART_SetConfig+0x4c0>
 80034ec:	e010      	b.n	8003510 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ee:	f7fe fcbd 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 80034f2:	0003      	movs	r3, r0
 80034f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80034f6:	e014      	b.n	8003522 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f8:	4b2d      	ldr	r3, [pc, #180]	@ (80035b0 <UART_SetConfig+0x578>)
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80034fc:	e011      	b.n	8003522 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034fe:	f7fe fc29 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8003502:	0003      	movs	r3, r0
 8003504:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003506:	e00c      	b.n	8003522 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800350e:	e008      	b.n	8003522 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003514:	231a      	movs	r3, #26
 8003516:	2220      	movs	r2, #32
 8003518:	189b      	adds	r3, r3, r2
 800351a:	19db      	adds	r3, r3, r7
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
        break;
 8003520:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003524:	2b00      	cmp	r3, #0
 8003526:	d02a      	beq.n	800357e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800352c:	4b1f      	ldr	r3, [pc, #124]	@ (80035ac <UART_SetConfig+0x574>)
 800352e:	0052      	lsls	r2, r2, #1
 8003530:	5ad3      	ldrh	r3, [r2, r3]
 8003532:	0019      	movs	r1, r3
 8003534:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003536:	f7fc fde5 	bl	8000104 <__udivsi3>
 800353a:	0003      	movs	r3, r0
 800353c:	001a      	movs	r2, r3
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	18d2      	adds	r2, r2, r3
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	0019      	movs	r1, r3
 800354c:	0010      	movs	r0, r2
 800354e:	f7fc fdd9 	bl	8000104 <__udivsi3>
 8003552:	0003      	movs	r3, r0
 8003554:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	2b0f      	cmp	r3, #15
 800355a:	d90a      	bls.n	8003572 <UART_SetConfig+0x53a>
 800355c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800355e:	2380      	movs	r3, #128	@ 0x80
 8003560:	025b      	lsls	r3, r3, #9
 8003562:	429a      	cmp	r2, r3
 8003564:	d205      	bcs.n	8003572 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	b29a      	uxth	r2, r3
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60da      	str	r2, [r3, #12]
 8003570:	e005      	b.n	800357e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003572:	231a      	movs	r3, #26
 8003574:	2220      	movs	r2, #32
 8003576:	189b      	adds	r3, r3, r2
 8003578:	19db      	adds	r3, r3, r7
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	226a      	movs	r2, #106	@ 0x6a
 8003582:	2101      	movs	r1, #1
 8003584:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	2268      	movs	r2, #104	@ 0x68
 800358a:	2101      	movs	r1, #1
 800358c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	2200      	movs	r2, #0
 8003592:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	2200      	movs	r2, #0
 8003598:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800359a:	231a      	movs	r3, #26
 800359c:	2220      	movs	r2, #32
 800359e:	189b      	adds	r3, r3, r2
 80035a0:	19db      	adds	r3, r3, r7
 80035a2:	781b      	ldrb	r3, [r3, #0]
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b010      	add	sp, #64	@ 0x40
 80035aa:	bdb0      	pop	{r4, r5, r7, pc}
 80035ac:	08003d74 	.word	0x08003d74
 80035b0:	00f42400 	.word	0x00f42400

080035b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c0:	2208      	movs	r2, #8
 80035c2:	4013      	ands	r3, r2
 80035c4:	d00b      	beq.n	80035de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4a4a      	ldr	r2, [pc, #296]	@ (80036f8 <UART_AdvFeatureConfig+0x144>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	0019      	movs	r1, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e2:	2201      	movs	r2, #1
 80035e4:	4013      	ands	r3, r2
 80035e6:	d00b      	beq.n	8003600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4a43      	ldr	r2, [pc, #268]	@ (80036fc <UART_AdvFeatureConfig+0x148>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	0019      	movs	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	2202      	movs	r2, #2
 8003606:	4013      	ands	r3, r2
 8003608:	d00b      	beq.n	8003622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a3b      	ldr	r2, [pc, #236]	@ (8003700 <UART_AdvFeatureConfig+0x14c>)
 8003612:	4013      	ands	r3, r2
 8003614:	0019      	movs	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	2204      	movs	r2, #4
 8003628:	4013      	ands	r3, r2
 800362a:	d00b      	beq.n	8003644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4a34      	ldr	r2, [pc, #208]	@ (8003704 <UART_AdvFeatureConfig+0x150>)
 8003634:	4013      	ands	r3, r2
 8003636:	0019      	movs	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	2210      	movs	r2, #16
 800364a:	4013      	ands	r3, r2
 800364c:	d00b      	beq.n	8003666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a2c      	ldr	r2, [pc, #176]	@ (8003708 <UART_AdvFeatureConfig+0x154>)
 8003656:	4013      	ands	r3, r2
 8003658:	0019      	movs	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	2220      	movs	r2, #32
 800366c:	4013      	ands	r3, r2
 800366e:	d00b      	beq.n	8003688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	4a25      	ldr	r2, [pc, #148]	@ (800370c <UART_AdvFeatureConfig+0x158>)
 8003678:	4013      	ands	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368c:	2240      	movs	r2, #64	@ 0x40
 800368e:	4013      	ands	r3, r2
 8003690:	d01d      	beq.n	80036ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a1d      	ldr	r2, [pc, #116]	@ (8003710 <UART_AdvFeatureConfig+0x15c>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	035b      	lsls	r3, r3, #13
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d10b      	bne.n	80036ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4a15      	ldr	r2, [pc, #84]	@ (8003714 <UART_AdvFeatureConfig+0x160>)
 80036be:	4013      	ands	r3, r2
 80036c0:	0019      	movs	r1, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d2:	2280      	movs	r2, #128	@ 0x80
 80036d4:	4013      	ands	r3, r2
 80036d6:	d00b      	beq.n	80036f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4a0e      	ldr	r2, [pc, #56]	@ (8003718 <UART_AdvFeatureConfig+0x164>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	ffff7fff 	.word	0xffff7fff
 80036fc:	fffdffff 	.word	0xfffdffff
 8003700:	fffeffff 	.word	0xfffeffff
 8003704:	fffbffff 	.word	0xfffbffff
 8003708:	ffffefff 	.word	0xffffefff
 800370c:	ffffdfff 	.word	0xffffdfff
 8003710:	ffefffff 	.word	0xffefffff
 8003714:	ff9fffff 	.word	0xff9fffff
 8003718:	fff7ffff 	.word	0xfff7ffff

0800371c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b092      	sub	sp, #72	@ 0x48
 8003720:	af02      	add	r7, sp, #8
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2290      	movs	r2, #144	@ 0x90
 8003728:	2100      	movs	r1, #0
 800372a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800372c:	f7fd fc10 	bl	8000f50 <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2208      	movs	r2, #8
 800373c:	4013      	ands	r3, r2
 800373e:	2b08      	cmp	r3, #8
 8003740:	d12d      	bne.n	800379e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003744:	2280      	movs	r2, #128	@ 0x80
 8003746:	0391      	lsls	r1, r2, #14
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4a47      	ldr	r2, [pc, #284]	@ (8003868 <UART_CheckIdleState+0x14c>)
 800374c:	9200      	str	r2, [sp, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	f000 f88e 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d022      	beq.n	800379e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003758:	f3ef 8310 	mrs	r3, PRIMASK
 800375c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003760:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003762:	2301      	movs	r3, #1
 8003764:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003768:	f383 8810 	msr	PRIMASK, r3
}
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2180      	movs	r1, #128	@ 0x80
 800377a:	438a      	bics	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2288      	movs	r2, #136	@ 0x88
 800378e:	2120      	movs	r1, #32
 8003790:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2284      	movs	r2, #132	@ 0x84
 8003796:	2100      	movs	r1, #0
 8003798:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e060      	b.n	8003860 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2204      	movs	r2, #4
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d146      	bne.n	800383a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ae:	2280      	movs	r2, #128	@ 0x80
 80037b0:	03d1      	lsls	r1, r2, #15
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003868 <UART_CheckIdleState+0x14c>)
 80037b6:	9200      	str	r2, [sp, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f000 f859 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 80037be:	1e03      	subs	r3, r0, #0
 80037c0:	d03b      	beq.n	800383a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c2:	f3ef 8310 	mrs	r3, PRIMASK
 80037c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80037c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80037cc:	2301      	movs	r3, #1
 80037ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4922      	ldr	r1, [pc, #136]	@ (800386c <UART_CheckIdleState+0x150>)
 80037e4:	400a      	ands	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f383 8810 	msr	PRIMASK, r3
}
 80037f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f4:	f3ef 8310 	mrs	r3, PRIMASK
 80037f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80037fa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80037fe:	2301      	movs	r3, #1
 8003800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f383 8810 	msr	PRIMASK, r3
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2101      	movs	r1, #1
 8003816:	438a      	bics	r2, r1
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f383 8810 	msr	PRIMASK, r3
}
 8003824:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	228c      	movs	r2, #140	@ 0x8c
 800382a:	2120      	movs	r1, #32
 800382c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2284      	movs	r2, #132	@ 0x84
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e012      	b.n	8003860 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2288      	movs	r2, #136	@ 0x88
 800383e:	2120      	movs	r1, #32
 8003840:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	228c      	movs	r2, #140	@ 0x8c
 8003846:	2120      	movs	r1, #32
 8003848:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2284      	movs	r2, #132	@ 0x84
 800385a:	2100      	movs	r1, #0
 800385c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b010      	add	sp, #64	@ 0x40
 8003866:	bd80      	pop	{r7, pc}
 8003868:	01ffffff 	.word	0x01ffffff
 800386c:	fffffedf 	.word	0xfffffedf

08003870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003880:	e051      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	3301      	adds	r3, #1
 8003886:	d04e      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fd fb62 	bl	8000f50 <HAL_GetTick>
 800388c:	0002      	movs	r2, r0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e051      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2204      	movs	r2, #4
 80038aa:	4013      	ands	r3, r2
 80038ac:	d03b      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0xb6>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b80      	cmp	r3, #128	@ 0x80
 80038b2:	d038      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0xb6>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b40      	cmp	r3, #64	@ 0x40
 80038b8:	d035      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	2208      	movs	r2, #8
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d111      	bne.n	80038ec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2208      	movs	r2, #8
 80038ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f000 f83c 	bl	8003950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2290      	movs	r2, #144	@ 0x90
 80038dc:	2108      	movs	r1, #8
 80038de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2284      	movs	r2, #132	@ 0x84
 80038e4:	2100      	movs	r1, #0
 80038e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e02c      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	401a      	ands	r2, r3
 80038f8:	2380      	movs	r3, #128	@ 0x80
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d112      	bne.n	8003926 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2280      	movs	r2, #128	@ 0x80
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	0018      	movs	r0, r3
 800390e:	f000 f81f 	bl	8003950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2290      	movs	r2, #144	@ 0x90
 8003916:	2120      	movs	r1, #32
 8003918:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2284      	movs	r2, #132	@ 0x84
 800391e:	2100      	movs	r1, #0
 8003920:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e00f      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	4013      	ands	r3, r2
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	425a      	negs	r2, r3
 8003936:	4153      	adcs	r3, r2
 8003938:	b2db      	uxtb	r3, r3
 800393a:	001a      	movs	r2, r3
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d09e      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	0018      	movs	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	b004      	add	sp, #16
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08e      	sub	sp, #56	@ 0x38
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003958:	f3ef 8310 	mrs	r3, PRIMASK
 800395c:	617b      	str	r3, [r7, #20]
  return(result);
 800395e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
 8003962:	2301      	movs	r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f383 8810 	msr	PRIMASK, r3
}
 800396c:	46c0      	nop			@ (mov r8, r8)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4926      	ldr	r1, [pc, #152]	@ (8003a14 <UART_EndRxTransfer+0xc4>)
 800397a:	400a      	ands	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398a:	f3ef 8310 	mrs	r3, PRIMASK
 800398e:	623b      	str	r3, [r7, #32]
  return(result);
 8003990:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003992:	633b      	str	r3, [r7, #48]	@ 0x30
 8003994:	2301      	movs	r3, #1
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	f383 8810 	msr	PRIMASK, r3
}
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	491b      	ldr	r1, [pc, #108]	@ (8003a18 <UART_EndRxTransfer+0xc8>)
 80039ac:	400a      	ands	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	f383 8810 	msr	PRIMASK, r3
}
 80039ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d118      	bne.n	80039f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c4:	f3ef 8310 	mrs	r3, PRIMASK
 80039c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ce:	2301      	movs	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2110      	movs	r1, #16
 80039e6:	438a      	bics	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f383 8810 	msr	PRIMASK, r3
}
 80039f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	228c      	movs	r2, #140	@ 0x8c
 80039fa:	2120      	movs	r1, #32
 80039fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b00e      	add	sp, #56	@ 0x38
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	fffffedf 	.word	0xfffffedf
 8003a18:	effffffe 	.word	0xeffffffe

08003a1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2284      	movs	r2, #132	@ 0x84
 8003a28:	5c9b      	ldrb	r3, [r3, r2]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e027      	b.n	8003a82 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2284      	movs	r2, #132	@ 0x84
 8003a36:	2101      	movs	r1, #1
 8003a38:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2288      	movs	r2, #136	@ 0x88
 8003a3e:	2124      	movs	r1, #36	@ 0x24
 8003a40:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2101      	movs	r1, #1
 8003a56:	438a      	bics	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a8c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2288      	movs	r2, #136	@ 0x88
 8003a74:	2120      	movs	r1, #32
 8003a76:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2284      	movs	r2, #132	@ 0x84
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	0018      	movs	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b004      	add	sp, #16
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	dfffffff 	.word	0xdfffffff

08003a90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2284      	movs	r2, #132	@ 0x84
 8003a9e:	5c9b      	ldrb	r3, [r3, r2]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e02e      	b.n	8003b06 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2284      	movs	r2, #132	@ 0x84
 8003aac:	2101      	movs	r1, #1
 8003aae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2288      	movs	r2, #136	@ 0x88
 8003ab4:	2124      	movs	r1, #36	@ 0x24
 8003ab6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2101      	movs	r1, #1
 8003acc:	438a      	bics	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	08d9      	lsrs	r1, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 f854 	bl	8003b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2288      	movs	r2, #136	@ 0x88
 8003af8:	2120      	movs	r1, #32
 8003afa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2284      	movs	r2, #132	@ 0x84
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b004      	add	sp, #16
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2284      	movs	r2, #132	@ 0x84
 8003b1e:	5c9b      	ldrb	r3, [r3, r2]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e02f      	b.n	8003b88 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2284      	movs	r2, #132	@ 0x84
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2288      	movs	r2, #136	@ 0x88
 8003b34:	2124      	movs	r1, #36	@ 0x24
 8003b36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	4a0e      	ldr	r2, [pc, #56]	@ (8003b90 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 f813 	bl	8003b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2288      	movs	r2, #136	@ 0x88
 8003b7a:	2120      	movs	r1, #32
 8003b7c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2284      	movs	r2, #132	@ 0x84
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b004      	add	sp, #16
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	f1ffffff 	.word	0xf1ffffff

08003b94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d108      	bne.n	8003bb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	226a      	movs	r2, #106	@ 0x6a
 8003ba8:	2101      	movs	r1, #1
 8003baa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2268      	movs	r2, #104	@ 0x68
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bb4:	e043      	b.n	8003c3e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bb6:	260f      	movs	r6, #15
 8003bb8:	19bb      	adds	r3, r7, r6
 8003bba:	2208      	movs	r2, #8
 8003bbc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bbe:	200e      	movs	r0, #14
 8003bc0:	183b      	adds	r3, r7, r0
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	0e5b      	lsrs	r3, r3, #25
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	240d      	movs	r4, #13
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	2107      	movs	r1, #7
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	0f5b      	lsrs	r3, r3, #29
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	250c      	movs	r5, #12
 8003be6:	197b      	adds	r3, r7, r5
 8003be8:	2107      	movs	r1, #7
 8003bea:	400a      	ands	r2, r1
 8003bec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bee:	183b      	adds	r3, r7, r0
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	197a      	adds	r2, r7, r5
 8003bf4:	7812      	ldrb	r2, [r2, #0]
 8003bf6:	4914      	ldr	r1, [pc, #80]	@ (8003c48 <UARTEx_SetNbDataToProcess+0xb4>)
 8003bf8:	5c8a      	ldrb	r2, [r1, r2]
 8003bfa:	435a      	muls	r2, r3
 8003bfc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003bfe:	197b      	adds	r3, r7, r5
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	4a12      	ldr	r2, [pc, #72]	@ (8003c4c <UARTEx_SetNbDataToProcess+0xb8>)
 8003c04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c06:	0019      	movs	r1, r3
 8003c08:	f7fc fb06 	bl	8000218 <__divsi3>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	b299      	uxth	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	226a      	movs	r2, #106	@ 0x6a
 8003c14:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c16:	19bb      	adds	r3, r7, r6
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	193a      	adds	r2, r7, r4
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	490a      	ldr	r1, [pc, #40]	@ (8003c48 <UARTEx_SetNbDataToProcess+0xb4>)
 8003c20:	5c8a      	ldrb	r2, [r1, r2]
 8003c22:	435a      	muls	r2, r3
 8003c24:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c26:	193b      	adds	r3, r7, r4
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	4a08      	ldr	r2, [pc, #32]	@ (8003c4c <UARTEx_SetNbDataToProcess+0xb8>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c2e:	0019      	movs	r1, r3
 8003c30:	f7fc faf2 	bl	8000218 <__divsi3>
 8003c34:	0003      	movs	r3, r0
 8003c36:	b299      	uxth	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2268      	movs	r2, #104	@ 0x68
 8003c3c:	5299      	strh	r1, [r3, r2]
}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b005      	add	sp, #20
 8003c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	08003d8c 	.word	0x08003d8c
 8003c4c:	08003d94 	.word	0x08003d94

08003c50 <memset>:
 8003c50:	0003      	movs	r3, r0
 8003c52:	1882      	adds	r2, r0, r2
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d100      	bne.n	8003c5a <memset+0xa>
 8003c58:	4770      	bx	lr
 8003c5a:	7019      	strb	r1, [r3, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	e7f9      	b.n	8003c54 <memset+0x4>

08003c60 <__libc_init_array>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	2600      	movs	r6, #0
 8003c64:	4c0c      	ldr	r4, [pc, #48]	@ (8003c98 <__libc_init_array+0x38>)
 8003c66:	4d0d      	ldr	r5, [pc, #52]	@ (8003c9c <__libc_init_array+0x3c>)
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	42a6      	cmp	r6, r4
 8003c6e:	d109      	bne.n	8003c84 <__libc_init_array+0x24>
 8003c70:	2600      	movs	r6, #0
 8003c72:	f000 f819 	bl	8003ca8 <_init>
 8003c76:	4c0a      	ldr	r4, [pc, #40]	@ (8003ca0 <__libc_init_array+0x40>)
 8003c78:	4d0a      	ldr	r5, [pc, #40]	@ (8003ca4 <__libc_init_array+0x44>)
 8003c7a:	1b64      	subs	r4, r4, r5
 8003c7c:	10a4      	asrs	r4, r4, #2
 8003c7e:	42a6      	cmp	r6, r4
 8003c80:	d105      	bne.n	8003c8e <__libc_init_array+0x2e>
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	00b3      	lsls	r3, r6, #2
 8003c86:	58eb      	ldr	r3, [r5, r3]
 8003c88:	4798      	blx	r3
 8003c8a:	3601      	adds	r6, #1
 8003c8c:	e7ee      	b.n	8003c6c <__libc_init_array+0xc>
 8003c8e:	00b3      	lsls	r3, r6, #2
 8003c90:	58eb      	ldr	r3, [r5, r3]
 8003c92:	4798      	blx	r3
 8003c94:	3601      	adds	r6, #1
 8003c96:	e7f2      	b.n	8003c7e <__libc_init_array+0x1e>
 8003c98:	08003da4 	.word	0x08003da4
 8003c9c:	08003da4 	.word	0x08003da4
 8003ca0:	08003dac 	.word	0x08003dac
 8003ca4:	08003da4 	.word	0x08003da4

08003ca8 <_init>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr

08003cb4 <_fini>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr
