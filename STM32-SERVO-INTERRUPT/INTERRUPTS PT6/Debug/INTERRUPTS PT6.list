
INTERRUPTS PT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006560  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800661c  0800661c  0000761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800675c  0800675c  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800675c  0800675c  0000775c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006764  08006764  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006764  08006764  00007764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800676c  0800676c  0000776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006770  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000060  080067d0  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080067d0  00008330  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013821  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d8d  00000000  00000000  0001b8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001e638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7f  00000000  00000000  0001f768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf1f  00000000  00000000  000204e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016657  00000000  00000000  0003c406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac0a1  00000000  00000000  00052a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000feafe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004248  00000000  00000000  000feb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00102d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006604 	.word	0x08006604

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08006604 	.word	0x08006604

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <_Z10debugPrintPKcz>:

volatile Mode currentMode = MODE_FREEZE;


void debugPrint(const char *fmt, ...)
{
 8000630:	b40f      	push	{r0, r1, r2, r3}
 8000632:	b580      	push	{r7, lr}
 8000634:	b092      	sub	sp, #72	@ 0x48
 8000636:	af00      	add	r7, sp, #0
    char buf[64];
    va_list args;
    va_start(args, fmt);
 8000638:	2354      	movs	r3, #84	@ 0x54
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buf, sizeof(buf), fmt, args);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000642:	1d38      	adds	r0, r7, #4
 8000644:	2140      	movs	r1, #64	@ 0x40
 8000646:	f005 fb57 	bl	8005cf8 <vsniprintf>
 800064a:	0003      	movs	r3, r0
 800064c:	647b      	str	r3, [r7, #68]	@ 0x44
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 800064e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000650:	b29a      	uxth	r2, r3
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	1d39      	adds	r1, r7, #4
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <_Z10debugPrintPKcz+0x3c>)
 800065a:	f003 fdc9 	bl	80041f0 <HAL_UART_Transmit>
}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b012      	add	sp, #72	@ 0x48
 8000664:	bc80      	pop	{r7}
 8000666:	bc08      	pop	{r3}
 8000668:	b004      	add	sp, #16
 800066a:	4718      	bx	r3
 800066c:	20000150 	.word	0x20000150

08000670 <maincpp>:

uint16_t pos = SERVO_MIN;
	int8_t dir = +1;

void maincpp(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&SERVO_TIMER, TIM_CHANNEL_1);
 8000674:	4b3b      	ldr	r3, [pc, #236]	@ (8000764 <maincpp+0xf4>)
 8000676:	2100      	movs	r1, #0
 8000678:	0018      	movs	r0, r3
 800067a:	f002 fef9 	bl	8003470 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pot_value, 1);
 800067e:	493a      	ldr	r1, [pc, #232]	@ (8000768 <maincpp+0xf8>)
 8000680:	4b3a      	ldr	r3, [pc, #232]	@ (800076c <maincpp+0xfc>)
 8000682:	2201      	movs	r2, #1
 8000684:	0018      	movs	r0, r3
 8000686:	f001 f8f1 	bl	800186c <HAL_ADC_Start_DMA>
	MX_USART2_UART_Init();
 800068a:	f000 fc7d 	bl	8000f88 <MX_USART2_UART_Init>
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 800068e:	4938      	ldr	r1, [pc, #224]	@ (8000770 <maincpp+0x100>)
 8000690:	4b38      	ldr	r3, [pc, #224]	@ (8000774 <maincpp+0x104>)
 8000692:	2201      	movs	r2, #1
 8000694:	0018      	movs	r0, r3
 8000696:	f003 fe4f 	bl	8004338 <HAL_UART_Receive_IT>

	time_since_button_pressed = HAL_GetTick();
 800069a:	f000 fdc9 	bl	8001230 <HAL_GetTick>
 800069e:	0002      	movs	r2, r0
 80006a0:	4b35      	ldr	r3, [pc, #212]	@ (8000778 <maincpp+0x108>)
 80006a2:	601a      	str	r2, [r3, #0]

	while(1)
	{
		switch(currentMode)
 80006a4:	4b35      	ldr	r3, [pc, #212]	@ (800077c <maincpp+0x10c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d034      	beq.n	8000718 <maincpp+0xa8>
 80006ae:	dcf9      	bgt.n	80006a4 <maincpp+0x34>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d02d      	beq.n	8000710 <maincpp+0xa0>
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d1f5      	bne.n	80006a4 <maincpp+0x34>
		{
		case MODE_SWEEP:
		// To continuously sweep between MIN and MAX
		SERVO_TIMER.Instance->CCR1 = pos;
 80006b8:	4b31      	ldr	r3, [pc, #196]	@ (8000780 <maincpp+0x110>)
 80006ba:	881a      	ldrh	r2, [r3, #0]
 80006bc:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <maincpp+0xf4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	635a      	str	r2, [r3, #52]	@ 0x34
		pos += dir;
 80006c2:	4b30      	ldr	r3, [pc, #192]	@ (8000784 <maincpp+0x114>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000780 <maincpp+0x110>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	18d3      	adds	r3, r2, r3
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <maincpp+0x110>)
 80006d4:	801a      	strh	r2, [r3, #0]

		if(pos >= SERVO_MAX)
 80006d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <maincpp+0x110>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	4a2b      	ldr	r2, [pc, #172]	@ (8000788 <maincpp+0x118>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d906      	bls.n	80006ee <maincpp+0x7e>
		{
		pos = SERVO_MAX;
 80006e0:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <maincpp+0x110>)
 80006e2:	4a2a      	ldr	r2, [pc, #168]	@ (800078c <maincpp+0x11c>)
 80006e4:	801a      	strh	r2, [r3, #0]
		dir = -1;
 80006e6:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <maincpp+0x114>)
 80006e8:	22ff      	movs	r2, #255	@ 0xff
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e00c      	b.n	8000708 <maincpp+0x98>
		}
		else if ( pos <= SERVO_MIN)
 80006ee:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <maincpp+0x110>)
 80006f0:	881a      	ldrh	r2, [r3, #0]
 80006f2:	23fa      	movs	r3, #250	@ 0xfa
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d806      	bhi.n	8000708 <maincpp+0x98>
		{
		pos = SERVO_MIN;
 80006fa:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <maincpp+0x110>)
 80006fc:	22fa      	movs	r2, #250	@ 0xfa
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	801a      	strh	r2, [r3, #0]
		dir = +1;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <maincpp+0x114>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]

		}
		HAL_Delay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fd9b 	bl	8001244 <HAL_Delay>
		break;
 800070e:	e028      	b.n	8000762 <maincpp+0xf2>

		case MODE_FREEZE:
			HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f000 fd97 	bl	8001244 <HAL_Delay>
			break;
 8000716:	e024      	b.n	8000762 <maincpp+0xf2>

		case MODE_MANUAL:

			pos = (pot_value * SERVO_RANGE) / ADC_MAX + SERVO_MIN;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <maincpp+0xf8>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	0013      	movs	r3, r2
 800071e:	015b      	lsls	r3, r3, #5
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	189b      	adds	r3, r3, r2
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	4919      	ldr	r1, [pc, #100]	@ (8000790 <maincpp+0x120>)
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff fcf4 	bl	8000118 <__udivsi3>
 8000730:	0003      	movs	r3, r0
 8000732:	b29b      	uxth	r3, r3
 8000734:	33f5      	adds	r3, #245	@ 0xf5
 8000736:	33ff      	adds	r3, #255	@ 0xff
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <maincpp+0x110>)
 800073c:	801a      	strh	r2, [r3, #0]
			                SERVO_TIMER.Instance->CCR1 = pos;
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <maincpp+0x110>)
 8000740:	881a      	ldrh	r2, [r3, #0]
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <maincpp+0xf4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	635a      	str	r2, [r3, #52]	@ 0x34
			                debugPrint("MANUAL POS=%u, ADC=%lu\r\n", pos, pot_value);
 8000748:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <maincpp+0x110>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	0019      	movs	r1, r3
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <maincpp+0xf8>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <maincpp+0x124>)
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff ff6b 	bl	8000630 <_Z10debugPrintPKcz>
			                HAL_Delay(200);
 800075a:	20c8      	movs	r0, #200	@ 0xc8
 800075c:	f000 fd72 	bl	8001244 <HAL_Delay>
		break;
 8000760:	46c0      	nop			@ (mov r8, r8)
		switch(currentMode)
 8000762:	e79f      	b.n	80006a4 <maincpp+0x34>
 8000764:	20000104 	.word	0x20000104
 8000768:	20000080 	.word	0x20000080
 800076c:	2000009c 	.word	0x2000009c
 8000770:	2000007c 	.word	0x2000007c
 8000774:	20000150 	.word	0x20000150
 8000778:	20000090 	.word	0x20000090
 800077c:	20000084 	.word	0x20000084
 8000780:	20000000 	.word	0x20000000
 8000784:	20000002 	.word	0x20000002
 8000788:	000009c3 	.word	0x000009c3
 800078c:	000009c4 	.word	0x000009c4
 8000790:	00000fff 	.word	0x00000fff
 8000794:	0800661c 	.word	0x0800661c

08000798 <HAL_GPIO_EXTI_Rising_Callback>:
	}
}
}
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin ==BUTTON_INT13_Pin)
 80007a4:	1dbb      	adds	r3, r7, #6
 80007a6:	881a      	ldrh	r2, [r3, #0]
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	019b      	lsls	r3, r3, #6
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d152      	bne.n	8000856 <HAL_GPIO_EXTI_Rising_Callback+0xbe>
	{
		uint32_t now = HAL_GetTick();
 80007b0:	f000 fd3e 	bl	8001230 <HAL_GetTick>
 80007b4:	0003      	movs	r3, r0
 80007b6:	60fb      	str	r3, [r7, #12]

		if( now - lastRiseTick < DEBOUNCE) return;
 80007b8:	4b28      	ldr	r3, [pc, #160]	@ (800085c <HAL_GPIO_EXTI_Rising_Callback+0xc4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	1ad2      	subs	r2, r2, r3
 80007c0:	2113      	movs	r1, #19
 80007c2:	2300      	movs	r3, #0
 80007c4:	4291      	cmp	r1, r2
 80007c6:	415b      	adcs	r3, r3
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d142      	bne.n	8000854 <HAL_GPIO_EXTI_Rising_Callback+0xbc>

		uint32_t held = now - time_since_button_pressed;
 80007ce:	4b24      	ldr	r3, [pc, #144]	@ (8000860 <HAL_GPIO_EXTI_Rising_Callback+0xc8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	60bb      	str	r3, [r7, #8]

		if(held < NORMAL_BUTTON_PRESS)
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	23fa      	movs	r3, #250	@ 0xfa
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	429a      	cmp	r2, r3
 80007e0:	d20a      	bcs.n	80007f8 <HAL_GPIO_EXTI_Rising_Callback+0x60>
		{
			currentMode = MODE_SWEEP;
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <HAL_GPIO_EXTI_Rising_Callback+0xcc>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80007e8:	23a0      	movs	r3, #160	@ 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2201      	movs	r2, #1
 80007ee:	2120      	movs	r1, #32
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fed5 	bl	80025a0 <HAL_GPIO_WritePin>
 80007f6:	e021      	b.n	800083c <HAL_GPIO_EXTI_Rising_Callback+0xa4>
		}
		else if (held< LONG_BUTTON_PRESS)
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	23fa      	movs	r3, #250	@ 0xfa
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	429a      	cmp	r2, r3
 8000800:	d212      	bcs.n	8000828 <HAL_GPIO_EXTI_Rising_Callback+0x90>
		{
			currentMode = MODE_FREEZE;
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <HAL_GPIO_EXTI_Rising_Callback+0xcc>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000808:	23a0      	movs	r3, #160	@ 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2200      	movs	r2, #0
 800080e:	2120      	movs	r1, #32
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fec5 	bl	80025a0 <HAL_GPIO_WritePin>
			  debugPrint("FROZEN at POS=%u\r\n", pos);
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <HAL_GPIO_EXTI_Rising_Callback+0xd0>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	001a      	movs	r2, r3
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <HAL_GPIO_EXTI_Rising_Callback+0xd4>)
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff ff05 	bl	8000630 <_Z10debugPrintPKcz>
 8000826:	e009      	b.n	800083c <HAL_GPIO_EXTI_Rising_Callback+0xa4>
		}
		else
		{
			currentMode = MODE_MANUAL;
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <HAL_GPIO_EXTI_Rising_Callback+0xcc>)
 800082a:	2202      	movs	r2, #2
 800082c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800082e:	23a0      	movs	r3, #160	@ 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	0018      	movs	r0, r3
 8000838:	f001 feb2 	bl	80025a0 <HAL_GPIO_WritePin>
		}
		time_since_button_pressed = now;
 800083c:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <HAL_GPIO_EXTI_Rising_Callback+0xc8>)
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	601a      	str	r2, [r3, #0]
		button_releases++;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 800084a:	601a      	str	r2, [r3, #0]
		lastRiseTick = now;
 800084c:	4b03      	ldr	r3, [pc, #12]	@ (800085c <HAL_GPIO_EXTI_Rising_Callback+0xc4>)
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	e000      	b.n	8000856 <HAL_GPIO_EXTI_Rising_Callback+0xbe>
		if( now - lastRiseTick < DEBOUNCE) return;
 8000854:	46c0      	nop			@ (mov r8, r8)

	}
}
 8000856:	46bd      	mov	sp, r7
 8000858:	b004      	add	sp, #16
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000094 	.word	0x20000094
 8000860:	20000090 	.word	0x20000090
 8000864:	20000084 	.word	0x20000084
 8000868:	20000000 	.word	0x20000000
 800086c:	08006638 	.word	0x08006638
 8000870:	2000008c 	.word	0x2000008c

08000874 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	0002      	movs	r2, r0
 800087c:	1dbb      	adds	r3, r7, #6
 800087e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_INT13_Pin)
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	881a      	ldrh	r2, [r3, #0]
 8000884:	2380      	movs	r3, #128	@ 0x80
 8000886:	019b      	lsls	r3, r3, #6
 8000888:	429a      	cmp	r2, r3
 800088a:	d11d      	bne.n	80008c8 <HAL_GPIO_EXTI_Falling_Callback+0x54>
	{
		uint32_t now = HAL_GetTick();
 800088c:	f000 fcd0 	bl	8001230 <HAL_GetTick>
 8000890:	0003      	movs	r3, r0
 8000892:	60fb      	str	r3, [r7, #12]

		if( now - lastFallTick < DEBOUNCE) return;
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	1ad2      	subs	r2, r2, r3
 800089c:	2113      	movs	r1, #19
 800089e:	2300      	movs	r3, #0
 80008a0:	4291      	cmp	r1, r2
 80008a2:	415b      	adcs	r3, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10d      	bne.n	80008c6 <HAL_GPIO_EXTI_Falling_Callback+0x52>

		time_since_button_pressed = HAL_GetTick();
 80008aa:	f000 fcc1 	bl	8001230 <HAL_GetTick>
 80008ae:	0002      	movs	r2, r0
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80008b2:	601a      	str	r2, [r3, #0]
		button_pressed++;
 80008b4:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 80008bc:	601a      	str	r2, [r3, #0]
		lastFallTick = now;
 80008be:	4b04      	ldr	r3, [pc, #16]	@ (80008d0 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	e000      	b.n	80008c8 <HAL_GPIO_EXTI_Falling_Callback+0x54>
		if( now - lastFallTick < DEBOUNCE) return;
 80008c6:	46c0      	nop			@ (mov r8, r8)
	}
}
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	20000098 	.word	0x20000098
 80008d4:	20000090 	.word	0x20000090
 80008d8:	20000088 	.word	0x20000088

080008dc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a06      	ldr	r2, [pc, #24]	@ (8000904 <HAL_UART_RxCpltCallback+0x28>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d105      	bne.n	80008fa <HAL_UART_RxCpltCallback+0x1e>
    {

        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80008ee:	4906      	ldr	r1, [pc, #24]	@ (8000908 <HAL_UART_RxCpltCallback+0x2c>)
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_UART_RxCpltCallback+0x30>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f003 fd1f 	bl	8004338 <HAL_UART_Receive_IT>
    }
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	40004400 	.word	0x40004400
 8000908:	2000007c 	.word	0x2000007c
 800090c:	20000150 	.word	0x20000150

08000910 <_Z41__static_initialization_and_destruction_0v>:
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
volatile uint32_t time_since_button_pressed = HAL_GetTick();
 8000914:	f000 fc8c 	bl	8001230 <HAL_GetTick>
 8000918:	0002      	movs	r2, r0
 800091a:	4b02      	ldr	r3, [pc, #8]	@ (8000924 <_Z41__static_initialization_and_destruction_0v+0x14>)
 800091c:	601a      	str	r2, [r3, #0]
}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000090 	.word	0x20000090

08000928 <_GLOBAL__sub_I_pot_value>:
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
 800092c:	f7ff fff0 	bl	8000910 <_Z41__static_initialization_and_destruction_0v>
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	0018      	movs	r0, r3
 800093e:	230c      	movs	r3, #12
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f005 f9e4 	bl	8005d10 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000948:	4b2b      	ldr	r3, [pc, #172]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 800094a:	4a2c      	ldr	r2, [pc, #176]	@ (80009fc <MX_ADC1_Init+0xc8>)
 800094c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800094e:	4b2a      	ldr	r3, [pc, #168]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 8000950:	2280      	movs	r2, #128	@ 0x80
 8000952:	05d2      	lsls	r2, r2, #23
 8000954:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000956:	4b28      	ldr	r3, [pc, #160]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095c:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000962:	4b25      	ldr	r3, [pc, #148]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000968:	4b23      	ldr	r3, [pc, #140]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 800096a:	2204      	movs	r2, #4
 800096c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800096e:	4b22      	ldr	r3, [pc, #136]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 8000970:	2200      	movs	r2, #0
 8000972:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000974:	4b20      	ldr	r3, [pc, #128]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 8000976:	2200      	movs	r2, #0
 8000978:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800097a:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 800097c:	2201      	movs	r2, #1
 800097e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 8000982:	2201      	movs	r2, #1
 8000984:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000986:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098c:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 8000994:	222c      	movs	r2, #44	@ 0x2c
 8000996:	2100      	movs	r1, #0
 8000998:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 80009ae:	223c      	movs	r2, #60	@ 0x3c
 80009b0:	2100      	movs	r1, #0
 80009b2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009b4:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fdad 	bl	800151c <HAL_ADC_Init>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80009c6:	f000 f947 	bl	8000c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009dc:	1d3a      	adds	r2, r7, #4
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_ADC1_Init+0xc4>)
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 ffe8 	bl	80019b8 <HAL_ADC_ConfigChannel>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80009ec:	f000 f934 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b004      	add	sp, #16
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000009c 	.word	0x2000009c
 80009fc:	40012400 	.word	0x40012400

08000a00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08b      	sub	sp, #44	@ 0x2c
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	2414      	movs	r4, #20
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f005 f97c 	bl	8005d10 <memset>
  if(adcHandle->Instance==ADC1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a18      	ldr	r2, [pc, #96]	@ (8000a80 <HAL_ADC_MspInit+0x80>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d129      	bne.n	8000a76 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <HAL_ADC_MspInit+0x84>)
 8000a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <HAL_ADC_MspInit+0x84>)
 8000a28:	2180      	movs	r1, #128	@ 0x80
 8000a2a:	0349      	lsls	r1, r1, #13
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <HAL_ADC_MspInit+0x84>)
 8000a32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	035b      	lsls	r3, r3, #13
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <HAL_ADC_MspInit+0x84>)
 8000a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <HAL_ADC_MspInit+0x84>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	430a      	orrs	r2, r1
 8000a48:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_ADC_MspInit+0x84>)
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2201      	movs	r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2203      	movs	r2, #3
 8000a60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	193a      	adds	r2, r7, r4
 8000a6a:	23a0      	movs	r3, #160	@ 0xa0
 8000a6c:	05db      	lsls	r3, r3, #23
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 fc31 	bl	80022d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b00b      	add	sp, #44	@ 0x2c
 8000a7c:	bd90      	pop	{r4, r7, pc}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	40012400 	.word	0x40012400
 8000a84:	40021000 	.word	0x40021000

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b08b      	sub	sp, #44	@ 0x2c
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	2414      	movs	r4, #20
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	0018      	movs	r0, r3
 8000a94:	2314      	movs	r3, #20
 8000a96:	001a      	movs	r2, r3
 8000a98:	2100      	movs	r1, #0
 8000a9a:	f005 f939 	bl	8005d10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b34      	ldr	r3, [pc, #208]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aa2:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aaa:	4b31      	ldr	r3, [pc, #196]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aae:	2204      	movs	r2, #4
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aba:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000abc:	2120      	movs	r1, #32
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ada:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000aec:	2102      	movs	r1, #2
 8000aee:	430a      	orrs	r2, r1
 8000af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af6:	2202      	movs	r2, #2
 8000af8:	4013      	ands	r3, r2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000afe:	23a0      	movs	r3, #160	@ 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 fd4a 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INT13_Pin */
  GPIO_InitStruct.Pin = BUTTON_INT13_Pin;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2280      	movs	r2, #128	@ 0x80
 8000b10:	0192      	lsls	r2, r2, #6
 8000b12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	22c4      	movs	r2, #196	@ 0xc4
 8000b18:	0392      	lsls	r2, r2, #14
 8000b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INT13_GPIO_Port, &GPIO_InitStruct);
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	4a13      	ldr	r2, [pc, #76]	@ (8000b74 <MX_GPIO_Init+0xec>)
 8000b26:	0019      	movs	r1, r3
 8000b28:	0010      	movs	r0, r2
 8000b2a:	f001 fbd5 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b2e:	0021      	movs	r1, r4
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2220      	movs	r2, #32
 8000b34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2201      	movs	r2, #1
 8000b3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2202      	movs	r2, #2
 8000b46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b48:	187a      	adds	r2, r7, r1
 8000b4a:	23a0      	movs	r3, #160	@ 0xa0
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 fbc1 	bl	80022d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f001 fac4 	bl	80020e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b60:	2007      	movs	r0, #7
 8000b62:	f001 fad6 	bl	8002112 <HAL_NVIC_EnableIRQ>

}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b00b      	add	sp, #44	@ 0x2c
 8000b6c:	bd90      	pop	{r4, r7, pc}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	40021000 	.word	0x40021000
 8000b74:	50000800 	.word	0x50000800

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 fadc 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f80c 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f7ff ff80 	bl	8000a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b88:	f000 f9fe 	bl	8000f88 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b8c:	f7ff fed2 	bl	8000934 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000b90:	f000 f8ec 	bl	8000d6c <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  maincpp();
 8000b94:	f7ff fd6c 	bl	8000670 <maincpp>
  while (1)
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	e7fd      	b.n	8000b98 <main+0x20>

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b093      	sub	sp, #76	@ 0x4c
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	2410      	movs	r4, #16
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2338      	movs	r3, #56	@ 0x38
 8000baa:	001a      	movs	r2, r3
 8000bac:	2100      	movs	r1, #0
 8000bae:	f005 f8af 	bl	8005d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb2:	003b      	movs	r3, r7
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f005 f8a8 	bl	8005d10 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2380      	movs	r3, #128	@ 0x80
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f001 fd33 	bl	8002630 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2202      	movs	r2, #2
 8000bce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	2280      	movs	r2, #128	@ 0x80
 8000bd4:	0052      	lsls	r2, r2, #1
 8000bd6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bd8:	0021      	movs	r1, r4
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2240      	movs	r2, #64	@ 0x40
 8000be4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2202      	movs	r2, #2
 8000bea:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2202      	movs	r2, #2
 8000bf0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2280      	movs	r2, #128	@ 0x80
 8000c02:	0292      	lsls	r2, r2, #10
 8000c04:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	22c0      	movs	r2, #192	@ 0xc0
 8000c0a:	04d2      	lsls	r2, r2, #19
 8000c0c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2280      	movs	r2, #128	@ 0x80
 8000c12:	0592      	lsls	r2, r2, #22
 8000c14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 fd55 	bl	80026c8 <HAL_RCC_OscConfig>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c22:	f000 f819 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	003b      	movs	r3, r7
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	003b      	movs	r3, r7
 8000c2e:	2202      	movs	r2, #2
 8000c30:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	003b      	movs	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c38:	003b      	movs	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3e:	003b      	movs	r3, r7
 8000c40:	2102      	movs	r1, #2
 8000c42:	0018      	movs	r0, r3
 8000c44:	f002 f85a 	bl	8002cfc <HAL_RCC_ClockConfig>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c4c:	f000 f804 	bl	8000c58 <Error_Handler>
  }
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b013      	add	sp, #76	@ 0x4c
 8000c56:	bd90      	pop	{r4, r7, pc}

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c70:	2101      	movs	r1, #1
 8000c72:	430a      	orrs	r2, r1
 8000c74:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c88:	2180      	movs	r1, #128	@ 0x80
 8000c8a:	0549      	lsls	r1, r1, #21
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_MspInit+0x44>)
 8000c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c94:	2380      	movs	r3, #128	@ 0x80
 8000c96:	055b      	lsls	r3, r3, #21
 8000c98:	4013      	ands	r3, r2
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	40021000 	.word	0x40021000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	e7fd      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	e7fd      	b.n	8000cb8 <HardFault_Handler+0x4>

08000cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f000 fa9a 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT13_Pin);
 8000ce2:	2380      	movs	r3, #128	@ 0x80
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f001 fc78 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	18d3      	adds	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f004 fffc 	bl	8005d20 <__errno>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	425b      	negs	r3, r3
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	18d2      	adds	r2, r2, r3
 8000d42:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <_sbrk+0x64>)
 8000d44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b006      	add	sp, #24
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20009000 	.word	0x20009000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	20000100 	.word	0x20000100
 8000d5c:	20000330 	.word	0x20000330

08000d60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b098      	sub	sp, #96	@ 0x60
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d72:	2354      	movs	r3, #84	@ 0x54
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	0018      	movs	r0, r3
 8000d78:	230c      	movs	r3, #12
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f004 ffc7 	bl	8005d10 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d82:	2338      	movs	r3, #56	@ 0x38
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	0018      	movs	r0, r3
 8000d88:	231c      	movs	r3, #28
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f004 ffbf 	bl	8005d10 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	0018      	movs	r0, r3
 8000d96:	2334      	movs	r3, #52	@ 0x34
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f004 ffb8 	bl	8005d10 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000da0:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000da2:	4a3d      	ldr	r2, [pc, #244]	@ (8000e98 <MX_TIM15_Init+0x12c>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 8000da6:	4b3b      	ldr	r3, [pc, #236]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000da8:	223f      	movs	r2, #63	@ 0x3f
 8000daa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b39      	ldr	r3, [pc, #228]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000;
 8000db2:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000db4:	4a39      	ldr	r2, [pc, #228]	@ (8000e9c <MX_TIM15_Init+0x130>)
 8000db6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b36      	ldr	r3, [pc, #216]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000dbe:	4b35      	ldr	r3, [pc, #212]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc4:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000dca:	4b32      	ldr	r3, [pc, #200]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f002 faf7 	bl	80033c0 <HAL_TIM_PWM_Init>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000dd6:	f7ff ff3f 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dda:	2154      	movs	r1, #84	@ 0x54
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000de8:	187a      	adds	r2, r7, r1
 8000dea:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000dec:	0011      	movs	r1, r2
 8000dee:	0018      	movs	r0, r3
 8000df0:	f003 f89e 	bl	8003f30 <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000df8:	f7ff ff2e 	bl	8000c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dfc:	2138      	movs	r1, #56	@ 0x38
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2260      	movs	r2, #96	@ 0x60
 8000e02:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f002 fc08 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000e34:	1e03      	subs	r3, r0, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000e38:	f7ff ff0e 	bl	8000c58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	0192      	lsls	r2, r2, #6
 8000e60:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e6e:	1d3a      	adds	r2, r7, #4
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f003 f8c9 	bl	800400c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8000e7e:	f7ff feeb 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000e82:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <MX_TIM15_Init+0x128>)
 8000e84:	0018      	movs	r0, r3
 8000e86:	f000 f841 	bl	8000f0c <HAL_TIM_MspPostInit>

}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b018      	add	sp, #96	@ 0x60
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	20000104 	.word	0x20000104
 8000e98:	40014000 	.word	0x40014000
 8000e9c:	00004e20 	.word	0x00004e20

08000ea0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b091      	sub	sp, #68	@ 0x44
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea8:	240c      	movs	r4, #12
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	0018      	movs	r0, r3
 8000eae:	2334      	movs	r3, #52	@ 0x34
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f004 ff2c 	bl	8005d10 <memset>
  if(tim_pwmHandle->Instance==TIM15)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <HAL_TIM_PWM_MspInit+0x64>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d11c      	bne.n	8000efc <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM15_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	2280      	movs	r2, #128	@ 0x80
 8000ec6:	03d2      	lsls	r2, r2, #15
 8000ec8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f002 f8bc 	bl	8003050 <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000edc:	f7ff febc 	bl	8000c58 <Error_Handler>
    }

    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <HAL_TIM_PWM_MspInit+0x68>)
 8000ee2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <HAL_TIM_PWM_MspInit+0x68>)
 8000ee6:	2180      	movs	r1, #128	@ 0x80
 8000ee8:	0249      	lsls	r1, r1, #9
 8000eea:	430a      	orrs	r2, r1
 8000eec:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_TIM_PWM_MspInit+0x68>)
 8000ef0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef2:	2380      	movs	r3, #128	@ 0x80
 8000ef4:	025b      	lsls	r3, r3, #9
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b011      	add	sp, #68	@ 0x44
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	40014000 	.word	0x40014000
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b089      	sub	sp, #36	@ 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	240c      	movs	r4, #12
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	0018      	movs	r0, r3
 8000f1a:	2314      	movs	r3, #20
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	f004 fef6 	bl	8005d10 <memset>
  if(timHandle->Instance==TIM15)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <HAL_TIM_MspPostInit+0x70>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d122      	bne.n	8000f74 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <HAL_TIM_MspPostInit+0x74>)
 8000f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <HAL_TIM_MspPostInit+0x74>)
 8000f34:	2102      	movs	r1, #2
 8000f36:	430a      	orrs	r2, r1
 8000f38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_TIM_MspPostInit+0x74>)
 8000f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f3e:	2202      	movs	r2, #2
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	01d2      	lsls	r2, r2, #7
 8000f4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	0021      	movs	r1, r4
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2202      	movs	r2, #2
 8000f54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2205      	movs	r2, #5
 8000f66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	4a06      	ldr	r2, [pc, #24]	@ (8000f84 <HAL_TIM_MspPostInit+0x78>)
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	0010      	movs	r0, r2
 8000f70:	f001 f9b2 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000f74:	46c0      	nop			@ (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b009      	add	sp, #36	@ 0x24
 8000f7a:	bd90      	pop	{r4, r7, pc}
 8000f7c:	40014000 	.word	0x40014000
 8000f80:	40021000 	.word	0x40021000
 8000f84:	50000400 	.word	0x50000400

08000f88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000f8e:	4a24      	ldr	r2, [pc, #144]	@ (8001020 <MX_USART2_UART_Init+0x98>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f92:	4b22      	ldr	r3, [pc, #136]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000f94:	22e1      	movs	r2, #225	@ 0xe1
 8000f96:	0252      	lsls	r2, r2, #9
 8000f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b20      	ldr	r3, [pc, #128]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f003 f8b6 	bl	8004144 <HAL_UART_Init>
 8000fd8:	1e03      	subs	r3, r0, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fdc:	f7ff fe3c 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f004 fd79 	bl	8005adc <HAL_UARTEx_SetTxFifoThreshold>
 8000fea:	1e03      	subs	r3, r0, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fee:	f7ff fe33 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f004 fdb0 	bl	8005b5c <HAL_UARTEx_SetRxFifoThreshold>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001000:	f7ff fe2a 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <MX_USART2_UART_Init+0x94>)
 8001006:	0018      	movs	r0, r3
 8001008:	f004 fd2e 	bl	8005a68 <HAL_UARTEx_DisableFifoMode>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d001      	beq.n	8001014 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001010:	f7ff fe22 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001014:	46c0      	nop			@ (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	20000150 	.word	0x20000150
 8001020:	40004400 	.word	0x40004400

08001024 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b097      	sub	sp, #92	@ 0x5c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	2344      	movs	r3, #68	@ 0x44
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	0018      	movs	r0, r3
 8001032:	2314      	movs	r3, #20
 8001034:	001a      	movs	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f004 fe6a 	bl	8005d10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800103c:	2410      	movs	r4, #16
 800103e:	193b      	adds	r3, r7, r4
 8001040:	0018      	movs	r0, r3
 8001042:	2334      	movs	r3, #52	@ 0x34
 8001044:	001a      	movs	r2, r3
 8001046:	2100      	movs	r1, #0
 8001048:	f004 fe62 	bl	8005d10 <memset>
  if(uartHandle->Instance==USART2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a22      	ldr	r2, [pc, #136]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d13e      	bne.n	80010d4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2202      	movs	r2, #2
 800105a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800105c:	193b      	adds	r3, r7, r4
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001062:	193b      	adds	r3, r7, r4
 8001064:	0018      	movs	r0, r3
 8001066:	f001 fff3 	bl	8003050 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d001      	beq.n	8001072 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800106e:	f7ff fdf3 	bl	8000c58 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <HAL_UART_MspInit+0xbc>)
 8001074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001076:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <HAL_UART_MspInit+0xbc>)
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	0289      	lsls	r1, r1, #10
 800107c:	430a      	orrs	r2, r1
 800107e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001080:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <HAL_UART_MspInit+0xbc>)
 8001082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001084:	2380      	movs	r3, #128	@ 0x80
 8001086:	029b      	lsls	r3, r3, #10
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <HAL_UART_MspInit+0xbc>)
 8001090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001092:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <HAL_UART_MspInit+0xbc>)
 8001094:	2101      	movs	r1, #1
 8001096:	430a      	orrs	r2, r1
 8001098:	635a      	str	r2, [r3, #52]	@ 0x34
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_UART_MspInit+0xbc>)
 800109c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800109e:	2201      	movs	r2, #1
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80010a6:	2144      	movs	r1, #68	@ 0x44
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2202      	movs	r2, #2
 80010b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2201      	movs	r2, #1
 80010b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2201      	movs	r2, #1
 80010c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	187a      	adds	r2, r7, r1
 80010c8:	23a0      	movs	r3, #160	@ 0xa0
 80010ca:	05db      	lsls	r3, r3, #23
 80010cc:	0011      	movs	r1, r2
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 f902 	bl	80022d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b017      	add	sp, #92	@ 0x5c
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	40004400 	.word	0x40004400
 80010e0:	40021000 	.word	0x40021000

080010e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010e4:	480d      	ldr	r0, [pc, #52]	@ (800111c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010e8:	f7ff fe3a 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	@ (8001120 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	@ (8001124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <LoopForever+0xe>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	@ (8001130 <LoopForever+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001112:	f004 fe0b 	bl	8005d2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001116:	f7ff fd2f 	bl	8000b78 <main>

0800111a <LoopForever>:

LoopForever:
  b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   r0, =_estack
 800111c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001128:	08006770 	.word	0x08006770
  ldr r2, =_sbss
 800112c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001130:	20000330 	.word	0x20000330

08001134 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_COMP_IRQHandler>
	...

08001138 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_Init+0x3c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_Init+0x3c>)
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	0049      	lsls	r1, r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f810 	bl	8001178 <HAL_InitTick>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d003      	beq.n	8001164 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e001      	b.n	8001168 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fd7e 	bl	8000c64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40022000 	.word	0x40022000

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001180:	230f      	movs	r3, #15
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001188:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <HAL_InitTick+0x88>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d02b      	beq.n	80011e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001190:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <HAL_InitTick+0x8c>)
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_InitTick+0x88>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	0019      	movs	r1, r3
 800119a:	23fa      	movs	r3, #250	@ 0xfa
 800119c:	0098      	lsls	r0, r3, #2
 800119e:	f7fe ffbb 	bl	8000118 <__udivsi3>
 80011a2:	0003      	movs	r3, r0
 80011a4:	0019      	movs	r1, r3
 80011a6:	0020      	movs	r0, r4
 80011a8:	f7fe ffb6 	bl	8000118 <__udivsi3>
 80011ac:	0003      	movs	r3, r0
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 ffbf 	bl	8002132 <HAL_SYSTICK_Config>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d112      	bne.n	80011de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d80a      	bhi.n	80011d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	2301      	movs	r3, #1
 80011c2:	425b      	negs	r3, r3
 80011c4:	2200      	movs	r2, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 ff8e 	bl	80020e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <HAL_InitTick+0x90>)
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e00d      	b.n	80011f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011d4:	230f      	movs	r3, #15
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e008      	b.n	80011f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011de:	230f      	movs	r3, #15
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e003      	b.n	80011f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011f0:	230f      	movs	r3, #15
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	781b      	ldrb	r3, [r3, #0]
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b005      	add	sp, #20
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000004 	.word	0x20000004
 8001208:	20000008 	.word	0x20000008

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <HAL_IncTick+0x1c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	001a      	movs	r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	@ (800122c <HAL_IncTick+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	18d2      	adds	r2, r2, r3
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <HAL_IncTick+0x20>)
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	46c0      	nop			@ (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	2000000c 	.word	0x2000000c
 800122c:	200001e4 	.word	0x200001e4

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b02      	ldr	r3, [pc, #8]	@ (8001240 <HAL_GetTick+0x10>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	200001e4 	.word	0x200001e4

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff fff0 	bl	8001230 <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	001a      	movs	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	189b      	adds	r3, r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	f7ff ffe0 	bl	8001230 <HAL_GetTick>
 8001270:	0002      	movs	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b004      	add	sp, #16
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	2000000c 	.word	0x2000000c

0800128c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800129c:	401a      	ands	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	fe3fffff 	.word	0xfe3fffff

080012b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	23e0      	movs	r3, #224	@ 0xe0
 80012c2:	045b      	lsls	r3, r3, #17
 80012c4:	4013      	ands	r3, r2
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b002      	add	sp, #8
 80012cc:	bd80      	pop	{r7, pc}

080012ce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	2104      	movs	r1, #4
 80012e2:	400a      	ands	r2, r1
 80012e4:	2107      	movs	r1, #7
 80012e6:	4091      	lsls	r1, r2
 80012e8:	000a      	movs	r2, r1
 80012ea:	43d2      	mvns	r2, r2
 80012ec:	401a      	ands	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2104      	movs	r1, #4
 80012f2:	400b      	ands	r3, r1
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4099      	lsls	r1, r3
 80012f8:	000b      	movs	r3, r1
 80012fa:	431a      	orrs	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b004      	add	sp, #16
 8001306:	bd80      	pop	{r7, pc}

08001308 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	2104      	movs	r1, #4
 800131a:	400a      	ands	r2, r1
 800131c:	2107      	movs	r1, #7
 800131e:	4091      	lsls	r1, r2
 8001320:	000a      	movs	r2, r1
 8001322:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2104      	movs	r1, #4
 8001328:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800132a:	40da      	lsrs	r2, r3
 800132c:	0013      	movs	r3, r2
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}

08001336 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	23c0      	movs	r3, #192	@ 0xc0
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4013      	ands	r3, r2
 8001348:	d101      	bne.n	800134e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800134e:	2300      	movs	r3, #0
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b002      	add	sp, #8
 8001356:	bd80      	pop	{r7, pc}

08001358 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	211f      	movs	r1, #31
 800136c:	400a      	ands	r2, r1
 800136e:	210f      	movs	r1, #15
 8001370:	4091      	lsls	r1, r2
 8001372:	000a      	movs	r2, r1
 8001374:	43d2      	mvns	r2, r2
 8001376:	401a      	ands	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0e9b      	lsrs	r3, r3, #26
 800137c:	210f      	movs	r1, #15
 800137e:	4019      	ands	r1, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	201f      	movs	r0, #31
 8001384:	4003      	ands	r3, r0
 8001386:	4099      	lsls	r1, r3
 8001388:	000b      	movs	r3, r1
 800138a:	431a      	orrs	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b004      	add	sp, #16
 8001396:	bd80      	pop	{r7, pc}

08001398 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	035b      	lsls	r3, r3, #13
 80013aa:	0b5b      	lsrs	r3, r3, #13
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}

080013ba <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	0352      	lsls	r2, r2, #13
 80013cc:	0b52      	lsrs	r2, r2, #13
 80013ce:	43d2      	mvns	r2, r2
 80013d0:	401a      	ands	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	0212      	lsls	r2, r2, #8
 80013f4:	43d2      	mvns	r2, r2
 80013f6:	401a      	ands	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	400b      	ands	r3, r1
 8001400:	4904      	ldr	r1, [pc, #16]	@ (8001414 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001402:	400b      	ands	r3, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b004      	add	sp, #16
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	07ffff00 	.word	0x07ffff00

08001418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a05      	ldr	r2, [pc, #20]	@ (800143c <LL_ADC_EnableInternalRegulator+0x24>)
 8001426:	4013      	ands	r3, r2
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	0552      	lsls	r2, r2, #21
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	6fffffe8 	.word	0x6fffffe8

08001440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	055b      	lsls	r3, r3, #21
 8001450:	401a      	ands	r2, r3
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	055b      	lsls	r3, r3, #21
 8001456:	429a      	cmp	r2, r3
 8001458:	d101      	bne.n	800145e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}

08001468 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <LL_ADC_Enable+0x20>)
 8001476:	4013      	ands	r3, r2
 8001478:	2201      	movs	r2, #1
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001480:	46c0      	nop			@ (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}
 8001488:	7fffffe8 	.word	0x7fffffe8

0800148c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <LL_ADC_Disable+0x20>)
 800149a:	4013      	ands	r3, r2
 800149c:	2202      	movs	r2, #2
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	7fffffe8 	.word	0x7fffffe8

080014b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <LL_ADC_IsEnabled+0x18>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <LL_ADC_IsEnabled+0x1a>
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <LL_ADC_REG_StartConversion+0x20>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	2204      	movs	r2, #4
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014ec:	46c0      	nop			@ (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	7fffffe8 	.word	0x7fffffe8

080014f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2204      	movs	r2, #4
 8001506:	4013      	ands	r3, r2
 8001508:	2b04      	cmp	r3, #4
 800150a:	d101      	bne.n	8001510 <LL_ADC_REG_IsConversionOngoing+0x18>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001510:	2300      	movs	r3, #0
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001524:	231f      	movs	r3, #31
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e17f      	b.n	8001842 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10a      	bne.n	8001560 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fa57 	bl	8000a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2254      	movs	r2, #84	@ 0x54
 800155c:	2100      	movs	r1, #0
 800155e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff ff6b 	bl	8001440 <LL_ADC_IsInternalRegulatorEnabled>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d115      	bne.n	800159a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0018      	movs	r0, r3
 8001574:	f7ff ff50 	bl	8001418 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001578:	4bb4      	ldr	r3, [pc, #720]	@ (800184c <HAL_ADC_Init+0x330>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	49b4      	ldr	r1, [pc, #720]	@ (8001850 <HAL_ADC_Init+0x334>)
 800157e:	0018      	movs	r0, r3
 8001580:	f7fe fdca 	bl	8000118 <__udivsi3>
 8001584:	0003      	movs	r3, r0
 8001586:	3301      	adds	r3, #1
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800158c:	e002      	b.n	8001594 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3b01      	subs	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f9      	bne.n	800158e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff ff4e 	bl	8001440 <LL_ADC_IsInternalRegulatorEnabled>
 80015a4:	1e03      	subs	r3, r0, #0
 80015a6:	d10f      	bne.n	80015c8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	2210      	movs	r2, #16
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b8:	2201      	movs	r2, #1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80015c0:	231f      	movs	r3, #31
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ff93 	bl	80014f8 <LL_ADC_REG_IsConversionOngoing>
 80015d2:	0003      	movs	r3, r0
 80015d4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015da:	2210      	movs	r2, #16
 80015dc:	4013      	ands	r3, r2
 80015de:	d000      	beq.n	80015e2 <HAL_ADC_Init+0xc6>
 80015e0:	e122      	b.n	8001828 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d000      	beq.n	80015ea <HAL_ADC_Init+0xce>
 80015e8:	e11e      	b.n	8001828 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ee:	4a99      	ldr	r2, [pc, #612]	@ (8001854 <HAL_ADC_Init+0x338>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	2202      	movs	r2, #2
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff ff56 	bl	80014b0 <LL_ADC_IsEnabled>
 8001604:	1e03      	subs	r3, r0, #0
 8001606:	d000      	beq.n	800160a <HAL_ADC_Init+0xee>
 8001608:	e0ad      	b.n	8001766 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7e1b      	ldrb	r3, [r3, #24]
 8001612:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001614:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7e5b      	ldrb	r3, [r3, #25]
 800161a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800161c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7e9b      	ldrb	r3, [r3, #26]
 8001622:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001624:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_ADC_Init+0x118>
 800162e:	2380      	movs	r3, #128	@ 0x80
 8001630:	015b      	lsls	r3, r3, #5
 8001632:	e000      	b.n	8001636 <HAL_ADC_Init+0x11a>
 8001634:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001636:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800163c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	da04      	bge.n	8001650 <HAL_ADC_Init+0x134>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	e001      	b.n	8001654 <HAL_ADC_Init+0x138>
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001654:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	212c      	movs	r1, #44	@ 0x2c
 800165a:	5c5b      	ldrb	r3, [r3, r1]
 800165c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800165e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2220      	movs	r2, #32
 800166a:	5c9b      	ldrb	r3, [r3, r2]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d115      	bne.n	800169c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7e9b      	ldrb	r3, [r3, #26]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2280      	movs	r2, #128	@ 0x80
 800167c:	0252      	lsls	r2, r2, #9
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	e00b      	b.n	800169c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001688:	2220      	movs	r2, #32
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001694:	2201      	movs	r2, #1
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00a      	beq.n	80016ba <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016a8:	23e0      	movs	r3, #224	@ 0xe0
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016b2:	4313      	orrs	r3, r2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4a65      	ldr	r2, [pc, #404]	@ (8001858 <HAL_ADC_Init+0x33c>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	0f9b      	lsrs	r3, r3, #30
 80016d6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016dc:	4313      	orrs	r3, r2
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	223c      	movs	r2, #60	@ 0x3c
 80016e8:	5c9b      	ldrb	r3, [r3, r2]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d111      	bne.n	8001712 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0f9b      	lsrs	r3, r3, #30
 80016f4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016fa:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001700:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001706:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	4313      	orrs	r3, r2
 800170c:	2201      	movs	r2, #1
 800170e:	4313      	orrs	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4a50      	ldr	r2, [pc, #320]	@ (800185c <HAL_ADC_Init+0x340>)
 800171a:	4013      	ands	r3, r2
 800171c:	0019      	movs	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	430a      	orrs	r2, r1
 8001726:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	23c0      	movs	r3, #192	@ 0xc0
 800172e:	061b      	lsls	r3, r3, #24
 8001730:	429a      	cmp	r2, r3
 8001732:	d018      	beq.n	8001766 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001738:	2380      	movs	r3, #128	@ 0x80
 800173a:	05db      	lsls	r3, r3, #23
 800173c:	429a      	cmp	r2, r3
 800173e:	d012      	beq.n	8001766 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	061b      	lsls	r3, r3, #24
 8001748:	429a      	cmp	r2, r3
 800174a:	d00c      	beq.n	8001766 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800174c:	4b44      	ldr	r3, [pc, #272]	@ (8001860 <HAL_ADC_Init+0x344>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a44      	ldr	r2, [pc, #272]	@ (8001864 <HAL_ADC_Init+0x348>)
 8001752:	4013      	ands	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	23f0      	movs	r3, #240	@ 0xf0
 800175c:	039b      	lsls	r3, r3, #14
 800175e:	401a      	ands	r2, r3
 8001760:	4b3f      	ldr	r3, [pc, #252]	@ (8001860 <HAL_ADC_Init+0x344>)
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6818      	ldr	r0, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800176e:	001a      	movs	r2, r3
 8001770:	2100      	movs	r1, #0
 8001772:	f7ff fdac 	bl	80012ce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800177e:	493a      	ldr	r1, [pc, #232]	@ (8001868 <HAL_ADC_Init+0x34c>)
 8001780:	001a      	movs	r2, r3
 8001782:	f7ff fda4 	bl	80012ce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2110      	movs	r1, #16
 800179a:	4249      	negs	r1, r1
 800179c:	430a      	orrs	r2, r1
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
 80017a0:	e018      	b.n	80017d4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	2380      	movs	r3, #128	@ 0x80
 80017a8:	039b      	lsls	r3, r3, #14
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d112      	bne.n	80017d4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	221c      	movs	r2, #28
 80017be:	4013      	ands	r3, r2
 80017c0:	2210      	movs	r2, #16
 80017c2:	4252      	negs	r2, r2
 80017c4:	409a      	lsls	r2, r3
 80017c6:	0011      	movs	r1, r2
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2100      	movs	r1, #0
 80017da:	0018      	movs	r0, r3
 80017dc:	f7ff fd94 	bl	8001308 <LL_ADC_GetSamplingTimeCommonChannels>
 80017e0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d10b      	bne.n	8001802 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f4:	2203      	movs	r2, #3
 80017f6:	4393      	bics	r3, r2
 80017f8:	2201      	movs	r2, #1
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001800:	e01c      	b.n	800183c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001806:	2212      	movs	r2, #18
 8001808:	4393      	bics	r3, r2
 800180a:	2210      	movs	r2, #16
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001816:	2201      	movs	r2, #1
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800181e:	231f      	movs	r3, #31
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001826:	e009      	b.n	800183c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	2210      	movs	r2, #16
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001834:	231f      	movs	r3, #31
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800183c:	231f      	movs	r3, #31
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	781b      	ldrb	r3, [r3, #0]
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b008      	add	sp, #32
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	20000004 	.word	0x20000004
 8001850:	00030d40 	.word	0x00030d40
 8001854:	fffffefd 	.word	0xfffffefd
 8001858:	ffde0201 	.word	0xffde0201
 800185c:	1ffffc02 	.word	0x1ffffc02
 8001860:	40012708 	.word	0x40012708
 8001864:	ffc3ffff 	.word	0xffc3ffff
 8001868:	07ffff04 	.word	0x07ffff04

0800186c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800186c:	b5b0      	push	{r4, r5, r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff fe3b 	bl	80014f8 <LL_ADC_REG_IsConversionOngoing>
 8001882:	1e03      	subs	r3, r0, #0
 8001884:	d16c      	bne.n	8001960 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2254      	movs	r2, #84	@ 0x54
 800188a:	5c9b      	ldrb	r3, [r3, r2]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_Start_DMA+0x28>
 8001890:	2302      	movs	r3, #2
 8001892:	e06c      	b.n	800196e <HAL_ADC_Start_DMA+0x102>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2254      	movs	r2, #84	@ 0x54
 8001898:	2101      	movs	r1, #1
 800189a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2201      	movs	r2, #1
 80018a4:	4013      	ands	r3, r2
 80018a6:	d113      	bne.n	80018d0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff fdff 	bl	80014b0 <LL_ADC_IsEnabled>
 80018b2:	1e03      	subs	r3, r0, #0
 80018b4:	d004      	beq.n	80018c0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff fde6 	bl	800148c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2101      	movs	r1, #1
 80018cc:	430a      	orrs	r2, r1
 80018ce:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018d0:	2517      	movs	r5, #23
 80018d2:	197c      	adds	r4, r7, r5
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 fa46 	bl	8001d68 <ADC_Enable>
 80018dc:	0003      	movs	r3, r0
 80018de:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018e0:	002c      	movs	r4, r5
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d13e      	bne.n	8001968 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ee:	4a22      	ldr	r2, [pc, #136]	@ (8001978 <HAL_ADC_Start_DMA+0x10c>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	2280      	movs	r2, #128	@ 0x80
 80018f4:	0052      	lsls	r2, r2, #1
 80018f6:	431a      	orrs	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001906:	4a1d      	ldr	r2, [pc, #116]	@ (800197c <HAL_ADC_Start_DMA+0x110>)
 8001908:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190e:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <HAL_ADC_Start_DMA+0x114>)
 8001910:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001916:	4a1b      	ldr	r2, [pc, #108]	@ (8001984 <HAL_ADC_Start_DMA+0x118>)
 8001918:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	221c      	movs	r2, #28
 8001920:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2254      	movs	r2, #84	@ 0x54
 8001926:	2100      	movs	r1, #0
 8001928:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2110      	movs	r1, #16
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3340      	adds	r3, #64	@ 0x40
 8001944:	0019      	movs	r1, r3
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	193c      	adds	r4, r7, r4
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f000 fbfe 	bl	800214c <HAL_DMA_Start_IT>
 8001950:	0003      	movs	r3, r0
 8001952:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0018      	movs	r0, r3
 800195a:	f7ff fdbb 	bl	80014d4 <LL_ADC_REG_StartConversion>
 800195e:	e003      	b.n	8001968 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001960:	2317      	movs	r3, #23
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2202      	movs	r2, #2
 8001966:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001968:	2317      	movs	r3, #23
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	781b      	ldrb	r3, [r3, #0]
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b006      	add	sp, #24
 8001974:	bdb0      	pop	{r4, r5, r7, pc}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	fffff0fe 	.word	0xfffff0fe
 800197c:	08001e75 	.word	0x08001e75
 8001980:	08001f3d 	.word	0x08001f3d
 8001984:	08001f5b 	.word	0x08001f5b

08001988 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001990:	46c0      	nop			@ (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019a0:	46c0      	nop			@ (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019b0:	46c0      	nop			@ (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c2:	2317      	movs	r3, #23
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2254      	movs	r2, #84	@ 0x54
 80019d2:	5c9b      	ldrb	r3, [r3, r2]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x24>
 80019d8:	2302      	movs	r3, #2
 80019da:	e1c0      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x3a6>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2254      	movs	r2, #84	@ 0x54
 80019e0:	2101      	movs	r1, #1
 80019e2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff fd85 	bl	80014f8 <LL_ADC_REG_IsConversionOngoing>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d000      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x3c>
 80019f2:	e1a3      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d100      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x46>
 80019fc:	e143      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d004      	beq.n	8001a14 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a0e:	4ac1      	ldr	r2, [pc, #772]	@ (8001d14 <HAL_ADC_ConfigChannel+0x35c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d108      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	0010      	movs	r0, r2
 8001a20:	f7ff fcba 	bl	8001398 <LL_ADC_REG_SetSequencerChAdd>
 8001a24:	e0c9      	b.n	8001bba <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	211f      	movs	r1, #31
 8001a30:	400b      	ands	r3, r1
 8001a32:	210f      	movs	r1, #15
 8001a34:	4099      	lsls	r1, r3
 8001a36:	000b      	movs	r3, r1
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	035b      	lsls	r3, r3, #13
 8001a44:	0b5b      	lsrs	r3, r3, #13
 8001a46:	d105      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x9c>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0e9b      	lsrs	r3, r3, #26
 8001a4e:	221f      	movs	r2, #31
 8001a50:	4013      	ands	r3, r2
 8001a52:	e098      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d000      	beq.n	8001a60 <HAL_ADC_ConfigChannel+0xa8>
 8001a5e:	e091      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x1cc>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2202      	movs	r2, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d000      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0xb4>
 8001a6a:	e089      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x1c8>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2204      	movs	r2, #4
 8001a72:	4013      	ands	r3, r2
 8001a74:	d000      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0xc0>
 8001a76:	e081      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x1c4>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d000      	beq.n	8001a84 <HAL_ADC_ConfigChannel+0xcc>
 8001a82:	e079      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x1c0>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2210      	movs	r2, #16
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d000      	beq.n	8001a90 <HAL_ADC_ConfigChannel+0xd8>
 8001a8e:	e071      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x1bc>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2220      	movs	r2, #32
 8001a96:	4013      	ands	r3, r2
 8001a98:	d000      	beq.n	8001a9c <HAL_ADC_ConfigChannel+0xe4>
 8001a9a:	e069      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x1b8>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2240      	movs	r2, #64	@ 0x40
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d000      	beq.n	8001aa8 <HAL_ADC_ConfigChannel+0xf0>
 8001aa6:	e061      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x1b4>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2280      	movs	r2, #128	@ 0x80
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d000      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0xfc>
 8001ab2:	e059      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x1b0>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4013      	ands	r3, r2
 8001abe:	d151      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1ac>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d149      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x1a8>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d141      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1a4>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d139      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1a0>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	015b      	lsls	r3, r3, #5
 8001aec:	4013      	ands	r3, r2
 8001aee:	d131      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x19c>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	019b      	lsls	r3, r3, #6
 8001af8:	4013      	ands	r3, r2
 8001afa:	d129      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x198>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	01db      	lsls	r3, r3, #7
 8001b04:	4013      	ands	r3, r2
 8001b06:	d121      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x194>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	4013      	ands	r3, r2
 8001b12:	d119      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x190>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	025b      	lsls	r3, r3, #9
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d111      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x18c>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	@ 0x80
 8001b26:	029b      	lsls	r3, r3, #10
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d109      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x188>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	4013      	ands	r3, r2
 8001b36:	d001      	beq.n	8001b3c <HAL_ADC_ConfigChannel+0x184>
 8001b38:	2312      	movs	r3, #18
 8001b3a:	e024      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e022      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b40:	2311      	movs	r3, #17
 8001b42:	e020      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b44:	2310      	movs	r3, #16
 8001b46:	e01e      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b48:	230f      	movs	r3, #15
 8001b4a:	e01c      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b4c:	230e      	movs	r3, #14
 8001b4e:	e01a      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b50:	230d      	movs	r3, #13
 8001b52:	e018      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b54:	230c      	movs	r3, #12
 8001b56:	e016      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b58:	230b      	movs	r3, #11
 8001b5a:	e014      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	e012      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b60:	2309      	movs	r3, #9
 8001b62:	e010      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b64:	2308      	movs	r3, #8
 8001b66:	e00e      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b68:	2307      	movs	r3, #7
 8001b6a:	e00c      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b6c:	2306      	movs	r3, #6
 8001b6e:	e00a      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b70:	2305      	movs	r3, #5
 8001b72:	e008      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b74:	2304      	movs	r3, #4
 8001b76:	e006      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e004      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e002      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ce>
 8001b84:	2300      	movs	r3, #0
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	6852      	ldr	r2, [r2, #4]
 8001b8a:	201f      	movs	r0, #31
 8001b8c:	4002      	ands	r2, r0
 8001b8e:	4093      	lsls	r3, r2
 8001b90:	000a      	movs	r2, r1
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d808      	bhi.n	8001bba <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	f7ff fbcf 	bl	8001358 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	f7ff fc0a 	bl	80013e0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db00      	blt.n	8001bd6 <HAL_ADC_ConfigChannel+0x21e>
 8001bd4:	e0bc      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bd6:	4b50      	ldr	r3, [pc, #320]	@ (8001d18 <HAL_ADC_ConfigChannel+0x360>)
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fb6b 	bl	80012b4 <LL_ADC_GetCommonPathInternalCh>
 8001bde:	0003      	movs	r3, r0
 8001be0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a4d      	ldr	r2, [pc, #308]	@ (8001d1c <HAL_ADC_ConfigChannel+0x364>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d122      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bf4:	d11d      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2280      	movs	r2, #128	@ 0x80
 8001bfa:	0412      	lsls	r2, r2, #16
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	4a46      	ldr	r2, [pc, #280]	@ (8001d18 <HAL_ADC_ConfigChannel+0x360>)
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	f7ff fb42 	bl	800128c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c08:	4b45      	ldr	r3, [pc, #276]	@ (8001d20 <HAL_ADC_ConfigChannel+0x368>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4945      	ldr	r1, [pc, #276]	@ (8001d24 <HAL_ADC_ConfigChannel+0x36c>)
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f7fe fa82 	bl	8000118 <__udivsi3>
 8001c14:	0003      	movs	r3, r0
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	0013      	movs	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	189b      	adds	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c22:	e002      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f9      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c30:	e08e      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a3c      	ldr	r2, [pc, #240]	@ (8001d28 <HAL_ADC_ConfigChannel+0x370>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d10e      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	045b      	lsls	r3, r3, #17
 8001c42:	4013      	ands	r3, r2
 8001c44:	d109      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2280      	movs	r2, #128	@ 0x80
 8001c4a:	0452      	lsls	r2, r2, #17
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	4a32      	ldr	r2, [pc, #200]	@ (8001d18 <HAL_ADC_ConfigChannel+0x360>)
 8001c50:	0019      	movs	r1, r3
 8001c52:	0010      	movs	r0, r2
 8001c54:	f7ff fb1a 	bl	800128c <LL_ADC_SetCommonPathInternalCh>
 8001c58:	e07a      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a33      	ldr	r2, [pc, #204]	@ (8001d2c <HAL_ADC_ConfigChannel+0x374>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d000      	beq.n	8001c66 <HAL_ADC_ConfigChannel+0x2ae>
 8001c64:	e074      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	03db      	lsls	r3, r3, #15
 8001c6c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c6e:	d000      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x2ba>
 8001c70:	e06e      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2280      	movs	r2, #128	@ 0x80
 8001c76:	03d2      	lsls	r2, r2, #15
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	4a27      	ldr	r2, [pc, #156]	@ (8001d18 <HAL_ADC_ConfigChannel+0x360>)
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	0010      	movs	r0, r2
 8001c80:	f7ff fb04 	bl	800128c <LL_ADC_SetCommonPathInternalCh>
 8001c84:	e064      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	2380      	movs	r3, #128	@ 0x80
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d004      	beq.n	8001c9c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c96:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <HAL_ADC_ConfigChannel+0x35c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d107      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	0010      	movs	r0, r2
 8001ca8:	f7ff fb87 	bl	80013ba <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da4d      	bge.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb4:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_ADC_ConfigChannel+0x360>)
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7ff fafc 	bl	80012b4 <LL_ADC_GetCommonPathInternalCh>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a15      	ldr	r2, [pc, #84]	@ (8001d1c <HAL_ADC_ConfigChannel+0x364>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d108      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4a18      	ldr	r2, [pc, #96]	@ (8001d30 <HAL_ADC_ConfigChannel+0x378>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	4a11      	ldr	r2, [pc, #68]	@ (8001d18 <HAL_ADC_ConfigChannel+0x360>)
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	0010      	movs	r0, r2
 8001cd6:	f7ff fad9 	bl	800128c <LL_ADC_SetCommonPathInternalCh>
 8001cda:	e039      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <HAL_ADC_ConfigChannel+0x370>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d108      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <HAL_ADC_ConfigChannel+0x37c>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <HAL_ADC_ConfigChannel+0x360>)
 8001cee:	0019      	movs	r1, r3
 8001cf0:	0010      	movs	r0, r2
 8001cf2:	f7ff facb 	bl	800128c <LL_ADC_SetCommonPathInternalCh>
 8001cf6:	e02b      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <HAL_ADC_ConfigChannel+0x374>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d126      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4a0c      	ldr	r2, [pc, #48]	@ (8001d38 <HAL_ADC_ConfigChannel+0x380>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	4a03      	ldr	r2, [pc, #12]	@ (8001d18 <HAL_ADC_ConfigChannel+0x360>)
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	0010      	movs	r0, r2
 8001d0e:	f7ff fabd 	bl	800128c <LL_ADC_SetCommonPathInternalCh>
 8001d12:	e01d      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x398>
 8001d14:	80000004 	.word	0x80000004
 8001d18:	40012708 	.word	0x40012708
 8001d1c:	b0001000 	.word	0xb0001000
 8001d20:	20000004 	.word	0x20000004
 8001d24:	00030d40 	.word	0x00030d40
 8001d28:	b8004000 	.word	0xb8004000
 8001d2c:	b4002000 	.word	0xb4002000
 8001d30:	ff7fffff 	.word	0xff7fffff
 8001d34:	feffffff 	.word	0xfeffffff
 8001d38:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d40:	2220      	movs	r2, #32
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d48:	2317      	movs	r3, #23
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2254      	movs	r2, #84	@ 0x54
 8001d54:	2100      	movs	r1, #0
 8001d56:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d58:	2317      	movs	r3, #23
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b006      	add	sp, #24
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			@ (mov r8, r8)

08001d68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff fb99 	bl	80014b0 <LL_ADC_IsEnabled>
 8001d7e:	1e03      	subs	r3, r0, #0
 8001d80:	d000      	beq.n	8001d84 <ADC_Enable+0x1c>
 8001d82:	e069      	b.n	8001e58 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	4a36      	ldr	r2, [pc, #216]	@ (8001e64 <ADC_Enable+0xfc>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d00d      	beq.n	8001dac <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	2210      	movs	r2, #16
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da0:	2201      	movs	r2, #1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e056      	b.n	8001e5a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff fb59 	bl	8001468 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001db6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <ADC_Enable+0x100>)
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff fa7b 	bl	80012b4 <LL_ADC_GetCommonPathInternalCh>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	041b      	lsls	r3, r3, #16
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d00f      	beq.n	8001de8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc8:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <ADC_Enable+0x104>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4928      	ldr	r1, [pc, #160]	@ (8001e70 <ADC_Enable+0x108>)
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7fe f9a2 	bl	8000118 <__udivsi3>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001dd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dda:	e002      	b.n	8001de2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f9      	bne.n	8001ddc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7e5b      	ldrb	r3, [r3, #25]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d033      	beq.n	8001e58 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001df0:	f7ff fa1e 	bl	8001230 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001df8:	e027      	b.n	8001e4a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7ff fb56 	bl	80014b0 <LL_ADC_IsEnabled>
 8001e04:	1e03      	subs	r3, r0, #0
 8001e06:	d104      	bne.n	8001e12 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7ff fb2b 	bl	8001468 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e12:	f7ff fa0d 	bl	8001230 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d914      	bls.n	8001e4a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d00d      	beq.n	8001e4a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	2210      	movs	r2, #16
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3e:	2201      	movs	r2, #1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e007      	b.n	8001e5a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2201      	movs	r2, #1
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d1d0      	bne.n	8001dfa <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b004      	add	sp, #16
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	80000017 	.word	0x80000017
 8001e68:	40012708 	.word	0x40012708
 8001e6c:	20000004 	.word	0x20000004
 8001e70:	00030d40 	.word	0x00030d40

08001e74 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	2250      	movs	r2, #80	@ 0x50
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d141      	bne.n	8001f10 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e90:	2280      	movs	r2, #128	@ 0x80
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7ff fa49 	bl	8001336 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ea4:	1e03      	subs	r3, r0, #0
 8001ea6:	d02e      	beq.n	8001f06 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	7e9b      	ldrb	r3, [r3, #26]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d12a      	bne.n	8001f06 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d123      	bne.n	8001f06 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff fb18 	bl	80014f8 <LL_ADC_REG_IsConversionOngoing>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d110      	bne.n	8001eee <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	210c      	movs	r1, #12
 8001ed8:	438a      	bics	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee0:	4a15      	ldr	r2, [pc, #84]	@ (8001f38 <ADC_DMAConvCplt+0xc4>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	659a      	str	r2, [r3, #88]	@ 0x58
 8001eec:	e00b      	b.n	8001f06 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efe:	2201      	movs	r2, #1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff fd3d 	bl	8001988 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f0e:	e00f      	b.n	8001f30 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f14:	2210      	movs	r2, #16
 8001f16:	4013      	ands	r3, r2
 8001f18:	d004      	beq.n	8001f24 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff fd43 	bl	80019a8 <HAL_ADC_ErrorCallback>
}
 8001f22:	e005      	b.n	8001f30 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	0010      	movs	r0, r2
 8001f2e:	4798      	blx	r3
}
 8001f30:	46c0      	nop			@ (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b004      	add	sp, #16
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	fffffefe 	.word	0xfffffefe

08001f3c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff fd23 	bl	8001998 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	2240      	movs	r2, #64	@ 0x40
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	2204      	movs	r2, #4
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7ff fd10 	bl	80019a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f88:	46c0      	nop			@ (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	0002      	movs	r2, r0
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fa2:	d809      	bhi.n	8001fb8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa4:	1dfb      	adds	r3, r7, #7
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	001a      	movs	r2, r3
 8001faa:	231f      	movs	r3, #31
 8001fac:	401a      	ands	r2, r3
 8001fae:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <__NVIC_EnableIRQ+0x30>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4091      	lsls	r1, r2
 8001fb4:	000a      	movs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001fb8:	46c0      	nop			@ (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	0002      	movs	r2, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fd8:	d828      	bhi.n	800202c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fda:	4a2f      	ldr	r2, [pc, #188]	@ (8002098 <__NVIC_SetPriority+0xd4>)
 8001fdc:	1dfb      	adds	r3, r7, #7
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b25b      	sxtb	r3, r3
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	33c0      	adds	r3, #192	@ 0xc0
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	589b      	ldr	r3, [r3, r2]
 8001fea:	1dfa      	adds	r2, r7, #7
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	0011      	movs	r1, r2
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	00d2      	lsls	r2, r2, #3
 8001ff6:	21ff      	movs	r1, #255	@ 0xff
 8001ff8:	4091      	lsls	r1, r2
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	43d2      	mvns	r2, r2
 8001ffe:	401a      	ands	r2, r3
 8002000:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	22ff      	movs	r2, #255	@ 0xff
 8002008:	401a      	ands	r2, r3
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	0018      	movs	r0, r3
 8002010:	2303      	movs	r3, #3
 8002012:	4003      	ands	r3, r0
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002018:	481f      	ldr	r0, [pc, #124]	@ (8002098 <__NVIC_SetPriority+0xd4>)
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b25b      	sxtb	r3, r3
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	430a      	orrs	r2, r1
 8002024:	33c0      	adds	r3, #192	@ 0xc0
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800202a:	e031      	b.n	8002090 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800202c:	4a1b      	ldr	r2, [pc, #108]	@ (800209c <__NVIC_SetPriority+0xd8>)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	0019      	movs	r1, r3
 8002034:	230f      	movs	r3, #15
 8002036:	400b      	ands	r3, r1
 8002038:	3b08      	subs	r3, #8
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3306      	adds	r3, #6
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	18d3      	adds	r3, r2, r3
 8002042:	3304      	adds	r3, #4
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	1dfa      	adds	r2, r7, #7
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	0011      	movs	r1, r2
 800204c:	2203      	movs	r2, #3
 800204e:	400a      	ands	r2, r1
 8002050:	00d2      	lsls	r2, r2, #3
 8002052:	21ff      	movs	r1, #255	@ 0xff
 8002054:	4091      	lsls	r1, r2
 8002056:	000a      	movs	r2, r1
 8002058:	43d2      	mvns	r2, r2
 800205a:	401a      	ands	r2, r3
 800205c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	019b      	lsls	r3, r3, #6
 8002062:	22ff      	movs	r2, #255	@ 0xff
 8002064:	401a      	ands	r2, r3
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	0018      	movs	r0, r3
 800206c:	2303      	movs	r3, #3
 800206e:	4003      	ands	r3, r0
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002074:	4809      	ldr	r0, [pc, #36]	@ (800209c <__NVIC_SetPriority+0xd8>)
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	001c      	movs	r4, r3
 800207c:	230f      	movs	r3, #15
 800207e:	4023      	ands	r3, r4
 8002080:	3b08      	subs	r3, #8
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	430a      	orrs	r2, r1
 8002086:	3306      	adds	r3, #6
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	18c3      	adds	r3, r0, r3
 800208c:	3304      	adds	r3, #4
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	46c0      	nop			@ (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b003      	add	sp, #12
 8002096:	bd90      	pop	{r4, r7, pc}
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1e5a      	subs	r2, r3, #1
 80020ac:	2380      	movs	r3, #128	@ 0x80
 80020ae:	045b      	lsls	r3, r3, #17
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d301      	bcc.n	80020b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b4:	2301      	movs	r3, #1
 80020b6:	e010      	b.n	80020da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b8:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <SysTick_Config+0x44>)
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	3a01      	subs	r2, #1
 80020be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c0:	2301      	movs	r3, #1
 80020c2:	425b      	negs	r3, r3
 80020c4:	2103      	movs	r1, #3
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff ff7c 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <SysTick_Config+0x44>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d2:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <SysTick_Config+0x44>)
 80020d4:	2207      	movs	r2, #7
 80020d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d8:	2300      	movs	r3, #0
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b002      	add	sp, #8
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	e000e010 	.word	0xe000e010

080020e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	210f      	movs	r1, #15
 80020f4:	187b      	adds	r3, r7, r1
 80020f6:	1c02      	adds	r2, r0, #0
 80020f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b25b      	sxtb	r3, r3
 8002102:	0011      	movs	r1, r2
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff ff5d 	bl	8001fc4 <__NVIC_SetPriority>
}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b004      	add	sp, #16
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	0002      	movs	r2, r0
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b25b      	sxtb	r3, r3
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff ff33 	bl	8001f90 <__NVIC_EnableIRQ>
}
 800212a:	46c0      	nop			@ (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b002      	add	sp, #8
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f7ff ffaf 	bl	80020a0 <SysTick_Config>
 8002142:	0003      	movs	r3, r0
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2317      	movs	r3, #23
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2224      	movs	r2, #36	@ 0x24
 8002166:	5c9b      	ldrb	r3, [r3, r2]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_DMA_Start_IT+0x24>
 800216c:	2302      	movs	r3, #2
 800216e:	e06f      	b.n	8002250 <HAL_DMA_Start_IT+0x104>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2224      	movs	r2, #36	@ 0x24
 8002174:	2101      	movs	r1, #1
 8002176:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2225      	movs	r2, #37	@ 0x25
 800217c:	5c9b      	ldrb	r3, [r3, r2]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d157      	bne.n	8002234 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2225      	movs	r2, #37	@ 0x25
 8002188:	2102      	movs	r1, #2
 800218a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	438a      	bics	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f855 	bl	8002258 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	210e      	movs	r1, #14
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e00f      	b.n	80021e8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2104      	movs	r1, #4
 80021d4:	438a      	bics	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	210a      	movs	r1, #10
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	@ 0x80
 80021f0:	025b      	lsls	r3, r3, #9
 80021f2:	4013      	ands	r3, r2
 80021f4:	d008      	beq.n	8002208 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002200:	2180      	movs	r1, #128	@ 0x80
 8002202:	0049      	lsls	r1, r1, #1
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221a:	2180      	movs	r1, #128	@ 0x80
 800221c:	0049      	lsls	r1, r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e00a      	b.n	800224a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2280      	movs	r2, #128	@ 0x80
 8002238:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2224      	movs	r2, #36	@ 0x24
 800223e:	2100      	movs	r1, #0
 8002240:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002242:	2317      	movs	r3, #23
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800224a:	2317      	movs	r3, #23
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	781b      	ldrb	r3, [r3, #0]
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b006      	add	sp, #24
 8002256:	bd80      	pop	{r7, pc}

08002258 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800226e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002274:	2b00      	cmp	r3, #0
 8002276:	d004      	beq.n	8002282 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002280:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <DMA_SetConfig+0x7c>)
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	221c      	movs	r2, #28
 800228c:	4013      	ands	r3, r2
 800228e:	2201      	movs	r2, #1
 8002290:	409a      	lsls	r2, r3
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <DMA_SetConfig+0x7c>)
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	d108      	bne.n	80022ba <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022b8:	e007      	b.n	80022ca <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	60da      	str	r2, [r3, #12]
}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b004      	add	sp, #16
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	40020000 	.word	0x40020000

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e6:	e147      	b.n	8002578 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4091      	lsls	r1, r2
 80022f2:	000a      	movs	r2, r1
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d100      	bne.n	8002300 <HAL_GPIO_Init+0x28>
 80022fe:	e138      	b.n	8002572 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2203      	movs	r2, #3
 8002306:	4013      	ands	r3, r2
 8002308:	2b01      	cmp	r3, #1
 800230a:	d005      	beq.n	8002318 <HAL_GPIO_Init+0x40>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2203      	movs	r2, #3
 8002312:	4013      	ands	r3, r2
 8002314:	2b02      	cmp	r3, #2
 8002316:	d130      	bne.n	800237a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	409a      	lsls	r2, r3
 8002326:	0013      	movs	r3, r2
 8002328:	43da      	mvns	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	409a      	lsls	r2, r3
 800233a:	0013      	movs	r3, r2
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800234e:	2201      	movs	r2, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
 8002354:	0013      	movs	r3, r2
 8002356:	43da      	mvns	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	2201      	movs	r2, #1
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2203      	movs	r2, #3
 8002380:	4013      	ands	r3, r2
 8002382:	2b03      	cmp	r3, #3
 8002384:	d017      	beq.n	80023b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	409a      	lsls	r2, r3
 8002394:	0013      	movs	r3, r2
 8002396:	43da      	mvns	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2203      	movs	r2, #3
 80023bc:	4013      	ands	r3, r2
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d123      	bne.n	800240a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	08da      	lsrs	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3208      	adds	r2, #8
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	58d3      	ldr	r3, [r2, r3]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2207      	movs	r2, #7
 80023d4:	4013      	ands	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	43da      	mvns	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2107      	movs	r1, #7
 80023ee:	400b      	ands	r3, r1
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	0092      	lsls	r2, r2, #2
 8002406:	6939      	ldr	r1, [r7, #16]
 8002408:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	409a      	lsls	r2, r3
 8002418:	0013      	movs	r3, r2
 800241a:	43da      	mvns	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2203      	movs	r2, #3
 8002428:	401a      	ands	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	23c0      	movs	r3, #192	@ 0xc0
 8002444:	029b      	lsls	r3, r3, #10
 8002446:	4013      	ands	r3, r2
 8002448:	d100      	bne.n	800244c <HAL_GPIO_Init+0x174>
 800244a:	e092      	b.n	8002572 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800244c:	4a50      	ldr	r2, [pc, #320]	@ (8002590 <HAL_GPIO_Init+0x2b8>)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3318      	adds	r3, #24
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	589b      	ldr	r3, [r3, r2]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2203      	movs	r2, #3
 800245e:	4013      	ands	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	220f      	movs	r2, #15
 8002464:	409a      	lsls	r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	43da      	mvns	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	23a0      	movs	r3, #160	@ 0xa0
 8002474:	05db      	lsls	r3, r3, #23
 8002476:	429a      	cmp	r2, r3
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x1ca>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a45      	ldr	r2, [pc, #276]	@ (8002594 <HAL_GPIO_Init+0x2bc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00d      	beq.n	800249e <HAL_GPIO_Init+0x1c6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a44      	ldr	r2, [pc, #272]	@ (8002598 <HAL_GPIO_Init+0x2c0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <HAL_GPIO_Init+0x1c2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a43      	ldr	r2, [pc, #268]	@ (800259c <HAL_GPIO_Init+0x2c4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_GPIO_Init+0x1be>
 8002492:	2303      	movs	r3, #3
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x1cc>
 8002496:	2305      	movs	r3, #5
 8002498:	e004      	b.n	80024a4 <HAL_GPIO_Init+0x1cc>
 800249a:	2302      	movs	r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x1cc>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x1cc>
 80024a2:	2300      	movs	r3, #0
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	2103      	movs	r1, #3
 80024a8:	400a      	ands	r2, r1
 80024aa:	00d2      	lsls	r2, r2, #3
 80024ac:	4093      	lsls	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80024b4:	4936      	ldr	r1, [pc, #216]	@ (8002590 <HAL_GPIO_Init+0x2b8>)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3318      	adds	r3, #24
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024c2:	4b33      	ldr	r3, [pc, #204]	@ (8002590 <HAL_GPIO_Init+0x2b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	035b      	lsls	r3, r3, #13
 80024da:	4013      	ands	r3, r2
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002590 <HAL_GPIO_Init+0x2b8>)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80024ec:	4b28      	ldr	r3, [pc, #160]	@ (8002590 <HAL_GPIO_Init+0x2b8>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43da      	mvns	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	039b      	lsls	r3, r3, #14
 8002504:	4013      	ands	r3, r2
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002510:	4b1f      	ldr	r3, [pc, #124]	@ (8002590 <HAL_GPIO_Init+0x2b8>)
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002516:	4a1e      	ldr	r2, [pc, #120]	@ (8002590 <HAL_GPIO_Init+0x2b8>)
 8002518:	2384      	movs	r3, #132	@ 0x84
 800251a:	58d3      	ldr	r3, [r2, r3]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	43da      	mvns	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	029b      	lsls	r3, r3, #10
 8002530:	4013      	ands	r3, r2
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800253c:	4914      	ldr	r1, [pc, #80]	@ (8002590 <HAL_GPIO_Init+0x2b8>)
 800253e:	2284      	movs	r2, #132	@ 0x84
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002544:	4a12      	ldr	r2, [pc, #72]	@ (8002590 <HAL_GPIO_Init+0x2b8>)
 8002546:	2380      	movs	r3, #128	@ 0x80
 8002548:	58d3      	ldr	r3, [r2, r3]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43da      	mvns	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	025b      	lsls	r3, r3, #9
 800255e:	4013      	ands	r3, r2
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800256a:	4909      	ldr	r1, [pc, #36]	@ (8002590 <HAL_GPIO_Init+0x2b8>)
 800256c:	2280      	movs	r2, #128	@ 0x80
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	40da      	lsrs	r2, r3
 8002580:	1e13      	subs	r3, r2, #0
 8002582:	d000      	beq.n	8002586 <HAL_GPIO_Init+0x2ae>
 8002584:	e6b0      	b.n	80022e8 <HAL_GPIO_Init+0x10>
  }
}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	46c0      	nop			@ (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b006      	add	sp, #24
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021800 	.word	0x40021800
 8002594:	50000400 	.word	0x50000400
 8002598:	50000800 	.word	0x50000800
 800259c:	50000c00 	.word	0x50000c00

080025a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	0008      	movs	r0, r1
 80025aa:	0011      	movs	r1, r2
 80025ac:	1cbb      	adds	r3, r7, #2
 80025ae:	1c02      	adds	r2, r0, #0
 80025b0:	801a      	strh	r2, [r3, #0]
 80025b2:	1c7b      	adds	r3, r7, #1
 80025b4:	1c0a      	adds	r2, r1, #0
 80025b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b8:	1c7b      	adds	r3, r7, #1
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c0:	1cbb      	adds	r3, r7, #2
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c8:	e003      	b.n	80025d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ca:	1cbb      	adds	r3, r7, #2
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b002      	add	sp, #8
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	0002      	movs	r2, r0
 80025e4:	1dbb      	adds	r3, r7, #6
 80025e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80025e8:	4b10      	ldr	r3, [pc, #64]	@ (800262c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	1dba      	adds	r2, r7, #6
 80025ee:	8812      	ldrh	r2, [r2, #0]
 80025f0:	4013      	ands	r3, r2
 80025f2:	d008      	beq.n	8002606 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80025f4:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025f6:	1dba      	adds	r2, r7, #6
 80025f8:	8812      	ldrh	r2, [r2, #0]
 80025fa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80025fc:	1dbb      	adds	r3, r7, #6
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	0018      	movs	r0, r3
 8002602:	f7fe f8c9 	bl	8000798 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	1dba      	adds	r2, r7, #6
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	4013      	ands	r3, r2
 8002610:	d008      	beq.n	8002624 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002614:	1dba      	adds	r2, r7, #6
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800261a:	1dbb      	adds	r3, r7, #6
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	0018      	movs	r0, r3
 8002620:	f7fe f928 	bl	8000874 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002624:	46c0      	nop			@ (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021800 	.word	0x40021800

08002630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002638:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a19      	ldr	r2, [pc, #100]	@ (80026a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800263e:	4013      	ands	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	429a      	cmp	r2, r3
 8002652:	d11f      	bne.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002654:	4b14      	ldr	r3, [pc, #80]	@ (80026a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	0013      	movs	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	189b      	adds	r3, r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4912      	ldr	r1, [pc, #72]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002662:	0018      	movs	r0, r3
 8002664:	f7fd fd58 	bl	8000118 <__udivsi3>
 8002668:	0003      	movs	r3, r0
 800266a:	3301      	adds	r3, #1
 800266c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800266e:	e008      	b.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3b01      	subs	r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	e001      	b.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e009      	b.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002682:	4b07      	ldr	r3, [pc, #28]	@ (80026a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	401a      	ands	r2, r3
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	429a      	cmp	r2, r3
 8002692:	d0ed      	beq.n	8002670 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	40007000 	.word	0x40007000
 80026a4:	fffff9ff 	.word	0xfffff9ff
 80026a8:	20000004 	.word	0x20000004
 80026ac:	000f4240 	.word	0x000f4240

080026b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026b4:	4b03      	ldr	r3, [pc, #12]	@ (80026c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	23e0      	movs	r3, #224	@ 0xe0
 80026ba:	01db      	lsls	r3, r3, #7
 80026bc:	4013      	ands	r3, r2
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e2fe      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d100      	bne.n	80026e6 <HAL_RCC_OscConfig+0x1e>
 80026e4:	e07c      	b.n	80027e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e6:	4bc3      	ldr	r3, [pc, #780]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2238      	movs	r2, #56	@ 0x38
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f0:	4bc0      	ldr	r3, [pc, #768]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2203      	movs	r2, #3
 80026f6:	4013      	ands	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_OscConfig+0x3e>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d002      	beq.n	800270c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d10b      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4bb9      	ldr	r3, [pc, #740]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	029b      	lsls	r3, r3, #10
 8002714:	4013      	ands	r3, r2
 8002716:	d062      	beq.n	80027de <HAL_RCC_OscConfig+0x116>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d15e      	bne.n	80027de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e2d9      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	025b      	lsls	r3, r3, #9
 800272c:	429a      	cmp	r2, r3
 800272e:	d107      	bne.n	8002740 <HAL_RCC_OscConfig+0x78>
 8002730:	4bb0      	ldr	r3, [pc, #704]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4baf      	ldr	r3, [pc, #700]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002736:	2180      	movs	r1, #128	@ 0x80
 8002738:	0249      	lsls	r1, r1, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e020      	b.n	8002782 <HAL_RCC_OscConfig+0xba>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	23a0      	movs	r3, #160	@ 0xa0
 8002746:	02db      	lsls	r3, r3, #11
 8002748:	429a      	cmp	r2, r3
 800274a:	d10e      	bne.n	800276a <HAL_RCC_OscConfig+0xa2>
 800274c:	4ba9      	ldr	r3, [pc, #676]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4ba8      	ldr	r3, [pc, #672]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002752:	2180      	movs	r1, #128	@ 0x80
 8002754:	02c9      	lsls	r1, r1, #11
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	4ba6      	ldr	r3, [pc, #664]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4ba5      	ldr	r3, [pc, #660]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002760:	2180      	movs	r1, #128	@ 0x80
 8002762:	0249      	lsls	r1, r1, #9
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e00b      	b.n	8002782 <HAL_RCC_OscConfig+0xba>
 800276a:	4ba2      	ldr	r3, [pc, #648]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4ba1      	ldr	r3, [pc, #644]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002770:	49a1      	ldr	r1, [pc, #644]	@ (80029f8 <HAL_RCC_OscConfig+0x330>)
 8002772:	400a      	ands	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	4b9f      	ldr	r3, [pc, #636]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b9e      	ldr	r3, [pc, #632]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800277c:	499f      	ldr	r1, [pc, #636]	@ (80029fc <HAL_RCC_OscConfig+0x334>)
 800277e:	400a      	ands	r2, r1
 8002780:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d014      	beq.n	80027b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe fd51 	bl	8001230 <HAL_GetTick>
 800278e:	0003      	movs	r3, r0
 8002790:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe fd4c 	bl	8001230 <HAL_GetTick>
 8002798:	0002      	movs	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e298      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a6:	4b93      	ldr	r3, [pc, #588]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	4013      	ands	r3, r2
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0xcc>
 80027b2:	e015      	b.n	80027e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fd3c 	bl	8001230 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027be:	f7fe fd37 	bl	8001230 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	@ 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e283      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d0:	4b88      	ldr	r3, [pc, #544]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	@ 0x80
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	4013      	ands	r3, r2
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0xf6>
 80027dc:	e000      	b.n	80027e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d100      	bne.n	80027ec <HAL_RCC_OscConfig+0x124>
 80027ea:	e099      	b.n	8002920 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ec:	4b81      	ldr	r3, [pc, #516]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2238      	movs	r2, #56	@ 0x38
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f6:	4b7f      	ldr	r3, [pc, #508]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2203      	movs	r2, #3
 80027fc:	4013      	ands	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b10      	cmp	r3, #16
 8002804:	d102      	bne.n	800280c <HAL_RCC_OscConfig+0x144>
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d002      	beq.n	8002812 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d135      	bne.n	800287e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002812:	4b78      	ldr	r3, [pc, #480]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	2380      	movs	r3, #128	@ 0x80
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4013      	ands	r3, r2
 800281c:	d005      	beq.n	800282a <HAL_RCC_OscConfig+0x162>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e256      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b72      	ldr	r3, [pc, #456]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a74      	ldr	r2, [pc, #464]	@ (8002a00 <HAL_RCC_OscConfig+0x338>)
 8002830:	4013      	ands	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	021a      	lsls	r2, r3, #8
 800283a:	4b6e      	ldr	r3, [pc, #440]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d112      	bne.n	800286c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002846:	4b6b      	ldr	r3, [pc, #428]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a04 <HAL_RCC_OscConfig+0x33c>)
 800284c:	4013      	ands	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	4b67      	ldr	r3, [pc, #412]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800285a:	4b66      	ldr	r3, [pc, #408]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0adb      	lsrs	r3, r3, #11
 8002860:	2207      	movs	r2, #7
 8002862:	4013      	ands	r3, r2
 8002864:	4a68      	ldr	r2, [pc, #416]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002866:	40da      	lsrs	r2, r3
 8002868:	4b68      	ldr	r3, [pc, #416]	@ (8002a0c <HAL_RCC_OscConfig+0x344>)
 800286a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800286c:	4b68      	ldr	r3, [pc, #416]	@ (8002a10 <HAL_RCC_OscConfig+0x348>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0018      	movs	r0, r3
 8002872:	f7fe fc81 	bl	8001178 <HAL_InitTick>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d051      	beq.n	800291e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e22c      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d030      	beq.n	80028e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002886:	4b5b      	ldr	r3, [pc, #364]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a04 <HAL_RCC_OscConfig+0x33c>)
 800288c:	4013      	ands	r3, r2
 800288e:	0019      	movs	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	4b57      	ldr	r3, [pc, #348]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800289a:	4b56      	ldr	r3, [pc, #344]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b55      	ldr	r3, [pc, #340]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80028a0:	2180      	movs	r1, #128	@ 0x80
 80028a2:	0049      	lsls	r1, r1, #1
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fcc2 	bl	8001230 <HAL_GetTick>
 80028ac:	0003      	movs	r3, r0
 80028ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe fcbd 	bl	8001230 <HAL_GetTick>
 80028b6:	0002      	movs	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e209      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c4:	4b4b      	ldr	r3, [pc, #300]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	2380      	movs	r3, #128	@ 0x80
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4013      	ands	r3, r2
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b48      	ldr	r3, [pc, #288]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002a00 <HAL_RCC_OscConfig+0x338>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	021a      	lsls	r2, r3, #8
 80028e0:	4b44      	ldr	r3, [pc, #272]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	e01b      	b.n	8002920 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80028e8:	4b42      	ldr	r3, [pc, #264]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80028ee:	4949      	ldr	r1, [pc, #292]	@ (8002a14 <HAL_RCC_OscConfig+0x34c>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fc9c 	bl	8001230 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe fc97 	bl	8001230 <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1e3      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002910:	4b38      	ldr	r3, [pc, #224]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4013      	ands	r3, r2
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x236>
 800291c:	e000      	b.n	8002920 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800291e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2208      	movs	r2, #8
 8002926:	4013      	ands	r3, r2
 8002928:	d047      	beq.n	80029ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800292a:	4b32      	ldr	r3, [pc, #200]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2238      	movs	r2, #56	@ 0x38
 8002930:	4013      	ands	r3, r2
 8002932:	2b18      	cmp	r3, #24
 8002934:	d10a      	bne.n	800294c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002936:	4b2f      	ldr	r3, [pc, #188]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293a:	2202      	movs	r2, #2
 800293c:	4013      	ands	r3, r2
 800293e:	d03c      	beq.n	80029ba <HAL_RCC_OscConfig+0x2f2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d138      	bne.n	80029ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e1c5      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d019      	beq.n	8002988 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002954:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 8002956:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002958:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800295a:	2101      	movs	r1, #1
 800295c:	430a      	orrs	r2, r1
 800295e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fc66 	bl	8001230 <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe fc61 	bl	8001230 <HAL_GetTick>
 800296e:	0002      	movs	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1ad      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800297c:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800297e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002980:	2202      	movs	r2, #2
 8002982:	4013      	ands	r3, r2
 8002984:	d0f1      	beq.n	800296a <HAL_RCC_OscConfig+0x2a2>
 8002986:	e018      	b.n	80029ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002988:	4b1a      	ldr	r3, [pc, #104]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800298a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800298c:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 800298e:	2101      	movs	r1, #1
 8002990:	438a      	bics	r2, r1
 8002992:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe fc4c 	bl	8001230 <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299e:	f7fe fc47 	bl	8001230 <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e193      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b0:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80029b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b4:	2202      	movs	r2, #2
 80029b6:	4013      	ands	r3, r2
 80029b8:	d1f1      	bne.n	800299e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2204      	movs	r2, #4
 80029c0:	4013      	ands	r3, r2
 80029c2:	d100      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2fe>
 80029c4:	e0c6      	b.n	8002b54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	231f      	movs	r3, #31
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2238      	movs	r2, #56	@ 0x38
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d11e      	bne.n	8002a18 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029da:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_RCC_OscConfig+0x32c>)
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	2202      	movs	r2, #2
 80029e0:	4013      	ands	r3, r2
 80029e2:	d100      	bne.n	80029e6 <HAL_RCC_OscConfig+0x31e>
 80029e4:	e0b6      	b.n	8002b54 <HAL_RCC_OscConfig+0x48c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d000      	beq.n	80029f0 <HAL_RCC_OscConfig+0x328>
 80029ee:	e0b1      	b.n	8002b54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e171      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
 80029f4:	40021000 	.word	0x40021000
 80029f8:	fffeffff 	.word	0xfffeffff
 80029fc:	fffbffff 	.word	0xfffbffff
 8002a00:	ffff80ff 	.word	0xffff80ff
 8002a04:	ffffc7ff 	.word	0xffffc7ff
 8002a08:	00f42400 	.word	0x00f42400
 8002a0c:	20000004 	.word	0x20000004
 8002a10:	20000008 	.word	0x20000008
 8002a14:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a18:	4bb1      	ldr	r3, [pc, #708]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	055b      	lsls	r3, r3, #21
 8002a20:	4013      	ands	r3, r2
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_OscConfig+0x360>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_RCC_OscConfig+0x362>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d011      	beq.n	8002a52 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	4bac      	ldr	r3, [pc, #688]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002a30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a32:	4bab      	ldr	r3, [pc, #684]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002a34:	2180      	movs	r1, #128	@ 0x80
 8002a36:	0549      	lsls	r1, r1, #21
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a3c:	4ba8      	ldr	r3, [pc, #672]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a40:	2380      	movs	r3, #128	@ 0x80
 8002a42:	055b      	lsls	r3, r3, #21
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a4a:	231f      	movs	r3, #31
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a52:	4ba4      	ldr	r3, [pc, #656]	@ (8002ce4 <HAL_RCC_OscConfig+0x61c>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	@ 0x80
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d11a      	bne.n	8002a94 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a5e:	4ba1      	ldr	r3, [pc, #644]	@ (8002ce4 <HAL_RCC_OscConfig+0x61c>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4ba0      	ldr	r3, [pc, #640]	@ (8002ce4 <HAL_RCC_OscConfig+0x61c>)
 8002a64:	2180      	movs	r1, #128	@ 0x80
 8002a66:	0049      	lsls	r1, r1, #1
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fbe0 	bl	8001230 <HAL_GetTick>
 8002a70:	0003      	movs	r3, r0
 8002a72:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fe fbdb 	bl	8001230 <HAL_GetTick>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e127      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a88:	4b96      	ldr	r3, [pc, #600]	@ (8002ce4 <HAL_RCC_OscConfig+0x61c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	2380      	movs	r3, #128	@ 0x80
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4013      	ands	r3, r2
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x3e2>
 8002a9c:	4b90      	ldr	r3, [pc, #576]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002a9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aa0:	4b8f      	ldr	r3, [pc, #572]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x41c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x404>
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002ab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002ab8:	2104      	movs	r1, #4
 8002aba:	430a      	orrs	r2, r1
 8002abc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002abe:	4b88      	ldr	r3, [pc, #544]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002ac0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ac2:	4b87      	ldr	r3, [pc, #540]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x41c>
 8002acc:	4b84      	ldr	r3, [pc, #528]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002ace:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ad0:	4b83      	ldr	r3, [pc, #524]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ad8:	4b81      	ldr	r3, [pc, #516]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002ada:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002adc:	4b80      	ldr	r3, [pc, #512]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002ade:	2104      	movs	r1, #4
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d014      	beq.n	8002b16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe fba0 	bl	8001230 <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af4:	e009      	b.n	8002b0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe fb9b 	bl	8001230 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	4a79      	ldr	r2, [pc, #484]	@ (8002ce8 <HAL_RCC_OscConfig+0x620>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0e6      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0a:	4b75      	ldr	r3, [pc, #468]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	2202      	movs	r2, #2
 8002b10:	4013      	ands	r3, r2
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x42e>
 8002b14:	e013      	b.n	8002b3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe fb8b 	bl	8001230 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b1e:	e009      	b.n	8002b34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe fb86 	bl	8001230 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	4a6f      	ldr	r2, [pc, #444]	@ (8002ce8 <HAL_RCC_OscConfig+0x620>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0d1      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b34:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b38:	2202      	movs	r2, #2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b3e:	231f      	movs	r3, #31
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b65      	ldr	r3, [pc, #404]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002b4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b4c:	4b64      	ldr	r3, [pc, #400]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002b4e:	4967      	ldr	r1, [pc, #412]	@ (8002cec <HAL_RCC_OscConfig+0x624>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d100      	bne.n	8002b5e <HAL_RCC_OscConfig+0x496>
 8002b5c:	e0bb      	b.n	8002cd6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b5e:	4b60      	ldr	r3, [pc, #384]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2238      	movs	r2, #56	@ 0x38
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d100      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4a4>
 8002b6a:	e07b      	b.n	8002c64 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d156      	bne.n	8002c22 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	4b5a      	ldr	r3, [pc, #360]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b59      	ldr	r3, [pc, #356]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002b7a:	495d      	ldr	r1, [pc, #372]	@ (8002cf0 <HAL_RCC_OscConfig+0x628>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fb56 	bl	8001230 <HAL_GetTick>
 8002b84:	0003      	movs	r3, r0
 8002b86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe fb51 	bl	8001230 <HAL_GetTick>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e09d      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	049b      	lsls	r3, r3, #18
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d1f0      	bne.n	8002b8a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a51      	ldr	r2, [pc, #324]	@ (8002cf4 <HAL_RCC_OscConfig+0x62c>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	4b42      	ldr	r3, [pc, #264]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bdc:	4b40      	ldr	r3, [pc, #256]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002be2:	2180      	movs	r1, #128	@ 0x80
 8002be4:	0449      	lsls	r1, r1, #17
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002bea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002bf0:	2180      	movs	r1, #128	@ 0x80
 8002bf2:	0549      	lsls	r1, r1, #21
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fb1a 	bl	8001230 <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe fb15 	bl	8001230 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e061      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c14:	4b32      	ldr	r3, [pc, #200]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	049b      	lsls	r3, r3, #18
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x53a>
 8002c20:	e059      	b.n	8002cd6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002c28:	4931      	ldr	r1, [pc, #196]	@ (8002cf0 <HAL_RCC_OscConfig+0x628>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2e:	f7fe faff 	bl	8001230 <HAL_GetTick>
 8002c32:	0003      	movs	r3, r0
 8002c34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fafa 	bl	8001230 <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e046      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4a:	4b25      	ldr	r3, [pc, #148]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	049b      	lsls	r3, r3, #18
 8002c52:	4013      	ands	r3, r2
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c56:	4b22      	ldr	r3, [pc, #136]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002c5c:	4926      	ldr	r1, [pc, #152]	@ (8002cf8 <HAL_RCC_OscConfig+0x630>)
 8002c5e:	400a      	ands	r2, r1
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	e038      	b.n	8002cd6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e033      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_RCC_OscConfig+0x618>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d126      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2270      	movs	r2, #112	@ 0x70
 8002c88:	401a      	ands	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d11f      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	23fe      	movs	r3, #254	@ 0xfe
 8002c96:	01db      	lsls	r3, r3, #7
 8002c98:	401a      	ands	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d116      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	23f8      	movs	r3, #248	@ 0xf8
 8002ca8:	039b      	lsls	r3, r3, #14
 8002caa:	401a      	ands	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d10e      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	23e0      	movs	r3, #224	@ 0xe0
 8002cb8:	051b      	lsls	r3, r3, #20
 8002cba:	401a      	ands	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	0f5b      	lsrs	r3, r3, #29
 8002cc8:	075a      	lsls	r2, r3, #29
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b008      	add	sp, #32
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	00001388 	.word	0x00001388
 8002cec:	efffffff 	.word	0xefffffff
 8002cf0:	feffffff 	.word	0xfeffffff
 8002cf4:	11c1808c 	.word	0x11c1808c
 8002cf8:	eefefffc 	.word	0xeefefffc

08002cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0e9      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b76      	ldr	r3, [pc, #472]	@ (8002eec <HAL_RCC_ClockConfig+0x1f0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2207      	movs	r2, #7
 8002d16:	4013      	ands	r3, r2
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d91e      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b73      	ldr	r3, [pc, #460]	@ (8002eec <HAL_RCC_ClockConfig+0x1f0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2207      	movs	r2, #7
 8002d24:	4393      	bics	r3, r2
 8002d26:	0019      	movs	r1, r3
 8002d28:	4b70      	ldr	r3, [pc, #448]	@ (8002eec <HAL_RCC_ClockConfig+0x1f0>)
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d30:	f7fe fa7e 	bl	8001230 <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d38:	e009      	b.n	8002d4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3a:	f7fe fa79 	bl	8001230 <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	4a6a      	ldr	r2, [pc, #424]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0ca      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d4e:	4b67      	ldr	r3, [pc, #412]	@ (8002eec <HAL_RCC_ClockConfig+0x1f0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2207      	movs	r2, #7
 8002d54:	4013      	ands	r3, r2
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1ee      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d015      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d006      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d70:	4b60      	ldr	r3, [pc, #384]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d76:	21e0      	movs	r1, #224	@ 0xe0
 8002d78:	01c9      	lsls	r1, r1, #7
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1fc>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2201      	movs	r2, #1
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d057      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da4:	4b53      	ldr	r3, [pc, #332]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	029b      	lsls	r3, r3, #10
 8002dac:	4013      	ands	r3, r2
 8002dae:	d12b      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e097      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	049b      	lsls	r3, r3, #18
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d11f      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e08b      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd4:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d113      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e07f      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dec:	4b41      	ldr	r3, [pc, #260]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df0:	2202      	movs	r2, #2
 8002df2:	4013      	ands	r3, r2
 8002df4:	d108      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e074      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4013      	ands	r3, r2
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e06d      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e08:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	4393      	bics	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	4b37      	ldr	r3, [pc, #220]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fa08 	bl	8001230 <HAL_GetTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e24:	e009      	b.n	8002e3a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e26:	f7fe fa03 	bl	8001230 <HAL_GetTick>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e054      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2238      	movs	r2, #56	@ 0x38
 8002e40:	401a      	ands	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1ec      	bne.n	8002e26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <HAL_RCC_ClockConfig+0x1f0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2207      	movs	r2, #7
 8002e52:	4013      	ands	r3, r2
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d21e      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2207      	movs	r2, #7
 8002e60:	4393      	bics	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	4b21      	ldr	r3, [pc, #132]	@ (8002eec <HAL_RCC_ClockConfig+0x1f0>)
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe f9e0 	bl	8001230 <HAL_GetTick>
 8002e70:	0003      	movs	r3, r0
 8002e72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e74:	e009      	b.n	8002e8a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e76:	f7fe f9db 	bl	8001230 <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e02c      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e8a:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2207      	movs	r2, #7
 8002e90:	4013      	ands	r3, r2
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d1ee      	bne.n	8002e76 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea2:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	4a15      	ldr	r2, [pc, #84]	@ (8002efc <HAL_RCC_ClockConfig+0x200>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4b10      	ldr	r3, [pc, #64]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002eb6:	f000 f829 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002eba:	0001      	movs	r1, r0
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	220f      	movs	r2, #15
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <HAL_RCC_ClockConfig+0x204>)
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	58d3      	ldr	r3, [r2, r3]
 8002ecc:	221f      	movs	r2, #31
 8002ece:	4013      	ands	r3, r2
 8002ed0:	000a      	movs	r2, r1
 8002ed2:	40da      	lsrs	r2, r3
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <HAL_RCC_ClockConfig+0x208>)
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_RCC_ClockConfig+0x20c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7fe f94b 	bl	8001178 <HAL_InitTick>
 8002ee2:	0003      	movs	r3, r0
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	00001388 	.word	0x00001388
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	fffff0ff 	.word	0xfffff0ff
 8002efc:	ffff8fff 	.word	0xffff8fff
 8002f00:	0800664c 	.word	0x0800664c
 8002f04:	20000004 	.word	0x20000004
 8002f08:	20000008 	.word	0x20000008

08002f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f12:	4b3c      	ldr	r3, [pc, #240]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2238      	movs	r2, #56	@ 0x38
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d10f      	bne.n	8002f3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f1c:	4b39      	ldr	r3, [pc, #228]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0adb      	lsrs	r3, r3, #11
 8002f22:	2207      	movs	r2, #7
 8002f24:	4013      	ands	r3, r2
 8002f26:	2201      	movs	r2, #1
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f2e:	6839      	ldr	r1, [r7, #0]
 8002f30:	4835      	ldr	r0, [pc, #212]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f32:	f7fd f8f1 	bl	8000118 <__udivsi3>
 8002f36:	0003      	movs	r3, r0
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e05d      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f3c:	4b31      	ldr	r3, [pc, #196]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2238      	movs	r2, #56	@ 0x38
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d102      	bne.n	8002f4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f48:	4b30      	ldr	r3, [pc, #192]	@ (800300c <HAL_RCC_GetSysClockFreq+0x100>)
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	e054      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2238      	movs	r2, #56	@ 0x38
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d138      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f64:	4b27      	ldr	r3, [pc, #156]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d10d      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	4824      	ldr	r0, [pc, #144]	@ (800300c <HAL_RCC_GetSysClockFreq+0x100>)
 8002f7c:	f7fd f8cc 	bl	8000118 <__udivsi3>
 8002f80:	0003      	movs	r3, r0
 8002f82:	0019      	movs	r1, r3
 8002f84:	4b1f      	ldr	r3, [pc, #124]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	227f      	movs	r2, #127	@ 0x7f
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	434b      	muls	r3, r1
 8002f90:	617b      	str	r3, [r7, #20]
        break;
 8002f92:	e00d      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	481c      	ldr	r0, [pc, #112]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f98:	f7fd f8be 	bl	8000118 <__udivsi3>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	227f      	movs	r2, #127	@ 0x7f
 8002fa8:	4013      	ands	r3, r2
 8002faa:	434b      	muls	r3, r1
 8002fac:	617b      	str	r3, [r7, #20]
        break;
 8002fae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fb0:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	0f5b      	lsrs	r3, r3, #29
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	4013      	ands	r3, r2
 8002fba:	3301      	adds	r3, #1
 8002fbc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	6978      	ldr	r0, [r7, #20]
 8002fc2:	f7fd f8a9 	bl	8000118 <__udivsi3>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	e015      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2238      	movs	r2, #56	@ 0x38
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d103      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fe0:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2238      	movs	r2, #56	@ 0x38
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b18      	cmp	r3, #24
 8002fea:	d103      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fec:	23fa      	movs	r3, #250	@ 0xfa
 8002fee:	01db      	lsls	r3, r3, #7
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ff8:	693b      	ldr	r3, [r7, #16]
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b006      	add	sp, #24
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	40021000 	.word	0x40021000
 8003008:	00f42400 	.word	0x00f42400
 800300c:	007a1200 	.word	0x007a1200

08003010 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003014:	4b02      	ldr	r3, [pc, #8]	@ (8003020 <HAL_RCC_GetHCLKFreq+0x10>)
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003024:	b5b0      	push	{r4, r5, r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003028:	f7ff fff2 	bl	8003010 <HAL_RCC_GetHCLKFreq>
 800302c:	0004      	movs	r4, r0
 800302e:	f7ff fb3f 	bl	80026b0 <LL_RCC_GetAPB1Prescaler>
 8003032:	0003      	movs	r3, r0
 8003034:	0b1a      	lsrs	r2, r3, #12
 8003036:	4b05      	ldr	r3, [pc, #20]	@ (800304c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003038:	0092      	lsls	r2, r2, #2
 800303a:	58d3      	ldr	r3, [r2, r3]
 800303c:	221f      	movs	r2, #31
 800303e:	4013      	ands	r3, r2
 8003040:	40dc      	lsrs	r4, r3
 8003042:	0023      	movs	r3, r4
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	bdb0      	pop	{r4, r5, r7, pc}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	0800668c 	.word	0x0800668c

08003050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003058:	2313      	movs	r3, #19
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003060:	2312      	movs	r3, #18
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	@ 0x80
 800306e:	029b      	lsls	r3, r3, #10
 8003070:	4013      	ands	r3, r2
 8003072:	d100      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003074:	e0a3      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2011      	movs	r0, #17
 8003078:	183b      	adds	r3, r7, r0
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4bc3      	ldr	r3, [pc, #780]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003080:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	055b      	lsls	r3, r3, #21
 8003086:	4013      	ands	r3, r2
 8003088:	d110      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4bc0      	ldr	r3, [pc, #768]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800308c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800308e:	4bbf      	ldr	r3, [pc, #764]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003090:	2180      	movs	r1, #128	@ 0x80
 8003092:	0549      	lsls	r1, r1, #21
 8003094:	430a      	orrs	r2, r1
 8003096:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003098:	4bbc      	ldr	r3, [pc, #752]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800309a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800309c:	2380      	movs	r3, #128	@ 0x80
 800309e:	055b      	lsls	r3, r3, #21
 80030a0:	4013      	ands	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a6:	183b      	adds	r3, r7, r0
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ac:	4bb8      	ldr	r3, [pc, #736]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4bb7      	ldr	r3, [pc, #732]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030b2:	2180      	movs	r1, #128	@ 0x80
 80030b4:	0049      	lsls	r1, r1, #1
 80030b6:	430a      	orrs	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ba:	f7fe f8b9 	bl	8001230 <HAL_GetTick>
 80030be:	0003      	movs	r3, r0
 80030c0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030c2:	e00b      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c4:	f7fe f8b4 	bl	8001230 <HAL_GetTick>
 80030c8:	0002      	movs	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d904      	bls.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030d2:	2313      	movs	r3, #19
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2203      	movs	r2, #3
 80030d8:	701a      	strb	r2, [r3, #0]
        break;
 80030da:	e005      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030dc:	4bac      	ldr	r3, [pc, #688]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	2380      	movs	r3, #128	@ 0x80
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	d0ed      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030e8:	2313      	movs	r3, #19
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d154      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030f2:	4ba6      	ldr	r3, [pc, #664]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030f6:	23c0      	movs	r3, #192	@ 0xc0
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4013      	ands	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d019      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	429a      	cmp	r2, r3
 800310c:	d014      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800310e:	4b9f      	ldr	r3, [pc, #636]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003112:	4aa0      	ldr	r2, [pc, #640]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003114:	4013      	ands	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003118:	4b9c      	ldr	r3, [pc, #624]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800311a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800311c:	4b9b      	ldr	r3, [pc, #620]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800311e:	2180      	movs	r1, #128	@ 0x80
 8003120:	0249      	lsls	r1, r1, #9
 8003122:	430a      	orrs	r2, r1
 8003124:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003126:	4b99      	ldr	r3, [pc, #612]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003128:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800312a:	4b98      	ldr	r3, [pc, #608]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800312c:	499a      	ldr	r1, [pc, #616]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800312e:	400a      	ands	r2, r1
 8003130:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003132:	4b96      	ldr	r3, [pc, #600]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2201      	movs	r2, #1
 800313c:	4013      	ands	r3, r2
 800313e:	d016      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe f876 	bl	8001230 <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
 8003146:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003148:	e00c      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7fe f871 	bl	8001230 <HAL_GetTick>
 800314e:	0002      	movs	r2, r0
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	4a91      	ldr	r2, [pc, #580]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d904      	bls.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800315a:	2313      	movs	r3, #19
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2203      	movs	r2, #3
 8003160:	701a      	strb	r2, [r3, #0]
            break;
 8003162:	e004      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003164:	4b89      	ldr	r3, [pc, #548]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003168:	2202      	movs	r2, #2
 800316a:	4013      	ands	r3, r2
 800316c:	d0ed      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800316e:	2313      	movs	r3, #19
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003178:	4b84      	ldr	r3, [pc, #528]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800317a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317c:	4a85      	ldr	r2, [pc, #532]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800317e:	4013      	ands	r3, r2
 8003180:	0019      	movs	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003186:	4b81      	ldr	r3, [pc, #516]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003188:	430a      	orrs	r2, r1
 800318a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800318c:	e00c      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800318e:	2312      	movs	r3, #18
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	2213      	movs	r2, #19
 8003194:	18ba      	adds	r2, r7, r2
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e005      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319c:	2312      	movs	r3, #18
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	2213      	movs	r2, #19
 80031a2:	18ba      	adds	r2, r7, r2
 80031a4:	7812      	ldrb	r2, [r2, #0]
 80031a6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a8:	2311      	movs	r3, #17
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d105      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b2:	4b76      	ldr	r3, [pc, #472]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031b6:	4b75      	ldr	r3, [pc, #468]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b8:	4979      	ldr	r1, [pc, #484]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80031ba:	400a      	ands	r2, r1
 80031bc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	4013      	ands	r3, r2
 80031c6:	d009      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031c8:	4b70      	ldr	r3, [pc, #448]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031cc:	2203      	movs	r2, #3
 80031ce:	4393      	bics	r3, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4b6d      	ldr	r3, [pc, #436]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031d8:	430a      	orrs	r2, r1
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2202      	movs	r2, #2
 80031e2:	4013      	ands	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031e6:	4b69      	ldr	r3, [pc, #420]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ea:	220c      	movs	r2, #12
 80031ec:	4393      	bics	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	4b65      	ldr	r3, [pc, #404]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031f6:	430a      	orrs	r2, r1
 80031f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2210      	movs	r2, #16
 8003200:	4013      	ands	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003204:	4b61      	ldr	r3, [pc, #388]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003208:	4a66      	ldr	r2, [pc, #408]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b5e      	ldr	r3, [pc, #376]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003214:	430a      	orrs	r2, r1
 8003216:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4013      	ands	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003224:	4b59      	ldr	r3, [pc, #356]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003228:	4a5f      	ldr	r2, [pc, #380]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	4b56      	ldr	r3, [pc, #344]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003234:	430a      	orrs	r2, r1
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4013      	ands	r3, r2
 8003242:	d009      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003244:	4b51      	ldr	r3, [pc, #324]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003248:	4a58      	ldr	r2, [pc, #352]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800324a:	4013      	ands	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	4b4e      	ldr	r3, [pc, #312]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003254:	430a      	orrs	r2, r1
 8003256:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2220      	movs	r2, #32
 800325e:	4013      	ands	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003262:	4b4a      	ldr	r3, [pc, #296]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003266:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003268:	4013      	ands	r3, r2
 800326a:	0019      	movs	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	4b46      	ldr	r3, [pc, #280]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003272:	430a      	orrs	r2, r1
 8003274:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	@ 0x80
 800327c:	01db      	lsls	r3, r3, #7
 800327e:	4013      	ands	r3, r2
 8003280:	d015      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003282:	4b42      	ldr	r3, [pc, #264]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	0899      	lsrs	r1, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	4b3f      	ldr	r3, [pc, #252]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003290:	430a      	orrs	r2, r1
 8003292:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1a      	ldr	r2, [r3, #32]
 8003298:	2380      	movs	r3, #128	@ 0x80
 800329a:	05db      	lsls	r3, r3, #23
 800329c:	429a      	cmp	r2, r3
 800329e:	d106      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032a0:	4b3a      	ldr	r3, [pc, #232]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	4b39      	ldr	r3, [pc, #228]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032a6:	2180      	movs	r1, #128	@ 0x80
 80032a8:	0249      	lsls	r1, r1, #9
 80032aa:	430a      	orrs	r2, r1
 80032ac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	031b      	lsls	r3, r3, #12
 80032b6:	4013      	ands	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032ba:	4b34      	ldr	r3, [pc, #208]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	2240      	movs	r2, #64	@ 0x40
 80032c0:	4393      	bics	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032c8:	4b30      	ldr	r3, [pc, #192]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032ca:	430a      	orrs	r2, r1
 80032cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	039b      	lsls	r3, r3, #14
 80032d6:	4013      	ands	r3, r2
 80032d8:	d016      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032da:	4b2c      	ldr	r3, [pc, #176]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032de:	4a35      	ldr	r2, [pc, #212]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	0019      	movs	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032e8:	4b28      	ldr	r3, [pc, #160]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032ea:	430a      	orrs	r2, r1
 80032ec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	03db      	lsls	r3, r3, #15
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d106      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032fa:	4b24      	ldr	r3, [pc, #144]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	4b23      	ldr	r3, [pc, #140]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003300:	2180      	movs	r1, #128	@ 0x80
 8003302:	0449      	lsls	r1, r1, #17
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	03db      	lsls	r3, r3, #15
 8003310:	4013      	ands	r3, r2
 8003312:	d016      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003314:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003318:	4a27      	ldr	r2, [pc, #156]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800331a:	4013      	ands	r3, r2
 800331c:	0019      	movs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003322:	4b1a      	ldr	r3, [pc, #104]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003324:	430a      	orrs	r2, r1
 8003326:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800332c:	2380      	movs	r3, #128	@ 0x80
 800332e:	045b      	lsls	r3, r3, #17
 8003330:	429a      	cmp	r2, r3
 8003332:	d106      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003334:	4b15      	ldr	r3, [pc, #84]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	4b14      	ldr	r3, [pc, #80]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800333a:	2180      	movs	r1, #128	@ 0x80
 800333c:	0449      	lsls	r1, r1, #17
 800333e:	430a      	orrs	r2, r1
 8003340:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	2380      	movs	r3, #128	@ 0x80
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	4013      	ands	r3, r2
 800334c:	d016      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800334e:	4b0f      	ldr	r3, [pc, #60]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003352:	4a1a      	ldr	r2, [pc, #104]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003354:	4013      	ands	r3, r2
 8003356:	0019      	movs	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	4b0b      	ldr	r3, [pc, #44]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800335e:	430a      	orrs	r2, r1
 8003360:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	2380      	movs	r3, #128	@ 0x80
 8003368:	01db      	lsls	r3, r3, #7
 800336a:	429a      	cmp	r2, r3
 800336c:	d106      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800336e:	4b07      	ldr	r3, [pc, #28]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003374:	2180      	movs	r1, #128	@ 0x80
 8003376:	0249      	lsls	r1, r1, #9
 8003378:	430a      	orrs	r2, r1
 800337a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800337c:	2312      	movs	r3, #18
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	781b      	ldrb	r3, [r3, #0]
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b006      	add	sp, #24
 8003388:	bd80      	pop	{r7, pc}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	40021000 	.word	0x40021000
 8003390:	40007000 	.word	0x40007000
 8003394:	fffffcff 	.word	0xfffffcff
 8003398:	fffeffff 	.word	0xfffeffff
 800339c:	00001388 	.word	0x00001388
 80033a0:	efffffff 	.word	0xefffffff
 80033a4:	fffff3ff 	.word	0xfffff3ff
 80033a8:	fff3ffff 	.word	0xfff3ffff
 80033ac:	ffcfffff 	.word	0xffcfffff
 80033b0:	ffffcfff 	.word	0xffffcfff
 80033b4:	ffbfffff 	.word	0xffbfffff
 80033b8:	feffffff 	.word	0xfeffffff
 80033bc:	ffff3fff 	.word	0xffff3fff

080033c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e04a      	b.n	8003468 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	223d      	movs	r2, #61	@ 0x3d
 80033d6:	5c9b      	ldrb	r3, [r3, r2]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	223c      	movs	r2, #60	@ 0x3c
 80033e2:	2100      	movs	r1, #0
 80033e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fd fd59 	bl	8000ea0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	223d      	movs	r2, #61	@ 0x3d
 80033f2:	2102      	movs	r1, #2
 80033f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	0019      	movs	r1, r3
 8003400:	0010      	movs	r0, r2
 8003402:	f000 fa1f 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2248      	movs	r2, #72	@ 0x48
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	223e      	movs	r2, #62	@ 0x3e
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	223f      	movs	r2, #63	@ 0x3f
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2240      	movs	r2, #64	@ 0x40
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2241      	movs	r2, #65	@ 0x41
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2242      	movs	r2, #66	@ 0x42
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2243      	movs	r2, #67	@ 0x43
 800343a:	2101      	movs	r1, #1
 800343c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2244      	movs	r2, #68	@ 0x44
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2245      	movs	r2, #69	@ 0x45
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2246      	movs	r2, #70	@ 0x46
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2247      	movs	r2, #71	@ 0x47
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	223d      	movs	r2, #61	@ 0x3d
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b002      	add	sp, #8
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d108      	bne.n	8003492 <HAL_TIM_PWM_Start+0x22>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	223e      	movs	r2, #62	@ 0x3e
 8003484:	5c9b      	ldrb	r3, [r3, r2]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	1e5a      	subs	r2, r3, #1
 800348c:	4193      	sbcs	r3, r2
 800348e:	b2db      	uxtb	r3, r3
 8003490:	e037      	b.n	8003502 <HAL_TIM_PWM_Start+0x92>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d108      	bne.n	80034aa <HAL_TIM_PWM_Start+0x3a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	223f      	movs	r2, #63	@ 0x3f
 800349c:	5c9b      	ldrb	r3, [r3, r2]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	1e5a      	subs	r2, r3, #1
 80034a4:	4193      	sbcs	r3, r2
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e02b      	b.n	8003502 <HAL_TIM_PWM_Start+0x92>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d108      	bne.n	80034c2 <HAL_TIM_PWM_Start+0x52>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2240      	movs	r2, #64	@ 0x40
 80034b4:	5c9b      	ldrb	r3, [r3, r2]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	1e5a      	subs	r2, r3, #1
 80034bc:	4193      	sbcs	r3, r2
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	e01f      	b.n	8003502 <HAL_TIM_PWM_Start+0x92>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	d108      	bne.n	80034da <HAL_TIM_PWM_Start+0x6a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2241      	movs	r2, #65	@ 0x41
 80034cc:	5c9b      	ldrb	r3, [r3, r2]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	1e5a      	subs	r2, r3, #1
 80034d4:	4193      	sbcs	r3, r2
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	e013      	b.n	8003502 <HAL_TIM_PWM_Start+0x92>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d108      	bne.n	80034f2 <HAL_TIM_PWM_Start+0x82>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2242      	movs	r2, #66	@ 0x42
 80034e4:	5c9b      	ldrb	r3, [r3, r2]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	1e5a      	subs	r2, r3, #1
 80034ec:	4193      	sbcs	r3, r2
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e007      	b.n	8003502 <HAL_TIM_PWM_Start+0x92>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2243      	movs	r2, #67	@ 0x43
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	1e5a      	subs	r2, r3, #1
 80034fe:	4193      	sbcs	r3, r2
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e08b      	b.n	8003622 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0xaa>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	223e      	movs	r2, #62	@ 0x3e
 8003514:	2102      	movs	r1, #2
 8003516:	5499      	strb	r1, [r3, r2]
 8003518:	e023      	b.n	8003562 <HAL_TIM_PWM_Start+0xf2>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0xba>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	223f      	movs	r2, #63	@ 0x3f
 8003524:	2102      	movs	r1, #2
 8003526:	5499      	strb	r1, [r3, r2]
 8003528:	e01b      	b.n	8003562 <HAL_TIM_PWM_Start+0xf2>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start+0xca>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2240      	movs	r2, #64	@ 0x40
 8003534:	2102      	movs	r1, #2
 8003536:	5499      	strb	r1, [r3, r2]
 8003538:	e013      	b.n	8003562 <HAL_TIM_PWM_Start+0xf2>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d104      	bne.n	800354a <HAL_TIM_PWM_Start+0xda>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2241      	movs	r2, #65	@ 0x41
 8003544:	2102      	movs	r1, #2
 8003546:	5499      	strb	r1, [r3, r2]
 8003548:	e00b      	b.n	8003562 <HAL_TIM_PWM_Start+0xf2>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b10      	cmp	r3, #16
 800354e:	d104      	bne.n	800355a <HAL_TIM_PWM_Start+0xea>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2242      	movs	r2, #66	@ 0x42
 8003554:	2102      	movs	r1, #2
 8003556:	5499      	strb	r1, [r3, r2]
 8003558:	e003      	b.n	8003562 <HAL_TIM_PWM_Start+0xf2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2243      	movs	r2, #67	@ 0x43
 800355e:	2102      	movs	r1, #2
 8003560:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6839      	ldr	r1, [r7, #0]
 8003568:	2201      	movs	r2, #1
 800356a:	0018      	movs	r0, r3
 800356c:	f000 fcbc 	bl	8003ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2d      	ldr	r2, [pc, #180]	@ (800362c <HAL_TIM_PWM_Start+0x1bc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <HAL_TIM_PWM_Start+0x128>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2c      	ldr	r2, [pc, #176]	@ (8003630 <HAL_TIM_PWM_Start+0x1c0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_TIM_PWM_Start+0x128>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2a      	ldr	r2, [pc, #168]	@ (8003634 <HAL_TIM_PWM_Start+0x1c4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_TIM_PWM_Start+0x128>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a29      	ldr	r2, [pc, #164]	@ (8003638 <HAL_TIM_PWM_Start+0x1c8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_TIM_PWM_Start+0x12c>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_TIM_PWM_Start+0x12e>
 800359c:	2300      	movs	r3, #0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2180      	movs	r1, #128	@ 0x80
 80035ae:	0209      	lsls	r1, r1, #8
 80035b0:	430a      	orrs	r2, r1
 80035b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <HAL_TIM_PWM_Start+0x1bc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00f      	beq.n	80035de <HAL_TIM_PWM_Start+0x16e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	2380      	movs	r3, #128	@ 0x80
 80035c4:	05db      	lsls	r3, r3, #23
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d009      	beq.n	80035de <HAL_TIM_PWM_Start+0x16e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1b      	ldr	r2, [pc, #108]	@ (800363c <HAL_TIM_PWM_Start+0x1cc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_TIM_PWM_Start+0x16e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a15      	ldr	r2, [pc, #84]	@ (8003630 <HAL_TIM_PWM_Start+0x1c0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d116      	bne.n	800360c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a16      	ldr	r2, [pc, #88]	@ (8003640 <HAL_TIM_PWM_Start+0x1d0>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b06      	cmp	r3, #6
 80035ee:	d016      	beq.n	800361e <HAL_TIM_PWM_Start+0x1ae>
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	025b      	lsls	r3, r3, #9
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d011      	beq.n	800361e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360a:	e008      	b.n	800361e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2101      	movs	r1, #1
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e000      	b.n	8003620 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	0018      	movs	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	b004      	add	sp, #16
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			@ (mov r8, r8)
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40014000 	.word	0x40014000
 8003634:	40014400 	.word	0x40014400
 8003638:	40014800 	.word	0x40014800
 800363c:	40000400 	.word	0x40000400
 8003640:	00010007 	.word	0x00010007

08003644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	2317      	movs	r3, #23
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	223c      	movs	r2, #60	@ 0x3c
 800365c:	5c9b      	ldrb	r3, [r3, r2]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003662:	2302      	movs	r3, #2
 8003664:	e0e5      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	223c      	movs	r2, #60	@ 0x3c
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b14      	cmp	r3, #20
 8003672:	d900      	bls.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003674:	e0d1      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	009a      	lsls	r2, r3, #2
 800367a:	4b70      	ldr	r3, [pc, #448]	@ (800383c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800367c:	18d3      	adds	r3, r2, r3
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	0011      	movs	r1, r2
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f968 	bl	8003960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2108      	movs	r1, #8
 800369c:	430a      	orrs	r2, r1
 800369e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2104      	movs	r1, #4
 80036ac:	438a      	bics	r2, r1
 80036ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6999      	ldr	r1, [r3, #24]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	619a      	str	r2, [r3, #24]
      break;
 80036c2:	e0af      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	0011      	movs	r1, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f000 f9d1 	bl	8003a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2180      	movs	r1, #128	@ 0x80
 80036de:	0109      	lsls	r1, r1, #4
 80036e0:	430a      	orrs	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4954      	ldr	r1, [pc, #336]	@ (8003840 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80036f0:	400a      	ands	r2, r1
 80036f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6999      	ldr	r1, [r3, #24]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	021a      	lsls	r2, r3, #8
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	619a      	str	r2, [r3, #24]
      break;
 8003708:	e08c      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	0011      	movs	r1, r2
 8003712:	0018      	movs	r0, r3
 8003714:	f000 fa32 	bl	8003b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69da      	ldr	r2, [r3, #28]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2108      	movs	r1, #8
 8003724:	430a      	orrs	r2, r1
 8003726:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2104      	movs	r1, #4
 8003734:	438a      	bics	r2, r1
 8003736:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69d9      	ldr	r1, [r3, #28]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	61da      	str	r2, [r3, #28]
      break;
 800374a:	e06b      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	0011      	movs	r1, r2
 8003754:	0018      	movs	r0, r3
 8003756:	f000 fa99 	bl	8003c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69da      	ldr	r2, [r3, #28]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2180      	movs	r1, #128	@ 0x80
 8003766:	0109      	lsls	r1, r1, #4
 8003768:	430a      	orrs	r2, r1
 800376a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4932      	ldr	r1, [pc, #200]	@ (8003840 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003778:	400a      	ands	r2, r1
 800377a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69d9      	ldr	r1, [r3, #28]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	61da      	str	r2, [r3, #28]
      break;
 8003790:	e048      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	0011      	movs	r1, r2
 800379a:	0018      	movs	r0, r3
 800379c:	f000 fae0 	bl	8003d60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2108      	movs	r1, #8
 80037ac:	430a      	orrs	r2, r1
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2104      	movs	r1, #4
 80037bc:	438a      	bics	r2, r1
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037d2:	e027      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	0011      	movs	r1, r2
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 fb1f 	bl	8003e20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2180      	movs	r1, #128	@ 0x80
 80037ee:	0109      	lsls	r1, r1, #4
 80037f0:	430a      	orrs	r2, r1
 80037f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4910      	ldr	r1, [pc, #64]	@ (8003840 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003800:	400a      	ands	r2, r1
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	021a      	lsls	r2, r3, #8
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003818:	e004      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800381a:	2317      	movs	r3, #23
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
      break;
 8003822:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	223c      	movs	r2, #60	@ 0x3c
 8003828:	2100      	movs	r1, #0
 800382a:	5499      	strb	r1, [r3, r2]

  return status;
 800382c:	2317      	movs	r3, #23
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	781b      	ldrb	r3, [r3, #0]
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b006      	add	sp, #24
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	080066ac 	.word	0x080066ac
 8003840:	fffffbff 	.word	0xfffffbff

08003844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3b      	ldr	r2, [pc, #236]	@ (8003944 <TIM_Base_SetConfig+0x100>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d008      	beq.n	800386e <TIM_Base_SetConfig+0x2a>
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	2380      	movs	r3, #128	@ 0x80
 8003860:	05db      	lsls	r3, r3, #23
 8003862:	429a      	cmp	r2, r3
 8003864:	d003      	beq.n	800386e <TIM_Base_SetConfig+0x2a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a37      	ldr	r2, [pc, #220]	@ (8003948 <TIM_Base_SetConfig+0x104>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d108      	bne.n	8003880 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2270      	movs	r2, #112	@ 0x70
 8003872:	4393      	bics	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a30      	ldr	r2, [pc, #192]	@ (8003944 <TIM_Base_SetConfig+0x100>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d018      	beq.n	80038ba <TIM_Base_SetConfig+0x76>
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	05db      	lsls	r3, r3, #23
 800388e:	429a      	cmp	r2, r3
 8003890:	d013      	beq.n	80038ba <TIM_Base_SetConfig+0x76>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2c      	ldr	r2, [pc, #176]	@ (8003948 <TIM_Base_SetConfig+0x104>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00f      	beq.n	80038ba <TIM_Base_SetConfig+0x76>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2b      	ldr	r2, [pc, #172]	@ (800394c <TIM_Base_SetConfig+0x108>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00b      	beq.n	80038ba <TIM_Base_SetConfig+0x76>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003950 <TIM_Base_SetConfig+0x10c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <TIM_Base_SetConfig+0x76>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a29      	ldr	r2, [pc, #164]	@ (8003954 <TIM_Base_SetConfig+0x110>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_Base_SetConfig+0x76>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a28      	ldr	r2, [pc, #160]	@ (8003958 <TIM_Base_SetConfig+0x114>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d108      	bne.n	80038cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a27      	ldr	r2, [pc, #156]	@ (800395c <TIM_Base_SetConfig+0x118>)
 80038be:	4013      	ands	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2280      	movs	r2, #128	@ 0x80
 80038d0:	4393      	bics	r3, r2
 80038d2:	001a      	movs	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a13      	ldr	r2, [pc, #76]	@ (8003944 <TIM_Base_SetConfig+0x100>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00b      	beq.n	8003912 <TIM_Base_SetConfig+0xce>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a14      	ldr	r2, [pc, #80]	@ (8003950 <TIM_Base_SetConfig+0x10c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_Base_SetConfig+0xce>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a13      	ldr	r2, [pc, #76]	@ (8003954 <TIM_Base_SetConfig+0x110>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_Base_SetConfig+0xce>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a12      	ldr	r2, [pc, #72]	@ (8003958 <TIM_Base_SetConfig+0x114>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d103      	bne.n	800391a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2201      	movs	r2, #1
 8003926:	4013      	ands	r3, r2
 8003928:	2b01      	cmp	r3, #1
 800392a:	d106      	bne.n	800393a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2201      	movs	r2, #1
 8003932:	4393      	bics	r3, r2
 8003934:	001a      	movs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	611a      	str	r2, [r3, #16]
  }
}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	b004      	add	sp, #16
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40000400 	.word	0x40000400
 800394c:	40002000 	.word	0x40002000
 8003950:	40014000 	.word	0x40014000
 8003954:	40014400 	.word	0x40014400
 8003958:	40014800 	.word	0x40014800
 800395c:	fffffcff 	.word	0xfffffcff

08003960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	2201      	movs	r2, #1
 8003976:	4393      	bics	r3, r2
 8003978:	001a      	movs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a32      	ldr	r2, [pc, #200]	@ (8003a58 <TIM_OC1_SetConfig+0xf8>)
 800398e:	4013      	ands	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2203      	movs	r2, #3
 8003996:	4393      	bics	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2202      	movs	r2, #2
 80039a8:	4393      	bics	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a28      	ldr	r2, [pc, #160]	@ (8003a5c <TIM_OC1_SetConfig+0xfc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_OC1_SetConfig+0x76>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a27      	ldr	r2, [pc, #156]	@ (8003a60 <TIM_OC1_SetConfig+0x100>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_OC1_SetConfig+0x76>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a26      	ldr	r2, [pc, #152]	@ (8003a64 <TIM_OC1_SetConfig+0x104>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_OC1_SetConfig+0x76>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a25      	ldr	r2, [pc, #148]	@ (8003a68 <TIM_OC1_SetConfig+0x108>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d10c      	bne.n	80039f0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2208      	movs	r2, #8
 80039da:	4393      	bics	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2204      	movs	r2, #4
 80039ec:	4393      	bics	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a5c <TIM_OC1_SetConfig+0xfc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <TIM_OC1_SetConfig+0xb0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a19      	ldr	r2, [pc, #100]	@ (8003a60 <TIM_OC1_SetConfig+0x100>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <TIM_OC1_SetConfig+0xb0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a18      	ldr	r2, [pc, #96]	@ (8003a64 <TIM_OC1_SetConfig+0x104>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_OC1_SetConfig+0xb0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a17      	ldr	r2, [pc, #92]	@ (8003a68 <TIM_OC1_SetConfig+0x108>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d111      	bne.n	8003a34 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4a16      	ldr	r2, [pc, #88]	@ (8003a6c <TIM_OC1_SetConfig+0x10c>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <TIM_OC1_SetConfig+0x110>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b006      	add	sp, #24
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	fffeff8f 	.word	0xfffeff8f
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800
 8003a6c:	fffffeff 	.word	0xfffffeff
 8003a70:	fffffdff 	.word	0xfffffdff

08003a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	2210      	movs	r2, #16
 8003a8a:	4393      	bics	r3, r2
 8003a8c:	001a      	movs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a2e      	ldr	r2, [pc, #184]	@ (8003b5c <TIM_OC2_SetConfig+0xe8>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b60 <TIM_OC2_SetConfig+0xec>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2220      	movs	r2, #32
 8003abe:	4393      	bics	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a24      	ldr	r2, [pc, #144]	@ (8003b64 <TIM_OC2_SetConfig+0xf0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10d      	bne.n	8003af2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	4393      	bics	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2240      	movs	r2, #64	@ 0x40
 8003aee:	4393      	bics	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b64 <TIM_OC2_SetConfig+0xf0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <TIM_OC2_SetConfig+0x9e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1a      	ldr	r2, [pc, #104]	@ (8003b68 <TIM_OC2_SetConfig+0xf4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_OC2_SetConfig+0x9e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a19      	ldr	r2, [pc, #100]	@ (8003b6c <TIM_OC2_SetConfig+0xf8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_OC2_SetConfig+0x9e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a18      	ldr	r2, [pc, #96]	@ (8003b70 <TIM_OC2_SetConfig+0xfc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d113      	bne.n	8003b3a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4a17      	ldr	r2, [pc, #92]	@ (8003b74 <TIM_OC2_SetConfig+0x100>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4a16      	ldr	r2, [pc, #88]	@ (8003b78 <TIM_OC2_SetConfig+0x104>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	46c0      	nop			@ (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b006      	add	sp, #24
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	feff8fff 	.word	0xfeff8fff
 8003b60:	fffffcff 	.word	0xfffffcff
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40014400 	.word	0x40014400
 8003b70:	40014800 	.word	0x40014800
 8003b74:	fffffbff 	.word	0xfffffbff
 8003b78:	fffff7ff 	.word	0xfffff7ff

08003b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4a33      	ldr	r2, [pc, #204]	@ (8003c60 <TIM_OC3_SetConfig+0xe4>)
 8003b92:	401a      	ands	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8003c64 <TIM_OC3_SetConfig+0xe8>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2203      	movs	r2, #3
 8003bb0:	4393      	bics	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	@ (8003c68 <TIM_OC3_SetConfig+0xec>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a25      	ldr	r2, [pc, #148]	@ (8003c6c <TIM_OC3_SetConfig+0xf0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10d      	bne.n	8003bf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	4a24      	ldr	r2, [pc, #144]	@ (8003c70 <TIM_OC3_SetConfig+0xf4>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	4a20      	ldr	r2, [pc, #128]	@ (8003c74 <TIM_OC3_SetConfig+0xf8>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c6c <TIM_OC3_SetConfig+0xf0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <TIM_OC3_SetConfig+0x9a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1d      	ldr	r2, [pc, #116]	@ (8003c78 <TIM_OC3_SetConfig+0xfc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d007      	beq.n	8003c16 <TIM_OC3_SetConfig+0x9a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1c      	ldr	r2, [pc, #112]	@ (8003c7c <TIM_OC3_SetConfig+0x100>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_OC3_SetConfig+0x9a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1b      	ldr	r2, [pc, #108]	@ (8003c80 <TIM_OC3_SetConfig+0x104>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d113      	bne.n	8003c3e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4a1a      	ldr	r2, [pc, #104]	@ (8003c84 <TIM_OC3_SetConfig+0x108>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4a19      	ldr	r2, [pc, #100]	@ (8003c88 <TIM_OC3_SetConfig+0x10c>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	46c0      	nop			@ (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b006      	add	sp, #24
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	fffffeff 	.word	0xfffffeff
 8003c64:	fffeff8f 	.word	0xfffeff8f
 8003c68:	fffffdff 	.word	0xfffffdff
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	fffff7ff 	.word	0xfffff7ff
 8003c74:	fffffbff 	.word	0xfffffbff
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40014400 	.word	0x40014400
 8003c80:	40014800 	.word	0x40014800
 8003c84:	ffffefff 	.word	0xffffefff
 8003c88:	ffffdfff 	.word	0xffffdfff

08003c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	4a26      	ldr	r2, [pc, #152]	@ (8003d3c <TIM_OC4_SetConfig+0xb0>)
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4a22      	ldr	r2, [pc, #136]	@ (8003d40 <TIM_OC4_SetConfig+0xb4>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a21      	ldr	r2, [pc, #132]	@ (8003d44 <TIM_OC4_SetConfig+0xb8>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d48 <TIM_OC4_SetConfig+0xbc>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	031b      	lsls	r3, r3, #12
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a19      	ldr	r2, [pc, #100]	@ (8003d4c <TIM_OC4_SetConfig+0xc0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <TIM_OC4_SetConfig+0x78>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a18      	ldr	r2, [pc, #96]	@ (8003d50 <TIM_OC4_SetConfig+0xc4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <TIM_OC4_SetConfig+0x78>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a17      	ldr	r2, [pc, #92]	@ (8003d54 <TIM_OC4_SetConfig+0xc8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_OC4_SetConfig+0x78>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a16      	ldr	r2, [pc, #88]	@ (8003d58 <TIM_OC4_SetConfig+0xcc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d109      	bne.n	8003d18 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	4a15      	ldr	r2, [pc, #84]	@ (8003d5c <TIM_OC4_SetConfig+0xd0>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	019b      	lsls	r3, r3, #6
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b006      	add	sp, #24
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	ffffefff 	.word	0xffffefff
 8003d40:	feff8fff 	.word	0xfeff8fff
 8003d44:	fffffcff 	.word	0xfffffcff
 8003d48:	ffffdfff 	.word	0xffffdfff
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40014000 	.word	0x40014000
 8003d54:	40014400 	.word	0x40014400
 8003d58:	40014800 	.word	0x40014800
 8003d5c:	ffffbfff 	.word	0xffffbfff

08003d60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	4a23      	ldr	r2, [pc, #140]	@ (8003e04 <TIM_OC5_SetConfig+0xa4>)
 8003d76:	401a      	ands	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e08 <TIM_OC5_SetConfig+0xa8>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e0c <TIM_OC5_SetConfig+0xac>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <TIM_OC5_SetConfig+0xb0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <TIM_OC5_SetConfig+0x6e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a16      	ldr	r2, [pc, #88]	@ (8003e14 <TIM_OC5_SetConfig+0xb4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <TIM_OC5_SetConfig+0x6e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a15      	ldr	r2, [pc, #84]	@ (8003e18 <TIM_OC5_SetConfig+0xb8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_OC5_SetConfig+0x6e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <TIM_OC5_SetConfig+0xbc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d109      	bne.n	8003de2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <TIM_OC5_SetConfig+0xa4>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	621a      	str	r2, [r3, #32]
}
 8003dfc:	46c0      	nop			@ (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b006      	add	sp, #24
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	fffeffff 	.word	0xfffeffff
 8003e08:	fffeff8f 	.word	0xfffeff8f
 8003e0c:	fffdffff 	.word	0xfffdffff
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800

08003e20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4a24      	ldr	r2, [pc, #144]	@ (8003ec8 <TIM_OC6_SetConfig+0xa8>)
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a20      	ldr	r2, [pc, #128]	@ (8003ecc <TIM_OC6_SetConfig+0xac>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed0 <TIM_OC6_SetConfig+0xb0>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	051b      	lsls	r3, r3, #20
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a18      	ldr	r2, [pc, #96]	@ (8003ed4 <TIM_OC6_SetConfig+0xb4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00b      	beq.n	8003e90 <TIM_OC6_SetConfig+0x70>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a17      	ldr	r2, [pc, #92]	@ (8003ed8 <TIM_OC6_SetConfig+0xb8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_OC6_SetConfig+0x70>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a16      	ldr	r2, [pc, #88]	@ (8003edc <TIM_OC6_SetConfig+0xbc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_OC6_SetConfig+0x70>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ee0 <TIM_OC6_SetConfig+0xc0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d109      	bne.n	8003ea4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <TIM_OC6_SetConfig+0xc4>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	029b      	lsls	r3, r3, #10
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b006      	add	sp, #24
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	ffefffff 	.word	0xffefffff
 8003ecc:	feff8fff 	.word	0xfeff8fff
 8003ed0:	ffdfffff 	.word	0xffdfffff
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40014400 	.word	0x40014400
 8003ee0:	40014800 	.word	0x40014800
 8003ee4:	fffbffff 	.word	0xfffbffff

08003ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	221f      	movs	r2, #31
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2201      	movs	r2, #1
 8003efc:	409a      	lsls	r2, r3
 8003efe:	0013      	movs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	43d2      	mvns	r2, r2
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	211f      	movs	r1, #31
 8003f18:	400b      	ands	r3, r1
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4099      	lsls	r1, r3
 8003f1e:	000b      	movs	r3, r1
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b006      	add	sp, #24
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	223c      	movs	r2, #60	@ 0x3c
 8003f3e:	5c9b      	ldrb	r3, [r3, r2]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e055      	b.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	223c      	movs	r2, #60	@ 0x3c
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	223d      	movs	r2, #61	@ 0x3d
 8003f54:	2102      	movs	r1, #2
 8003f56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a23      	ldr	r2, [pc, #140]	@ (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d108      	bne.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a22      	ldr	r2, [pc, #136]	@ (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2270      	movs	r2, #112	@ 0x70
 8003f88:	4393      	bics	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a16      	ldr	r2, [pc, #88]	@ (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00f      	beq.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2380      	movs	r3, #128	@ 0x80
 8003fae:	05db      	lsls	r3, r3, #23
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d009      	beq.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a12      	ldr	r2, [pc, #72]	@ (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a11      	ldr	r2, [pc, #68]	@ (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2280      	movs	r2, #128	@ 0x80
 8003fcc:	4393      	bics	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	223d      	movs	r2, #61	@ 0x3d
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	223c      	movs	r2, #60	@ 0x3c
 8003fee:	2100      	movs	r1, #0
 8003ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b004      	add	sp, #16
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	ff0fffff 	.word	0xff0fffff
 8004004:	40000400 	.word	0x40000400
 8004008:	40014000 	.word	0x40014000

0800400c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	223c      	movs	r2, #60	@ 0x3c
 800401e:	5c9b      	ldrb	r3, [r3, r2]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004024:	2302      	movs	r3, #2
 8004026:	e06f      	b.n	8004108 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	223c      	movs	r2, #60	@ 0x3c
 800402c:	2101      	movs	r1, #1
 800402e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	22ff      	movs	r2, #255	@ 0xff
 8004034:	4393      	bics	r3, r2
 8004036:	001a      	movs	r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a33      	ldr	r2, [pc, #204]	@ (8004110 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004044:	401a      	ands	r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a30      	ldr	r2, [pc, #192]	@ (8004114 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004052:	401a      	ands	r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a2e      	ldr	r2, [pc, #184]	@ (8004118 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004060:	401a      	ands	r2, r3
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a2b      	ldr	r2, [pc, #172]	@ (800411c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800406e:	401a      	ands	r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a29      	ldr	r2, [pc, #164]	@ (8004120 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800407c:	401a      	ands	r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4a26      	ldr	r2, [pc, #152]	@ (8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800408a:	401a      	ands	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a24      	ldr	r2, [pc, #144]	@ (8004128 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004098:	401a      	ands	r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a21      	ldr	r2, [pc, #132]	@ (800412c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80040a8:	401a      	ands	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004130 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d11c      	bne.n	80040f6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a1d      	ldr	r2, [pc, #116]	@ (8004134 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80040c0:	401a      	ands	r2, r3
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c6:	051b      	lsls	r3, r3, #20
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004138 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80040d0:	401a      	ands	r2, r3
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a17      	ldr	r2, [pc, #92]	@ (800413c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80040de:	401a      	ands	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a15      	ldr	r2, [pc, #84]	@ (8004140 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80040ec:	401a      	ands	r2, r3
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	223c      	movs	r2, #60	@ 0x3c
 8004102:	2100      	movs	r1, #0
 8004104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b004      	add	sp, #16
 800410e:	bd80      	pop	{r7, pc}
 8004110:	fffffcff 	.word	0xfffffcff
 8004114:	fffffbff 	.word	0xfffffbff
 8004118:	fffff7ff 	.word	0xfffff7ff
 800411c:	ffffefff 	.word	0xffffefff
 8004120:	ffffdfff 	.word	0xffffdfff
 8004124:	ffffbfff 	.word	0xffffbfff
 8004128:	fff0ffff 	.word	0xfff0ffff
 800412c:	efffffff 	.word	0xefffffff
 8004130:	40012c00 	.word	0x40012c00
 8004134:	ff0fffff 	.word	0xff0fffff
 8004138:	feffffff 	.word	0xfeffffff
 800413c:	fdffffff 	.word	0xfdffffff
 8004140:	dfffffff 	.word	0xdfffffff

08004144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e046      	b.n	80041e4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2288      	movs	r2, #136	@ 0x88
 800415a:	589b      	ldr	r3, [r3, r2]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d107      	bne.n	8004170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2284      	movs	r2, #132	@ 0x84
 8004164:	2100      	movs	r1, #0
 8004166:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	0018      	movs	r0, r3
 800416c:	f7fc ff5a 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2288      	movs	r2, #136	@ 0x88
 8004174:	2124      	movs	r1, #36	@ 0x24
 8004176:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2101      	movs	r1, #1
 8004184:	438a      	bics	r2, r1
 8004186:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0018      	movs	r0, r3
 8004194:	f000 fc00 	bl	8004998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	0018      	movs	r0, r3
 800419c:	f000 f93e 	bl	800441c <UART_SetConfig>
 80041a0:	0003      	movs	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e01c      	b.n	80041e4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	490d      	ldr	r1, [pc, #52]	@ (80041ec <HAL_UART_Init+0xa8>)
 80041b6:	400a      	ands	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	212a      	movs	r1, #42	@ 0x2a
 80041c6:	438a      	bics	r2, r1
 80041c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2101      	movs	r1, #1
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	0018      	movs	r0, r3
 80041de:	f000 fc8f 	bl	8004b00 <UART_CheckIdleState>
 80041e2:	0003      	movs	r3, r0
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b002      	add	sp, #8
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	ffffb7ff 	.word	0xffffb7ff

080041f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	@ 0x28
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	1dbb      	adds	r3, r7, #6
 80041fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2288      	movs	r2, #136	@ 0x88
 8004204:	589b      	ldr	r3, [r3, r2]
 8004206:	2b20      	cmp	r3, #32
 8004208:	d000      	beq.n	800420c <HAL_UART_Transmit+0x1c>
 800420a:	e090      	b.n	800432e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_UART_Transmit+0x2a>
 8004212:	1dbb      	adds	r3, r7, #6
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e088      	b.n	8004330 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	2380      	movs	r3, #128	@ 0x80
 8004224:	015b      	lsls	r3, r3, #5
 8004226:	429a      	cmp	r2, r3
 8004228:	d109      	bne.n	800423e <HAL_UART_Transmit+0x4e>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d105      	bne.n	800423e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2201      	movs	r2, #1
 8004236:	4013      	ands	r3, r2
 8004238:	d001      	beq.n	800423e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e078      	b.n	8004330 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2290      	movs	r2, #144	@ 0x90
 8004242:	2100      	movs	r1, #0
 8004244:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2288      	movs	r2, #136	@ 0x88
 800424a:	2121      	movs	r1, #33	@ 0x21
 800424c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800424e:	f7fc ffef 	bl	8001230 <HAL_GetTick>
 8004252:	0003      	movs	r3, r0
 8004254:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1dba      	adds	r2, r7, #6
 800425a:	2154      	movs	r1, #84	@ 0x54
 800425c:	8812      	ldrh	r2, [r2, #0]
 800425e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	1dba      	adds	r2, r7, #6
 8004264:	2156      	movs	r1, #86	@ 0x56
 8004266:	8812      	ldrh	r2, [r2, #0]
 8004268:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	2380      	movs	r3, #128	@ 0x80
 8004270:	015b      	lsls	r3, r3, #5
 8004272:	429a      	cmp	r2, r3
 8004274:	d108      	bne.n	8004288 <HAL_UART_Transmit+0x98>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	e003      	b.n	8004290 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004290:	e030      	b.n	80042f4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	0013      	movs	r3, r2
 800429c:	2200      	movs	r2, #0
 800429e:	2180      	movs	r1, #128	@ 0x80
 80042a0:	f000 fcd8 	bl	8004c54 <UART_WaitOnFlagUntilTimeout>
 80042a4:	1e03      	subs	r3, r0, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2288      	movs	r2, #136	@ 0x88
 80042ac:	2120      	movs	r1, #32
 80042ae:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e03d      	b.n	8004330 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	001a      	movs	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	05d2      	lsls	r2, r2, #23
 80042c6:	0dd2      	lsrs	r2, r2, #23
 80042c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	3302      	adds	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	e007      	b.n	80042e2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	3301      	adds	r3, #1
 80042e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2256      	movs	r2, #86	@ 0x56
 80042e6:	5a9b      	ldrh	r3, [r3, r2]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b299      	uxth	r1, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2256      	movs	r2, #86	@ 0x56
 80042f2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2256      	movs	r2, #86	@ 0x56
 80042f8:	5a9b      	ldrh	r3, [r3, r2]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1c8      	bne.n	8004292 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	0013      	movs	r3, r2
 800430a:	2200      	movs	r2, #0
 800430c:	2140      	movs	r1, #64	@ 0x40
 800430e:	f000 fca1 	bl	8004c54 <UART_WaitOnFlagUntilTimeout>
 8004312:	1e03      	subs	r3, r0, #0
 8004314:	d005      	beq.n	8004322 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2288      	movs	r2, #136	@ 0x88
 800431a:	2120      	movs	r1, #32
 800431c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e006      	b.n	8004330 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2288      	movs	r2, #136	@ 0x88
 8004326:	2120      	movs	r1, #32
 8004328:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b008      	add	sp, #32
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	1dbb      	adds	r3, r7, #6
 8004344:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	228c      	movs	r2, #140	@ 0x8c
 800434a:	589b      	ldr	r3, [r3, r2]
 800434c:	2b20      	cmp	r3, #32
 800434e:	d14a      	bne.n	80043e6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_UART_Receive_IT+0x26>
 8004356:	1dbb      	adds	r3, r7, #6
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e042      	b.n	80043e8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	2380      	movs	r3, #128	@ 0x80
 8004368:	015b      	lsls	r3, r3, #5
 800436a:	429a      	cmp	r2, r3
 800436c:	d109      	bne.n	8004382 <HAL_UART_Receive_IT+0x4a>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d105      	bne.n	8004382 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2201      	movs	r2, #1
 800437a:	4013      	ands	r3, r2
 800437c:	d001      	beq.n	8004382 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e032      	b.n	80043e8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a18      	ldr	r2, [pc, #96]	@ (80043f0 <HAL_UART_Receive_IT+0xb8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d020      	beq.n	80043d4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	2380      	movs	r3, #128	@ 0x80
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	4013      	ands	r3, r2
 800439e:	d019      	beq.n	80043d4 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a0:	f3ef 8310 	mrs	r3, PRIMASK
 80043a4:	613b      	str	r3, [r7, #16]
  return(result);
 80043a6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	2301      	movs	r3, #1
 80043ac:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f383 8810 	msr	PRIMASK, r3
}
 80043b4:	46c0      	nop			@ (mov r8, r8)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2180      	movs	r1, #128	@ 0x80
 80043c2:	04c9      	lsls	r1, r1, #19
 80043c4:	430a      	orrs	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f383 8810 	msr	PRIMASK, r3
}
 80043d2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043d4:	1dbb      	adds	r3, r7, #6
 80043d6:	881a      	ldrh	r2, [r3, #0]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0018      	movs	r0, r3
 80043de:	f000 fca9 	bl	8004d34 <UART_Start_Receive_IT>
 80043e2:	0003      	movs	r3, r0
 80043e4:	e000      	b.n	80043e8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
  }
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b008      	add	sp, #32
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40008000 	.word	0x40008000

080043f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043fc:	46c0      	nop			@ (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b002      	add	sp, #8
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	000a      	movs	r2, r1
 800440e:	1cbb      	adds	r3, r7, #2
 8004410:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	46bd      	mov	sp, r7
 8004416:	b002      	add	sp, #8
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800441c:	b5b0      	push	{r4, r5, r7, lr}
 800441e:	b090      	sub	sp, #64	@ 0x40
 8004420:	af00      	add	r7, sp, #0
 8004422:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004424:	231a      	movs	r3, #26
 8004426:	2220      	movs	r2, #32
 8004428:	189b      	adds	r3, r3, r2
 800442a:	19db      	adds	r3, r3, r7
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	431a      	orrs	r2, r3
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	431a      	orrs	r2, r3
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4313      	orrs	r3, r2
 8004446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4aaf      	ldr	r2, [pc, #700]	@ (800470c <UART_SetConfig+0x2f0>)
 8004450:	4013      	ands	r3, r2
 8004452:	0019      	movs	r1, r3
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445a:	430b      	orrs	r3, r1
 800445c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4aaa      	ldr	r2, [pc, #680]	@ (8004710 <UART_SetConfig+0x2f4>)
 8004466:	4013      	ands	r3, r2
 8004468:	0018      	movs	r0, r3
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	68d9      	ldr	r1, [r3, #12]
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	0003      	movs	r3, r0
 8004474:	430b      	orrs	r3, r1
 8004476:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4aa4      	ldr	r2, [pc, #656]	@ (8004714 <UART_SetConfig+0x2f8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800448e:	4313      	orrs	r3, r2
 8004490:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4a9f      	ldr	r2, [pc, #636]	@ (8004718 <UART_SetConfig+0x2fc>)
 800449a:	4013      	ands	r3, r2
 800449c:	0019      	movs	r1, r3
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	220f      	movs	r2, #15
 80044b0:	4393      	bics	r3, r2
 80044b2:	0018      	movs	r0, r3
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	0003      	movs	r3, r0
 80044be:	430b      	orrs	r3, r1
 80044c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a95      	ldr	r2, [pc, #596]	@ (800471c <UART_SetConfig+0x300>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d131      	bne.n	8004530 <UART_SetConfig+0x114>
 80044cc:	4b94      	ldr	r3, [pc, #592]	@ (8004720 <UART_SetConfig+0x304>)
 80044ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d0:	2203      	movs	r2, #3
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d01d      	beq.n	8004514 <UART_SetConfig+0xf8>
 80044d8:	d823      	bhi.n	8004522 <UART_SetConfig+0x106>
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d00c      	beq.n	80044f8 <UART_SetConfig+0xdc>
 80044de:	d820      	bhi.n	8004522 <UART_SetConfig+0x106>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <UART_SetConfig+0xce>
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d00e      	beq.n	8004506 <UART_SetConfig+0xea>
 80044e8:	e01b      	b.n	8004522 <UART_SetConfig+0x106>
 80044ea:	231b      	movs	r3, #27
 80044ec:	2220      	movs	r2, #32
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	19db      	adds	r3, r3, r7
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	e0b4      	b.n	8004662 <UART_SetConfig+0x246>
 80044f8:	231b      	movs	r3, #27
 80044fa:	2220      	movs	r2, #32
 80044fc:	189b      	adds	r3, r3, r2
 80044fe:	19db      	adds	r3, r3, r7
 8004500:	2202      	movs	r2, #2
 8004502:	701a      	strb	r2, [r3, #0]
 8004504:	e0ad      	b.n	8004662 <UART_SetConfig+0x246>
 8004506:	231b      	movs	r3, #27
 8004508:	2220      	movs	r2, #32
 800450a:	189b      	adds	r3, r3, r2
 800450c:	19db      	adds	r3, r3, r7
 800450e:	2204      	movs	r2, #4
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	e0a6      	b.n	8004662 <UART_SetConfig+0x246>
 8004514:	231b      	movs	r3, #27
 8004516:	2220      	movs	r2, #32
 8004518:	189b      	adds	r3, r3, r2
 800451a:	19db      	adds	r3, r3, r7
 800451c:	2208      	movs	r2, #8
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	e09f      	b.n	8004662 <UART_SetConfig+0x246>
 8004522:	231b      	movs	r3, #27
 8004524:	2220      	movs	r2, #32
 8004526:	189b      	adds	r3, r3, r2
 8004528:	19db      	adds	r3, r3, r7
 800452a:	2210      	movs	r2, #16
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	e098      	b.n	8004662 <UART_SetConfig+0x246>
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a7b      	ldr	r2, [pc, #492]	@ (8004724 <UART_SetConfig+0x308>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d131      	bne.n	800459e <UART_SetConfig+0x182>
 800453a:	4b79      	ldr	r3, [pc, #484]	@ (8004720 <UART_SetConfig+0x304>)
 800453c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453e:	220c      	movs	r2, #12
 8004540:	4013      	ands	r3, r2
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d01d      	beq.n	8004582 <UART_SetConfig+0x166>
 8004546:	d823      	bhi.n	8004590 <UART_SetConfig+0x174>
 8004548:	2b08      	cmp	r3, #8
 800454a:	d00c      	beq.n	8004566 <UART_SetConfig+0x14a>
 800454c:	d820      	bhi.n	8004590 <UART_SetConfig+0x174>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <UART_SetConfig+0x13c>
 8004552:	2b04      	cmp	r3, #4
 8004554:	d00e      	beq.n	8004574 <UART_SetConfig+0x158>
 8004556:	e01b      	b.n	8004590 <UART_SetConfig+0x174>
 8004558:	231b      	movs	r3, #27
 800455a:	2220      	movs	r2, #32
 800455c:	189b      	adds	r3, r3, r2
 800455e:	19db      	adds	r3, r3, r7
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	e07d      	b.n	8004662 <UART_SetConfig+0x246>
 8004566:	231b      	movs	r3, #27
 8004568:	2220      	movs	r2, #32
 800456a:	189b      	adds	r3, r3, r2
 800456c:	19db      	adds	r3, r3, r7
 800456e:	2202      	movs	r2, #2
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e076      	b.n	8004662 <UART_SetConfig+0x246>
 8004574:	231b      	movs	r3, #27
 8004576:	2220      	movs	r2, #32
 8004578:	189b      	adds	r3, r3, r2
 800457a:	19db      	adds	r3, r3, r7
 800457c:	2204      	movs	r2, #4
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e06f      	b.n	8004662 <UART_SetConfig+0x246>
 8004582:	231b      	movs	r3, #27
 8004584:	2220      	movs	r2, #32
 8004586:	189b      	adds	r3, r3, r2
 8004588:	19db      	adds	r3, r3, r7
 800458a:	2208      	movs	r2, #8
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	e068      	b.n	8004662 <UART_SetConfig+0x246>
 8004590:	231b      	movs	r3, #27
 8004592:	2220      	movs	r2, #32
 8004594:	189b      	adds	r3, r3, r2
 8004596:	19db      	adds	r3, r3, r7
 8004598:	2210      	movs	r2, #16
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e061      	b.n	8004662 <UART_SetConfig+0x246>
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a61      	ldr	r2, [pc, #388]	@ (8004728 <UART_SetConfig+0x30c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d106      	bne.n	80045b6 <UART_SetConfig+0x19a>
 80045a8:	231b      	movs	r3, #27
 80045aa:	2220      	movs	r2, #32
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	19db      	adds	r3, r3, r7
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e055      	b.n	8004662 <UART_SetConfig+0x246>
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a5c      	ldr	r2, [pc, #368]	@ (800472c <UART_SetConfig+0x310>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d106      	bne.n	80045ce <UART_SetConfig+0x1b2>
 80045c0:	231b      	movs	r3, #27
 80045c2:	2220      	movs	r2, #32
 80045c4:	189b      	adds	r3, r3, r2
 80045c6:	19db      	adds	r3, r3, r7
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
 80045cc:	e049      	b.n	8004662 <UART_SetConfig+0x246>
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a50      	ldr	r2, [pc, #320]	@ (8004714 <UART_SetConfig+0x2f8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d13e      	bne.n	8004656 <UART_SetConfig+0x23a>
 80045d8:	4b51      	ldr	r3, [pc, #324]	@ (8004720 <UART_SetConfig+0x304>)
 80045da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045dc:	23c0      	movs	r3, #192	@ 0xc0
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	4013      	ands	r3, r2
 80045e2:	22c0      	movs	r2, #192	@ 0xc0
 80045e4:	0112      	lsls	r2, r2, #4
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d027      	beq.n	800463a <UART_SetConfig+0x21e>
 80045ea:	22c0      	movs	r2, #192	@ 0xc0
 80045ec:	0112      	lsls	r2, r2, #4
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d82a      	bhi.n	8004648 <UART_SetConfig+0x22c>
 80045f2:	2280      	movs	r2, #128	@ 0x80
 80045f4:	0112      	lsls	r2, r2, #4
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d011      	beq.n	800461e <UART_SetConfig+0x202>
 80045fa:	2280      	movs	r2, #128	@ 0x80
 80045fc:	0112      	lsls	r2, r2, #4
 80045fe:	4293      	cmp	r3, r2
 8004600:	d822      	bhi.n	8004648 <UART_SetConfig+0x22c>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <UART_SetConfig+0x1f4>
 8004606:	2280      	movs	r2, #128	@ 0x80
 8004608:	00d2      	lsls	r2, r2, #3
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <UART_SetConfig+0x210>
 800460e:	e01b      	b.n	8004648 <UART_SetConfig+0x22c>
 8004610:	231b      	movs	r3, #27
 8004612:	2220      	movs	r2, #32
 8004614:	189b      	adds	r3, r3, r2
 8004616:	19db      	adds	r3, r3, r7
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	e021      	b.n	8004662 <UART_SetConfig+0x246>
 800461e:	231b      	movs	r3, #27
 8004620:	2220      	movs	r2, #32
 8004622:	189b      	adds	r3, r3, r2
 8004624:	19db      	adds	r3, r3, r7
 8004626:	2202      	movs	r2, #2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e01a      	b.n	8004662 <UART_SetConfig+0x246>
 800462c:	231b      	movs	r3, #27
 800462e:	2220      	movs	r2, #32
 8004630:	189b      	adds	r3, r3, r2
 8004632:	19db      	adds	r3, r3, r7
 8004634:	2204      	movs	r2, #4
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e013      	b.n	8004662 <UART_SetConfig+0x246>
 800463a:	231b      	movs	r3, #27
 800463c:	2220      	movs	r2, #32
 800463e:	189b      	adds	r3, r3, r2
 8004640:	19db      	adds	r3, r3, r7
 8004642:	2208      	movs	r2, #8
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e00c      	b.n	8004662 <UART_SetConfig+0x246>
 8004648:	231b      	movs	r3, #27
 800464a:	2220      	movs	r2, #32
 800464c:	189b      	adds	r3, r3, r2
 800464e:	19db      	adds	r3, r3, r7
 8004650:	2210      	movs	r2, #16
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e005      	b.n	8004662 <UART_SetConfig+0x246>
 8004656:	231b      	movs	r3, #27
 8004658:	2220      	movs	r2, #32
 800465a:	189b      	adds	r3, r3, r2
 800465c:	19db      	adds	r3, r3, r7
 800465e:	2210      	movs	r2, #16
 8004660:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2b      	ldr	r2, [pc, #172]	@ (8004714 <UART_SetConfig+0x2f8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d000      	beq.n	800466e <UART_SetConfig+0x252>
 800466c:	e0a9      	b.n	80047c2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800466e:	231b      	movs	r3, #27
 8004670:	2220      	movs	r2, #32
 8004672:	189b      	adds	r3, r3, r2
 8004674:	19db      	adds	r3, r3, r7
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d015      	beq.n	80046a8 <UART_SetConfig+0x28c>
 800467c:	dc18      	bgt.n	80046b0 <UART_SetConfig+0x294>
 800467e:	2b04      	cmp	r3, #4
 8004680:	d00d      	beq.n	800469e <UART_SetConfig+0x282>
 8004682:	dc15      	bgt.n	80046b0 <UART_SetConfig+0x294>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <UART_SetConfig+0x272>
 8004688:	2b02      	cmp	r3, #2
 800468a:	d005      	beq.n	8004698 <UART_SetConfig+0x27c>
 800468c:	e010      	b.n	80046b0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468e:	f7fe fcc9 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8004692:	0003      	movs	r3, r0
 8004694:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004696:	e014      	b.n	80046c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004698:	4b25      	ldr	r3, [pc, #148]	@ (8004730 <UART_SetConfig+0x314>)
 800469a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800469c:	e011      	b.n	80046c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800469e:	f7fe fc35 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 80046a2:	0003      	movs	r3, r0
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046a6:	e00c      	b.n	80046c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046ae:	e008      	b.n	80046c2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80046b4:	231a      	movs	r3, #26
 80046b6:	2220      	movs	r2, #32
 80046b8:	189b      	adds	r3, r3, r2
 80046ba:	19db      	adds	r3, r3, r7
 80046bc:	2201      	movs	r2, #1
 80046be:	701a      	strb	r2, [r3, #0]
        break;
 80046c0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d100      	bne.n	80046ca <UART_SetConfig+0x2ae>
 80046c8:	e14b      	b.n	8004962 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ce:	4b19      	ldr	r3, [pc, #100]	@ (8004734 <UART_SetConfig+0x318>)
 80046d0:	0052      	lsls	r2, r2, #1
 80046d2:	5ad3      	ldrh	r3, [r2, r3]
 80046d4:	0019      	movs	r1, r3
 80046d6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80046d8:	f7fb fd1e 	bl	8000118 <__udivsi3>
 80046dc:	0003      	movs	r3, r0
 80046de:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	0013      	movs	r3, r2
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	189b      	adds	r3, r3, r2
 80046ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d305      	bcc.n	80046fc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d91d      	bls.n	8004738 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80046fc:	231a      	movs	r3, #26
 80046fe:	2220      	movs	r2, #32
 8004700:	189b      	adds	r3, r3, r2
 8004702:	19db      	adds	r3, r3, r7
 8004704:	2201      	movs	r2, #1
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e12b      	b.n	8004962 <UART_SetConfig+0x546>
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	cfff69f3 	.word	0xcfff69f3
 8004710:	ffffcfff 	.word	0xffffcfff
 8004714:	40008000 	.word	0x40008000
 8004718:	11fff4ff 	.word	0x11fff4ff
 800471c:	40013800 	.word	0x40013800
 8004720:	40021000 	.word	0x40021000
 8004724:	40004400 	.word	0x40004400
 8004728:	40004800 	.word	0x40004800
 800472c:	40004c00 	.word	0x40004c00
 8004730:	00f42400 	.word	0x00f42400
 8004734:	08006700 	.word	0x08006700
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004744:	4b92      	ldr	r3, [pc, #584]	@ (8004990 <UART_SetConfig+0x574>)
 8004746:	0052      	lsls	r2, r2, #1
 8004748:	5ad3      	ldrh	r3, [r2, r3]
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	69b8      	ldr	r0, [r7, #24]
 8004756:	69f9      	ldr	r1, [r7, #28]
 8004758:	f7fb fe54 	bl	8000404 <__aeabi_uldivmod>
 800475c:	0002      	movs	r2, r0
 800475e:	000b      	movs	r3, r1
 8004760:	0e11      	lsrs	r1, r2, #24
 8004762:	021d      	lsls	r5, r3, #8
 8004764:	430d      	orrs	r5, r1
 8004766:	0214      	lsls	r4, r2, #8
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68b8      	ldr	r0, [r7, #8]
 8004776:	68f9      	ldr	r1, [r7, #12]
 8004778:	1900      	adds	r0, r0, r4
 800477a:	4169      	adcs	r1, r5
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f7fb fe3b 	bl	8000404 <__aeabi_uldivmod>
 800478e:	0002      	movs	r2, r0
 8004790:	000b      	movs	r3, r1
 8004792:	0013      	movs	r3, r2
 8004794:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004798:	23c0      	movs	r3, #192	@ 0xc0
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	429a      	cmp	r2, r3
 800479e:	d309      	bcc.n	80047b4 <UART_SetConfig+0x398>
 80047a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a2:	2380      	movs	r3, #128	@ 0x80
 80047a4:	035b      	lsls	r3, r3, #13
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d204      	bcs.n	80047b4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	e0d6      	b.n	8004962 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80047b4:	231a      	movs	r3, #26
 80047b6:	2220      	movs	r2, #32
 80047b8:	189b      	adds	r3, r3, r2
 80047ba:	19db      	adds	r3, r3, r7
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	e0cf      	b.n	8004962 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	2380      	movs	r3, #128	@ 0x80
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d000      	beq.n	80047d0 <UART_SetConfig+0x3b4>
 80047ce:	e070      	b.n	80048b2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80047d0:	231b      	movs	r3, #27
 80047d2:	2220      	movs	r2, #32
 80047d4:	189b      	adds	r3, r3, r2
 80047d6:	19db      	adds	r3, r3, r7
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d015      	beq.n	800480a <UART_SetConfig+0x3ee>
 80047de:	dc18      	bgt.n	8004812 <UART_SetConfig+0x3f6>
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d00d      	beq.n	8004800 <UART_SetConfig+0x3e4>
 80047e4:	dc15      	bgt.n	8004812 <UART_SetConfig+0x3f6>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <UART_SetConfig+0x3d4>
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d005      	beq.n	80047fa <UART_SetConfig+0x3de>
 80047ee:	e010      	b.n	8004812 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f0:	f7fe fc18 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 80047f4:	0003      	movs	r3, r0
 80047f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047f8:	e014      	b.n	8004824 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047fa:	4b66      	ldr	r3, [pc, #408]	@ (8004994 <UART_SetConfig+0x578>)
 80047fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047fe:	e011      	b.n	8004824 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004800:	f7fe fb84 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8004804:	0003      	movs	r3, r0
 8004806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004808:	e00c      	b.n	8004824 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480a:	2380      	movs	r3, #128	@ 0x80
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004810:	e008      	b.n	8004824 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004816:	231a      	movs	r3, #26
 8004818:	2220      	movs	r2, #32
 800481a:	189b      	adds	r3, r3, r2
 800481c:	19db      	adds	r3, r3, r7
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
        break;
 8004822:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004826:	2b00      	cmp	r3, #0
 8004828:	d100      	bne.n	800482c <UART_SetConfig+0x410>
 800482a:	e09a      	b.n	8004962 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004830:	4b57      	ldr	r3, [pc, #348]	@ (8004990 <UART_SetConfig+0x574>)
 8004832:	0052      	lsls	r2, r2, #1
 8004834:	5ad3      	ldrh	r3, [r2, r3]
 8004836:	0019      	movs	r1, r3
 8004838:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800483a:	f7fb fc6d 	bl	8000118 <__udivsi3>
 800483e:	0003      	movs	r3, r0
 8004840:	005a      	lsls	r2, r3, #1
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	18d2      	adds	r2, r2, r3
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	0019      	movs	r1, r3
 8004850:	0010      	movs	r0, r2
 8004852:	f7fb fc61 	bl	8000118 <__udivsi3>
 8004856:	0003      	movs	r3, r0
 8004858:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800485a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485c:	2b0f      	cmp	r3, #15
 800485e:	d921      	bls.n	80048a4 <UART_SetConfig+0x488>
 8004860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004862:	2380      	movs	r3, #128	@ 0x80
 8004864:	025b      	lsls	r3, r3, #9
 8004866:	429a      	cmp	r2, r3
 8004868:	d21c      	bcs.n	80048a4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	b29a      	uxth	r2, r3
 800486e:	200e      	movs	r0, #14
 8004870:	2420      	movs	r4, #32
 8004872:	1903      	adds	r3, r0, r4
 8004874:	19db      	adds	r3, r3, r7
 8004876:	210f      	movs	r1, #15
 8004878:	438a      	bics	r2, r1
 800487a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800487c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487e:	085b      	lsrs	r3, r3, #1
 8004880:	b29b      	uxth	r3, r3
 8004882:	2207      	movs	r2, #7
 8004884:	4013      	ands	r3, r2
 8004886:	b299      	uxth	r1, r3
 8004888:	1903      	adds	r3, r0, r4
 800488a:	19db      	adds	r3, r3, r7
 800488c:	1902      	adds	r2, r0, r4
 800488e:	19d2      	adds	r2, r2, r7
 8004890:	8812      	ldrh	r2, [r2, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	1902      	adds	r2, r0, r4
 800489c:	19d2      	adds	r2, r2, r7
 800489e:	8812      	ldrh	r2, [r2, #0]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	e05e      	b.n	8004962 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80048a4:	231a      	movs	r3, #26
 80048a6:	2220      	movs	r2, #32
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	19db      	adds	r3, r3, r7
 80048ac:	2201      	movs	r2, #1
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	e057      	b.n	8004962 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048b2:	231b      	movs	r3, #27
 80048b4:	2220      	movs	r2, #32
 80048b6:	189b      	adds	r3, r3, r2
 80048b8:	19db      	adds	r3, r3, r7
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d015      	beq.n	80048ec <UART_SetConfig+0x4d0>
 80048c0:	dc18      	bgt.n	80048f4 <UART_SetConfig+0x4d8>
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d00d      	beq.n	80048e2 <UART_SetConfig+0x4c6>
 80048c6:	dc15      	bgt.n	80048f4 <UART_SetConfig+0x4d8>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <UART_SetConfig+0x4b6>
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d005      	beq.n	80048dc <UART_SetConfig+0x4c0>
 80048d0:	e010      	b.n	80048f4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d2:	f7fe fba7 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 80048d6:	0003      	movs	r3, r0
 80048d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048da:	e014      	b.n	8004906 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004994 <UART_SetConfig+0x578>)
 80048de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048e0:	e011      	b.n	8004906 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e2:	f7fe fb13 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 80048e6:	0003      	movs	r3, r0
 80048e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048ea:	e00c      	b.n	8004906 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ec:	2380      	movs	r3, #128	@ 0x80
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048f2:	e008      	b.n	8004906 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80048f8:	231a      	movs	r3, #26
 80048fa:	2220      	movs	r2, #32
 80048fc:	189b      	adds	r3, r3, r2
 80048fe:	19db      	adds	r3, r3, r7
 8004900:	2201      	movs	r2, #1
 8004902:	701a      	strb	r2, [r3, #0]
        break;
 8004904:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004908:	2b00      	cmp	r3, #0
 800490a:	d02a      	beq.n	8004962 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004910:	4b1f      	ldr	r3, [pc, #124]	@ (8004990 <UART_SetConfig+0x574>)
 8004912:	0052      	lsls	r2, r2, #1
 8004914:	5ad3      	ldrh	r3, [r2, r3]
 8004916:	0019      	movs	r1, r3
 8004918:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800491a:	f7fb fbfd 	bl	8000118 <__udivsi3>
 800491e:	0003      	movs	r3, r0
 8004920:	001a      	movs	r2, r3
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	18d2      	adds	r2, r2, r3
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	0019      	movs	r1, r3
 8004930:	0010      	movs	r0, r2
 8004932:	f7fb fbf1 	bl	8000118 <__udivsi3>
 8004936:	0003      	movs	r3, r0
 8004938:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	2b0f      	cmp	r3, #15
 800493e:	d90a      	bls.n	8004956 <UART_SetConfig+0x53a>
 8004940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	025b      	lsls	r3, r3, #9
 8004946:	429a      	cmp	r2, r3
 8004948:	d205      	bcs.n	8004956 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	b29a      	uxth	r2, r3
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60da      	str	r2, [r3, #12]
 8004954:	e005      	b.n	8004962 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004956:	231a      	movs	r3, #26
 8004958:	2220      	movs	r2, #32
 800495a:	189b      	adds	r3, r3, r2
 800495c:	19db      	adds	r3, r3, r7
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	226a      	movs	r2, #106	@ 0x6a
 8004966:	2101      	movs	r1, #1
 8004968:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	2268      	movs	r2, #104	@ 0x68
 800496e:	2101      	movs	r1, #1
 8004970:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	2200      	movs	r2, #0
 8004976:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	2200      	movs	r2, #0
 800497c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800497e:	231a      	movs	r3, #26
 8004980:	2220      	movs	r2, #32
 8004982:	189b      	adds	r3, r3, r2
 8004984:	19db      	adds	r3, r3, r7
 8004986:	781b      	ldrb	r3, [r3, #0]
}
 8004988:	0018      	movs	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	b010      	add	sp, #64	@ 0x40
 800498e:	bdb0      	pop	{r4, r5, r7, pc}
 8004990:	08006700 	.word	0x08006700
 8004994:	00f42400 	.word	0x00f42400

08004998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	2208      	movs	r2, #8
 80049a6:	4013      	ands	r3, r2
 80049a8:	d00b      	beq.n	80049c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a4a      	ldr	r2, [pc, #296]	@ (8004adc <UART_AdvFeatureConfig+0x144>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c6:	2201      	movs	r2, #1
 80049c8:	4013      	ands	r3, r2
 80049ca:	d00b      	beq.n	80049e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4a43      	ldr	r2, [pc, #268]	@ (8004ae0 <UART_AdvFeatureConfig+0x148>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	0019      	movs	r1, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e8:	2202      	movs	r2, #2
 80049ea:	4013      	ands	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ae4 <UART_AdvFeatureConfig+0x14c>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	0019      	movs	r1, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4a34      	ldr	r2, [pc, #208]	@ (8004ae8 <UART_AdvFeatureConfig+0x150>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	0019      	movs	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d00b      	beq.n	8004a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a2c      	ldr	r2, [pc, #176]	@ (8004aec <UART_AdvFeatureConfig+0x154>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	2220      	movs	r2, #32
 8004a50:	4013      	ands	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4a25      	ldr	r2, [pc, #148]	@ (8004af0 <UART_AdvFeatureConfig+0x158>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	2240      	movs	r2, #64	@ 0x40
 8004a72:	4013      	ands	r3, r2
 8004a74:	d01d      	beq.n	8004ab2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <UART_AdvFeatureConfig+0x15c>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	035b      	lsls	r3, r3, #13
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d10b      	bne.n	8004ab2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <UART_AdvFeatureConfig+0x160>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	2280      	movs	r2, #128	@ 0x80
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8004afc <UART_AdvFeatureConfig+0x164>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }
}
 8004ad4:	46c0      	nop			@ (mov r8, r8)
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b002      	add	sp, #8
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	ffff7fff 	.word	0xffff7fff
 8004ae0:	fffdffff 	.word	0xfffdffff
 8004ae4:	fffeffff 	.word	0xfffeffff
 8004ae8:	fffbffff 	.word	0xfffbffff
 8004aec:	ffffefff 	.word	0xffffefff
 8004af0:	ffffdfff 	.word	0xffffdfff
 8004af4:	ffefffff 	.word	0xffefffff
 8004af8:	ff9fffff 	.word	0xff9fffff
 8004afc:	fff7ffff 	.word	0xfff7ffff

08004b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b092      	sub	sp, #72	@ 0x48
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2290      	movs	r2, #144	@ 0x90
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b10:	f7fc fb8e 	bl	8001230 <HAL_GetTick>
 8004b14:	0003      	movs	r3, r0
 8004b16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2208      	movs	r2, #8
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d12d      	bne.n	8004b82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b28:	2280      	movs	r2, #128	@ 0x80
 8004b2a:	0391      	lsls	r1, r2, #14
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	4a47      	ldr	r2, [pc, #284]	@ (8004c4c <UART_CheckIdleState+0x14c>)
 8004b30:	9200      	str	r2, [sp, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f000 f88e 	bl	8004c54 <UART_WaitOnFlagUntilTimeout>
 8004b38:	1e03      	subs	r3, r0, #0
 8004b3a:	d022      	beq.n	8004b82 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b46:	2301      	movs	r3, #1
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4c:	f383 8810 	msr	PRIMASK, r3
}
 8004b50:	46c0      	nop			@ (mov r8, r8)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2180      	movs	r1, #128	@ 0x80
 8004b5e:	438a      	bics	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b68:	f383 8810 	msr	PRIMASK, r3
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2288      	movs	r2, #136	@ 0x88
 8004b72:	2120      	movs	r1, #32
 8004b74:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2284      	movs	r2, #132	@ 0x84
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e060      	b.n	8004c44 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2204      	movs	r2, #4
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d146      	bne.n	8004c1e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b92:	2280      	movs	r2, #128	@ 0x80
 8004b94:	03d1      	lsls	r1, r2, #15
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4a2c      	ldr	r2, [pc, #176]	@ (8004c4c <UART_CheckIdleState+0x14c>)
 8004b9a:	9200      	str	r2, [sp, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f000 f859 	bl	8004c54 <UART_WaitOnFlagUntilTimeout>
 8004ba2:	1e03      	subs	r3, r0, #0
 8004ba4:	d03b      	beq.n	8004c1e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8004baa:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			@ (mov r8, r8)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4922      	ldr	r1, [pc, #136]	@ (8004c50 <UART_CheckIdleState+0x150>)
 8004bc8:	400a      	ands	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f383 8810 	msr	PRIMASK, r3
}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bde:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be2:	2301      	movs	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	46c0      	nop			@ (mov r8, r8)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	438a      	bics	r2, r1
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	f383 8810 	msr	PRIMASK, r3
}
 8004c08:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	228c      	movs	r2, #140	@ 0x8c
 8004c0e:	2120      	movs	r1, #32
 8004c10:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2284      	movs	r2, #132	@ 0x84
 8004c16:	2100      	movs	r1, #0
 8004c18:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e012      	b.n	8004c44 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2288      	movs	r2, #136	@ 0x88
 8004c22:	2120      	movs	r1, #32
 8004c24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	228c      	movs	r2, #140	@ 0x8c
 8004c2a:	2120      	movs	r1, #32
 8004c2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2284      	movs	r2, #132	@ 0x84
 8004c3e:	2100      	movs	r1, #0
 8004c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b010      	add	sp, #64	@ 0x40
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	01ffffff 	.word	0x01ffffff
 8004c50:	fffffedf 	.word	0xfffffedf

08004c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	1dfb      	adds	r3, r7, #7
 8004c62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c64:	e051      	b.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	d04e      	beq.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6c:	f7fc fae0 	bl	8001230 <HAL_GetTick>
 8004c70:	0002      	movs	r2, r0
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e051      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d03b      	beq.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b80      	cmp	r3, #128	@ 0x80
 8004c96:	d038      	beq.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d035      	beq.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d111      	bne.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f000 f960 	bl	8004f7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2290      	movs	r2, #144	@ 0x90
 8004cc0:	2108      	movs	r1, #8
 8004cc2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2284      	movs	r2, #132	@ 0x84
 8004cc8:	2100      	movs	r1, #0
 8004cca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e02c      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69da      	ldr	r2, [r3, #28]
 8004cd6:	2380      	movs	r3, #128	@ 0x80
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	401a      	ands	r2, r3
 8004cdc:	2380      	movs	r3, #128	@ 0x80
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d112      	bne.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2280      	movs	r2, #128	@ 0x80
 8004cea:	0112      	lsls	r2, r2, #4
 8004cec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f000 f943 	bl	8004f7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2290      	movs	r2, #144	@ 0x90
 8004cfa:	2120      	movs	r1, #32
 8004cfc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2284      	movs	r2, #132	@ 0x84
 8004d02:	2100      	movs	r1, #0
 8004d04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e00f      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	425a      	negs	r2, r3
 8004d1a:	4153      	adcs	r3, r2
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	001a      	movs	r2, r3
 8004d20:	1dfb      	adds	r3, r7, #7
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d09e      	beq.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b004      	add	sp, #16
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b098      	sub	sp, #96	@ 0x60
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	1dbb      	adds	r3, r7, #6
 8004d40:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1dba      	adds	r2, r7, #6
 8004d4c:	215c      	movs	r1, #92	@ 0x5c
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1dba      	adds	r2, r7, #6
 8004d56:	215e      	movs	r1, #94	@ 0x5e
 8004d58:	8812      	ldrh	r2, [r2, #0]
 8004d5a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	2380      	movs	r3, #128	@ 0x80
 8004d68:	015b      	lsls	r3, r3, #5
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d10d      	bne.n	8004d8a <UART_Start_Receive_IT+0x56>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d104      	bne.n	8004d80 <UART_Start_Receive_IT+0x4c>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2260      	movs	r2, #96	@ 0x60
 8004d7a:	497b      	ldr	r1, [pc, #492]	@ (8004f68 <UART_Start_Receive_IT+0x234>)
 8004d7c:	5299      	strh	r1, [r3, r2]
 8004d7e:	e02e      	b.n	8004dde <UART_Start_Receive_IT+0xaa>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2260      	movs	r2, #96	@ 0x60
 8004d84:	21ff      	movs	r1, #255	@ 0xff
 8004d86:	5299      	strh	r1, [r3, r2]
 8004d88:	e029      	b.n	8004dde <UART_Start_Receive_IT+0xaa>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10d      	bne.n	8004dae <UART_Start_Receive_IT+0x7a>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <UART_Start_Receive_IT+0x70>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2260      	movs	r2, #96	@ 0x60
 8004d9e:	21ff      	movs	r1, #255	@ 0xff
 8004da0:	5299      	strh	r1, [r3, r2]
 8004da2:	e01c      	b.n	8004dde <UART_Start_Receive_IT+0xaa>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2260      	movs	r2, #96	@ 0x60
 8004da8:	217f      	movs	r1, #127	@ 0x7f
 8004daa:	5299      	strh	r1, [r3, r2]
 8004dac:	e017      	b.n	8004dde <UART_Start_Receive_IT+0xaa>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	2380      	movs	r3, #128	@ 0x80
 8004db4:	055b      	lsls	r3, r3, #21
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d10d      	bne.n	8004dd6 <UART_Start_Receive_IT+0xa2>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <UART_Start_Receive_IT+0x98>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2260      	movs	r2, #96	@ 0x60
 8004dc6:	217f      	movs	r1, #127	@ 0x7f
 8004dc8:	5299      	strh	r1, [r3, r2]
 8004dca:	e008      	b.n	8004dde <UART_Start_Receive_IT+0xaa>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2260      	movs	r2, #96	@ 0x60
 8004dd0:	213f      	movs	r1, #63	@ 0x3f
 8004dd2:	5299      	strh	r1, [r3, r2]
 8004dd4:	e003      	b.n	8004dde <UART_Start_Receive_IT+0xaa>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2260      	movs	r2, #96	@ 0x60
 8004dda:	2100      	movs	r1, #0
 8004ddc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2290      	movs	r2, #144	@ 0x90
 8004de2:	2100      	movs	r1, #0
 8004de4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	228c      	movs	r2, #140	@ 0x8c
 8004dea:	2122      	movs	r1, #34	@ 0x22
 8004dec:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dee:	f3ef 8310 	mrs	r3, PRIMASK
 8004df2:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004df8:	2301      	movs	r3, #1
 8004dfa:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dfe:	f383 8810 	msr	PRIMASK, r3
}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2101      	movs	r1, #1
 8004e10:	430a      	orrs	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e16:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e1a:	f383 8810 	msr	PRIMASK, r3
}
 8004e1e:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004e24:	2380      	movs	r3, #128	@ 0x80
 8004e26:	059b      	lsls	r3, r3, #22
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d150      	bne.n	8004ece <UART_Start_Receive_IT+0x19a>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2268      	movs	r2, #104	@ 0x68
 8004e30:	5a9b      	ldrh	r3, [r3, r2]
 8004e32:	1dba      	adds	r2, r7, #6
 8004e34:	8812      	ldrh	r2, [r2, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d349      	bcc.n	8004ece <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	2380      	movs	r3, #128	@ 0x80
 8004e40:	015b      	lsls	r3, r3, #5
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d107      	bne.n	8004e56 <UART_Start_Receive_IT+0x122>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4a46      	ldr	r2, [pc, #280]	@ (8004f6c <UART_Start_Receive_IT+0x238>)
 8004e52:	675a      	str	r2, [r3, #116]	@ 0x74
 8004e54:	e002      	b.n	8004e5c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a45      	ldr	r2, [pc, #276]	@ (8004f70 <UART_Start_Receive_IT+0x23c>)
 8004e5a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d019      	beq.n	8004e98 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e64:	f3ef 8310 	mrs	r3, PRIMASK
 8004e68:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e6e:	2301      	movs	r3, #1
 8004e70:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e74:	f383 8810 	msr	PRIMASK, r3
}
 8004e78:	46c0      	nop			@ (mov r8, r8)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2180      	movs	r1, #128	@ 0x80
 8004e86:	0049      	lsls	r1, r1, #1
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e98:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ea0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea8:	f383 8810 	msr	PRIMASK, r3
}
 8004eac:	46c0      	nop			@ (mov r8, r8)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2180      	movs	r1, #128	@ 0x80
 8004eba:	0549      	lsls	r1, r1, #21
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	f383 8810 	msr	PRIMASK, r3
}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	e047      	b.n	8004f5e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	2380      	movs	r3, #128	@ 0x80
 8004ed4:	015b      	lsls	r3, r3, #5
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d107      	bne.n	8004eea <UART_Start_Receive_IT+0x1b6>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a23      	ldr	r2, [pc, #140]	@ (8004f74 <UART_Start_Receive_IT+0x240>)
 8004ee6:	675a      	str	r2, [r3, #116]	@ 0x74
 8004ee8:	e002      	b.n	8004ef0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a22      	ldr	r2, [pc, #136]	@ (8004f78 <UART_Start_Receive_IT+0x244>)
 8004eee:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d019      	beq.n	8004f2c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8004efc:	61fb      	str	r3, [r7, #28]
  return(result);
 8004efe:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f02:	2301      	movs	r3, #1
 8004f04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			@ (mov r8, r8)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2190      	movs	r1, #144	@ 0x90
 8004f1a:	0049      	lsls	r1, r1, #1
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	f383 8810 	msr	PRIMASK, r3
}
 8004f2a:	e018      	b.n	8004f5e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f30:	613b      	str	r3, [r7, #16]
  return(result);
 8004f32:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f34:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f36:	2301      	movs	r3, #1
 8004f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f383 8810 	msr	PRIMASK, r3
}
 8004f40:	46c0      	nop			@ (mov r8, r8)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2120      	movs	r1, #32
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f383 8810 	msr	PRIMASK, r3
}
 8004f5c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b018      	add	sp, #96	@ 0x60
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	000001ff 	.word	0x000001ff
 8004f6c:	08005711 	.word	0x08005711
 8004f70:	080053d1 	.word	0x080053d1
 8004f74:	0800520d 	.word	0x0800520d
 8004f78:	08005049 	.word	0x08005049

08004f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08e      	sub	sp, #56	@ 0x38
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f84:	f3ef 8310 	mrs	r3, PRIMASK
 8004f88:	617b      	str	r3, [r7, #20]
  return(result);
 8004f8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8e:	2301      	movs	r3, #1
 8004f90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f383 8810 	msr	PRIMASK, r3
}
 8004f98:	46c0      	nop			@ (mov r8, r8)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4926      	ldr	r1, [pc, #152]	@ (8005040 <UART_EndRxTransfer+0xc4>)
 8004fa6:	400a      	ands	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f383 8810 	msr	PRIMASK, r3
}
 8004fb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fba:	623b      	str	r3, [r7, #32]
  return(result);
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	f383 8810 	msr	PRIMASK, r3
}
 8004fca:	46c0      	nop			@ (mov r8, r8)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	491b      	ldr	r1, [pc, #108]	@ (8005044 <UART_EndRxTransfer+0xc8>)
 8004fd8:	400a      	ands	r2, r1
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe2:	f383 8810 	msr	PRIMASK, r3
}
 8004fe6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d118      	bne.n	8005022 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f383 8810 	msr	PRIMASK, r3
}
 8005004:	46c0      	nop			@ (mov r8, r8)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2110      	movs	r1, #16
 8005012:	438a      	bics	r2, r1
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005018:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f383 8810 	msr	PRIMASK, r3
}
 8005020:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	228c      	movs	r2, #140	@ 0x8c
 8005026:	2120      	movs	r1, #32
 8005028:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	46bd      	mov	sp, r7
 800503a:	b00e      	add	sp, #56	@ 0x38
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	fffffedf 	.word	0xfffffedf
 8005044:	effffffe 	.word	0xeffffffe

08005048 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b094      	sub	sp, #80	@ 0x50
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005050:	204e      	movs	r0, #78	@ 0x4e
 8005052:	183b      	adds	r3, r7, r0
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	2160      	movs	r1, #96	@ 0x60
 8005058:	5a52      	ldrh	r2, [r2, r1]
 800505a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	228c      	movs	r2, #140	@ 0x8c
 8005060:	589b      	ldr	r3, [r3, r2]
 8005062:	2b22      	cmp	r3, #34	@ 0x22
 8005064:	d000      	beq.n	8005068 <UART_RxISR_8BIT+0x20>
 8005066:	e0bf      	b.n	80051e8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800506e:	214c      	movs	r1, #76	@ 0x4c
 8005070:	187b      	adds	r3, r7, r1
 8005072:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005074:	187b      	adds	r3, r7, r1
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	183b      	adds	r3, r7, r0
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b2d9      	uxtb	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005084:	400a      	ands	r2, r1
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	225e      	movs	r2, #94	@ 0x5e
 8005098:	5a9b      	ldrh	r3, [r3, r2]
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b299      	uxth	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	225e      	movs	r2, #94	@ 0x5e
 80050a4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	225e      	movs	r2, #94	@ 0x5e
 80050aa:	5a9b      	ldrh	r3, [r3, r2]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d000      	beq.n	80050b4 <UART_RxISR_8BIT+0x6c>
 80050b2:	e0a1      	b.n	80051f8 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b4:	f3ef 8310 	mrs	r3, PRIMASK
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050be:	2301      	movs	r3, #1
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	46c0      	nop			@ (mov r8, r8)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	494a      	ldr	r1, [pc, #296]	@ (8005200 <UART_RxISR_8BIT+0x1b8>)
 80050d6:	400a      	ands	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80050f0:	2301      	movs	r3, #1
 80050f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f6:	f383 8810 	msr	PRIMASK, r3
}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2101      	movs	r1, #1
 8005108:	438a      	bics	r2, r1
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800510e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	228c      	movs	r2, #140	@ 0x8c
 800511c:	2120      	movs	r1, #32
 800511e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a34      	ldr	r2, [pc, #208]	@ (8005204 <UART_RxISR_8BIT+0x1bc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01f      	beq.n	8005176 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	2380      	movs	r3, #128	@ 0x80
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	4013      	ands	r3, r2
 8005142:	d018      	beq.n	8005176 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005144:	f3ef 8310 	mrs	r3, PRIMASK
 8005148:	61bb      	str	r3, [r7, #24]
  return(result);
 800514a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800514c:	643b      	str	r3, [r7, #64]	@ 0x40
 800514e:	2301      	movs	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f383 8810 	msr	PRIMASK, r3
}
 8005158:	46c0      	nop			@ (mov r8, r8)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4928      	ldr	r1, [pc, #160]	@ (8005208 <UART_RxISR_8BIT+0x1c0>)
 8005166:	400a      	ands	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800516c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f383 8810 	msr	PRIMASK, r3
}
 8005174:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800517a:	2b01      	cmp	r3, #1
 800517c:	d12f      	bne.n	80051de <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005184:	f3ef 8310 	mrs	r3, PRIMASK
 8005188:	60fb      	str	r3, [r7, #12]
  return(result);
 800518a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800518e:	2301      	movs	r3, #1
 8005190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f383 8810 	msr	PRIMASK, r3
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2110      	movs	r1, #16
 80051a6:	438a      	bics	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f383 8810 	msr	PRIMASK, r3
}
 80051b4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	2210      	movs	r2, #16
 80051be:	4013      	ands	r3, r2
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d103      	bne.n	80051cc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2210      	movs	r2, #16
 80051ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	225c      	movs	r2, #92	@ 0x5c
 80051d0:	5a9a      	ldrh	r2, [r3, r2]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0011      	movs	r1, r2
 80051d6:	0018      	movs	r0, r3
 80051d8:	f7ff f914 	bl	8004404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051dc:	e00c      	b.n	80051f8 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	0018      	movs	r0, r3
 80051e2:	f7fb fb7b 	bl	80008dc <HAL_UART_RxCpltCallback>
}
 80051e6:	e007      	b.n	80051f8 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2108      	movs	r1, #8
 80051f4:	430a      	orrs	r2, r1
 80051f6:	619a      	str	r2, [r3, #24]
}
 80051f8:	46c0      	nop			@ (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b014      	add	sp, #80	@ 0x50
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	fffffedf 	.word	0xfffffedf
 8005204:	40008000 	.word	0x40008000
 8005208:	fbffffff 	.word	0xfbffffff

0800520c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b094      	sub	sp, #80	@ 0x50
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005214:	204e      	movs	r0, #78	@ 0x4e
 8005216:	183b      	adds	r3, r7, r0
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	2160      	movs	r1, #96	@ 0x60
 800521c:	5a52      	ldrh	r2, [r2, r1]
 800521e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	228c      	movs	r2, #140	@ 0x8c
 8005224:	589b      	ldr	r3, [r3, r2]
 8005226:	2b22      	cmp	r3, #34	@ 0x22
 8005228:	d000      	beq.n	800522c <UART_RxISR_16BIT+0x20>
 800522a:	e0bf      	b.n	80053ac <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005232:	214c      	movs	r1, #76	@ 0x4c
 8005234:	187b      	adds	r3, r7, r1
 8005236:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800523e:	187b      	adds	r3, r7, r1
 8005240:	183a      	adds	r2, r7, r0
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	8812      	ldrh	r2, [r2, #0]
 8005246:	4013      	ands	r3, r2
 8005248:	b29a      	uxth	r2, r3
 800524a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800524c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005252:	1c9a      	adds	r2, r3, #2
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	225e      	movs	r2, #94	@ 0x5e
 800525c:	5a9b      	ldrh	r3, [r3, r2]
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b299      	uxth	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	225e      	movs	r2, #94	@ 0x5e
 8005268:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	225e      	movs	r2, #94	@ 0x5e
 800526e:	5a9b      	ldrh	r3, [r3, r2]
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d000      	beq.n	8005278 <UART_RxISR_16BIT+0x6c>
 8005276:	e0a1      	b.n	80053bc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005278:	f3ef 8310 	mrs	r3, PRIMASK
 800527c:	623b      	str	r3, [r7, #32]
  return(result);
 800527e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005280:	647b      	str	r3, [r7, #68]	@ 0x44
 8005282:	2301      	movs	r3, #1
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	f383 8810 	msr	PRIMASK, r3
}
 800528c:	46c0      	nop			@ (mov r8, r8)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	494a      	ldr	r1, [pc, #296]	@ (80053c4 <UART_RxISR_16BIT+0x1b8>)
 800529a:	400a      	ands	r2, r1
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a4:	f383 8810 	msr	PRIMASK, r3
}
 80052a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052aa:	f3ef 8310 	mrs	r3, PRIMASK
 80052ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80052b4:	2301      	movs	r3, #1
 80052b6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	f383 8810 	msr	PRIMASK, r3
}
 80052be:	46c0      	nop			@ (mov r8, r8)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2101      	movs	r1, #1
 80052cc:	438a      	bics	r2, r1
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d6:	f383 8810 	msr	PRIMASK, r3
}
 80052da:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	228c      	movs	r2, #140	@ 0x8c
 80052e0:	2120      	movs	r1, #32
 80052e2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a34      	ldr	r2, [pc, #208]	@ (80053c8 <UART_RxISR_16BIT+0x1bc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01f      	beq.n	800533a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	2380      	movs	r3, #128	@ 0x80
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	4013      	ands	r3, r2
 8005306:	d018      	beq.n	800533a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005308:	f3ef 8310 	mrs	r3, PRIMASK
 800530c:	617b      	str	r3, [r7, #20]
  return(result);
 800530e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005312:	2301      	movs	r3, #1
 8005314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			@ (mov r8, r8)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4928      	ldr	r1, [pc, #160]	@ (80053cc <UART_RxISR_16BIT+0x1c0>)
 800532a:	400a      	ands	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f383 8810 	msr	PRIMASK, r3
}
 8005338:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533e:	2b01      	cmp	r3, #1
 8005340:	d12f      	bne.n	80053a2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005348:	f3ef 8310 	mrs	r3, PRIMASK
 800534c:	60bb      	str	r3, [r7, #8]
  return(result);
 800534e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005350:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005352:	2301      	movs	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f383 8810 	msr	PRIMASK, r3
}
 800535c:	46c0      	nop			@ (mov r8, r8)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2110      	movs	r1, #16
 800536a:	438a      	bics	r2, r1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005370:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f383 8810 	msr	PRIMASK, r3
}
 8005378:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	2210      	movs	r2, #16
 8005382:	4013      	ands	r3, r2
 8005384:	2b10      	cmp	r3, #16
 8005386:	d103      	bne.n	8005390 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2210      	movs	r2, #16
 800538e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	225c      	movs	r2, #92	@ 0x5c
 8005394:	5a9a      	ldrh	r2, [r3, r2]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	0011      	movs	r1, r2
 800539a:	0018      	movs	r0, r3
 800539c:	f7ff f832 	bl	8004404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053a0:	e00c      	b.n	80053bc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f7fb fa99 	bl	80008dc <HAL_UART_RxCpltCallback>
}
 80053aa:	e007      	b.n	80053bc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2108      	movs	r1, #8
 80053b8:	430a      	orrs	r2, r1
 80053ba:	619a      	str	r2, [r3, #24]
}
 80053bc:	46c0      	nop			@ (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b014      	add	sp, #80	@ 0x50
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	fffffedf 	.word	0xfffffedf
 80053c8:	40008000 	.word	0x40008000
 80053cc:	fbffffff 	.word	0xfbffffff

080053d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b0a0      	sub	sp, #128	@ 0x80
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80053d8:	237a      	movs	r3, #122	@ 0x7a
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	2160      	movs	r1, #96	@ 0x60
 80053e0:	5a52      	ldrh	r2, [r2, r1]
 80053e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	228c      	movs	r2, #140	@ 0x8c
 8005400:	589b      	ldr	r3, [r3, r2]
 8005402:	2b22      	cmp	r3, #34	@ 0x22
 8005404:	d000      	beq.n	8005408 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005406:	e16a      	b.n	80056de <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005408:	236e      	movs	r3, #110	@ 0x6e
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	2168      	movs	r1, #104	@ 0x68
 8005410:	5a52      	ldrh	r2, [r2, r1]
 8005412:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005414:	e111      	b.n	800563a <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800541c:	216c      	movs	r1, #108	@ 0x6c
 800541e:	187b      	adds	r3, r7, r1
 8005420:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005422:	187b      	adds	r3, r7, r1
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	237a      	movs	r3, #122	@ 0x7a
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b2d9      	uxtb	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005434:	400a      	ands	r2, r1
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	225e      	movs	r2, #94	@ 0x5e
 8005448:	5a9b      	ldrh	r3, [r3, r2]
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b299      	uxth	r1, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	225e      	movs	r2, #94	@ 0x5e
 8005454:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800545e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005460:	2207      	movs	r2, #7
 8005462:	4013      	ands	r3, r2
 8005464:	d049      	beq.n	80054fa <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005466:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005468:	2201      	movs	r2, #1
 800546a:	4013      	ands	r3, r2
 800546c:	d010      	beq.n	8005490 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800546e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005470:	2380      	movs	r3, #128	@ 0x80
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	4013      	ands	r3, r2
 8005476:	d00b      	beq.n	8005490 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2201      	movs	r2, #1
 800547e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2290      	movs	r2, #144	@ 0x90
 8005484:	589b      	ldr	r3, [r3, r2]
 8005486:	2201      	movs	r2, #1
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2190      	movs	r1, #144	@ 0x90
 800548e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005490:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005492:	2202      	movs	r2, #2
 8005494:	4013      	ands	r3, r2
 8005496:	d00f      	beq.n	80054b8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005498:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800549a:	2201      	movs	r2, #1
 800549c:	4013      	ands	r3, r2
 800549e:	d00b      	beq.n	80054b8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2202      	movs	r2, #2
 80054a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2290      	movs	r2, #144	@ 0x90
 80054ac:	589b      	ldr	r3, [r3, r2]
 80054ae:	2204      	movs	r2, #4
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2190      	movs	r1, #144	@ 0x90
 80054b6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054ba:	2204      	movs	r2, #4
 80054bc:	4013      	ands	r3, r2
 80054be:	d00f      	beq.n	80054e0 <UART_RxISR_8BIT_FIFOEN+0x110>
 80054c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054c2:	2201      	movs	r2, #1
 80054c4:	4013      	ands	r3, r2
 80054c6:	d00b      	beq.n	80054e0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2204      	movs	r2, #4
 80054ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2290      	movs	r2, #144	@ 0x90
 80054d4:	589b      	ldr	r3, [r3, r2]
 80054d6:	2202      	movs	r2, #2
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2190      	movs	r1, #144	@ 0x90
 80054de:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2290      	movs	r2, #144	@ 0x90
 80054e4:	589b      	ldr	r3, [r3, r2]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7fe ff81 	bl	80043f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2290      	movs	r2, #144	@ 0x90
 80054f6:	2100      	movs	r1, #0
 80054f8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	225e      	movs	r2, #94	@ 0x5e
 80054fe:	5a9b      	ldrh	r3, [r3, r2]
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d000      	beq.n	8005508 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005506:	e098      	b.n	800563a <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005508:	f3ef 8310 	mrs	r3, PRIMASK
 800550c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800550e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005512:	2301      	movs	r3, #1
 8005514:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005518:	f383 8810 	msr	PRIMASK, r3
}
 800551c:	46c0      	nop			@ (mov r8, r8)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4973      	ldr	r1, [pc, #460]	@ (80056f8 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800552a:	400a      	ands	r2, r1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005530:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005534:	f383 8810 	msr	PRIMASK, r3
}
 8005538:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800553a:	f3ef 8310 	mrs	r3, PRIMASK
 800553e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005542:	667b      	str	r3, [r7, #100]	@ 0x64
 8005544:	2301      	movs	r3, #1
 8005546:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800554a:	f383 8810 	msr	PRIMASK, r3
}
 800554e:	46c0      	nop			@ (mov r8, r8)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4968      	ldr	r1, [pc, #416]	@ (80056fc <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800555c:	400a      	ands	r2, r1
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005562:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005566:	f383 8810 	msr	PRIMASK, r3
}
 800556a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	228c      	movs	r2, #140	@ 0x8c
 8005570:	2120      	movs	r1, #32
 8005572:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a5e      	ldr	r2, [pc, #376]	@ (8005700 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01f      	beq.n	80055ca <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	2380      	movs	r3, #128	@ 0x80
 8005592:	041b      	lsls	r3, r3, #16
 8005594:	4013      	ands	r3, r2
 8005596:	d018      	beq.n	80055ca <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005598:	f3ef 8310 	mrs	r3, PRIMASK
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800559e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055a2:	2301      	movs	r3, #1
 80055a4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	f383 8810 	msr	PRIMASK, r3
}
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4952      	ldr	r1, [pc, #328]	@ (8005704 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80055ba:	400a      	ands	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055c0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c4:	f383 8810 	msr	PRIMASK, r3
}
 80055c8:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d12f      	bne.n	8005632 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d8:	f3ef 8310 	mrs	r3, PRIMASK
 80055dc:	623b      	str	r3, [r7, #32]
  return(result);
 80055de:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055e2:	2301      	movs	r3, #1
 80055e4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	f383 8810 	msr	PRIMASK, r3
}
 80055ec:	46c0      	nop			@ (mov r8, r8)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2110      	movs	r1, #16
 80055fa:	438a      	bics	r2, r1
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005604:	f383 8810 	msr	PRIMASK, r3
}
 8005608:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	2210      	movs	r2, #16
 8005612:	4013      	ands	r3, r2
 8005614:	2b10      	cmp	r3, #16
 8005616:	d103      	bne.n	8005620 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2210      	movs	r2, #16
 800561e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	225c      	movs	r2, #92	@ 0x5c
 8005624:	5a9a      	ldrh	r2, [r3, r2]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	0011      	movs	r1, r2
 800562a:	0018      	movs	r0, r3
 800562c:	f7fe feea 	bl	8004404 <HAL_UARTEx_RxEventCallback>
 8005630:	e003      	b.n	800563a <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	0018      	movs	r0, r3
 8005636:	f7fb f951 	bl	80008dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800563a:	236e      	movs	r3, #110	@ 0x6e
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005644:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005646:	2220      	movs	r2, #32
 8005648:	4013      	ands	r3, r2
 800564a:	d000      	beq.n	800564e <UART_RxISR_8BIT_FIFOEN+0x27e>
 800564c:	e6e3      	b.n	8005416 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800564e:	205a      	movs	r0, #90	@ 0x5a
 8005650:	183b      	adds	r3, r7, r0
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	215e      	movs	r1, #94	@ 0x5e
 8005656:	5a52      	ldrh	r2, [r2, r1]
 8005658:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800565a:	0001      	movs	r1, r0
 800565c:	187b      	adds	r3, r7, r1
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d044      	beq.n	80056ee <UART_RxISR_8BIT_FIFOEN+0x31e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2268      	movs	r2, #104	@ 0x68
 8005668:	5a9b      	ldrh	r3, [r3, r2]
 800566a:	187a      	adds	r2, r7, r1
 800566c:	8812      	ldrh	r2, [r2, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d23d      	bcs.n	80056ee <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005672:	f3ef 8310 	mrs	r3, PRIMASK
 8005676:	60bb      	str	r3, [r7, #8]
  return(result);
 8005678:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800567a:	657b      	str	r3, [r7, #84]	@ 0x54
 800567c:	2301      	movs	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f383 8810 	msr	PRIMASK, r3
}
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	491d      	ldr	r1, [pc, #116]	@ (8005708 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8005694:	400a      	ands	r2, r1
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800569a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a19      	ldr	r2, [pc, #100]	@ (800570c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80056a8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056aa:	f3ef 8310 	mrs	r3, PRIMASK
 80056ae:	617b      	str	r3, [r7, #20]
  return(result);
 80056b0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b4:	2301      	movs	r3, #1
 80056b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	f383 8810 	msr	PRIMASK, r3
}
 80056be:	46c0      	nop			@ (mov r8, r8)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2120      	movs	r1, #32
 80056cc:	430a      	orrs	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f383 8810 	msr	PRIMASK, r3
}
 80056da:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056dc:	e007      	b.n	80056ee <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2108      	movs	r1, #8
 80056ea:	430a      	orrs	r2, r1
 80056ec:	619a      	str	r2, [r3, #24]
}
 80056ee:	46c0      	nop			@ (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b020      	add	sp, #128	@ 0x80
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	46c0      	nop			@ (mov r8, r8)
 80056f8:	fffffeff 	.word	0xfffffeff
 80056fc:	effffffe 	.word	0xeffffffe
 8005700:	40008000 	.word	0x40008000
 8005704:	fbffffff 	.word	0xfbffffff
 8005708:	efffffff 	.word	0xefffffff
 800570c:	08005049 	.word	0x08005049

08005710 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b0a2      	sub	sp, #136	@ 0x88
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005718:	2382      	movs	r3, #130	@ 0x82
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	2160      	movs	r1, #96	@ 0x60
 8005720:	5a52      	ldrh	r2, [r2, r1]
 8005722:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	2284      	movs	r2, #132	@ 0x84
 800572c:	18ba      	adds	r2, r7, r2
 800572e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	228c      	movs	r2, #140	@ 0x8c
 8005744:	589b      	ldr	r3, [r3, r2]
 8005746:	2b22      	cmp	r3, #34	@ 0x22
 8005748:	d000      	beq.n	800574c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800574a:	e174      	b.n	8005a36 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800574c:	2376      	movs	r3, #118	@ 0x76
 800574e:	18fb      	adds	r3, r7, r3
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	2168      	movs	r1, #104	@ 0x68
 8005754:	5a52      	ldrh	r2, [r2, r1]
 8005756:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005758:	e119      	b.n	800598e <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005760:	2174      	movs	r1, #116	@ 0x74
 8005762:	187b      	adds	r3, r7, r1
 8005764:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800576c:	187b      	adds	r3, r7, r1
 800576e:	2282      	movs	r2, #130	@ 0x82
 8005770:	18ba      	adds	r2, r7, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	8812      	ldrh	r2, [r2, #0]
 8005776:	4013      	ands	r3, r2
 8005778:	b29a      	uxth	r2, r3
 800577a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800577c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	225e      	movs	r2, #94	@ 0x5e
 800578c:	5a9b      	ldrh	r3, [r3, r2]
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b299      	uxth	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	225e      	movs	r2, #94	@ 0x5e
 8005798:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	2184      	movs	r1, #132	@ 0x84
 80057a2:	187a      	adds	r2, r7, r1
 80057a4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80057a6:	187b      	adds	r3, r7, r1
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2207      	movs	r2, #7
 80057ac:	4013      	ands	r3, r2
 80057ae:	d04e      	beq.n	800584e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057b0:	187b      	adds	r3, r7, r1
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2201      	movs	r2, #1
 80057b6:	4013      	ands	r3, r2
 80057b8:	d010      	beq.n	80057dc <UART_RxISR_16BIT_FIFOEN+0xcc>
 80057ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80057bc:	2380      	movs	r3, #128	@ 0x80
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4013      	ands	r3, r2
 80057c2:	d00b      	beq.n	80057dc <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2201      	movs	r2, #1
 80057ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2290      	movs	r2, #144	@ 0x90
 80057d0:	589b      	ldr	r3, [r3, r2]
 80057d2:	2201      	movs	r2, #1
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2190      	movs	r1, #144	@ 0x90
 80057da:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057dc:	2384      	movs	r3, #132	@ 0x84
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2202      	movs	r2, #2
 80057e4:	4013      	ands	r3, r2
 80057e6:	d00f      	beq.n	8005808 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80057e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ea:	2201      	movs	r2, #1
 80057ec:	4013      	ands	r3, r2
 80057ee:	d00b      	beq.n	8005808 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2202      	movs	r2, #2
 80057f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2290      	movs	r2, #144	@ 0x90
 80057fc:	589b      	ldr	r3, [r3, r2]
 80057fe:	2204      	movs	r2, #4
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2190      	movs	r1, #144	@ 0x90
 8005806:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005808:	2384      	movs	r3, #132	@ 0x84
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2204      	movs	r2, #4
 8005810:	4013      	ands	r3, r2
 8005812:	d00f      	beq.n	8005834 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005816:	2201      	movs	r2, #1
 8005818:	4013      	ands	r3, r2
 800581a:	d00b      	beq.n	8005834 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2204      	movs	r2, #4
 8005822:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2290      	movs	r2, #144	@ 0x90
 8005828:	589b      	ldr	r3, [r3, r2]
 800582a:	2202      	movs	r2, #2
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2190      	movs	r1, #144	@ 0x90
 8005832:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2290      	movs	r2, #144	@ 0x90
 8005838:	589b      	ldr	r3, [r3, r2]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	0018      	movs	r0, r3
 8005842:	f7fe fdd7 	bl	80043f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2290      	movs	r2, #144	@ 0x90
 800584a:	2100      	movs	r1, #0
 800584c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	225e      	movs	r2, #94	@ 0x5e
 8005852:	5a9b      	ldrh	r3, [r3, r2]
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d000      	beq.n	800585c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800585a:	e098      	b.n	800598e <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800585c:	f3ef 8310 	mrs	r3, PRIMASK
 8005860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005864:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005866:	2301      	movs	r3, #1
 8005868:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800586a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800586c:	f383 8810 	msr	PRIMASK, r3
}
 8005870:	46c0      	nop			@ (mov r8, r8)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4974      	ldr	r1, [pc, #464]	@ (8005a50 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800587e:	400a      	ands	r2, r1
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005884:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005888:	f383 8810 	msr	PRIMASK, r3
}
 800588c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800588e:	f3ef 8310 	mrs	r3, PRIMASK
 8005892:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005896:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005898:	2301      	movs	r3, #1
 800589a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800589e:	f383 8810 	msr	PRIMASK, r3
}
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4969      	ldr	r1, [pc, #420]	@ (8005a54 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80058b0:	400a      	ands	r2, r1
 80058b2:	609a      	str	r2, [r3, #8]
 80058b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058b6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058ba:	f383 8810 	msr	PRIMASK, r3
}
 80058be:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	228c      	movs	r2, #140	@ 0x8c
 80058c4:	2120      	movs	r1, #32
 80058c6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a5f      	ldr	r2, [pc, #380]	@ (8005a58 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	2380      	movs	r3, #128	@ 0x80
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	4013      	ands	r3, r2
 80058ea:	d018      	beq.n	800591e <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ec:	f3ef 8310 	mrs	r3, PRIMASK
 80058f0:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80058f6:	2301      	movs	r3, #1
 80058f8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fc:	f383 8810 	msr	PRIMASK, r3
}
 8005900:	46c0      	nop			@ (mov r8, r8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4953      	ldr	r1, [pc, #332]	@ (8005a5c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800590e:	400a      	ands	r2, r1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005914:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	f383 8810 	msr	PRIMASK, r3
}
 800591c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d12f      	bne.n	8005986 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592c:	f3ef 8310 	mrs	r3, PRIMASK
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	663b      	str	r3, [r7, #96]	@ 0x60
 8005936:	2301      	movs	r3, #1
 8005938:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	f383 8810 	msr	PRIMASK, r3
}
 8005940:	46c0      	nop			@ (mov r8, r8)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2110      	movs	r1, #16
 800594e:	438a      	bics	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	2210      	movs	r2, #16
 8005966:	4013      	ands	r3, r2
 8005968:	2b10      	cmp	r3, #16
 800596a:	d103      	bne.n	8005974 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2210      	movs	r2, #16
 8005972:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	225c      	movs	r2, #92	@ 0x5c
 8005978:	5a9a      	ldrh	r2, [r3, r2]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	0011      	movs	r1, r2
 800597e:	0018      	movs	r0, r3
 8005980:	f7fe fd40 	bl	8004404 <HAL_UARTEx_RxEventCallback>
 8005984:	e003      	b.n	800598e <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f7fa ffa7 	bl	80008dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800598e:	2376      	movs	r3, #118	@ 0x76
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d006      	beq.n	80059a6 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005998:	2384      	movs	r3, #132	@ 0x84
 800599a:	18fb      	adds	r3, r7, r3
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2220      	movs	r2, #32
 80059a0:	4013      	ands	r3, r2
 80059a2:	d000      	beq.n	80059a6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80059a4:	e6d9      	b.n	800575a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059a6:	205e      	movs	r0, #94	@ 0x5e
 80059a8:	183b      	adds	r3, r7, r0
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	215e      	movs	r1, #94	@ 0x5e
 80059ae:	5a52      	ldrh	r2, [r2, r1]
 80059b0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059b2:	0001      	movs	r1, r0
 80059b4:	187b      	adds	r3, r7, r1
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d044      	beq.n	8005a46 <UART_RxISR_16BIT_FIFOEN+0x336>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2268      	movs	r2, #104	@ 0x68
 80059c0:	5a9b      	ldrh	r3, [r3, r2]
 80059c2:	187a      	adds	r2, r7, r1
 80059c4:	8812      	ldrh	r2, [r2, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d23d      	bcs.n	8005a46 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ca:	f3ef 8310 	mrs	r3, PRIMASK
 80059ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80059d0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059d4:	2301      	movs	r3, #1
 80059d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f383 8810 	msr	PRIMASK, r3
}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	491d      	ldr	r1, [pc, #116]	@ (8005a60 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80059ec:	400a      	ands	r2, r1
 80059ee:	609a      	str	r2, [r3, #8]
 80059f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f383 8810 	msr	PRIMASK, r3
}
 80059fa:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a19      	ldr	r2, [pc, #100]	@ (8005a64 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005a00:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a02:	f3ef 8310 	mrs	r3, PRIMASK
 8005a06:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a08:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f383 8810 	msr	PRIMASK, r3
}
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2120      	movs	r1, #32
 8005a24:	430a      	orrs	r2, r1
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	f383 8810 	msr	PRIMASK, r3
}
 8005a32:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a34:	e007      	b.n	8005a46 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2108      	movs	r1, #8
 8005a42:	430a      	orrs	r2, r1
 8005a44:	619a      	str	r2, [r3, #24]
}
 8005a46:	46c0      	nop			@ (mov r8, r8)
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	b022      	add	sp, #136	@ 0x88
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	fffffeff 	.word	0xfffffeff
 8005a54:	effffffe 	.word	0xeffffffe
 8005a58:	40008000 	.word	0x40008000
 8005a5c:	fbffffff 	.word	0xfbffffff
 8005a60:	efffffff 	.word	0xefffffff
 8005a64:	0800520d 	.word	0x0800520d

08005a68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2284      	movs	r2, #132	@ 0x84
 8005a74:	5c9b      	ldrb	r3, [r3, r2]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_UARTEx_DisableFifoMode+0x16>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e027      	b.n	8005ace <HAL_UARTEx_DisableFifoMode+0x66>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2284      	movs	r2, #132	@ 0x84
 8005a82:	2101      	movs	r1, #1
 8005a84:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2288      	movs	r2, #136	@ 0x88
 8005a8a:	2124      	movs	r1, #36	@ 0x24
 8005a8c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	438a      	bics	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8005ad8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2288      	movs	r2, #136	@ 0x88
 8005ac0:	2120      	movs	r1, #32
 8005ac2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2284      	movs	r2, #132	@ 0x84
 8005ac8:	2100      	movs	r1, #0
 8005aca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b004      	add	sp, #16
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	dfffffff 	.word	0xdfffffff

08005adc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2284      	movs	r2, #132	@ 0x84
 8005aea:	5c9b      	ldrb	r3, [r3, r2]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e02e      	b.n	8005b52 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2284      	movs	r2, #132	@ 0x84
 8005af8:	2101      	movs	r1, #1
 8005afa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2288      	movs	r2, #136	@ 0x88
 8005b00:	2124      	movs	r1, #36	@ 0x24
 8005b02:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2101      	movs	r1, #1
 8005b18:	438a      	bics	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	08d9      	lsrs	r1, r3, #3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 f854 	bl	8005be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2288      	movs	r2, #136	@ 0x88
 8005b44:	2120      	movs	r1, #32
 8005b46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2284      	movs	r2, #132	@ 0x84
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	0018      	movs	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	b004      	add	sp, #16
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2284      	movs	r2, #132	@ 0x84
 8005b6a:	5c9b      	ldrb	r3, [r3, r2]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e02f      	b.n	8005bd4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2284      	movs	r2, #132	@ 0x84
 8005b78:	2101      	movs	r1, #1
 8005b7a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2288      	movs	r2, #136	@ 0x88
 8005b80:	2124      	movs	r1, #36	@ 0x24
 8005b82:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2101      	movs	r1, #1
 8005b98:	438a      	bics	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8005bdc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	0019      	movs	r1, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f000 f813 	bl	8005be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2288      	movs	r2, #136	@ 0x88
 8005bc6:	2120      	movs	r1, #32
 8005bc8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2284      	movs	r2, #132	@ 0x84
 8005bce:	2100      	movs	r1, #0
 8005bd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b004      	add	sp, #16
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	f1ffffff 	.word	0xf1ffffff

08005be0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d108      	bne.n	8005c02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	226a      	movs	r2, #106	@ 0x6a
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2268      	movs	r2, #104	@ 0x68
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c00:	e043      	b.n	8005c8a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c02:	260f      	movs	r6, #15
 8005c04:	19bb      	adds	r3, r7, r6
 8005c06:	2208      	movs	r2, #8
 8005c08:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c0a:	200e      	movs	r0, #14
 8005c0c:	183b      	adds	r3, r7, r0
 8005c0e:	2208      	movs	r2, #8
 8005c10:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	0e5b      	lsrs	r3, r3, #25
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	240d      	movs	r4, #13
 8005c1e:	193b      	adds	r3, r7, r4
 8005c20:	2107      	movs	r1, #7
 8005c22:	400a      	ands	r2, r1
 8005c24:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	0f5b      	lsrs	r3, r3, #29
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	250c      	movs	r5, #12
 8005c32:	197b      	adds	r3, r7, r5
 8005c34:	2107      	movs	r1, #7
 8005c36:	400a      	ands	r2, r1
 8005c38:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c3a:	183b      	adds	r3, r7, r0
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	197a      	adds	r2, r7, r5
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	4914      	ldr	r1, [pc, #80]	@ (8005c94 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c44:	5c8a      	ldrb	r2, [r1, r2]
 8005c46:	435a      	muls	r2, r3
 8005c48:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c4a:	197b      	adds	r3, r7, r5
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	@ (8005c98 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c50:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c52:	0019      	movs	r1, r3
 8005c54:	f7fa faea 	bl	800022c <__divsi3>
 8005c58:	0003      	movs	r3, r0
 8005c5a:	b299      	uxth	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	226a      	movs	r2, #106	@ 0x6a
 8005c60:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c62:	19bb      	adds	r3, r7, r6
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	193a      	adds	r2, r7, r4
 8005c68:	7812      	ldrb	r2, [r2, #0]
 8005c6a:	490a      	ldr	r1, [pc, #40]	@ (8005c94 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c6c:	5c8a      	ldrb	r2, [r1, r2]
 8005c6e:	435a      	muls	r2, r3
 8005c70:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c72:	193b      	adds	r3, r7, r4
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	4a08      	ldr	r2, [pc, #32]	@ (8005c98 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c78:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c7a:	0019      	movs	r1, r3
 8005c7c:	f7fa fad6 	bl	800022c <__divsi3>
 8005c80:	0003      	movs	r3, r0
 8005c82:	b299      	uxth	r1, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2268      	movs	r2, #104	@ 0x68
 8005c88:	5299      	strh	r1, [r3, r2]
}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b005      	add	sp, #20
 8005c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	08006718 	.word	0x08006718
 8005c98:	08006720 	.word	0x08006720

08005c9c <_vsniprintf_r>:
 8005c9c:	b530      	push	{r4, r5, lr}
 8005c9e:	0005      	movs	r5, r0
 8005ca0:	0014      	movs	r4, r2
 8005ca2:	0008      	movs	r0, r1
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	b09b      	sub	sp, #108	@ 0x6c
 8005ca8:	2c00      	cmp	r4, #0
 8005caa:	da05      	bge.n	8005cb8 <_vsniprintf_r+0x1c>
 8005cac:	238b      	movs	r3, #139	@ 0x8b
 8005cae:	2001      	movs	r0, #1
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	4240      	negs	r0, r0
 8005cb4:	b01b      	add	sp, #108	@ 0x6c
 8005cb6:	bd30      	pop	{r4, r5, pc}
 8005cb8:	2382      	movs	r3, #130	@ 0x82
 8005cba:	4669      	mov	r1, sp
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	818b      	strh	r3, [r1, #12]
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	9000      	str	r0, [sp, #0]
 8005cc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8005cc6:	9004      	str	r0, [sp, #16]
 8005cc8:	428c      	cmp	r4, r1
 8005cca:	d000      	beq.n	8005cce <_vsniprintf_r+0x32>
 8005ccc:	1e61      	subs	r1, r4, #1
 8005cce:	2301      	movs	r3, #1
 8005cd0:	9102      	str	r1, [sp, #8]
 8005cd2:	9105      	str	r1, [sp, #20]
 8005cd4:	4669      	mov	r1, sp
 8005cd6:	425b      	negs	r3, r3
 8005cd8:	81cb      	strh	r3, [r1, #14]
 8005cda:	0028      	movs	r0, r5
 8005cdc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005cde:	f000 f9a7 	bl	8006030 <_svfiprintf_r>
 8005ce2:	1c43      	adds	r3, r0, #1
 8005ce4:	da01      	bge.n	8005cea <_vsniprintf_r+0x4e>
 8005ce6:	238b      	movs	r3, #139	@ 0x8b
 8005ce8:	602b      	str	r3, [r5, #0]
 8005cea:	2c00      	cmp	r4, #0
 8005cec:	d0e2      	beq.n	8005cb4 <_vsniprintf_r+0x18>
 8005cee:	2200      	movs	r2, #0
 8005cf0:	9b00      	ldr	r3, [sp, #0]
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e7de      	b.n	8005cb4 <_vsniprintf_r+0x18>
	...

08005cf8 <vsniprintf>:
 8005cf8:	b513      	push	{r0, r1, r4, lr}
 8005cfa:	4c04      	ldr	r4, [pc, #16]	@ (8005d0c <vsniprintf+0x14>)
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	0013      	movs	r3, r2
 8005d00:	000a      	movs	r2, r1
 8005d02:	0001      	movs	r1, r0
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	f7ff ffc9 	bl	8005c9c <_vsniprintf_r>
 8005d0a:	bd16      	pop	{r1, r2, r4, pc}
 8005d0c:	20000010 	.word	0x20000010

08005d10 <memset>:
 8005d10:	0003      	movs	r3, r0
 8005d12:	1882      	adds	r2, r0, r2
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d100      	bne.n	8005d1a <memset+0xa>
 8005d18:	4770      	bx	lr
 8005d1a:	7019      	strb	r1, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	e7f9      	b.n	8005d14 <memset+0x4>

08005d20 <__errno>:
 8005d20:	4b01      	ldr	r3, [pc, #4]	@ (8005d28 <__errno+0x8>)
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	4770      	bx	lr
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	20000010 	.word	0x20000010

08005d2c <__libc_init_array>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	2600      	movs	r6, #0
 8005d30:	4c0c      	ldr	r4, [pc, #48]	@ (8005d64 <__libc_init_array+0x38>)
 8005d32:	4d0d      	ldr	r5, [pc, #52]	@ (8005d68 <__libc_init_array+0x3c>)
 8005d34:	1b64      	subs	r4, r4, r5
 8005d36:	10a4      	asrs	r4, r4, #2
 8005d38:	42a6      	cmp	r6, r4
 8005d3a:	d109      	bne.n	8005d50 <__libc_init_array+0x24>
 8005d3c:	2600      	movs	r6, #0
 8005d3e:	f000 fc61 	bl	8006604 <_init>
 8005d42:	4c0a      	ldr	r4, [pc, #40]	@ (8005d6c <__libc_init_array+0x40>)
 8005d44:	4d0a      	ldr	r5, [pc, #40]	@ (8005d70 <__libc_init_array+0x44>)
 8005d46:	1b64      	subs	r4, r4, r5
 8005d48:	10a4      	asrs	r4, r4, #2
 8005d4a:	42a6      	cmp	r6, r4
 8005d4c:	d105      	bne.n	8005d5a <__libc_init_array+0x2e>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	00b3      	lsls	r3, r6, #2
 8005d52:	58eb      	ldr	r3, [r5, r3]
 8005d54:	4798      	blx	r3
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7ee      	b.n	8005d38 <__libc_init_array+0xc>
 8005d5a:	00b3      	lsls	r3, r6, #2
 8005d5c:	58eb      	ldr	r3, [r5, r3]
 8005d5e:	4798      	blx	r3
 8005d60:	3601      	adds	r6, #1
 8005d62:	e7f2      	b.n	8005d4a <__libc_init_array+0x1e>
 8005d64:	08006764 	.word	0x08006764
 8005d68:	08006764 	.word	0x08006764
 8005d6c:	0800676c 	.word	0x0800676c
 8005d70:	08006764 	.word	0x08006764

08005d74 <__retarget_lock_acquire_recursive>:
 8005d74:	4770      	bx	lr

08005d76 <__retarget_lock_release_recursive>:
 8005d76:	4770      	bx	lr

08005d78 <_free_r>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	0005      	movs	r5, r0
 8005d7c:	1e0c      	subs	r4, r1, #0
 8005d7e:	d010      	beq.n	8005da2 <_free_r+0x2a>
 8005d80:	3c04      	subs	r4, #4
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	da00      	bge.n	8005d8a <_free_r+0x12>
 8005d88:	18e4      	adds	r4, r4, r3
 8005d8a:	0028      	movs	r0, r5
 8005d8c:	f000 f8e0 	bl	8005f50 <__malloc_lock>
 8005d90:	4a1d      	ldr	r2, [pc, #116]	@ (8005e08 <_free_r+0x90>)
 8005d92:	6813      	ldr	r3, [r2, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d105      	bne.n	8005da4 <_free_r+0x2c>
 8005d98:	6063      	str	r3, [r4, #4]
 8005d9a:	6014      	str	r4, [r2, #0]
 8005d9c:	0028      	movs	r0, r5
 8005d9e:	f000 f8df 	bl	8005f60 <__malloc_unlock>
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	d908      	bls.n	8005dba <_free_r+0x42>
 8005da8:	6820      	ldr	r0, [r4, #0]
 8005daa:	1821      	adds	r1, r4, r0
 8005dac:	428b      	cmp	r3, r1
 8005dae:	d1f3      	bne.n	8005d98 <_free_r+0x20>
 8005db0:	6819      	ldr	r1, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	1809      	adds	r1, r1, r0
 8005db6:	6021      	str	r1, [r4, #0]
 8005db8:	e7ee      	b.n	8005d98 <_free_r+0x20>
 8005dba:	001a      	movs	r2, r3
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <_free_r+0x4e>
 8005dc2:	42a3      	cmp	r3, r4
 8005dc4:	d9f9      	bls.n	8005dba <_free_r+0x42>
 8005dc6:	6811      	ldr	r1, [r2, #0]
 8005dc8:	1850      	adds	r0, r2, r1
 8005dca:	42a0      	cmp	r0, r4
 8005dcc:	d10b      	bne.n	8005de6 <_free_r+0x6e>
 8005dce:	6820      	ldr	r0, [r4, #0]
 8005dd0:	1809      	adds	r1, r1, r0
 8005dd2:	1850      	adds	r0, r2, r1
 8005dd4:	6011      	str	r1, [r2, #0]
 8005dd6:	4283      	cmp	r3, r0
 8005dd8:	d1e0      	bne.n	8005d9c <_free_r+0x24>
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	1841      	adds	r1, r0, r1
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	6053      	str	r3, [r2, #4]
 8005de4:	e7da      	b.n	8005d9c <_free_r+0x24>
 8005de6:	42a0      	cmp	r0, r4
 8005de8:	d902      	bls.n	8005df0 <_free_r+0x78>
 8005dea:	230c      	movs	r3, #12
 8005dec:	602b      	str	r3, [r5, #0]
 8005dee:	e7d5      	b.n	8005d9c <_free_r+0x24>
 8005df0:	6820      	ldr	r0, [r4, #0]
 8005df2:	1821      	adds	r1, r4, r0
 8005df4:	428b      	cmp	r3, r1
 8005df6:	d103      	bne.n	8005e00 <_free_r+0x88>
 8005df8:	6819      	ldr	r1, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	1809      	adds	r1, r1, r0
 8005dfe:	6021      	str	r1, [r4, #0]
 8005e00:	6063      	str	r3, [r4, #4]
 8005e02:	6054      	str	r4, [r2, #4]
 8005e04:	e7ca      	b.n	8005d9c <_free_r+0x24>
 8005e06:	46c0      	nop			@ (mov r8, r8)
 8005e08:	2000032c 	.word	0x2000032c

08005e0c <sbrk_aligned>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8005e4c <sbrk_aligned+0x40>)
 8005e10:	000d      	movs	r5, r1
 8005e12:	6831      	ldr	r1, [r6, #0]
 8005e14:	0004      	movs	r4, r0
 8005e16:	2900      	cmp	r1, #0
 8005e18:	d102      	bne.n	8005e20 <sbrk_aligned+0x14>
 8005e1a:	f000 fb95 	bl	8006548 <_sbrk_r>
 8005e1e:	6030      	str	r0, [r6, #0]
 8005e20:	0029      	movs	r1, r5
 8005e22:	0020      	movs	r0, r4
 8005e24:	f000 fb90 	bl	8006548 <_sbrk_r>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d103      	bne.n	8005e34 <sbrk_aligned+0x28>
 8005e2c:	2501      	movs	r5, #1
 8005e2e:	426d      	negs	r5, r5
 8005e30:	0028      	movs	r0, r5
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	2303      	movs	r3, #3
 8005e36:	1cc5      	adds	r5, r0, #3
 8005e38:	439d      	bics	r5, r3
 8005e3a:	42a8      	cmp	r0, r5
 8005e3c:	d0f8      	beq.n	8005e30 <sbrk_aligned+0x24>
 8005e3e:	1a29      	subs	r1, r5, r0
 8005e40:	0020      	movs	r0, r4
 8005e42:	f000 fb81 	bl	8006548 <_sbrk_r>
 8005e46:	3001      	adds	r0, #1
 8005e48:	d1f2      	bne.n	8005e30 <sbrk_aligned+0x24>
 8005e4a:	e7ef      	b.n	8005e2c <sbrk_aligned+0x20>
 8005e4c:	20000328 	.word	0x20000328

08005e50 <_malloc_r>:
 8005e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e52:	2203      	movs	r2, #3
 8005e54:	1ccb      	adds	r3, r1, #3
 8005e56:	4393      	bics	r3, r2
 8005e58:	3308      	adds	r3, #8
 8005e5a:	0005      	movs	r5, r0
 8005e5c:	001f      	movs	r7, r3
 8005e5e:	2b0c      	cmp	r3, #12
 8005e60:	d234      	bcs.n	8005ecc <_malloc_r+0x7c>
 8005e62:	270c      	movs	r7, #12
 8005e64:	42b9      	cmp	r1, r7
 8005e66:	d833      	bhi.n	8005ed0 <_malloc_r+0x80>
 8005e68:	0028      	movs	r0, r5
 8005e6a:	f000 f871 	bl	8005f50 <__malloc_lock>
 8005e6e:	4e37      	ldr	r6, [pc, #220]	@ (8005f4c <_malloc_r+0xfc>)
 8005e70:	6833      	ldr	r3, [r6, #0]
 8005e72:	001c      	movs	r4, r3
 8005e74:	2c00      	cmp	r4, #0
 8005e76:	d12f      	bne.n	8005ed8 <_malloc_r+0x88>
 8005e78:	0039      	movs	r1, r7
 8005e7a:	0028      	movs	r0, r5
 8005e7c:	f7ff ffc6 	bl	8005e0c <sbrk_aligned>
 8005e80:	0004      	movs	r4, r0
 8005e82:	1c43      	adds	r3, r0, #1
 8005e84:	d15f      	bne.n	8005f46 <_malloc_r+0xf6>
 8005e86:	6834      	ldr	r4, [r6, #0]
 8005e88:	9400      	str	r4, [sp, #0]
 8005e8a:	9b00      	ldr	r3, [sp, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d14a      	bne.n	8005f26 <_malloc_r+0xd6>
 8005e90:	2c00      	cmp	r4, #0
 8005e92:	d052      	beq.n	8005f3a <_malloc_r+0xea>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	0028      	movs	r0, r5
 8005e98:	18e3      	adds	r3, r4, r3
 8005e9a:	9900      	ldr	r1, [sp, #0]
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	f000 fb53 	bl	8006548 <_sbrk_r>
 8005ea2:	9b01      	ldr	r3, [sp, #4]
 8005ea4:	4283      	cmp	r3, r0
 8005ea6:	d148      	bne.n	8005f3a <_malloc_r+0xea>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	0028      	movs	r0, r5
 8005eac:	1aff      	subs	r7, r7, r3
 8005eae:	0039      	movs	r1, r7
 8005eb0:	f7ff ffac 	bl	8005e0c <sbrk_aligned>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d040      	beq.n	8005f3a <_malloc_r+0xea>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	19db      	adds	r3, r3, r7
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	6833      	ldr	r3, [r6, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	d133      	bne.n	8005f2e <_malloc_r+0xde>
 8005ec6:	9b00      	ldr	r3, [sp, #0]
 8005ec8:	6033      	str	r3, [r6, #0]
 8005eca:	e019      	b.n	8005f00 <_malloc_r+0xb0>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	dac9      	bge.n	8005e64 <_malloc_r+0x14>
 8005ed0:	230c      	movs	r3, #12
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ed8:	6821      	ldr	r1, [r4, #0]
 8005eda:	1bc9      	subs	r1, r1, r7
 8005edc:	d420      	bmi.n	8005f20 <_malloc_r+0xd0>
 8005ede:	290b      	cmp	r1, #11
 8005ee0:	d90a      	bls.n	8005ef8 <_malloc_r+0xa8>
 8005ee2:	19e2      	adds	r2, r4, r7
 8005ee4:	6027      	str	r7, [r4, #0]
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	d104      	bne.n	8005ef4 <_malloc_r+0xa4>
 8005eea:	6032      	str	r2, [r6, #0]
 8005eec:	6863      	ldr	r3, [r4, #4]
 8005eee:	6011      	str	r1, [r2, #0]
 8005ef0:	6053      	str	r3, [r2, #4]
 8005ef2:	e005      	b.n	8005f00 <_malloc_r+0xb0>
 8005ef4:	605a      	str	r2, [r3, #4]
 8005ef6:	e7f9      	b.n	8005eec <_malloc_r+0x9c>
 8005ef8:	6862      	ldr	r2, [r4, #4]
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	d10e      	bne.n	8005f1c <_malloc_r+0xcc>
 8005efe:	6032      	str	r2, [r6, #0]
 8005f00:	0028      	movs	r0, r5
 8005f02:	f000 f82d 	bl	8005f60 <__malloc_unlock>
 8005f06:	0020      	movs	r0, r4
 8005f08:	2207      	movs	r2, #7
 8005f0a:	300b      	adds	r0, #11
 8005f0c:	1d23      	adds	r3, r4, #4
 8005f0e:	4390      	bics	r0, r2
 8005f10:	1ac2      	subs	r2, r0, r3
 8005f12:	4298      	cmp	r0, r3
 8005f14:	d0df      	beq.n	8005ed6 <_malloc_r+0x86>
 8005f16:	1a1b      	subs	r3, r3, r0
 8005f18:	50a3      	str	r3, [r4, r2]
 8005f1a:	e7dc      	b.n	8005ed6 <_malloc_r+0x86>
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	e7ef      	b.n	8005f00 <_malloc_r+0xb0>
 8005f20:	0023      	movs	r3, r4
 8005f22:	6864      	ldr	r4, [r4, #4]
 8005f24:	e7a6      	b.n	8005e74 <_malloc_r+0x24>
 8005f26:	9c00      	ldr	r4, [sp, #0]
 8005f28:	6863      	ldr	r3, [r4, #4]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	e7ad      	b.n	8005e8a <_malloc_r+0x3a>
 8005f2e:	001a      	movs	r2, r3
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	d1fb      	bne.n	8005f2e <_malloc_r+0xde>
 8005f36:	2300      	movs	r3, #0
 8005f38:	e7da      	b.n	8005ef0 <_malloc_r+0xa0>
 8005f3a:	230c      	movs	r3, #12
 8005f3c:	0028      	movs	r0, r5
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	f000 f80e 	bl	8005f60 <__malloc_unlock>
 8005f44:	e7c6      	b.n	8005ed4 <_malloc_r+0x84>
 8005f46:	6007      	str	r7, [r0, #0]
 8005f48:	e7da      	b.n	8005f00 <_malloc_r+0xb0>
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	2000032c 	.word	0x2000032c

08005f50 <__malloc_lock>:
 8005f50:	b510      	push	{r4, lr}
 8005f52:	4802      	ldr	r0, [pc, #8]	@ (8005f5c <__malloc_lock+0xc>)
 8005f54:	f7ff ff0e 	bl	8005d74 <__retarget_lock_acquire_recursive>
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	46c0      	nop			@ (mov r8, r8)
 8005f5c:	20000324 	.word	0x20000324

08005f60 <__malloc_unlock>:
 8005f60:	b510      	push	{r4, lr}
 8005f62:	4802      	ldr	r0, [pc, #8]	@ (8005f6c <__malloc_unlock+0xc>)
 8005f64:	f7ff ff07 	bl	8005d76 <__retarget_lock_release_recursive>
 8005f68:	bd10      	pop	{r4, pc}
 8005f6a:	46c0      	nop			@ (mov r8, r8)
 8005f6c:	20000324 	.word	0x20000324

08005f70 <__ssputs_r>:
 8005f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f72:	688e      	ldr	r6, [r1, #8]
 8005f74:	b085      	sub	sp, #20
 8005f76:	001f      	movs	r7, r3
 8005f78:	000c      	movs	r4, r1
 8005f7a:	680b      	ldr	r3, [r1, #0]
 8005f7c:	9002      	str	r0, [sp, #8]
 8005f7e:	9203      	str	r2, [sp, #12]
 8005f80:	42be      	cmp	r6, r7
 8005f82:	d830      	bhi.n	8005fe6 <__ssputs_r+0x76>
 8005f84:	210c      	movs	r1, #12
 8005f86:	5e62      	ldrsh	r2, [r4, r1]
 8005f88:	2190      	movs	r1, #144	@ 0x90
 8005f8a:	00c9      	lsls	r1, r1, #3
 8005f8c:	420a      	tst	r2, r1
 8005f8e:	d028      	beq.n	8005fe2 <__ssputs_r+0x72>
 8005f90:	2003      	movs	r0, #3
 8005f92:	6921      	ldr	r1, [r4, #16]
 8005f94:	1a5b      	subs	r3, r3, r1
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	6963      	ldr	r3, [r4, #20]
 8005f9a:	4343      	muls	r3, r0
 8005f9c:	9801      	ldr	r0, [sp, #4]
 8005f9e:	0fdd      	lsrs	r5, r3, #31
 8005fa0:	18ed      	adds	r5, r5, r3
 8005fa2:	1c7b      	adds	r3, r7, #1
 8005fa4:	181b      	adds	r3, r3, r0
 8005fa6:	106d      	asrs	r5, r5, #1
 8005fa8:	42ab      	cmp	r3, r5
 8005faa:	d900      	bls.n	8005fae <__ssputs_r+0x3e>
 8005fac:	001d      	movs	r5, r3
 8005fae:	0552      	lsls	r2, r2, #21
 8005fb0:	d528      	bpl.n	8006004 <__ssputs_r+0x94>
 8005fb2:	0029      	movs	r1, r5
 8005fb4:	9802      	ldr	r0, [sp, #8]
 8005fb6:	f7ff ff4b 	bl	8005e50 <_malloc_r>
 8005fba:	1e06      	subs	r6, r0, #0
 8005fbc:	d02c      	beq.n	8006018 <__ssputs_r+0xa8>
 8005fbe:	9a01      	ldr	r2, [sp, #4]
 8005fc0:	6921      	ldr	r1, [r4, #16]
 8005fc2:	f000 fade 	bl	8006582 <memcpy>
 8005fc6:	89a2      	ldrh	r2, [r4, #12]
 8005fc8:	4b18      	ldr	r3, [pc, #96]	@ (800602c <__ssputs_r+0xbc>)
 8005fca:	401a      	ands	r2, r3
 8005fcc:	2380      	movs	r3, #128	@ 0x80
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	9b01      	ldr	r3, [sp, #4]
 8005fd4:	6126      	str	r6, [r4, #16]
 8005fd6:	18f6      	adds	r6, r6, r3
 8005fd8:	6026      	str	r6, [r4, #0]
 8005fda:	003e      	movs	r6, r7
 8005fdc:	6165      	str	r5, [r4, #20]
 8005fde:	1aed      	subs	r5, r5, r3
 8005fe0:	60a5      	str	r5, [r4, #8]
 8005fe2:	42be      	cmp	r6, r7
 8005fe4:	d900      	bls.n	8005fe8 <__ssputs_r+0x78>
 8005fe6:	003e      	movs	r6, r7
 8005fe8:	0032      	movs	r2, r6
 8005fea:	9903      	ldr	r1, [sp, #12]
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	f000 fa99 	bl	8006524 <memmove>
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	68a3      	ldr	r3, [r4, #8]
 8005ff6:	1b9b      	subs	r3, r3, r6
 8005ff8:	60a3      	str	r3, [r4, #8]
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	199b      	adds	r3, r3, r6
 8005ffe:	6023      	str	r3, [r4, #0]
 8006000:	b005      	add	sp, #20
 8006002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006004:	002a      	movs	r2, r5
 8006006:	9802      	ldr	r0, [sp, #8]
 8006008:	f000 fac4 	bl	8006594 <_realloc_r>
 800600c:	1e06      	subs	r6, r0, #0
 800600e:	d1e0      	bne.n	8005fd2 <__ssputs_r+0x62>
 8006010:	6921      	ldr	r1, [r4, #16]
 8006012:	9802      	ldr	r0, [sp, #8]
 8006014:	f7ff feb0 	bl	8005d78 <_free_r>
 8006018:	230c      	movs	r3, #12
 800601a:	2001      	movs	r0, #1
 800601c:	9a02      	ldr	r2, [sp, #8]
 800601e:	4240      	negs	r0, r0
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	89a2      	ldrh	r2, [r4, #12]
 8006024:	3334      	adds	r3, #52	@ 0x34
 8006026:	4313      	orrs	r3, r2
 8006028:	81a3      	strh	r3, [r4, #12]
 800602a:	e7e9      	b.n	8006000 <__ssputs_r+0x90>
 800602c:	fffffb7f 	.word	0xfffffb7f

08006030 <_svfiprintf_r>:
 8006030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006032:	b0a1      	sub	sp, #132	@ 0x84
 8006034:	9003      	str	r0, [sp, #12]
 8006036:	001d      	movs	r5, r3
 8006038:	898b      	ldrh	r3, [r1, #12]
 800603a:	000f      	movs	r7, r1
 800603c:	0016      	movs	r6, r2
 800603e:	061b      	lsls	r3, r3, #24
 8006040:	d511      	bpl.n	8006066 <_svfiprintf_r+0x36>
 8006042:	690b      	ldr	r3, [r1, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10e      	bne.n	8006066 <_svfiprintf_r+0x36>
 8006048:	2140      	movs	r1, #64	@ 0x40
 800604a:	f7ff ff01 	bl	8005e50 <_malloc_r>
 800604e:	6038      	str	r0, [r7, #0]
 8006050:	6138      	str	r0, [r7, #16]
 8006052:	2800      	cmp	r0, #0
 8006054:	d105      	bne.n	8006062 <_svfiprintf_r+0x32>
 8006056:	230c      	movs	r3, #12
 8006058:	9a03      	ldr	r2, [sp, #12]
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	2001      	movs	r0, #1
 800605e:	4240      	negs	r0, r0
 8006060:	e0cf      	b.n	8006202 <_svfiprintf_r+0x1d2>
 8006062:	2340      	movs	r3, #64	@ 0x40
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	2300      	movs	r3, #0
 8006068:	ac08      	add	r4, sp, #32
 800606a:	6163      	str	r3, [r4, #20]
 800606c:	3320      	adds	r3, #32
 800606e:	7663      	strb	r3, [r4, #25]
 8006070:	3310      	adds	r3, #16
 8006072:	76a3      	strb	r3, [r4, #26]
 8006074:	9507      	str	r5, [sp, #28]
 8006076:	0035      	movs	r5, r6
 8006078:	782b      	ldrb	r3, [r5, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <_svfiprintf_r+0x52>
 800607e:	2b25      	cmp	r3, #37	@ 0x25
 8006080:	d148      	bne.n	8006114 <_svfiprintf_r+0xe4>
 8006082:	1bab      	subs	r3, r5, r6
 8006084:	9305      	str	r3, [sp, #20]
 8006086:	42b5      	cmp	r5, r6
 8006088:	d00b      	beq.n	80060a2 <_svfiprintf_r+0x72>
 800608a:	0032      	movs	r2, r6
 800608c:	0039      	movs	r1, r7
 800608e:	9803      	ldr	r0, [sp, #12]
 8006090:	f7ff ff6e 	bl	8005f70 <__ssputs_r>
 8006094:	3001      	adds	r0, #1
 8006096:	d100      	bne.n	800609a <_svfiprintf_r+0x6a>
 8006098:	e0ae      	b.n	80061f8 <_svfiprintf_r+0x1c8>
 800609a:	6963      	ldr	r3, [r4, #20]
 800609c:	9a05      	ldr	r2, [sp, #20]
 800609e:	189b      	adds	r3, r3, r2
 80060a0:	6163      	str	r3, [r4, #20]
 80060a2:	782b      	ldrb	r3, [r5, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d100      	bne.n	80060aa <_svfiprintf_r+0x7a>
 80060a8:	e0a6      	b.n	80061f8 <_svfiprintf_r+0x1c8>
 80060aa:	2201      	movs	r2, #1
 80060ac:	2300      	movs	r3, #0
 80060ae:	4252      	negs	r2, r2
 80060b0:	6062      	str	r2, [r4, #4]
 80060b2:	a904      	add	r1, sp, #16
 80060b4:	3254      	adds	r2, #84	@ 0x54
 80060b6:	1852      	adds	r2, r2, r1
 80060b8:	1c6e      	adds	r6, r5, #1
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	60e3      	str	r3, [r4, #12]
 80060be:	60a3      	str	r3, [r4, #8]
 80060c0:	7013      	strb	r3, [r2, #0]
 80060c2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80060c4:	4b54      	ldr	r3, [pc, #336]	@ (8006218 <_svfiprintf_r+0x1e8>)
 80060c6:	2205      	movs	r2, #5
 80060c8:	0018      	movs	r0, r3
 80060ca:	7831      	ldrb	r1, [r6, #0]
 80060cc:	9305      	str	r3, [sp, #20]
 80060ce:	f000 fa4d 	bl	800656c <memchr>
 80060d2:	1c75      	adds	r5, r6, #1
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d11f      	bne.n	8006118 <_svfiprintf_r+0xe8>
 80060d8:	6822      	ldr	r2, [r4, #0]
 80060da:	06d3      	lsls	r3, r2, #27
 80060dc:	d504      	bpl.n	80060e8 <_svfiprintf_r+0xb8>
 80060de:	2353      	movs	r3, #83	@ 0x53
 80060e0:	a904      	add	r1, sp, #16
 80060e2:	185b      	adds	r3, r3, r1
 80060e4:	2120      	movs	r1, #32
 80060e6:	7019      	strb	r1, [r3, #0]
 80060e8:	0713      	lsls	r3, r2, #28
 80060ea:	d504      	bpl.n	80060f6 <_svfiprintf_r+0xc6>
 80060ec:	2353      	movs	r3, #83	@ 0x53
 80060ee:	a904      	add	r1, sp, #16
 80060f0:	185b      	adds	r3, r3, r1
 80060f2:	212b      	movs	r1, #43	@ 0x2b
 80060f4:	7019      	strb	r1, [r3, #0]
 80060f6:	7833      	ldrb	r3, [r6, #0]
 80060f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060fa:	d016      	beq.n	800612a <_svfiprintf_r+0xfa>
 80060fc:	0035      	movs	r5, r6
 80060fe:	2100      	movs	r1, #0
 8006100:	200a      	movs	r0, #10
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	782a      	ldrb	r2, [r5, #0]
 8006106:	1c6e      	adds	r6, r5, #1
 8006108:	3a30      	subs	r2, #48	@ 0x30
 800610a:	2a09      	cmp	r2, #9
 800610c:	d950      	bls.n	80061b0 <_svfiprintf_r+0x180>
 800610e:	2900      	cmp	r1, #0
 8006110:	d111      	bne.n	8006136 <_svfiprintf_r+0x106>
 8006112:	e017      	b.n	8006144 <_svfiprintf_r+0x114>
 8006114:	3501      	adds	r5, #1
 8006116:	e7af      	b.n	8006078 <_svfiprintf_r+0x48>
 8006118:	9b05      	ldr	r3, [sp, #20]
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	1ac0      	subs	r0, r0, r3
 800611e:	2301      	movs	r3, #1
 8006120:	4083      	lsls	r3, r0
 8006122:	4313      	orrs	r3, r2
 8006124:	002e      	movs	r6, r5
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	e7cc      	b.n	80060c4 <_svfiprintf_r+0x94>
 800612a:	9b07      	ldr	r3, [sp, #28]
 800612c:	1d19      	adds	r1, r3, #4
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	9107      	str	r1, [sp, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	db01      	blt.n	800613a <_svfiprintf_r+0x10a>
 8006136:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006138:	e004      	b.n	8006144 <_svfiprintf_r+0x114>
 800613a:	425b      	negs	r3, r3
 800613c:	60e3      	str	r3, [r4, #12]
 800613e:	2302      	movs	r3, #2
 8006140:	4313      	orrs	r3, r2
 8006142:	6023      	str	r3, [r4, #0]
 8006144:	782b      	ldrb	r3, [r5, #0]
 8006146:	2b2e      	cmp	r3, #46	@ 0x2e
 8006148:	d10c      	bne.n	8006164 <_svfiprintf_r+0x134>
 800614a:	786b      	ldrb	r3, [r5, #1]
 800614c:	2b2a      	cmp	r3, #42	@ 0x2a
 800614e:	d134      	bne.n	80061ba <_svfiprintf_r+0x18a>
 8006150:	9b07      	ldr	r3, [sp, #28]
 8006152:	3502      	adds	r5, #2
 8006154:	1d1a      	adds	r2, r3, #4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	9207      	str	r2, [sp, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	da01      	bge.n	8006162 <_svfiprintf_r+0x132>
 800615e:	2301      	movs	r3, #1
 8006160:	425b      	negs	r3, r3
 8006162:	9309      	str	r3, [sp, #36]	@ 0x24
 8006164:	4e2d      	ldr	r6, [pc, #180]	@ (800621c <_svfiprintf_r+0x1ec>)
 8006166:	2203      	movs	r2, #3
 8006168:	0030      	movs	r0, r6
 800616a:	7829      	ldrb	r1, [r5, #0]
 800616c:	f000 f9fe 	bl	800656c <memchr>
 8006170:	2800      	cmp	r0, #0
 8006172:	d006      	beq.n	8006182 <_svfiprintf_r+0x152>
 8006174:	2340      	movs	r3, #64	@ 0x40
 8006176:	1b80      	subs	r0, r0, r6
 8006178:	4083      	lsls	r3, r0
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	3501      	adds	r5, #1
 800617e:	4313      	orrs	r3, r2
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	7829      	ldrb	r1, [r5, #0]
 8006184:	2206      	movs	r2, #6
 8006186:	4826      	ldr	r0, [pc, #152]	@ (8006220 <_svfiprintf_r+0x1f0>)
 8006188:	1c6e      	adds	r6, r5, #1
 800618a:	7621      	strb	r1, [r4, #24]
 800618c:	f000 f9ee 	bl	800656c <memchr>
 8006190:	2800      	cmp	r0, #0
 8006192:	d038      	beq.n	8006206 <_svfiprintf_r+0x1d6>
 8006194:	4b23      	ldr	r3, [pc, #140]	@ (8006224 <_svfiprintf_r+0x1f4>)
 8006196:	2b00      	cmp	r3, #0
 8006198:	d122      	bne.n	80061e0 <_svfiprintf_r+0x1b0>
 800619a:	2207      	movs	r2, #7
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	3307      	adds	r3, #7
 80061a0:	4393      	bics	r3, r2
 80061a2:	3308      	adds	r3, #8
 80061a4:	9307      	str	r3, [sp, #28]
 80061a6:	6963      	ldr	r3, [r4, #20]
 80061a8:	9a04      	ldr	r2, [sp, #16]
 80061aa:	189b      	adds	r3, r3, r2
 80061ac:	6163      	str	r3, [r4, #20]
 80061ae:	e762      	b.n	8006076 <_svfiprintf_r+0x46>
 80061b0:	4343      	muls	r3, r0
 80061b2:	0035      	movs	r5, r6
 80061b4:	2101      	movs	r1, #1
 80061b6:	189b      	adds	r3, r3, r2
 80061b8:	e7a4      	b.n	8006104 <_svfiprintf_r+0xd4>
 80061ba:	2300      	movs	r3, #0
 80061bc:	200a      	movs	r0, #10
 80061be:	0019      	movs	r1, r3
 80061c0:	3501      	adds	r5, #1
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	782a      	ldrb	r2, [r5, #0]
 80061c6:	1c6e      	adds	r6, r5, #1
 80061c8:	3a30      	subs	r2, #48	@ 0x30
 80061ca:	2a09      	cmp	r2, #9
 80061cc:	d903      	bls.n	80061d6 <_svfiprintf_r+0x1a6>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0c8      	beq.n	8006164 <_svfiprintf_r+0x134>
 80061d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80061d4:	e7c6      	b.n	8006164 <_svfiprintf_r+0x134>
 80061d6:	4341      	muls	r1, r0
 80061d8:	0035      	movs	r5, r6
 80061da:	2301      	movs	r3, #1
 80061dc:	1889      	adds	r1, r1, r2
 80061de:	e7f1      	b.n	80061c4 <_svfiprintf_r+0x194>
 80061e0:	aa07      	add	r2, sp, #28
 80061e2:	9200      	str	r2, [sp, #0]
 80061e4:	0021      	movs	r1, r4
 80061e6:	003a      	movs	r2, r7
 80061e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006228 <_svfiprintf_r+0x1f8>)
 80061ea:	9803      	ldr	r0, [sp, #12]
 80061ec:	e000      	b.n	80061f0 <_svfiprintf_r+0x1c0>
 80061ee:	bf00      	nop
 80061f0:	9004      	str	r0, [sp, #16]
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	3301      	adds	r3, #1
 80061f6:	d1d6      	bne.n	80061a6 <_svfiprintf_r+0x176>
 80061f8:	89bb      	ldrh	r3, [r7, #12]
 80061fa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80061fc:	065b      	lsls	r3, r3, #25
 80061fe:	d500      	bpl.n	8006202 <_svfiprintf_r+0x1d2>
 8006200:	e72c      	b.n	800605c <_svfiprintf_r+0x2c>
 8006202:	b021      	add	sp, #132	@ 0x84
 8006204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006206:	aa07      	add	r2, sp, #28
 8006208:	9200      	str	r2, [sp, #0]
 800620a:	0021      	movs	r1, r4
 800620c:	003a      	movs	r2, r7
 800620e:	4b06      	ldr	r3, [pc, #24]	@ (8006228 <_svfiprintf_r+0x1f8>)
 8006210:	9803      	ldr	r0, [sp, #12]
 8006212:	f000 f87b 	bl	800630c <_printf_i>
 8006216:	e7eb      	b.n	80061f0 <_svfiprintf_r+0x1c0>
 8006218:	08006728 	.word	0x08006728
 800621c:	0800672e 	.word	0x0800672e
 8006220:	08006732 	.word	0x08006732
 8006224:	00000000 	.word	0x00000000
 8006228:	08005f71 	.word	0x08005f71

0800622c <_printf_common>:
 800622c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800622e:	0016      	movs	r6, r2
 8006230:	9301      	str	r3, [sp, #4]
 8006232:	688a      	ldr	r2, [r1, #8]
 8006234:	690b      	ldr	r3, [r1, #16]
 8006236:	000c      	movs	r4, r1
 8006238:	9000      	str	r0, [sp, #0]
 800623a:	4293      	cmp	r3, r2
 800623c:	da00      	bge.n	8006240 <_printf_common+0x14>
 800623e:	0013      	movs	r3, r2
 8006240:	0022      	movs	r2, r4
 8006242:	6033      	str	r3, [r6, #0]
 8006244:	3243      	adds	r2, #67	@ 0x43
 8006246:	7812      	ldrb	r2, [r2, #0]
 8006248:	2a00      	cmp	r2, #0
 800624a:	d001      	beq.n	8006250 <_printf_common+0x24>
 800624c:	3301      	adds	r3, #1
 800624e:	6033      	str	r3, [r6, #0]
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	069b      	lsls	r3, r3, #26
 8006254:	d502      	bpl.n	800625c <_printf_common+0x30>
 8006256:	6833      	ldr	r3, [r6, #0]
 8006258:	3302      	adds	r3, #2
 800625a:	6033      	str	r3, [r6, #0]
 800625c:	6822      	ldr	r2, [r4, #0]
 800625e:	2306      	movs	r3, #6
 8006260:	0015      	movs	r5, r2
 8006262:	401d      	ands	r5, r3
 8006264:	421a      	tst	r2, r3
 8006266:	d027      	beq.n	80062b8 <_printf_common+0x8c>
 8006268:	0023      	movs	r3, r4
 800626a:	3343      	adds	r3, #67	@ 0x43
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	1e5a      	subs	r2, r3, #1
 8006270:	4193      	sbcs	r3, r2
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	0692      	lsls	r2, r2, #26
 8006276:	d430      	bmi.n	80062da <_printf_common+0xae>
 8006278:	0022      	movs	r2, r4
 800627a:	9901      	ldr	r1, [sp, #4]
 800627c:	9800      	ldr	r0, [sp, #0]
 800627e:	9d08      	ldr	r5, [sp, #32]
 8006280:	3243      	adds	r2, #67	@ 0x43
 8006282:	47a8      	blx	r5
 8006284:	3001      	adds	r0, #1
 8006286:	d025      	beq.n	80062d4 <_printf_common+0xa8>
 8006288:	2206      	movs	r2, #6
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	2500      	movs	r5, #0
 800628e:	4013      	ands	r3, r2
 8006290:	2b04      	cmp	r3, #4
 8006292:	d105      	bne.n	80062a0 <_printf_common+0x74>
 8006294:	6833      	ldr	r3, [r6, #0]
 8006296:	68e5      	ldr	r5, [r4, #12]
 8006298:	1aed      	subs	r5, r5, r3
 800629a:	43eb      	mvns	r3, r5
 800629c:	17db      	asrs	r3, r3, #31
 800629e:	401d      	ands	r5, r3
 80062a0:	68a3      	ldr	r3, [r4, #8]
 80062a2:	6922      	ldr	r2, [r4, #16]
 80062a4:	4293      	cmp	r3, r2
 80062a6:	dd01      	ble.n	80062ac <_printf_common+0x80>
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	18ed      	adds	r5, r5, r3
 80062ac:	2600      	movs	r6, #0
 80062ae:	42b5      	cmp	r5, r6
 80062b0:	d120      	bne.n	80062f4 <_printf_common+0xc8>
 80062b2:	2000      	movs	r0, #0
 80062b4:	e010      	b.n	80062d8 <_printf_common+0xac>
 80062b6:	3501      	adds	r5, #1
 80062b8:	68e3      	ldr	r3, [r4, #12]
 80062ba:	6832      	ldr	r2, [r6, #0]
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	42ab      	cmp	r3, r5
 80062c0:	ddd2      	ble.n	8006268 <_printf_common+0x3c>
 80062c2:	0022      	movs	r2, r4
 80062c4:	2301      	movs	r3, #1
 80062c6:	9901      	ldr	r1, [sp, #4]
 80062c8:	9800      	ldr	r0, [sp, #0]
 80062ca:	9f08      	ldr	r7, [sp, #32]
 80062cc:	3219      	adds	r2, #25
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	d1f0      	bne.n	80062b6 <_printf_common+0x8a>
 80062d4:	2001      	movs	r0, #1
 80062d6:	4240      	negs	r0, r0
 80062d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062da:	2030      	movs	r0, #48	@ 0x30
 80062dc:	18e1      	adds	r1, r4, r3
 80062de:	3143      	adds	r1, #67	@ 0x43
 80062e0:	7008      	strb	r0, [r1, #0]
 80062e2:	0021      	movs	r1, r4
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	3145      	adds	r1, #69	@ 0x45
 80062e8:	7809      	ldrb	r1, [r1, #0]
 80062ea:	18a2      	adds	r2, r4, r2
 80062ec:	3243      	adds	r2, #67	@ 0x43
 80062ee:	3302      	adds	r3, #2
 80062f0:	7011      	strb	r1, [r2, #0]
 80062f2:	e7c1      	b.n	8006278 <_printf_common+0x4c>
 80062f4:	0022      	movs	r2, r4
 80062f6:	2301      	movs	r3, #1
 80062f8:	9901      	ldr	r1, [sp, #4]
 80062fa:	9800      	ldr	r0, [sp, #0]
 80062fc:	9f08      	ldr	r7, [sp, #32]
 80062fe:	321a      	adds	r2, #26
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	d0e6      	beq.n	80062d4 <_printf_common+0xa8>
 8006306:	3601      	adds	r6, #1
 8006308:	e7d1      	b.n	80062ae <_printf_common+0x82>
	...

0800630c <_printf_i>:
 800630c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630e:	b08b      	sub	sp, #44	@ 0x2c
 8006310:	9206      	str	r2, [sp, #24]
 8006312:	000a      	movs	r2, r1
 8006314:	3243      	adds	r2, #67	@ 0x43
 8006316:	9307      	str	r3, [sp, #28]
 8006318:	9005      	str	r0, [sp, #20]
 800631a:	9203      	str	r2, [sp, #12]
 800631c:	7e0a      	ldrb	r2, [r1, #24]
 800631e:	000c      	movs	r4, r1
 8006320:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006322:	2a78      	cmp	r2, #120	@ 0x78
 8006324:	d809      	bhi.n	800633a <_printf_i+0x2e>
 8006326:	2a62      	cmp	r2, #98	@ 0x62
 8006328:	d80b      	bhi.n	8006342 <_printf_i+0x36>
 800632a:	2a00      	cmp	r2, #0
 800632c:	d100      	bne.n	8006330 <_printf_i+0x24>
 800632e:	e0ba      	b.n	80064a6 <_printf_i+0x19a>
 8006330:	497a      	ldr	r1, [pc, #488]	@ (800651c <_printf_i+0x210>)
 8006332:	9104      	str	r1, [sp, #16]
 8006334:	2a58      	cmp	r2, #88	@ 0x58
 8006336:	d100      	bne.n	800633a <_printf_i+0x2e>
 8006338:	e08e      	b.n	8006458 <_printf_i+0x14c>
 800633a:	0025      	movs	r5, r4
 800633c:	3542      	adds	r5, #66	@ 0x42
 800633e:	702a      	strb	r2, [r5, #0]
 8006340:	e022      	b.n	8006388 <_printf_i+0x7c>
 8006342:	0010      	movs	r0, r2
 8006344:	3863      	subs	r0, #99	@ 0x63
 8006346:	2815      	cmp	r0, #21
 8006348:	d8f7      	bhi.n	800633a <_printf_i+0x2e>
 800634a:	f7f9 fedb 	bl	8000104 <__gnu_thumb1_case_shi>
 800634e:	0016      	.short	0x0016
 8006350:	fff6001f 	.word	0xfff6001f
 8006354:	fff6fff6 	.word	0xfff6fff6
 8006358:	001ffff6 	.word	0x001ffff6
 800635c:	fff6fff6 	.word	0xfff6fff6
 8006360:	fff6fff6 	.word	0xfff6fff6
 8006364:	0036009f 	.word	0x0036009f
 8006368:	fff6007e 	.word	0xfff6007e
 800636c:	00b0fff6 	.word	0x00b0fff6
 8006370:	0036fff6 	.word	0x0036fff6
 8006374:	fff6fff6 	.word	0xfff6fff6
 8006378:	0082      	.short	0x0082
 800637a:	0025      	movs	r5, r4
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	3542      	adds	r5, #66	@ 0x42
 8006380:	1d11      	adds	r1, r2, #4
 8006382:	6019      	str	r1, [r3, #0]
 8006384:	6813      	ldr	r3, [r2, #0]
 8006386:	702b      	strb	r3, [r5, #0]
 8006388:	2301      	movs	r3, #1
 800638a:	e09e      	b.n	80064ca <_printf_i+0x1be>
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	6809      	ldr	r1, [r1, #0]
 8006390:	1d02      	adds	r2, r0, #4
 8006392:	060d      	lsls	r5, r1, #24
 8006394:	d50b      	bpl.n	80063ae <_printf_i+0xa2>
 8006396:	6806      	ldr	r6, [r0, #0]
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	2e00      	cmp	r6, #0
 800639c:	da03      	bge.n	80063a6 <_printf_i+0x9a>
 800639e:	232d      	movs	r3, #45	@ 0x2d
 80063a0:	9a03      	ldr	r2, [sp, #12]
 80063a2:	4276      	negs	r6, r6
 80063a4:	7013      	strb	r3, [r2, #0]
 80063a6:	4b5d      	ldr	r3, [pc, #372]	@ (800651c <_printf_i+0x210>)
 80063a8:	270a      	movs	r7, #10
 80063aa:	9304      	str	r3, [sp, #16]
 80063ac:	e018      	b.n	80063e0 <_printf_i+0xd4>
 80063ae:	6806      	ldr	r6, [r0, #0]
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	0649      	lsls	r1, r1, #25
 80063b4:	d5f1      	bpl.n	800639a <_printf_i+0x8e>
 80063b6:	b236      	sxth	r6, r6
 80063b8:	e7ef      	b.n	800639a <_printf_i+0x8e>
 80063ba:	6808      	ldr	r0, [r1, #0]
 80063bc:	6819      	ldr	r1, [r3, #0]
 80063be:	c940      	ldmia	r1!, {r6}
 80063c0:	0605      	lsls	r5, r0, #24
 80063c2:	d402      	bmi.n	80063ca <_printf_i+0xbe>
 80063c4:	0640      	lsls	r0, r0, #25
 80063c6:	d500      	bpl.n	80063ca <_printf_i+0xbe>
 80063c8:	b2b6      	uxth	r6, r6
 80063ca:	6019      	str	r1, [r3, #0]
 80063cc:	4b53      	ldr	r3, [pc, #332]	@ (800651c <_printf_i+0x210>)
 80063ce:	270a      	movs	r7, #10
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	2a6f      	cmp	r2, #111	@ 0x6f
 80063d4:	d100      	bne.n	80063d8 <_printf_i+0xcc>
 80063d6:	3f02      	subs	r7, #2
 80063d8:	0023      	movs	r3, r4
 80063da:	2200      	movs	r2, #0
 80063dc:	3343      	adds	r3, #67	@ 0x43
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	60a3      	str	r3, [r4, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	db06      	blt.n	80063f6 <_printf_i+0xea>
 80063e8:	2104      	movs	r1, #4
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	9d03      	ldr	r5, [sp, #12]
 80063ee:	438a      	bics	r2, r1
 80063f0:	6022      	str	r2, [r4, #0]
 80063f2:	4333      	orrs	r3, r6
 80063f4:	d00c      	beq.n	8006410 <_printf_i+0x104>
 80063f6:	9d03      	ldr	r5, [sp, #12]
 80063f8:	0030      	movs	r0, r6
 80063fa:	0039      	movs	r1, r7
 80063fc:	f7f9 ff12 	bl	8000224 <__aeabi_uidivmod>
 8006400:	9b04      	ldr	r3, [sp, #16]
 8006402:	3d01      	subs	r5, #1
 8006404:	5c5b      	ldrb	r3, [r3, r1]
 8006406:	702b      	strb	r3, [r5, #0]
 8006408:	0033      	movs	r3, r6
 800640a:	0006      	movs	r6, r0
 800640c:	429f      	cmp	r7, r3
 800640e:	d9f3      	bls.n	80063f8 <_printf_i+0xec>
 8006410:	2f08      	cmp	r7, #8
 8006412:	d109      	bne.n	8006428 <_printf_i+0x11c>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	07db      	lsls	r3, r3, #31
 8006418:	d506      	bpl.n	8006428 <_printf_i+0x11c>
 800641a:	6862      	ldr	r2, [r4, #4]
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	429a      	cmp	r2, r3
 8006420:	dc02      	bgt.n	8006428 <_printf_i+0x11c>
 8006422:	2330      	movs	r3, #48	@ 0x30
 8006424:	3d01      	subs	r5, #1
 8006426:	702b      	strb	r3, [r5, #0]
 8006428:	9b03      	ldr	r3, [sp, #12]
 800642a:	1b5b      	subs	r3, r3, r5
 800642c:	6123      	str	r3, [r4, #16]
 800642e:	9b07      	ldr	r3, [sp, #28]
 8006430:	0021      	movs	r1, r4
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	9805      	ldr	r0, [sp, #20]
 8006436:	9b06      	ldr	r3, [sp, #24]
 8006438:	aa09      	add	r2, sp, #36	@ 0x24
 800643a:	f7ff fef7 	bl	800622c <_printf_common>
 800643e:	3001      	adds	r0, #1
 8006440:	d148      	bne.n	80064d4 <_printf_i+0x1c8>
 8006442:	2001      	movs	r0, #1
 8006444:	4240      	negs	r0, r0
 8006446:	b00b      	add	sp, #44	@ 0x2c
 8006448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644a:	2220      	movs	r2, #32
 800644c:	6809      	ldr	r1, [r1, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	2278      	movs	r2, #120	@ 0x78
 8006454:	4932      	ldr	r1, [pc, #200]	@ (8006520 <_printf_i+0x214>)
 8006456:	9104      	str	r1, [sp, #16]
 8006458:	0021      	movs	r1, r4
 800645a:	3145      	adds	r1, #69	@ 0x45
 800645c:	700a      	strb	r2, [r1, #0]
 800645e:	6819      	ldr	r1, [r3, #0]
 8006460:	6822      	ldr	r2, [r4, #0]
 8006462:	c940      	ldmia	r1!, {r6}
 8006464:	0610      	lsls	r0, r2, #24
 8006466:	d402      	bmi.n	800646e <_printf_i+0x162>
 8006468:	0650      	lsls	r0, r2, #25
 800646a:	d500      	bpl.n	800646e <_printf_i+0x162>
 800646c:	b2b6      	uxth	r6, r6
 800646e:	6019      	str	r1, [r3, #0]
 8006470:	07d3      	lsls	r3, r2, #31
 8006472:	d502      	bpl.n	800647a <_printf_i+0x16e>
 8006474:	2320      	movs	r3, #32
 8006476:	4313      	orrs	r3, r2
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	2e00      	cmp	r6, #0
 800647c:	d001      	beq.n	8006482 <_printf_i+0x176>
 800647e:	2710      	movs	r7, #16
 8006480:	e7aa      	b.n	80063d8 <_printf_i+0xcc>
 8006482:	2220      	movs	r2, #32
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	4393      	bics	r3, r2
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	e7f8      	b.n	800647e <_printf_i+0x172>
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	680d      	ldr	r5, [r1, #0]
 8006490:	1d10      	adds	r0, r2, #4
 8006492:	6949      	ldr	r1, [r1, #20]
 8006494:	6018      	str	r0, [r3, #0]
 8006496:	6813      	ldr	r3, [r2, #0]
 8006498:	062e      	lsls	r6, r5, #24
 800649a:	d501      	bpl.n	80064a0 <_printf_i+0x194>
 800649c:	6019      	str	r1, [r3, #0]
 800649e:	e002      	b.n	80064a6 <_printf_i+0x19a>
 80064a0:	066d      	lsls	r5, r5, #25
 80064a2:	d5fb      	bpl.n	800649c <_printf_i+0x190>
 80064a4:	8019      	strh	r1, [r3, #0]
 80064a6:	2300      	movs	r3, #0
 80064a8:	9d03      	ldr	r5, [sp, #12]
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	e7bf      	b.n	800642e <_printf_i+0x122>
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	1d11      	adds	r1, r2, #4
 80064b2:	6019      	str	r1, [r3, #0]
 80064b4:	6815      	ldr	r5, [r2, #0]
 80064b6:	2100      	movs	r1, #0
 80064b8:	0028      	movs	r0, r5
 80064ba:	6862      	ldr	r2, [r4, #4]
 80064bc:	f000 f856 	bl	800656c <memchr>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d001      	beq.n	80064c8 <_printf_i+0x1bc>
 80064c4:	1b40      	subs	r0, r0, r5
 80064c6:	6060      	str	r0, [r4, #4]
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	6123      	str	r3, [r4, #16]
 80064cc:	2300      	movs	r3, #0
 80064ce:	9a03      	ldr	r2, [sp, #12]
 80064d0:	7013      	strb	r3, [r2, #0]
 80064d2:	e7ac      	b.n	800642e <_printf_i+0x122>
 80064d4:	002a      	movs	r2, r5
 80064d6:	6923      	ldr	r3, [r4, #16]
 80064d8:	9906      	ldr	r1, [sp, #24]
 80064da:	9805      	ldr	r0, [sp, #20]
 80064dc:	9d07      	ldr	r5, [sp, #28]
 80064de:	47a8      	blx	r5
 80064e0:	3001      	adds	r0, #1
 80064e2:	d0ae      	beq.n	8006442 <_printf_i+0x136>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	079b      	lsls	r3, r3, #30
 80064e8:	d415      	bmi.n	8006516 <_printf_i+0x20a>
 80064ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ec:	68e0      	ldr	r0, [r4, #12]
 80064ee:	4298      	cmp	r0, r3
 80064f0:	daa9      	bge.n	8006446 <_printf_i+0x13a>
 80064f2:	0018      	movs	r0, r3
 80064f4:	e7a7      	b.n	8006446 <_printf_i+0x13a>
 80064f6:	0022      	movs	r2, r4
 80064f8:	2301      	movs	r3, #1
 80064fa:	9906      	ldr	r1, [sp, #24]
 80064fc:	9805      	ldr	r0, [sp, #20]
 80064fe:	9e07      	ldr	r6, [sp, #28]
 8006500:	3219      	adds	r2, #25
 8006502:	47b0      	blx	r6
 8006504:	3001      	adds	r0, #1
 8006506:	d09c      	beq.n	8006442 <_printf_i+0x136>
 8006508:	3501      	adds	r5, #1
 800650a:	68e3      	ldr	r3, [r4, #12]
 800650c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800650e:	1a9b      	subs	r3, r3, r2
 8006510:	42ab      	cmp	r3, r5
 8006512:	dcf0      	bgt.n	80064f6 <_printf_i+0x1ea>
 8006514:	e7e9      	b.n	80064ea <_printf_i+0x1de>
 8006516:	2500      	movs	r5, #0
 8006518:	e7f7      	b.n	800650a <_printf_i+0x1fe>
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	08006739 	.word	0x08006739
 8006520:	0800674a 	.word	0x0800674a

08006524 <memmove>:
 8006524:	b510      	push	{r4, lr}
 8006526:	4288      	cmp	r0, r1
 8006528:	d902      	bls.n	8006530 <memmove+0xc>
 800652a:	188b      	adds	r3, r1, r2
 800652c:	4298      	cmp	r0, r3
 800652e:	d308      	bcc.n	8006542 <memmove+0x1e>
 8006530:	2300      	movs	r3, #0
 8006532:	429a      	cmp	r2, r3
 8006534:	d007      	beq.n	8006546 <memmove+0x22>
 8006536:	5ccc      	ldrb	r4, [r1, r3]
 8006538:	54c4      	strb	r4, [r0, r3]
 800653a:	3301      	adds	r3, #1
 800653c:	e7f9      	b.n	8006532 <memmove+0xe>
 800653e:	5c8b      	ldrb	r3, [r1, r2]
 8006540:	5483      	strb	r3, [r0, r2]
 8006542:	3a01      	subs	r2, #1
 8006544:	d2fb      	bcs.n	800653e <memmove+0x1a>
 8006546:	bd10      	pop	{r4, pc}

08006548 <_sbrk_r>:
 8006548:	2300      	movs	r3, #0
 800654a:	b570      	push	{r4, r5, r6, lr}
 800654c:	4d06      	ldr	r5, [pc, #24]	@ (8006568 <_sbrk_r+0x20>)
 800654e:	0004      	movs	r4, r0
 8006550:	0008      	movs	r0, r1
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	f7fa fbce 	bl	8000cf4 <_sbrk>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d103      	bne.n	8006564 <_sbrk_r+0x1c>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d000      	beq.n	8006564 <_sbrk_r+0x1c>
 8006562:	6023      	str	r3, [r4, #0]
 8006564:	bd70      	pop	{r4, r5, r6, pc}
 8006566:	46c0      	nop			@ (mov r8, r8)
 8006568:	20000320 	.word	0x20000320

0800656c <memchr>:
 800656c:	b2c9      	uxtb	r1, r1
 800656e:	1882      	adds	r2, r0, r2
 8006570:	4290      	cmp	r0, r2
 8006572:	d101      	bne.n	8006578 <memchr+0xc>
 8006574:	2000      	movs	r0, #0
 8006576:	4770      	bx	lr
 8006578:	7803      	ldrb	r3, [r0, #0]
 800657a:	428b      	cmp	r3, r1
 800657c:	d0fb      	beq.n	8006576 <memchr+0xa>
 800657e:	3001      	adds	r0, #1
 8006580:	e7f6      	b.n	8006570 <memchr+0x4>

08006582 <memcpy>:
 8006582:	2300      	movs	r3, #0
 8006584:	b510      	push	{r4, lr}
 8006586:	429a      	cmp	r2, r3
 8006588:	d100      	bne.n	800658c <memcpy+0xa>
 800658a:	bd10      	pop	{r4, pc}
 800658c:	5ccc      	ldrb	r4, [r1, r3]
 800658e:	54c4      	strb	r4, [r0, r3]
 8006590:	3301      	adds	r3, #1
 8006592:	e7f8      	b.n	8006586 <memcpy+0x4>

08006594 <_realloc_r>:
 8006594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006596:	0006      	movs	r6, r0
 8006598:	000c      	movs	r4, r1
 800659a:	0015      	movs	r5, r2
 800659c:	2900      	cmp	r1, #0
 800659e:	d105      	bne.n	80065ac <_realloc_r+0x18>
 80065a0:	0011      	movs	r1, r2
 80065a2:	f7ff fc55 	bl	8005e50 <_malloc_r>
 80065a6:	0004      	movs	r4, r0
 80065a8:	0020      	movs	r0, r4
 80065aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065ac:	2a00      	cmp	r2, #0
 80065ae:	d103      	bne.n	80065b8 <_realloc_r+0x24>
 80065b0:	f7ff fbe2 	bl	8005d78 <_free_r>
 80065b4:	002c      	movs	r4, r5
 80065b6:	e7f7      	b.n	80065a8 <_realloc_r+0x14>
 80065b8:	f000 f81c 	bl	80065f4 <_malloc_usable_size_r>
 80065bc:	0007      	movs	r7, r0
 80065be:	4285      	cmp	r5, r0
 80065c0:	d802      	bhi.n	80065c8 <_realloc_r+0x34>
 80065c2:	0843      	lsrs	r3, r0, #1
 80065c4:	42ab      	cmp	r3, r5
 80065c6:	d3ef      	bcc.n	80065a8 <_realloc_r+0x14>
 80065c8:	0029      	movs	r1, r5
 80065ca:	0030      	movs	r0, r6
 80065cc:	f7ff fc40 	bl	8005e50 <_malloc_r>
 80065d0:	9001      	str	r0, [sp, #4]
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d101      	bne.n	80065da <_realloc_r+0x46>
 80065d6:	9c01      	ldr	r4, [sp, #4]
 80065d8:	e7e6      	b.n	80065a8 <_realloc_r+0x14>
 80065da:	002a      	movs	r2, r5
 80065dc:	42bd      	cmp	r5, r7
 80065de:	d900      	bls.n	80065e2 <_realloc_r+0x4e>
 80065e0:	003a      	movs	r2, r7
 80065e2:	0021      	movs	r1, r4
 80065e4:	9801      	ldr	r0, [sp, #4]
 80065e6:	f7ff ffcc 	bl	8006582 <memcpy>
 80065ea:	0021      	movs	r1, r4
 80065ec:	0030      	movs	r0, r6
 80065ee:	f7ff fbc3 	bl	8005d78 <_free_r>
 80065f2:	e7f0      	b.n	80065d6 <_realloc_r+0x42>

080065f4 <_malloc_usable_size_r>:
 80065f4:	1f0b      	subs	r3, r1, #4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	1f18      	subs	r0, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da01      	bge.n	8006602 <_malloc_usable_size_r+0xe>
 80065fe:	580b      	ldr	r3, [r1, r0]
 8006600:	18c0      	adds	r0, r0, r3
 8006602:	4770      	bx	lr

08006604 <_init>:
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006606:	46c0      	nop			@ (mov r8, r8)
 8006608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660a:	bc08      	pop	{r3}
 800660c:	469e      	mov	lr, r3
 800660e:	4770      	bx	lr

08006610 <_fini>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	46c0      	nop			@ (mov r8, r8)
 8006614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006616:	bc08      	pop	{r3}
 8006618:	469e      	mov	lr, r3
 800661a:	4770      	bx	lr
