
INTERRUPTS PT5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067cc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006888  08006888  00007888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069ac  080069ac  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080069ac  080069ac  000079ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b4  080069b4  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080069b4  080069b4  000079b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069bc  080069bc  000079bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080069c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000005c  08006a1c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08006a1c  0000832c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001400f  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e40  00000000  00000000  0001c093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0001eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d83  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf1f  00000000  00000000  00020d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016653  00000000  00000000  0003ccb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac096  00000000  00000000  00053305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff39b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004268  00000000  00000000  000ff3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00103648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006870 	.word	0x08006870

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08006870 	.word	0x08006870

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <_Z10debugPrintPKcz>:
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

void debugPrint(const char *fmt, ...)
{
 8000630:	b40f      	push	{r0, r1, r2, r3}
 8000632:	b580      	push	{r7, lr}
 8000634:	b092      	sub	sp, #72	@ 0x48
 8000636:	af00      	add	r7, sp, #0
    char buf[64];
    va_list args;
    va_start(args, fmt);
 8000638:	2354      	movs	r3, #84	@ 0x54
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buf, sizeof(buf), fmt, args);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000642:	1d38      	adds	r0, r7, #4
 8000644:	2140      	movs	r1, #64	@ 0x40
 8000646:	f005 fc8d 	bl	8005f64 <vsniprintf>
 800064a:	0003      	movs	r3, r0
 800064c:	647b      	str	r3, [r7, #68]	@ 0x44
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 800064e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000650:	b29a      	uxth	r2, r3
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	1d39      	adds	r1, r7, #4
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <_Z10debugPrintPKcz+0x3c>)
 800065a:	f003 feff 	bl	800445c <HAL_UART_Transmit>
}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b012      	add	sp, #72	@ 0x48
 8000664:	bc80      	pop	{r7}
 8000666:	bc08      	pop	{r3}
 8000668:	b004      	add	sp, #16
 800066a:	4718      	bx	r3
 800066c:	2000014c 	.word	0x2000014c

08000670 <maincpp>:
#define SERVO_MAX 2500
#define ADC_MAX 4095
#define SERVO_RANGE (SERVO_MAX - SERVO_MIN)

void maincpp(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&SERVO_TIMER, TIM_CHANNEL_1);
 8000676:	4b36      	ldr	r3, [pc, #216]	@ (8000750 <maincpp+0xe0>)
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f002 fee6 	bl	800344c <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pot_value,1);
 8000680:	4934      	ldr	r1, [pc, #208]	@ (8000754 <maincpp+0xe4>)
 8000682:	4b35      	ldr	r3, [pc, #212]	@ (8000758 <maincpp+0xe8>)
 8000684:	2201      	movs	r2, #1
 8000686:	0018      	movs	r0, r3
 8000688:	f001 f8de 	bl	8001848 <HAL_ADC_Start_DMA>
	MX_USART2_UART_Init();
 800068c:	f000 fc6a 	bl	8000f64 <MX_USART2_UART_Init>
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000690:	4932      	ldr	r1, [pc, #200]	@ (800075c <maincpp+0xec>)
 8000692:	4b33      	ldr	r3, [pc, #204]	@ (8000760 <maincpp+0xf0>)
 8000694:	2201      	movs	r2, #1
 8000696:	0018      	movs	r0, r3
 8000698:	f003 ff84 	bl	80045a4 <HAL_UART_Receive_IT>

	uint16_t pos = SERVO_MIN;
 800069c:	1dbb      	adds	r3, r7, #6
 800069e:	22fa      	movs	r2, #250	@ 0xfa
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	801a      	strh	r2, [r3, #0]
	int8_t dir = +1;
 80006a4:	1d7b      	adds	r3, r7, #5
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(sweep_enabled)
 80006aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <maincpp+0xf4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d02a      	beq.n	800070a <maincpp+0x9a>
		{
		SERVO_TIMER.Instance->CCR1 = pos;
 80006b4:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <maincpp+0xe0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1dba      	adds	r2, r7, #6
 80006ba:	8812      	ldrh	r2, [r2, #0]
 80006bc:	635a      	str	r2, [r3, #52]	@ 0x34

		pos += dir;
 80006be:	1d7b      	adds	r3, r7, #5
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	b299      	uxth	r1, r3
 80006c6:	1dbb      	adds	r3, r7, #6
 80006c8:	1dba      	adds	r2, r7, #6
 80006ca:	8812      	ldrh	r2, [r2, #0]
 80006cc:	188a      	adds	r2, r1, r2
 80006ce:	801a      	strh	r2, [r3, #0]

		if(pos >= SERVO_MAX)
 80006d0:	1dbb      	adds	r3, r7, #6
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <maincpp+0xf8>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d906      	bls.n	80006e8 <maincpp+0x78>
		{
		pos = SERVO_MAX;
 80006da:	1dbb      	adds	r3, r7, #6
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <maincpp+0xfc>)
 80006de:	801a      	strh	r2, [r3, #0]
		dir = -1;
 80006e0:	1d7b      	adds	r3, r7, #5
 80006e2:	22ff      	movs	r2, #255	@ 0xff
 80006e4:	701a      	strb	r2, [r3, #0]
 80006e6:	e00c      	b.n	8000702 <maincpp+0x92>
		}
		else if ( pos <= SERVO_MIN)
 80006e8:	1dbb      	adds	r3, r7, #6
 80006ea:	881a      	ldrh	r2, [r3, #0]
 80006ec:	23fa      	movs	r3, #250	@ 0xfa
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d806      	bhi.n	8000702 <maincpp+0x92>
		{
		pos = SERVO_MIN;
 80006f4:	1dbb      	adds	r3, r7, #6
 80006f6:	22fa      	movs	r2, #250	@ 0xfa
 80006f8:	0052      	lsls	r2, r2, #1
 80006fa:	801a      	strh	r2, [r3, #0]
		dir = +1;
 80006fc:	1d7b      	adds	r3, r7, #5
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]

		}
		HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fd8c 	bl	8001220 <HAL_Delay>
 8000708:	e7cf      	b.n	80006aa <maincpp+0x3a>

		}
		else
		{
			pos = (pot_value * SERVO_RANGE) / ADC_MAX + SERVO_MIN;
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <maincpp+0xe4>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	0013      	movs	r3, r2
 8000710:	015b      	lsls	r3, r3, #5
 8000712:	1a9b      	subs	r3, r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	189b      	adds	r3, r3, r2
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	4915      	ldr	r1, [pc, #84]	@ (8000770 <maincpp+0x100>)
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff fcfb 	bl	8000118 <__udivsi3>
 8000722:	0003      	movs	r3, r0
 8000724:	b29a      	uxth	r2, r3
 8000726:	1dbb      	adds	r3, r7, #6
 8000728:	32f5      	adds	r2, #245	@ 0xf5
 800072a:	32ff      	adds	r2, #255	@ 0xff
 800072c:	801a      	strh	r2, [r3, #0]
			           SERVO_TIMER.Instance->CCR1 = pos;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <maincpp+0xe0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	1dba      	adds	r2, r7, #6
 8000734:	8812      	ldrh	r2, [r2, #0]
 8000736:	635a      	str	r2, [r3, #52]	@ 0x34
			           debugPrint("POS=%u, ADC=%lu\r\n", pos, pot_value);
 8000738:	1dbb      	adds	r3, r7, #6
 800073a:	8819      	ldrh	r1, [r3, #0]
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <maincpp+0xe4>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <maincpp+0x104>)
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff ff74 	bl	8000630 <_Z10debugPrintPKcz>
			            HAL_Delay(200);
 8000748:	20c8      	movs	r0, #200	@ 0xc8
 800074a:	f000 fd69 	bl	8001220 <HAL_Delay>
		if(sweep_enabled)
 800074e:	e7ac      	b.n	80006aa <maincpp+0x3a>
 8000750:	20000100 	.word	0x20000100
 8000754:	2000007c 	.word	0x2000007c
 8000758:	20000098 	.word	0x20000098
 800075c:	20000078 	.word	0x20000078
 8000760:	2000014c 	.word	0x2000014c
 8000764:	20000080 	.word	0x20000080
 8000768:	000009c3 	.word	0x000009c3
 800076c:	000009c4 	.word	0x000009c4
 8000770:	00000fff 	.word	0x00000fff
 8000774:	08006888 	.word	0x08006888

08000778 <HAL_GPIO_EXTI_Rising_Callback>:

	}
}
}
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	0002      	movs	r2, r0
 8000780:	1dbb      	adds	r3, r7, #6
 8000782:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin ==BUTTON_INT13_Pin)
 8000784:	1dbb      	adds	r3, r7, #6
 8000786:	881a      	ldrh	r2, [r3, #0]
 8000788:	2380      	movs	r3, #128	@ 0x80
 800078a:	019b      	lsls	r3, r3, #6
 800078c:	429a      	cmp	r2, r3
 800078e:	d13f      	bne.n	8000810 <HAL_GPIO_EXTI_Rising_Callback+0x98>
	{
		uint32_t now = HAL_GetTick();
 8000790:	f000 fd3c 	bl	800120c <HAL_GetTick>
 8000794:	0003      	movs	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]

		if( now - lastRiseTick < DEBOUNCE) return;
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	1ad2      	subs	r2, r2, r3
 80007a0:	2113      	movs	r1, #19
 80007a2:	2300      	movs	r3, #0
 80007a4:	4291      	cmp	r1, r2
 80007a6:	415b      	adcs	r3, r3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d12f      	bne.n	800080e <HAL_GPIO_EXTI_Rising_Callback+0x96>

		uint32_t held = now - time_since_button_pressed;
 80007ae:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	60bb      	str	r3, [r7, #8]

		if(held < NORMAL_BUTTON_PRESS)
 80007b8:	68ba      	ldr	r2, [r7, #8]
 80007ba:	23fa      	movs	r3, #250	@ 0xfa
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	429a      	cmp	r2, r3
 80007c0:	d20a      	bcs.n	80007d8 <HAL_GPIO_EXTI_Rising_Callback+0x60>
		{
			sweep_enabled = true;
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80007c8:	23a0      	movs	r3, #160	@ 0xa0
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	2201      	movs	r2, #1
 80007ce:	2120      	movs	r1, #32
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 fed3 	bl	800257c <HAL_GPIO_WritePin>
 80007d6:	e00e      	b.n	80007f6 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
		}
		else if (held< LONG_BUTTON_PRESS)
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	23fa      	movs	r3, #250	@ 0xfa
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	429a      	cmp	r2, r3
 80007e0:	d209      	bcs.n	80007f6 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
		{
			sweep_enabled = false;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin( LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007e8:	23a0      	movs	r3, #160	@ 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2200      	movs	r2, #0
 80007ee:	2120      	movs	r1, #32
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fec3 	bl	800257c <HAL_GPIO_WritePin>

		}
		time_since_button_pressed = now;
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	601a      	str	r2, [r3, #0]
		button_releases++;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8000804:	601a      	str	r2, [r3, #0]
		lastRiseTick = now;
 8000806:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e000      	b.n	8000810 <HAL_GPIO_EXTI_Rising_Callback+0x98>
		if( now - lastRiseTick < DEBOUNCE) return;
 800080e:	46c0      	nop			@ (mov r8, r8)

	}
}
 8000810:	46bd      	mov	sp, r7
 8000812:	b004      	add	sp, #16
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	20000090 	.word	0x20000090
 800081c:	2000008c 	.word	0x2000008c
 8000820:	20000080 	.word	0x20000080
 8000824:	20000088 	.word	0x20000088

08000828 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	0002      	movs	r2, r0
 8000830:	1dbb      	adds	r3, r7, #6
 8000832:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_INT13_Pin)
 8000834:	1dbb      	adds	r3, r7, #6
 8000836:	881a      	ldrh	r2, [r3, #0]
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	019b      	lsls	r3, r3, #6
 800083c:	429a      	cmp	r2, r3
 800083e:	d11d      	bne.n	800087c <HAL_GPIO_EXTI_Falling_Callback+0x54>
	{
		uint32_t now = HAL_GetTick();
 8000840:	f000 fce4 	bl	800120c <HAL_GetTick>
 8000844:	0003      	movs	r3, r0
 8000846:	60fb      	str	r3, [r7, #12]

		if( now - lastFallTick < DEBOUNCE) return;
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	1ad2      	subs	r2, r2, r3
 8000850:	2113      	movs	r1, #19
 8000852:	2300      	movs	r3, #0
 8000854:	4291      	cmp	r1, r2
 8000856:	415b      	adcs	r3, r3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10d      	bne.n	800087a <HAL_GPIO_EXTI_Falling_Callback+0x52>

		time_since_button_pressed = HAL_GetTick();
 800085e:	f000 fcd5 	bl	800120c <HAL_GetTick>
 8000862:	0002      	movs	r2, r0
 8000864:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8000866:	601a      	str	r2, [r3, #0]
		button_pressed++;
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	4b07      	ldr	r3, [pc, #28]	@ (800088c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000870:	601a      	str	r2, [r3, #0]
		lastFallTick = now;
 8000872:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e000      	b.n	800087c <HAL_GPIO_EXTI_Falling_Callback+0x54>
		if( now - lastFallTick < DEBOUNCE) return;
 800087a:	46c0      	nop			@ (mov r8, r8)
	}
}
 800087c:	46bd      	mov	sp, r7
 800087e:	b004      	add	sp, #16
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	20000094 	.word	0x20000094
 8000888:	2000008c 	.word	0x2000008c
 800088c:	20000084 	.word	0x20000084

08000890 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <HAL_UART_RxCpltCallback+0x28>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d105      	bne.n	80008ae <HAL_UART_RxCpltCallback+0x1e>
    {

        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80008a2:	4906      	ldr	r1, [pc, #24]	@ (80008bc <HAL_UART_RxCpltCallback+0x2c>)
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_UART_RxCpltCallback+0x30>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	0018      	movs	r0, r3
 80008aa:	f003 fe7b 	bl	80045a4 <HAL_UART_Receive_IT>
    }
}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b002      	add	sp, #8
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	40004400 	.word	0x40004400
 80008bc:	20000078 	.word	0x20000078
 80008c0:	2000014c 	.word	0x2000014c

080008c4 <_Z41__static_initialization_and_destruction_0v>:
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
volatile uint32_t time_since_button_pressed = HAL_GetTick();
 80008c8:	f000 fca0 	bl	800120c <HAL_GetTick>
 80008cc:	0002      	movs	r2, r0
 80008ce:	4b02      	ldr	r3, [pc, #8]	@ (80008d8 <_Z41__static_initialization_and_destruction_0v+0x14>)
 80008d0:	601a      	str	r2, [r3, #0]
}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000008c 	.word	0x2000008c

080008dc <_GLOBAL__sub_I__Z10debugPrintPKcz>:
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
 80008e0:	f7ff fff0 	bl	80008c4 <_Z41__static_initialization_and_destruction_0v>
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	0018      	movs	r0, r3
 80008f2:	230c      	movs	r3, #12
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f005 fb40 	bl	8005f7c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <MX_ADC1_Init+0xc4>)
 80008fe:	4a2c      	ldr	r2, [pc, #176]	@ (80009b0 <MX_ADC1_Init+0xc8>)
 8000900:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000902:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	05d2      	lsls	r2, r2, #23
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090a:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <MX_ADC1_Init+0xc4>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000910:	4b26      	ldr	r3, [pc, #152]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000916:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091c:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <MX_ADC1_Init+0xc4>)
 800091e:	2204      	movs	r2, #4
 8000920:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000922:	4b22      	ldr	r3, [pc, #136]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000924:	2200      	movs	r2, #0
 8000926:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000928:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <MX_ADC1_Init+0xc4>)
 800092a:	2200      	movs	r2, #0
 800092c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800092e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000930:	2201      	movs	r2, #1
 8000932:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000934:	4b1d      	ldr	r3, [pc, #116]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000936:	2201      	movs	r2, #1
 8000938:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800093a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <MX_ADC1_Init+0xc4>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000940:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000948:	222c      	movs	r2, #44	@ 0x2c
 800094a:	2100      	movs	r1, #0
 800094c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000950:	2200      	movs	r2, #0
 8000952:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000956:	2200      	movs	r2, #0
 8000958:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_ADC1_Init+0xc4>)
 800095c:	2200      	movs	r2, #0
 800095e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000962:	223c      	movs	r2, #60	@ 0x3c
 8000964:	2100      	movs	r1, #0
 8000966:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000968:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <MX_ADC1_Init+0xc4>)
 800096a:	2200      	movs	r2, #0
 800096c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fdc1 	bl	80014f8 <HAL_ADC_Init>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800097a:	f000 f947 	bl	8000c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000990:	1d3a      	adds	r2, r7, #4
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_ADC1_Init+0xc4>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f000 fffc 	bl	8001994 <HAL_ADC_ConfigChannel>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80009a0:	f000 f934 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000098 	.word	0x20000098
 80009b0:	40012400 	.word	0x40012400

080009b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b08b      	sub	sp, #44	@ 0x2c
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	2414      	movs	r4, #20
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	0018      	movs	r0, r3
 80009c2:	2314      	movs	r3, #20
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f005 fad8 	bl	8005f7c <memset>
  if(adcHandle->Instance==ADC1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a18      	ldr	r2, [pc, #96]	@ (8000a34 <HAL_ADC_MspInit+0x80>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d129      	bne.n	8000a2a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <HAL_ADC_MspInit+0x84>)
 80009d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <HAL_ADC_MspInit+0x84>)
 80009dc:	2180      	movs	r1, #128	@ 0x80
 80009de:	0349      	lsls	r1, r1, #13
 80009e0:	430a      	orrs	r2, r1
 80009e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <HAL_ADC_MspInit+0x84>)
 80009e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009e8:	2380      	movs	r3, #128	@ 0x80
 80009ea:	035b      	lsls	r3, r3, #13
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <HAL_ADC_MspInit+0x84>)
 80009f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <HAL_ADC_MspInit+0x84>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	430a      	orrs	r2, r1
 80009fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <HAL_ADC_MspInit+0x84>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a02:	2201      	movs	r2, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	2203      	movs	r2, #3
 8000a14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	193a      	adds	r2, r7, r4
 8000a1e:	23a0      	movs	r3, #160	@ 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	0011      	movs	r1, r2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f001 fc45 	bl	80022b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b00b      	add	sp, #44	@ 0x2c
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	40012400 	.word	0x40012400
 8000a38:	40021000 	.word	0x40021000

08000a3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b08b      	sub	sp, #44	@ 0x2c
 8000a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	2414      	movs	r4, #20
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	0018      	movs	r0, r3
 8000a48:	2314      	movs	r3, #20
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f005 fa95 	bl	8005f7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b34      	ldr	r3, [pc, #208]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a56:	4b33      	ldr	r3, [pc, #204]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000a58:	2104      	movs	r1, #4
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a5e:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a62:	2204      	movs	r2, #4
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000a70:	2120      	movs	r1, #32
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a76:	4b2b      	ldr	r3, [pc, #172]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a86:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a8e:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a92:	2201      	movs	r2, #1
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <MX_GPIO_Init+0xe8>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aaa:	2202      	movs	r2, #2
 8000aac:	4013      	ands	r3, r2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ab2:	23a0      	movs	r3, #160	@ 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2120      	movs	r1, #32
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 fd5e 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INT13_Pin */
  GPIO_InitStruct.Pin = BUTTON_INT13_Pin;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	0192      	lsls	r2, r2, #6
 8000ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	22c4      	movs	r2, #196	@ 0xc4
 8000acc:	0392      	lsls	r2, r2, #14
 8000ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INT13_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <MX_GPIO_Init+0xec>)
 8000ada:	0019      	movs	r1, r3
 8000adc:	0010      	movs	r0, r2
 8000ade:	f001 fbe9 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2201      	movs	r2, #1
 8000aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2202      	movs	r2, #2
 8000afa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000afc:	187a      	adds	r2, r7, r1
 8000afe:	23a0      	movs	r3, #160	@ 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f001 fbd5 	bl	80022b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f001 fad8 	bl	80020c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b14:	2007      	movs	r0, #7
 8000b16:	f001 faea 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b00b      	add	sp, #44	@ 0x2c
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	40021000 	.word	0x40021000
 8000b28:	50000800 	.word	0x50000800

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 faf0 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f80c 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f7ff ff80 	bl	8000a3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b3c:	f000 fa12 	bl	8000f64 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b40:	f7ff fed2 	bl	80008e8 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000b44:	f000 f8f8 	bl	8000d38 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  maincpp();
 8000b48:	f7ff fd92 	bl	8000670 <maincpp>
  while (1)
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	e7fd      	b.n	8000b4c <main+0x20>

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b093      	sub	sp, #76	@ 0x4c
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	2410      	movs	r4, #16
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	2338      	movs	r3, #56	@ 0x38
 8000b5e:	001a      	movs	r2, r3
 8000b60:	2100      	movs	r1, #0
 8000b62:	f005 fa0b 	bl	8005f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b66:	003b      	movs	r3, r7
 8000b68:	0018      	movs	r0, r3
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f005 fa04 	bl	8005f7c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f001 fd47 	bl	800260c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2202      	movs	r2, #2
 8000b82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b8c:	0021      	movs	r1, r4
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2240      	movs	r2, #64	@ 0x40
 8000b98:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2208      	movs	r2, #8
 8000bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2280      	movs	r2, #128	@ 0x80
 8000bb6:	0292      	lsls	r2, r2, #10
 8000bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	22c0      	movs	r2, #192	@ 0xc0
 8000bbe:	04d2      	lsls	r2, r2, #19
 8000bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	0592      	lsls	r2, r2, #22
 8000bc8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fd69 	bl	80026a4 <HAL_RCC_OscConfig>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000bd6:	f000 f819 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	003b      	movs	r3, r7
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	003b      	movs	r3, r7
 8000be2:	2202      	movs	r2, #2
 8000be4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	003b      	movs	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bec:	003b      	movs	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f002 f86e 	bl	8002cd8 <HAL_RCC_ClockConfig>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c00:	f000 f804 	bl	8000c0c <Error_Handler>
  }
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b013      	add	sp, #76	@ 0x4c
 8000c0a:	bd90      	pop	{r4, r7, pc}

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	e7fd      	b.n	8000c14 <Error_Handler+0x8>

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c24:	2101      	movs	r1, #1
 8000c26:	430a      	orrs	r2, r1
 8000c28:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4013      	ands	r3, r2
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c3c:	2180      	movs	r1, #128	@ 0x80
 8000c3e:	0549      	lsls	r1, r1, #21
 8000c40:	430a      	orrs	r2, r1
 8000c42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c44:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c48:	2380      	movs	r3, #128	@ 0x80
 8000c4a:	055b      	lsls	r3, r3, #21
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b002      	add	sp, #8
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	40021000 	.word	0x40021000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	e7fd      	b.n	8000c6c <HardFault_Handler+0x4>

08000c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 faae 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INT13_Pin);
 8000c96:	2380      	movs	r3, #128	@ 0x80
 8000c98:	019b      	lsls	r3, r3, #6
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f001 fc8c 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <TIM15_IRQHandler+0x14>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 fcb6 	bl	8003620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	20000100 	.word	0x20000100

08000cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc8:	4a14      	ldr	r2, [pc, #80]	@ (8000d1c <_sbrk+0x5c>)
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <_sbrk+0x60>)
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <_sbrk+0x64>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <_sbrk+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	18d3      	adds	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d207      	bcs.n	8000d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf0:	f005 f94c 	bl	8005f8c <__errno>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	e009      	b.n	8000d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d06:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	18d2      	adds	r2, r2, r3
 8000d0e:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <_sbrk+0x64>)
 8000d10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d12:	68fb      	ldr	r3, [r7, #12]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b006      	add	sp, #24
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20009000 	.word	0x20009000
 8000d20:	00000400 	.word	0x00000400
 8000d24:	200000fc 	.word	0x200000fc
 8000d28:	20000330 	.word	0x20000330

08000d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b098      	sub	sp, #96	@ 0x60
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3e:	2354      	movs	r3, #84	@ 0x54
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	0018      	movs	r0, r3
 8000d44:	230c      	movs	r3, #12
 8000d46:	001a      	movs	r2, r3
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f005 f917 	bl	8005f7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4e:	2338      	movs	r3, #56	@ 0x38
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	0018      	movs	r0, r3
 8000d54:	231c      	movs	r3, #28
 8000d56:	001a      	movs	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f005 f90f 	bl	8005f7c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	0018      	movs	r0, r3
 8000d62:	2334      	movs	r3, #52	@ 0x34
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f005 f908 	bl	8005f7c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e64 <MX_TIM15_Init+0x12c>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 8000d72:	4b3b      	ldr	r3, [pc, #236]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000d74:	223f      	movs	r2, #63	@ 0x3f
 8000d76:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b39      	ldr	r3, [pc, #228]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000;
 8000d7e:	4b38      	ldr	r3, [pc, #224]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000d80:	4a39      	ldr	r2, [pc, #228]	@ (8000e68 <MX_TIM15_Init+0x130>)
 8000d82:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b36      	ldr	r3, [pc, #216]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d8a:	4b35      	ldr	r3, [pc, #212]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b33      	ldr	r3, [pc, #204]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000d96:	4b32      	ldr	r3, [pc, #200]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f002 faff 	bl	800339c <HAL_TIM_PWM_Init>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f7ff ff33 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da6:	2154      	movs	r1, #84	@ 0x54
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000db4:	187a      	adds	r2, r7, r1
 8000db6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000db8:	0011      	movs	r1, r2
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f003 f9d6 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000dc4:	f7ff ff22 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc8:	2138      	movs	r1, #56	@ 0x38
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2260      	movs	r2, #96	@ 0x60
 8000dce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df4:	1879      	adds	r1, r7, r1
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f002 fd18 	bl	8003830 <HAL_TIM_PWM_ConfigChannel>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000e04:	f7ff ff02 	bl	8000c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2280      	movs	r2, #128	@ 0x80
 8000e2a:	0192      	lsls	r2, r2, #6
 8000e2c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e3a:	1d3a      	adds	r2, r7, #4
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f003 fa01 	bl	8004248 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8000e4a:	f7ff fedf 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000e4e:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <MX_TIM15_Init+0x128>)
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 f849 	bl	8000ee8 <HAL_TIM_MspPostInit>

}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b018      	add	sp, #96	@ 0x60
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	20000100 	.word	0x20000100
 8000e64:	40014000 	.word	0x40014000
 8000e68:	00004e20 	.word	0x00004e20

08000e6c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b091      	sub	sp, #68	@ 0x44
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	240c      	movs	r4, #12
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2334      	movs	r3, #52	@ 0x34
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f005 f87c 	bl	8005f7c <memset>
  if(tim_pwmHandle->Instance==TIM15)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a15      	ldr	r2, [pc, #84]	@ (8000ee0 <HAL_TIM_PWM_MspInit+0x74>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d124      	bne.n	8000ed8 <HAL_TIM_PWM_MspInit+0x6c>

  /* USER CODE END TIM15_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	03d2      	lsls	r2, r2, #15
 8000e94:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f002 f8c4 	bl	800302c <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000ea8:	f7ff feb0 	bl	8000c0c <Error_Handler>
    }

    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <HAL_TIM_PWM_MspInit+0x78>)
 8000eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <HAL_TIM_PWM_MspInit+0x78>)
 8000eb2:	2180      	movs	r1, #128	@ 0x80
 8000eb4:	0249      	lsls	r1, r1, #9
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_TIM_PWM_MspInit+0x78>)
 8000ebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ebe:	2380      	movs	r3, #128	@ 0x80
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2014      	movs	r0, #20
 8000ece:	f001 f8f9 	bl	80020c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8000ed2:	2014      	movs	r0, #20
 8000ed4:	f001 f90b 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000ed8:	46c0      	nop			@ (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b011      	add	sp, #68	@ 0x44
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	40014000 	.word	0x40014000
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b089      	sub	sp, #36	@ 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	240c      	movs	r4, #12
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	2314      	movs	r3, #20
 8000ef8:	001a      	movs	r2, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	f005 f83e 	bl	8005f7c <memset>
  if(timHandle->Instance==TIM15)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a14      	ldr	r2, [pc, #80]	@ (8000f58 <HAL_TIM_MspPostInit+0x70>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d122      	bne.n	8000f50 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_TIM_MspPostInit+0x74>)
 8000f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f0e:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <HAL_TIM_MspPostInit+0x74>)
 8000f10:	2102      	movs	r1, #2
 8000f12:	430a      	orrs	r2, r1
 8000f14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_TIM_MspPostInit+0x74>)
 8000f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	2280      	movs	r2, #128	@ 0x80
 8000f26:	01d2      	lsls	r2, r2, #7
 8000f28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	0021      	movs	r1, r4
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2202      	movs	r2, #2
 8000f30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2205      	movs	r2, #5
 8000f42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	4a06      	ldr	r2, [pc, #24]	@ (8000f60 <HAL_TIM_MspPostInit+0x78>)
 8000f48:	0019      	movs	r1, r3
 8000f4a:	0010      	movs	r0, r2
 8000f4c:	f001 f9b2 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b009      	add	sp, #36	@ 0x24
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	40014000 	.word	0x40014000
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	50000400 	.word	0x50000400

08000f64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f68:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f6a:	4a24      	ldr	r2, [pc, #144]	@ (8000ffc <MX_USART2_UART_Init+0x98>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f70:	22e1      	movs	r2, #225	@ 0xe1
 8000f72:	0252      	lsls	r2, r2, #9
 8000f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f003 f9fe 	bl	80043b0 <HAL_UART_Init>
 8000fb4:	1e03      	subs	r3, r0, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fb8:	f7ff fe28 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f004 fec1 	bl	8005d48 <HAL_UARTEx_SetTxFifoThreshold>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fca:	f7ff fe1f 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f004 fef8 	bl	8005dc8 <HAL_UARTEx_SetRxFifoThreshold>
 8000fd8:	1e03      	subs	r3, r0, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fdc:	f7ff fe16 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f004 fe76 	bl	8005cd4 <HAL_UARTEx_DisableFifoMode>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fec:	f7ff fe0e 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	2000014c 	.word	0x2000014c
 8000ffc:	40004400 	.word	0x40004400

08001000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b097      	sub	sp, #92	@ 0x5c
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	2344      	movs	r3, #68	@ 0x44
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	0018      	movs	r0, r3
 800100e:	2314      	movs	r3, #20
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f004 ffb2 	bl	8005f7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	2410      	movs	r4, #16
 800101a:	193b      	adds	r3, r7, r4
 800101c:	0018      	movs	r0, r3
 800101e:	2334      	movs	r3, #52	@ 0x34
 8001020:	001a      	movs	r2, r3
 8001022:	2100      	movs	r1, #0
 8001024:	f004 ffaa 	bl	8005f7c <memset>
  if(uartHandle->Instance==USART2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a22      	ldr	r2, [pc, #136]	@ (80010b8 <HAL_UART_MspInit+0xb8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d13e      	bne.n	80010b0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2202      	movs	r2, #2
 8001036:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001038:	193b      	adds	r3, r7, r4
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103e:	193b      	adds	r3, r7, r4
 8001040:	0018      	movs	r0, r3
 8001042:	f001 fff3 	bl	800302c <HAL_RCCEx_PeriphCLKConfig>
 8001046:	1e03      	subs	r3, r0, #0
 8001048:	d001      	beq.n	800104e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800104a:	f7ff fddf 	bl	8000c0c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104e:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <HAL_UART_MspInit+0xbc>)
 8001050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001052:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <HAL_UART_MspInit+0xbc>)
 8001054:	2180      	movs	r1, #128	@ 0x80
 8001056:	0289      	lsls	r1, r1, #10
 8001058:	430a      	orrs	r2, r1
 800105a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <HAL_UART_MspInit+0xbc>)
 800105e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	029b      	lsls	r3, r3, #10
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <HAL_UART_MspInit+0xbc>)
 800106c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <HAL_UART_MspInit+0xbc>)
 8001070:	2101      	movs	r1, #1
 8001072:	430a      	orrs	r2, r1
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <HAL_UART_MspInit+0xbc>)
 8001078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800107a:	2201      	movs	r2, #1
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001082:	2144      	movs	r1, #68	@ 0x44
 8001084:	187b      	adds	r3, r7, r1
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2202      	movs	r2, #2
 800108e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2201      	movs	r2, #1
 8001094:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2201      	movs	r2, #1
 80010a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	187a      	adds	r2, r7, r1
 80010a4:	23a0      	movs	r3, #160	@ 0xa0
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	0011      	movs	r1, r2
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 f902 	bl	80022b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b017      	add	sp, #92	@ 0x5c
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	40004400 	.word	0x40004400
 80010bc:	40021000 	.word	0x40021000

080010c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c4:	f7ff fe32 	bl	8000d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <LoopForever+0x6>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	@ (8001100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <LoopForever+0xe>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	@ (800110c <LoopForever+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ee:	f004 ff53 	bl	8005f98 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010f2:	f7ff fd1b 	bl	8000b2c <main>

080010f6 <LoopForever>:

LoopForever:
  b LoopForever
 80010f6:	e7fe      	b.n	80010f6 <LoopForever>
  ldr   r0, =_estack
 80010f8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001104:	080069c0 	.word	0x080069c0
  ldr r2, =_sbss
 8001108:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800110c:	2000032c 	.word	0x2000032c

08001110 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC1_COMP_IRQHandler>
	...

08001114 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_Init+0x3c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_Init+0x3c>)
 8001126:	2180      	movs	r1, #128	@ 0x80
 8001128:	0049      	lsls	r1, r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f810 	bl	8001154 <HAL_InitTick>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d003      	beq.n	8001140 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e001      	b.n	8001144 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001140:	f7ff fd6a 	bl	8000c18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40022000 	.word	0x40022000

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001164:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <HAL_InitTick+0x88>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d02b      	beq.n	80011c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800116c:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_InitTick+0x8c>)
 800116e:	681c      	ldr	r4, [r3, #0]
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <HAL_InitTick+0x88>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	0019      	movs	r1, r3
 8001176:	23fa      	movs	r3, #250	@ 0xfa
 8001178:	0098      	lsls	r0, r3, #2
 800117a:	f7fe ffcd 	bl	8000118 <__udivsi3>
 800117e:	0003      	movs	r3, r0
 8001180:	0019      	movs	r1, r3
 8001182:	0020      	movs	r0, r4
 8001184:	f7fe ffc8 	bl	8000118 <__udivsi3>
 8001188:	0003      	movs	r3, r0
 800118a:	0018      	movs	r0, r3
 800118c:	f000 ffbf 	bl	800210e <HAL_SYSTICK_Config>
 8001190:	1e03      	subs	r3, r0, #0
 8001192:	d112      	bne.n	80011ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d80a      	bhi.n	80011b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	2301      	movs	r3, #1
 800119e:	425b      	negs	r3, r3
 80011a0:	2200      	movs	r2, #0
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 ff8e 	bl	80020c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_InitTick+0x90>)
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e00d      	b.n	80011cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011b0:	230f      	movs	r3, #15
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	e008      	b.n	80011cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ba:	230f      	movs	r3, #15
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e003      	b.n	80011cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	781b      	ldrb	r3, [r3, #0]
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b005      	add	sp, #20
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000004 	.word	0x20000004

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	001a      	movs	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	18d2      	adds	r2, r2, r3
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <HAL_IncTick+0x20>)
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	20000008 	.word	0x20000008
 8001208:	200001e0 	.word	0x200001e0

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	@ (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	0018      	movs	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	200001e0 	.word	0x200001e0

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff fff0 	bl	800120c <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3301      	adds	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	001a      	movs	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	189b      	adds	r3, r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	f7ff ffe0 	bl	800120c <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	20000008 	.word	0x20000008

08001268 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001278:	401a      	ands	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	fe3fffff 	.word	0xfe3fffff

08001290 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	23e0      	movs	r3, #224	@ 0xe0
 800129e:	045b      	lsls	r3, r3, #17
 80012a0:	4013      	ands	r3, r2
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}

080012aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	2104      	movs	r1, #4
 80012be:	400a      	ands	r2, r1
 80012c0:	2107      	movs	r1, #7
 80012c2:	4091      	lsls	r1, r2
 80012c4:	000a      	movs	r2, r1
 80012c6:	43d2      	mvns	r2, r2
 80012c8:	401a      	ands	r2, r3
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2104      	movs	r1, #4
 80012ce:	400b      	ands	r3, r1
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4099      	lsls	r1, r3
 80012d4:	000b      	movs	r3, r1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80012dc:	46c0      	nop			@ (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b004      	add	sp, #16
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	2104      	movs	r1, #4
 80012f6:	400a      	ands	r2, r1
 80012f8:	2107      	movs	r1, #7
 80012fa:	4091      	lsls	r1, r2
 80012fc:	000a      	movs	r2, r1
 80012fe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2104      	movs	r1, #4
 8001304:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001306:	40da      	lsrs	r2, r3
 8001308:	0013      	movs	r3, r2
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b002      	add	sp, #8
 8001310:	bd80      	pop	{r7, pc}

08001312 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	23c0      	movs	r3, #192	@ 0xc0
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4013      	ands	r3, r2
 8001324:	d101      	bne.n	800132a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800132a:	2300      	movs	r3, #0
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}

08001334 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	211f      	movs	r1, #31
 8001348:	400a      	ands	r2, r1
 800134a:	210f      	movs	r1, #15
 800134c:	4091      	lsls	r1, r2
 800134e:	000a      	movs	r2, r1
 8001350:	43d2      	mvns	r2, r2
 8001352:	401a      	ands	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	0e9b      	lsrs	r3, r3, #26
 8001358:	210f      	movs	r1, #15
 800135a:	4019      	ands	r1, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	201f      	movs	r0, #31
 8001360:	4003      	ands	r3, r0
 8001362:	4099      	lsls	r1, r3
 8001364:	000b      	movs	r3, r1
 8001366:	431a      	orrs	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b004      	add	sp, #16
 8001372:	bd80      	pop	{r7, pc}

08001374 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	035b      	lsls	r3, r3, #13
 8001386:	0b5b      	lsrs	r3, r3, #13
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}

08001396 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	0352      	lsls	r2, r2, #13
 80013a8:	0b52      	lsrs	r2, r2, #13
 80013aa:	43d2      	mvns	r2, r2
 80013ac:	401a      	ands	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	0212      	lsls	r2, r2, #8
 80013d0:	43d2      	mvns	r2, r2
 80013d2:	401a      	ands	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	400b      	ands	r3, r1
 80013dc:	4904      	ldr	r1, [pc, #16]	@ (80013f0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80013de:	400b      	ands	r3, r1
 80013e0:	431a      	orrs	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b004      	add	sp, #16
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	07ffff00 	.word	0x07ffff00

080013f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <LL_ADC_EnableInternalRegulator+0x24>)
 8001402:	4013      	ands	r3, r2
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	0552      	lsls	r2, r2, #21
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	6fffffe8 	.word	0x6fffffe8

0800141c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	055b      	lsls	r3, r3, #21
 800142c:	401a      	ands	r2, r3
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	055b      	lsls	r3, r3, #21
 8001432:	429a      	cmp	r2, r3
 8001434:	d101      	bne.n	800143a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800143a:	2300      	movs	r3, #0
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b002      	add	sp, #8
 8001442:	bd80      	pop	{r7, pc}

08001444 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <LL_ADC_Enable+0x20>)
 8001452:	4013      	ands	r3, r2
 8001454:	2201      	movs	r2, #1
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800145c:	46c0      	nop			@ (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}
 8001464:	7fffffe8 	.word	0x7fffffe8

08001468 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <LL_ADC_Disable+0x20>)
 8001476:	4013      	ands	r3, r2
 8001478:	2202      	movs	r2, #2
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001480:	46c0      	nop			@ (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}
 8001488:	7fffffe8 	.word	0x7fffffe8

0800148c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2201      	movs	r2, #1
 800149a:	4013      	ands	r3, r2
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <LL_ADC_IsEnabled+0x18>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <LL_ADC_IsEnabled+0x1a>
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b002      	add	sp, #8
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <LL_ADC_REG_StartConversion+0x20>)
 80014be:	4013      	ands	r3, r2
 80014c0:	2204      	movs	r2, #4
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014c8:	46c0      	nop			@ (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	7fffffe8 	.word	0x7fffffe8

080014d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2204      	movs	r2, #4
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d101      	bne.n	80014ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001500:	231f      	movs	r3, #31
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e17f      	b.n	800181e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10a      	bne.n	800153c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff fa43 	bl	80009b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2254      	movs	r2, #84	@ 0x54
 8001538:	2100      	movs	r1, #0
 800153a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ff6b 	bl	800141c <LL_ADC_IsInternalRegulatorEnabled>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d115      	bne.n	8001576 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff ff50 	bl	80013f4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001554:	4bb4      	ldr	r3, [pc, #720]	@ (8001828 <HAL_ADC_Init+0x330>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	49b4      	ldr	r1, [pc, #720]	@ (800182c <HAL_ADC_Init+0x334>)
 800155a:	0018      	movs	r0, r3
 800155c:	f7fe fddc 	bl	8000118 <__udivsi3>
 8001560:	0003      	movs	r3, r0
 8001562:	3301      	adds	r3, #1
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001568:	e002      	b.n	8001570 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3b01      	subs	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff ff4e 	bl	800141c <LL_ADC_IsInternalRegulatorEnabled>
 8001580:	1e03      	subs	r3, r0, #0
 8001582:	d10f      	bne.n	80015a4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	2210      	movs	r2, #16
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001594:	2201      	movs	r2, #1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800159c:	231f      	movs	r3, #31
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff ff93 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 80015ae:	0003      	movs	r3, r0
 80015b0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	2210      	movs	r2, #16
 80015b8:	4013      	ands	r3, r2
 80015ba:	d000      	beq.n	80015be <HAL_ADC_Init+0xc6>
 80015bc:	e122      	b.n	8001804 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d000      	beq.n	80015c6 <HAL_ADC_Init+0xce>
 80015c4:	e11e      	b.n	8001804 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ca:	4a99      	ldr	r2, [pc, #612]	@ (8001830 <HAL_ADC_Init+0x338>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	2202      	movs	r2, #2
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0018      	movs	r0, r3
 80015dc:	f7ff ff56 	bl	800148c <LL_ADC_IsEnabled>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d000      	beq.n	80015e6 <HAL_ADC_Init+0xee>
 80015e4:	e0ad      	b.n	8001742 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7e1b      	ldrb	r3, [r3, #24]
 80015ee:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7e5b      	ldrb	r3, [r3, #25]
 80015f6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7e9b      	ldrb	r3, [r3, #26]
 80015fe:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001600:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_ADC_Init+0x118>
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	015b      	lsls	r3, r3, #5
 800160e:	e000      	b.n	8001612 <HAL_ADC_Init+0x11a>
 8001610:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001612:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001618:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	da04      	bge.n	800162c <HAL_ADC_Init+0x134>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	e001      	b.n	8001630 <HAL_ADC_Init+0x138>
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001630:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	212c      	movs	r1, #44	@ 0x2c
 8001636:	5c5b      	ldrb	r3, [r3, r1]
 8001638:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800163a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d115      	bne.n	8001678 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e9b      	ldrb	r3, [r3, #26]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d105      	bne.n	8001660 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2280      	movs	r2, #128	@ 0x80
 8001658:	0252      	lsls	r2, r2, #9
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	e00b      	b.n	8001678 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001664:	2220      	movs	r2, #32
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001670:	2201      	movs	r2, #1
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001684:	23e0      	movs	r3, #224	@ 0xe0
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800168e:	4313      	orrs	r3, r2
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4a65      	ldr	r2, [pc, #404]	@ (8001834 <HAL_ADC_Init+0x33c>)
 800169e:	4013      	ands	r3, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	0f9b      	lsrs	r3, r3, #30
 80016b2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016b8:	4313      	orrs	r3, r2
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	223c      	movs	r2, #60	@ 0x3c
 80016c4:	5c9b      	ldrb	r3, [r3, r2]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d111      	bne.n	80016ee <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	0f9b      	lsrs	r3, r3, #30
 80016d0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016d6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80016dc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80016e2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	2201      	movs	r2, #1
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	4a50      	ldr	r2, [pc, #320]	@ (8001838 <HAL_ADC_Init+0x340>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	430a      	orrs	r2, r1
 8001702:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	23c0      	movs	r3, #192	@ 0xc0
 800170a:	061b      	lsls	r3, r3, #24
 800170c:	429a      	cmp	r2, r3
 800170e:	d018      	beq.n	8001742 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	05db      	lsls	r3, r3, #23
 8001718:	429a      	cmp	r2, r3
 800171a:	d012      	beq.n	8001742 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	061b      	lsls	r3, r3, #24
 8001724:	429a      	cmp	r2, r3
 8001726:	d00c      	beq.n	8001742 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001728:	4b44      	ldr	r3, [pc, #272]	@ (800183c <HAL_ADC_Init+0x344>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a44      	ldr	r2, [pc, #272]	@ (8001840 <HAL_ADC_Init+0x348>)
 800172e:	4013      	ands	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	23f0      	movs	r3, #240	@ 0xf0
 8001738:	039b      	lsls	r3, r3, #14
 800173a:	401a      	ands	r2, r3
 800173c:	4b3f      	ldr	r3, [pc, #252]	@ (800183c <HAL_ADC_Init+0x344>)
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800174a:	001a      	movs	r2, r3
 800174c:	2100      	movs	r1, #0
 800174e:	f7ff fdac 	bl	80012aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175a:	493a      	ldr	r1, [pc, #232]	@ (8001844 <HAL_ADC_Init+0x34c>)
 800175c:	001a      	movs	r2, r3
 800175e:	f7ff fda4 	bl	80012aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2110      	movs	r1, #16
 8001776:	4249      	negs	r1, r1
 8001778:	430a      	orrs	r2, r1
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
 800177c:	e018      	b.n	80017b0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	2380      	movs	r3, #128	@ 0x80
 8001784:	039b      	lsls	r3, r3, #14
 8001786:	429a      	cmp	r2, r3
 8001788:	d112      	bne.n	80017b0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	3b01      	subs	r3, #1
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	221c      	movs	r2, #28
 800179a:	4013      	ands	r3, r2
 800179c:	2210      	movs	r2, #16
 800179e:	4252      	negs	r2, r2
 80017a0:	409a      	lsls	r2, r3
 80017a2:	0011      	movs	r1, r2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2100      	movs	r1, #0
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fd94 	bl	80012e4 <LL_ADC_GetSamplingTimeCommonChannels>
 80017bc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d10b      	bne.n	80017de <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d0:	2203      	movs	r2, #3
 80017d2:	4393      	bics	r3, r2
 80017d4:	2201      	movs	r2, #1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017dc:	e01c      	b.n	8001818 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e2:	2212      	movs	r2, #18
 80017e4:	4393      	bics	r3, r2
 80017e6:	2210      	movs	r2, #16
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f2:	2201      	movs	r2, #1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80017fa:	231f      	movs	r3, #31
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001802:	e009      	b.n	8001818 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	2210      	movs	r2, #16
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001810:	231f      	movs	r3, #31
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001818:	231f      	movs	r3, #31
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b008      	add	sp, #32
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	20000000 	.word	0x20000000
 800182c:	00030d40 	.word	0x00030d40
 8001830:	fffffefd 	.word	0xfffffefd
 8001834:	ffde0201 	.word	0xffde0201
 8001838:	1ffffc02 	.word	0x1ffffc02
 800183c:	40012708 	.word	0x40012708
 8001840:	ffc3ffff 	.word	0xffc3ffff
 8001844:	07ffff04 	.word	0x07ffff04

08001848 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff fe3b 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d16c      	bne.n	800193c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2254      	movs	r2, #84	@ 0x54
 8001866:	5c9b      	ldrb	r3, [r3, r2]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ADC_Start_DMA+0x28>
 800186c:	2302      	movs	r3, #2
 800186e:	e06c      	b.n	800194a <HAL_ADC_Start_DMA+0x102>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2254      	movs	r2, #84	@ 0x54
 8001874:	2101      	movs	r1, #1
 8001876:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2201      	movs	r2, #1
 8001880:	4013      	ands	r3, r2
 8001882:	d113      	bne.n	80018ac <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0018      	movs	r0, r3
 800188a:	f7ff fdff 	bl	800148c <LL_ADC_IsEnabled>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d004      	beq.n	800189c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0018      	movs	r0, r3
 8001898:	f7ff fde6 	bl	8001468 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2101      	movs	r1, #1
 80018a8:	430a      	orrs	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018ac:	2517      	movs	r5, #23
 80018ae:	197c      	adds	r4, r7, r5
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	0018      	movs	r0, r3
 80018b4:	f000 fa46 	bl	8001d44 <ADC_Enable>
 80018b8:	0003      	movs	r3, r0
 80018ba:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018bc:	002c      	movs	r4, r5
 80018be:	193b      	adds	r3, r7, r4
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d13e      	bne.n	8001944 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	4a22      	ldr	r2, [pc, #136]	@ (8001954 <HAL_ADC_Start_DMA+0x10c>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	2280      	movs	r2, #128	@ 0x80
 80018d0:	0052      	lsls	r2, r2, #1
 80018d2:	431a      	orrs	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001958 <HAL_ADC_Start_DMA+0x110>)
 80018e4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ea:	4a1c      	ldr	r2, [pc, #112]	@ (800195c <HAL_ADC_Start_DMA+0x114>)
 80018ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001960 <HAL_ADC_Start_DMA+0x118>)
 80018f4:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	221c      	movs	r2, #28
 80018fc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2254      	movs	r2, #84	@ 0x54
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2110      	movs	r1, #16
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3340      	adds	r3, #64	@ 0x40
 8001920:	0019      	movs	r1, r3
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	193c      	adds	r4, r7, r4
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f000 fbfe 	bl	8002128 <HAL_DMA_Start_IT>
 800192c:	0003      	movs	r3, r0
 800192e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff fdbb 	bl	80014b0 <LL_ADC_REG_StartConversion>
 800193a:	e003      	b.n	8001944 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800193c:	2317      	movs	r3, #23
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	2202      	movs	r2, #2
 8001942:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001944:	2317      	movs	r3, #23
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	781b      	ldrb	r3, [r3, #0]
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b006      	add	sp, #24
 8001950:	bdb0      	pop	{r4, r5, r7, pc}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	fffff0fe 	.word	0xfffff0fe
 8001958:	08001e51 	.word	0x08001e51
 800195c:	08001f19 	.word	0x08001f19
 8001960:	08001f37 	.word	0x08001f37

08001964 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b002      	add	sp, #8
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800198c:	46c0      	nop			@ (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199e:	2317      	movs	r3, #23
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2254      	movs	r2, #84	@ 0x54
 80019ae:	5c9b      	ldrb	r3, [r3, r2]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x24>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e1c0      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x3a6>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2254      	movs	r2, #84	@ 0x54
 80019bc:	2101      	movs	r1, #1
 80019be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7ff fd85 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 80019ca:	1e03      	subs	r3, r0, #0
 80019cc:	d000      	beq.n	80019d0 <HAL_ADC_ConfigChannel+0x3c>
 80019ce:	e1a3      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d100      	bne.n	80019da <HAL_ADC_ConfigChannel+0x46>
 80019d8:	e143      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	2380      	movs	r3, #128	@ 0x80
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d004      	beq.n	80019f0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019ea:	4ac1      	ldr	r2, [pc, #772]	@ (8001cf0 <HAL_ADC_ConfigChannel+0x35c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d108      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0019      	movs	r1, r3
 80019fa:	0010      	movs	r0, r2
 80019fc:	f7ff fcba 	bl	8001374 <LL_ADC_REG_SetSequencerChAdd>
 8001a00:	e0c9      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	211f      	movs	r1, #31
 8001a0c:	400b      	ands	r3, r1
 8001a0e:	210f      	movs	r1, #15
 8001a10:	4099      	lsls	r1, r3
 8001a12:	000b      	movs	r3, r1
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4013      	ands	r3, r2
 8001a18:	0019      	movs	r1, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	035b      	lsls	r3, r3, #13
 8001a20:	0b5b      	lsrs	r3, r3, #13
 8001a22:	d105      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x9c>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0e9b      	lsrs	r3, r3, #26
 8001a2a:	221f      	movs	r2, #31
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	e098      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	d000      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0xa8>
 8001a3a:	e091      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x1cc>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2202      	movs	r2, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d000      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0xb4>
 8001a46:	e089      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x1c8>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d000      	beq.n	8001a54 <HAL_ADC_ConfigChannel+0xc0>
 8001a52:	e081      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x1c4>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2208      	movs	r2, #8
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d000      	beq.n	8001a60 <HAL_ADC_ConfigChannel+0xcc>
 8001a5e:	e079      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x1c0>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2210      	movs	r2, #16
 8001a66:	4013      	ands	r3, r2
 8001a68:	d000      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0xd8>
 8001a6a:	e071      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x1bc>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2220      	movs	r2, #32
 8001a72:	4013      	ands	r3, r2
 8001a74:	d000      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0xe4>
 8001a76:	e069      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x1b8>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2240      	movs	r2, #64	@ 0x40
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d000      	beq.n	8001a84 <HAL_ADC_ConfigChannel+0xf0>
 8001a82:	e061      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x1b4>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2280      	movs	r2, #128	@ 0x80
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d000      	beq.n	8001a90 <HAL_ADC_ConfigChannel+0xfc>
 8001a8e:	e059      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x1b0>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d151      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1ac>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d149      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x1a8>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	@ 0x80
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d141      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x1a4>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	4013      	ands	r3, r2
 8001abe:	d139      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1a0>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	015b      	lsls	r3, r3, #5
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d131      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x19c>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	019b      	lsls	r3, r3, #6
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d129      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x198>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d121      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x194>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	4013      	ands	r3, r2
 8001aee:	d119      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x190>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	025b      	lsls	r3, r3, #9
 8001af8:	4013      	ands	r3, r2
 8001afa:	d111      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x18c>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	029b      	lsls	r3, r3, #10
 8001b04:	4013      	ands	r3, r2
 8001b06:	d109      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x188>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	02db      	lsls	r3, r3, #11
 8001b10:	4013      	ands	r3, r2
 8001b12:	d001      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x184>
 8001b14:	2312      	movs	r3, #18
 8001b16:	e024      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e022      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b1c:	2311      	movs	r3, #17
 8001b1e:	e020      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b20:	2310      	movs	r3, #16
 8001b22:	e01e      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b24:	230f      	movs	r3, #15
 8001b26:	e01c      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b28:	230e      	movs	r3, #14
 8001b2a:	e01a      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b2c:	230d      	movs	r3, #13
 8001b2e:	e018      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b30:	230c      	movs	r3, #12
 8001b32:	e016      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b34:	230b      	movs	r3, #11
 8001b36:	e014      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b38:	230a      	movs	r3, #10
 8001b3a:	e012      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b3c:	2309      	movs	r3, #9
 8001b3e:	e010      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b40:	2308      	movs	r3, #8
 8001b42:	e00e      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b44:	2307      	movs	r3, #7
 8001b46:	e00c      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b48:	2306      	movs	r3, #6
 8001b4a:	e00a      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	e008      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b50:	2304      	movs	r3, #4
 8001b52:	e006      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b54:	2303      	movs	r3, #3
 8001b56:	e004      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e002      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1ce>
 8001b60:	2300      	movs	r3, #0
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	6852      	ldr	r2, [r2, #4]
 8001b66:	201f      	movs	r0, #31
 8001b68:	4002      	ands	r2, r0
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	000a      	movs	r2, r1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d808      	bhi.n	8001b96 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	001a      	movs	r2, r3
 8001b92:	f7ff fbcf 	bl	8001334 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6819      	ldr	r1, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	f7ff fc0a 	bl	80013bc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db00      	blt.n	8001bb2 <HAL_ADC_ConfigChannel+0x21e>
 8001bb0:	e0bc      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bb2:	4b50      	ldr	r3, [pc, #320]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x360>)
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff fb6b 	bl	8001290 <LL_ADC_GetCommonPathInternalCh>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x364>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d122      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bd0:	d11d      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2280      	movs	r2, #128	@ 0x80
 8001bd6:	0412      	lsls	r2, r2, #16
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	4a46      	ldr	r2, [pc, #280]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x360>)
 8001bdc:	0019      	movs	r1, r3
 8001bde:	0010      	movs	r0, r2
 8001be0:	f7ff fb42 	bl	8001268 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001be4:	4b45      	ldr	r3, [pc, #276]	@ (8001cfc <HAL_ADC_ConfigChannel+0x368>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4945      	ldr	r1, [pc, #276]	@ (8001d00 <HAL_ADC_ConfigChannel+0x36c>)
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7fe fa94 	bl	8000118 <__udivsi3>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	0013      	movs	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	189b      	adds	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bfe:	e002      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c0c:	e08e      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a3c      	ldr	r2, [pc, #240]	@ (8001d04 <HAL_ADC_ConfigChannel+0x370>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d10e      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	045b      	lsls	r3, r3, #17
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d109      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2280      	movs	r2, #128	@ 0x80
 8001c26:	0452      	lsls	r2, r2, #17
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	4a32      	ldr	r2, [pc, #200]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x360>)
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	0010      	movs	r0, r2
 8001c30:	f7ff fb1a 	bl	8001268 <LL_ADC_SetCommonPathInternalCh>
 8001c34:	e07a      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a33      	ldr	r2, [pc, #204]	@ (8001d08 <HAL_ADC_ConfigChannel+0x374>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d000      	beq.n	8001c42 <HAL_ADC_ConfigChannel+0x2ae>
 8001c40:	e074      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	03db      	lsls	r3, r3, #15
 8001c48:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c4a:	d000      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x2ba>
 8001c4c:	e06e      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2280      	movs	r2, #128	@ 0x80
 8001c52:	03d2      	lsls	r2, r2, #15
 8001c54:	4313      	orrs	r3, r2
 8001c56:	4a27      	ldr	r2, [pc, #156]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x360>)
 8001c58:	0019      	movs	r1, r3
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	f7ff fb04 	bl	8001268 <LL_ADC_SetCommonPathInternalCh>
 8001c60:	e064      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	2380      	movs	r3, #128	@ 0x80
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d004      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c72:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf0 <HAL_ADC_ConfigChannel+0x35c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d107      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0019      	movs	r1, r3
 8001c82:	0010      	movs	r0, r2
 8001c84:	f7ff fb87 	bl	8001396 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da4d      	bge.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c90:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x360>)
 8001c92:	0018      	movs	r0, r3
 8001c94:	f7ff fafc 	bl	8001290 <LL_ADC_GetCommonPathInternalCh>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a15      	ldr	r2, [pc, #84]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x364>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d108      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4a18      	ldr	r2, [pc, #96]	@ (8001d0c <HAL_ADC_ConfigChannel+0x378>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	4a11      	ldr	r2, [pc, #68]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x360>)
 8001cae:	0019      	movs	r1, r3
 8001cb0:	0010      	movs	r0, r2
 8001cb2:	f7ff fad9 	bl	8001268 <LL_ADC_SetCommonPathInternalCh>
 8001cb6:	e039      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a11      	ldr	r2, [pc, #68]	@ (8001d04 <HAL_ADC_ConfigChannel+0x370>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d108      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <HAL_ADC_ConfigChannel+0x37c>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x360>)
 8001cca:	0019      	movs	r1, r3
 8001ccc:	0010      	movs	r0, r2
 8001cce:	f7ff facb 	bl	8001268 <LL_ADC_SetCommonPathInternalCh>
 8001cd2:	e02b      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001d08 <HAL_ADC_ConfigChannel+0x374>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d126      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8001d14 <HAL_ADC_ConfigChannel+0x380>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	4a03      	ldr	r2, [pc, #12]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x360>)
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	0010      	movs	r0, r2
 8001cea:	f7ff fabd 	bl	8001268 <LL_ADC_SetCommonPathInternalCh>
 8001cee:	e01d      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x398>
 8001cf0:	80000004 	.word	0x80000004
 8001cf4:	40012708 	.word	0x40012708
 8001cf8:	b0001000 	.word	0xb0001000
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	00030d40 	.word	0x00030d40
 8001d04:	b8004000 	.word	0xb8004000
 8001d08:	b4002000 	.word	0xb4002000
 8001d0c:	ff7fffff 	.word	0xff7fffff
 8001d10:	feffffff 	.word	0xfeffffff
 8001d14:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d24:	2317      	movs	r3, #23
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2254      	movs	r2, #84	@ 0x54
 8001d30:	2100      	movs	r1, #0
 8001d32:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d34:	2317      	movs	r3, #23
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	781b      	ldrb	r3, [r3, #0]
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b006      	add	sp, #24
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)

08001d44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0018      	movs	r0, r3
 8001d56:	f7ff fb99 	bl	800148c <LL_ADC_IsEnabled>
 8001d5a:	1e03      	subs	r3, r0, #0
 8001d5c:	d000      	beq.n	8001d60 <ADC_Enable+0x1c>
 8001d5e:	e069      	b.n	8001e34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4a36      	ldr	r2, [pc, #216]	@ (8001e40 <ADC_Enable+0xfc>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d00d      	beq.n	8001d88 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	2210      	movs	r2, #16
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e056      	b.n	8001e36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff fb59 	bl	8001444 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001d92:	4b2c      	ldr	r3, [pc, #176]	@ (8001e44 <ADC_Enable+0x100>)
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7ff fa7b 	bl	8001290 <LL_ADC_GetCommonPathInternalCh>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	2380      	movs	r3, #128	@ 0x80
 8001d9e:	041b      	lsls	r3, r3, #16
 8001da0:	4013      	ands	r3, r2
 8001da2:	d00f      	beq.n	8001dc4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001da4:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <ADC_Enable+0x104>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4928      	ldr	r1, [pc, #160]	@ (8001e4c <ADC_Enable+0x108>)
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7fe f9b4 	bl	8000118 <__udivsi3>
 8001db0:	0003      	movs	r3, r0
 8001db2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001db4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001db6:	e002      	b.n	8001dbe <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f9      	bne.n	8001db8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7e5b      	ldrb	r3, [r3, #25]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d033      	beq.n	8001e34 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001dcc:	f7ff fa1e 	bl	800120c <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dd4:	e027      	b.n	8001e26 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7ff fb56 	bl	800148c <LL_ADC_IsEnabled>
 8001de0:	1e03      	subs	r3, r0, #0
 8001de2:	d104      	bne.n	8001dee <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff fb2b 	bl	8001444 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dee:	f7ff fa0d 	bl	800120c <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d914      	bls.n	8001e26 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d00d      	beq.n	8001e26 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	2210      	movs	r2, #16
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e007      	b.n	8001e36 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d1d0      	bne.n	8001dd6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b004      	add	sp, #16
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	80000017 	.word	0x80000017
 8001e44:	40012708 	.word	0x40012708
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	00030d40 	.word	0x00030d40

08001e50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	2250      	movs	r2, #80	@ 0x50
 8001e64:	4013      	ands	r3, r2
 8001e66:	d141      	bne.n	8001eec <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	431a      	orrs	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f7ff fa49 	bl	8001312 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e80:	1e03      	subs	r3, r0, #0
 8001e82:	d02e      	beq.n	8001ee2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	7e9b      	ldrb	r3, [r3, #26]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d12a      	bne.n	8001ee2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2208      	movs	r2, #8
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d123      	bne.n	8001ee2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7ff fb18 	bl	80014d4 <LL_ADC_REG_IsConversionOngoing>
 8001ea4:	1e03      	subs	r3, r0, #0
 8001ea6:	d110      	bne.n	8001eca <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	210c      	movs	r1, #12
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebc:	4a15      	ldr	r2, [pc, #84]	@ (8001f14 <ADC_DMAConvCplt+0xc4>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ec8:	e00b      	b.n	8001ee2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	2220      	movs	r2, #32
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eda:	2201      	movs	r2, #1
 8001edc:	431a      	orrs	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff fd3d 	bl	8001964 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001eea:	e00f      	b.n	8001f0c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff fd43 	bl	8001984 <HAL_ADC_ErrorCallback>
}
 8001efe:	e005      	b.n	8001f0c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	0010      	movs	r0, r2
 8001f0a:	4798      	blx	r3
}
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	fffffefe 	.word	0xfffffefe

08001f18 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff fd23 	bl	8001974 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f48:	2240      	movs	r2, #64	@ 0x40
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	2204      	movs	r2, #4
 8001f56:	431a      	orrs	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff fd10 	bl	8001984 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f64:	46c0      	nop			@ (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b004      	add	sp, #16
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	0002      	movs	r2, r0
 8001f74:	1dfb      	adds	r3, r7, #7
 8001f76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	1dfb      	adds	r3, r7, #7
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f7e:	d809      	bhi.n	8001f94 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f80:	1dfb      	adds	r3, r7, #7
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	001a      	movs	r2, r3
 8001f86:	231f      	movs	r3, #31
 8001f88:	401a      	ands	r2, r3
 8001f8a:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <__NVIC_EnableIRQ+0x30>)
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4091      	lsls	r1, r2
 8001f90:	000a      	movs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f94:	46c0      	nop			@ (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b002      	add	sp, #8
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	1dfb      	adds	r3, r7, #7
 8001fac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fb4:	d828      	bhi.n	8002008 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fb6:	4a2f      	ldr	r2, [pc, #188]	@ (8002074 <__NVIC_SetPriority+0xd4>)
 8001fb8:	1dfb      	adds	r3, r7, #7
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b25b      	sxtb	r3, r3
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	33c0      	adds	r3, #192	@ 0xc0
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	589b      	ldr	r3, [r3, r2]
 8001fc6:	1dfa      	adds	r2, r7, #7
 8001fc8:	7812      	ldrb	r2, [r2, #0]
 8001fca:	0011      	movs	r1, r2
 8001fcc:	2203      	movs	r2, #3
 8001fce:	400a      	ands	r2, r1
 8001fd0:	00d2      	lsls	r2, r2, #3
 8001fd2:	21ff      	movs	r1, #255	@ 0xff
 8001fd4:	4091      	lsls	r1, r2
 8001fd6:	000a      	movs	r2, r1
 8001fd8:	43d2      	mvns	r2, r2
 8001fda:	401a      	ands	r2, r3
 8001fdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	019b      	lsls	r3, r3, #6
 8001fe2:	22ff      	movs	r2, #255	@ 0xff
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	0018      	movs	r0, r3
 8001fec:	2303      	movs	r3, #3
 8001fee:	4003      	ands	r3, r0
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff4:	481f      	ldr	r0, [pc, #124]	@ (8002074 <__NVIC_SetPriority+0xd4>)
 8001ff6:	1dfb      	adds	r3, r7, #7
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	430a      	orrs	r2, r1
 8002000:	33c0      	adds	r3, #192	@ 0xc0
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002006:	e031      	b.n	800206c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002008:	4a1b      	ldr	r2, [pc, #108]	@ (8002078 <__NVIC_SetPriority+0xd8>)
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	0019      	movs	r1, r3
 8002010:	230f      	movs	r3, #15
 8002012:	400b      	ands	r3, r1
 8002014:	3b08      	subs	r3, #8
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3306      	adds	r3, #6
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	18d3      	adds	r3, r2, r3
 800201e:	3304      	adds	r3, #4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	1dfa      	adds	r2, r7, #7
 8002024:	7812      	ldrb	r2, [r2, #0]
 8002026:	0011      	movs	r1, r2
 8002028:	2203      	movs	r2, #3
 800202a:	400a      	ands	r2, r1
 800202c:	00d2      	lsls	r2, r2, #3
 800202e:	21ff      	movs	r1, #255	@ 0xff
 8002030:	4091      	lsls	r1, r2
 8002032:	000a      	movs	r2, r1
 8002034:	43d2      	mvns	r2, r2
 8002036:	401a      	ands	r2, r3
 8002038:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	019b      	lsls	r3, r3, #6
 800203e:	22ff      	movs	r2, #255	@ 0xff
 8002040:	401a      	ands	r2, r3
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	0018      	movs	r0, r3
 8002048:	2303      	movs	r3, #3
 800204a:	4003      	ands	r3, r0
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002050:	4809      	ldr	r0, [pc, #36]	@ (8002078 <__NVIC_SetPriority+0xd8>)
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	001c      	movs	r4, r3
 8002058:	230f      	movs	r3, #15
 800205a:	4023      	ands	r3, r4
 800205c:	3b08      	subs	r3, #8
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	430a      	orrs	r2, r1
 8002062:	3306      	adds	r3, #6
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	18c3      	adds	r3, r0, r3
 8002068:	3304      	adds	r3, #4
 800206a:	601a      	str	r2, [r3, #0]
}
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b003      	add	sp, #12
 8002072:	bd90      	pop	{r4, r7, pc}
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1e5a      	subs	r2, r3, #1
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	045b      	lsls	r3, r3, #17
 800208c:	429a      	cmp	r2, r3
 800208e:	d301      	bcc.n	8002094 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002090:	2301      	movs	r3, #1
 8002092:	e010      	b.n	80020b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002094:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <SysTick_Config+0x44>)
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	3a01      	subs	r2, #1
 800209a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209c:	2301      	movs	r3, #1
 800209e:	425b      	negs	r3, r3
 80020a0:	2103      	movs	r1, #3
 80020a2:	0018      	movs	r0, r3
 80020a4:	f7ff ff7c 	bl	8001fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <SysTick_Config+0x44>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <SysTick_Config+0x44>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	0018      	movs	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	210f      	movs	r1, #15
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	1c02      	adds	r2, r0, #0
 80020d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	0011      	movs	r1, r2
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff ff5d 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b004      	add	sp, #16
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	0002      	movs	r2, r0
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fa:	1dfb      	adds	r3, r7, #7
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff ff33 	bl	8001f6c <__NVIC_EnableIRQ>
}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b002      	add	sp, #8
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff ffaf 	bl	800207c <SysTick_Config>
 800211e:	0003      	movs	r3, r0
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002136:	2317      	movs	r3, #23
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2224      	movs	r2, #36	@ 0x24
 8002142:	5c9b      	ldrb	r3, [r3, r2]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_DMA_Start_IT+0x24>
 8002148:	2302      	movs	r3, #2
 800214a:	e06f      	b.n	800222c <HAL_DMA_Start_IT+0x104>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2224      	movs	r2, #36	@ 0x24
 8002150:	2101      	movs	r1, #1
 8002152:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2225      	movs	r2, #37	@ 0x25
 8002158:	5c9b      	ldrb	r3, [r3, r2]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d157      	bne.n	8002210 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2225      	movs	r2, #37	@ 0x25
 8002164:	2102      	movs	r1, #2
 8002166:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	438a      	bics	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f855 	bl	8002234 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	210e      	movs	r1, #14
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e00f      	b.n	80021c4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2104      	movs	r1, #4
 80021b0:	438a      	bics	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	210a      	movs	r1, #10
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	025b      	lsls	r3, r3, #9
 80021ce:	4013      	ands	r3, r2
 80021d0:	d008      	beq.n	80021e4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021dc:	2180      	movs	r1, #128	@ 0x80
 80021de:	0049      	lsls	r1, r1, #1
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f6:	2180      	movs	r1, #128	@ 0x80
 80021f8:	0049      	lsls	r1, r1, #1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	430a      	orrs	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e00a      	b.n	8002226 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2280      	movs	r2, #128	@ 0x80
 8002214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2224      	movs	r2, #36	@ 0x24
 800221a:	2100      	movs	r1, #0
 800221c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800221e:	2317      	movs	r3, #23
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002226:	2317      	movs	r3, #23
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	781b      	ldrb	r3, [r3, #0]
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b006      	add	sp, #24
 8002232:	bd80      	pop	{r7, pc}

08002234 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800224a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800225c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800225e:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <DMA_SetConfig+0x7c>)
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	221c      	movs	r2, #28
 8002268:	4013      	ands	r3, r2
 800226a:	2201      	movs	r2, #1
 800226c:	409a      	lsls	r2, r3
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <DMA_SetConfig+0x7c>)
 8002270:	430a      	orrs	r2, r1
 8002272:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b10      	cmp	r3, #16
 8002282:	d108      	bne.n	8002296 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002294:	e007      	b.n	80022a6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	60da      	str	r2, [r3, #12]
}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b004      	add	sp, #16
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	40020000 	.word	0x40020000

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	e147      	b.n	8002554 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4091      	lsls	r1, r2
 80022ce:	000a      	movs	r2, r1
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d100      	bne.n	80022dc <HAL_GPIO_Init+0x28>
 80022da:	e138      	b.n	800254e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d005      	beq.n	80022f4 <HAL_GPIO_Init+0x40>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2203      	movs	r2, #3
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d130      	bne.n	8002356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	409a      	lsls	r2, r3
 8002302:	0013      	movs	r3, r2
 8002304:	43da      	mvns	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	409a      	lsls	r2, r3
 8002316:	0013      	movs	r3, r2
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800232a:	2201      	movs	r2, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	43da      	mvns	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	2201      	movs	r2, #1
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
 8002348:	0013      	movs	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2203      	movs	r2, #3
 800235c:	4013      	ands	r3, r2
 800235e:	2b03      	cmp	r3, #3
 8002360:	d017      	beq.n	8002392 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	409a      	lsls	r2, r3
 8002370:	0013      	movs	r3, r2
 8002372:	43da      	mvns	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2203      	movs	r2, #3
 8002398:	4013      	ands	r3, r2
 800239a:	2b02      	cmp	r3, #2
 800239c:	d123      	bne.n	80023e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	58d3      	ldr	r3, [r2, r3]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2207      	movs	r2, #7
 80023b0:	4013      	ands	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	43da      	mvns	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2107      	movs	r1, #7
 80023ca:	400b      	ands	r3, r1
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	409a      	lsls	r2, r3
 80023d0:	0013      	movs	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	0092      	lsls	r2, r2, #2
 80023e2:	6939      	ldr	r1, [r7, #16]
 80023e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	43da      	mvns	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2203      	movs	r2, #3
 8002404:	401a      	ands	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	409a      	lsls	r2, r3
 800240c:	0013      	movs	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	23c0      	movs	r3, #192	@ 0xc0
 8002420:	029b      	lsls	r3, r3, #10
 8002422:	4013      	ands	r3, r2
 8002424:	d100      	bne.n	8002428 <HAL_GPIO_Init+0x174>
 8002426:	e092      	b.n	800254e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002428:	4a50      	ldr	r2, [pc, #320]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3318      	adds	r3, #24
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	589b      	ldr	r3, [r3, r2]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2203      	movs	r2, #3
 800243a:	4013      	ands	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	220f      	movs	r2, #15
 8002440:	409a      	lsls	r2, r3
 8002442:	0013      	movs	r3, r2
 8002444:	43da      	mvns	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	23a0      	movs	r3, #160	@ 0xa0
 8002450:	05db      	lsls	r3, r3, #23
 8002452:	429a      	cmp	r2, r3
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0x1ca>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a45      	ldr	r2, [pc, #276]	@ (8002570 <HAL_GPIO_Init+0x2bc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00d      	beq.n	800247a <HAL_GPIO_Init+0x1c6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a44      	ldr	r2, [pc, #272]	@ (8002574 <HAL_GPIO_Init+0x2c0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <HAL_GPIO_Init+0x1c2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a43      	ldr	r2, [pc, #268]	@ (8002578 <HAL_GPIO_Init+0x2c4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_GPIO_Init+0x1be>
 800246e:	2303      	movs	r3, #3
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x1cc>
 8002472:	2305      	movs	r3, #5
 8002474:	e004      	b.n	8002480 <HAL_GPIO_Init+0x1cc>
 8002476:	2302      	movs	r3, #2
 8002478:	e002      	b.n	8002480 <HAL_GPIO_Init+0x1cc>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_GPIO_Init+0x1cc>
 800247e:	2300      	movs	r3, #0
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	2103      	movs	r1, #3
 8002484:	400a      	ands	r2, r1
 8002486:	00d2      	lsls	r2, r2, #3
 8002488:	4093      	lsls	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002490:	4936      	ldr	r1, [pc, #216]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3318      	adds	r3, #24
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800249e:	4b33      	ldr	r3, [pc, #204]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	43da      	mvns	r2, r3
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	2380      	movs	r3, #128	@ 0x80
 80024b4:	035b      	lsls	r3, r3, #13
 80024b6:	4013      	ands	r3, r2
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024c2:	4b2a      	ldr	r3, [pc, #168]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80024c8:	4b28      	ldr	r3, [pc, #160]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43da      	mvns	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	039b      	lsls	r3, r3, #14
 80024e0:	4013      	ands	r3, r2
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024ec:	4b1f      	ldr	r3, [pc, #124]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024f2:	4a1e      	ldr	r2, [pc, #120]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 80024f4:	2384      	movs	r3, #132	@ 0x84
 80024f6:	58d3      	ldr	r3, [r2, r3]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	43da      	mvns	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	029b      	lsls	r3, r3, #10
 800250c:	4013      	ands	r3, r2
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002518:	4914      	ldr	r1, [pc, #80]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 800251a:	2284      	movs	r2, #132	@ 0x84
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002520:	4a12      	ldr	r2, [pc, #72]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 8002522:	2380      	movs	r3, #128	@ 0x80
 8002524:	58d3      	ldr	r3, [r2, r3]
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43da      	mvns	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	025b      	lsls	r3, r3, #9
 800253a:	4013      	ands	r3, r2
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002546:	4909      	ldr	r1, [pc, #36]	@ (800256c <HAL_GPIO_Init+0x2b8>)
 8002548:	2280      	movs	r2, #128	@ 0x80
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	40da      	lsrs	r2, r3
 800255c:	1e13      	subs	r3, r2, #0
 800255e:	d000      	beq.n	8002562 <HAL_GPIO_Init+0x2ae>
 8002560:	e6b0      	b.n	80022c4 <HAL_GPIO_Init+0x10>
  }
}
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	46c0      	nop			@ (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b006      	add	sp, #24
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021800 	.word	0x40021800
 8002570:	50000400 	.word	0x50000400
 8002574:	50000800 	.word	0x50000800
 8002578:	50000c00 	.word	0x50000c00

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	0008      	movs	r0, r1
 8002586:	0011      	movs	r1, r2
 8002588:	1cbb      	adds	r3, r7, #2
 800258a:	1c02      	adds	r2, r0, #0
 800258c:	801a      	strh	r2, [r3, #0]
 800258e:	1c7b      	adds	r3, r7, #1
 8002590:	1c0a      	adds	r2, r1, #0
 8002592:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002594:	1c7b      	adds	r3, r7, #1
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800259c:	1cbb      	adds	r3, r7, #2
 800259e:	881a      	ldrh	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025a4:	e003      	b.n	80025ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a6:	1cbb      	adds	r3, r7, #2
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b002      	add	sp, #8
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	0002      	movs	r2, r0
 80025c0:	1dbb      	adds	r3, r7, #6
 80025c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80025c4:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	1dba      	adds	r2, r7, #6
 80025ca:	8812      	ldrh	r2, [r2, #0]
 80025cc:	4013      	ands	r3, r2
 80025ce:	d008      	beq.n	80025e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80025d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025d2:	1dba      	adds	r2, r7, #6
 80025d4:	8812      	ldrh	r2, [r2, #0]
 80025d6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80025d8:	1dbb      	adds	r3, r7, #6
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7fe f8cb 	bl	8000778 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	1dba      	adds	r2, r7, #6
 80025e8:	8812      	ldrh	r2, [r2, #0]
 80025ea:	4013      	ands	r3, r2
 80025ec:	d008      	beq.n	8002600 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025f0:	1dba      	adds	r2, r7, #6
 80025f2:	8812      	ldrh	r2, [r2, #0]
 80025f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80025f6:	1dbb      	adds	r3, r7, #6
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7fe f914 	bl	8000828 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b002      	add	sp, #8
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021800 	.word	0x40021800

0800260c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002614:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	4b17      	ldr	r3, [pc, #92]	@ (800267c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	429a      	cmp	r2, r3
 800262e:	d11f      	bne.n	8002670 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	0013      	movs	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	189b      	adds	r3, r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4912      	ldr	r1, [pc, #72]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800263e:	0018      	movs	r0, r3
 8002640:	f7fd fd6a 	bl	8000118 <__udivsi3>
 8002644:	0003      	movs	r3, r0
 8002646:	3301      	adds	r3, #1
 8002648:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800264a:	e008      	b.n	800265e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3b01      	subs	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e001      	b.n	800265e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e009      	b.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800265e:	4b07      	ldr	r3, [pc, #28]	@ (800267c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	401a      	ands	r2, r3
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	429a      	cmp	r2, r3
 800266e:	d0ed      	beq.n	800264c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	0018      	movs	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	b004      	add	sp, #16
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	40007000 	.word	0x40007000
 8002680:	fffff9ff 	.word	0xfffff9ff
 8002684:	20000000 	.word	0x20000000
 8002688:	000f4240 	.word	0x000f4240

0800268c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002690:	4b03      	ldr	r3, [pc, #12]	@ (80026a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	23e0      	movs	r3, #224	@ 0xe0
 8002696:	01db      	lsls	r3, r3, #7
 8002698:	4013      	ands	r3, r2
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e2fe      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2201      	movs	r2, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	d100      	bne.n	80026c2 <HAL_RCC_OscConfig+0x1e>
 80026c0:	e07c      	b.n	80027bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c2:	4bc3      	ldr	r3, [pc, #780]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2238      	movs	r2, #56	@ 0x38
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026cc:	4bc0      	ldr	r3, [pc, #768]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4013      	ands	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_OscConfig+0x3e>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d002      	beq.n	80026e8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d10b      	bne.n	8002700 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	4bb9      	ldr	r3, [pc, #740]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	029b      	lsls	r3, r3, #10
 80026f0:	4013      	ands	r3, r2
 80026f2:	d062      	beq.n	80027ba <HAL_RCC_OscConfig+0x116>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d15e      	bne.n	80027ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e2d9      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	025b      	lsls	r3, r3, #9
 8002708:	429a      	cmp	r2, r3
 800270a:	d107      	bne.n	800271c <HAL_RCC_OscConfig+0x78>
 800270c:	4bb0      	ldr	r3, [pc, #704]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4baf      	ldr	r3, [pc, #700]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002712:	2180      	movs	r1, #128	@ 0x80
 8002714:	0249      	lsls	r1, r1, #9
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e020      	b.n	800275e <HAL_RCC_OscConfig+0xba>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	23a0      	movs	r3, #160	@ 0xa0
 8002722:	02db      	lsls	r3, r3, #11
 8002724:	429a      	cmp	r2, r3
 8002726:	d10e      	bne.n	8002746 <HAL_RCC_OscConfig+0xa2>
 8002728:	4ba9      	ldr	r3, [pc, #676]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4ba8      	ldr	r3, [pc, #672]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 800272e:	2180      	movs	r1, #128	@ 0x80
 8002730:	02c9      	lsls	r1, r1, #11
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	4ba6      	ldr	r3, [pc, #664]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4ba5      	ldr	r3, [pc, #660]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	0249      	lsls	r1, r1, #9
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0xba>
 8002746:	4ba2      	ldr	r3, [pc, #648]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4ba1      	ldr	r3, [pc, #644]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 800274c:	49a1      	ldr	r1, [pc, #644]	@ (80029d4 <HAL_RCC_OscConfig+0x330>)
 800274e:	400a      	ands	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	4b9f      	ldr	r3, [pc, #636]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b9e      	ldr	r3, [pc, #632]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002758:	499f      	ldr	r1, [pc, #636]	@ (80029d8 <HAL_RCC_OscConfig+0x334>)
 800275a:	400a      	ands	r2, r1
 800275c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d014      	beq.n	8002790 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe fd51 	bl	800120c <HAL_GetTick>
 800276a:	0003      	movs	r3, r0
 800276c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fd4c 	bl	800120c <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	@ 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e298      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002782:	4b93      	ldr	r3, [pc, #588]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	029b      	lsls	r3, r3, #10
 800278a:	4013      	ands	r3, r2
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0xcc>
 800278e:	e015      	b.n	80027bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fd3c 	bl	800120c <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279a:	f7fe fd37 	bl	800120c <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	@ 0x64
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e283      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ac:	4b88      	ldr	r3, [pc, #544]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	4013      	ands	r3, r2
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0xf6>
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d100      	bne.n	80027c8 <HAL_RCC_OscConfig+0x124>
 80027c6:	e099      	b.n	80028fc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c8:	4b81      	ldr	r3, [pc, #516]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2238      	movs	r2, #56	@ 0x38
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d2:	4b7f      	ldr	r3, [pc, #508]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2203      	movs	r2, #3
 80027d8:	4013      	ands	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x144>
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d002      	beq.n	80027ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d135      	bne.n	800285a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ee:	4b78      	ldr	r3, [pc, #480]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	@ 0x80
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4013      	ands	r3, r2
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x162>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e256      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b72      	ldr	r3, [pc, #456]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a74      	ldr	r2, [pc, #464]	@ (80029dc <HAL_RCC_OscConfig+0x338>)
 800280c:	4013      	ands	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	021a      	lsls	r2, r3, #8
 8002816:	4b6e      	ldr	r3, [pc, #440]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d112      	bne.n	8002848 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002822:	4b6b      	ldr	r3, [pc, #428]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6e      	ldr	r2, [pc, #440]	@ (80029e0 <HAL_RCC_OscConfig+0x33c>)
 8002828:	4013      	ands	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	4b67      	ldr	r3, [pc, #412]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002836:	4b66      	ldr	r3, [pc, #408]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0adb      	lsrs	r3, r3, #11
 800283c:	2207      	movs	r2, #7
 800283e:	4013      	ands	r3, r2
 8002840:	4a68      	ldr	r2, [pc, #416]	@ (80029e4 <HAL_RCC_OscConfig+0x340>)
 8002842:	40da      	lsrs	r2, r3
 8002844:	4b68      	ldr	r3, [pc, #416]	@ (80029e8 <HAL_RCC_OscConfig+0x344>)
 8002846:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002848:	4b68      	ldr	r3, [pc, #416]	@ (80029ec <HAL_RCC_OscConfig+0x348>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0018      	movs	r0, r3
 800284e:	f7fe fc81 	bl	8001154 <HAL_InitTick>
 8002852:	1e03      	subs	r3, r0, #0
 8002854:	d051      	beq.n	80028fa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e22c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d030      	beq.n	80028c4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002862:	4b5b      	ldr	r3, [pc, #364]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a5e      	ldr	r2, [pc, #376]	@ (80029e0 <HAL_RCC_OscConfig+0x33c>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	4b57      	ldr	r3, [pc, #348]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002876:	4b56      	ldr	r3, [pc, #344]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b55      	ldr	r3, [pc, #340]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 800287c:	2180      	movs	r1, #128	@ 0x80
 800287e:	0049      	lsls	r1, r1, #1
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fcc2 	bl	800120c <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288e:	f7fe fcbd 	bl	800120c <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e209      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a0:	4b4b      	ldr	r3, [pc, #300]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4013      	ands	r3, r2
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ac:	4b48      	ldr	r3, [pc, #288]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a4a      	ldr	r2, [pc, #296]	@ (80029dc <HAL_RCC_OscConfig+0x338>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	021a      	lsls	r2, r3, #8
 80028bc:	4b44      	ldr	r3, [pc, #272]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	e01b      	b.n	80028fc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80028c4:	4b42      	ldr	r3, [pc, #264]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b41      	ldr	r3, [pc, #260]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80028ca:	4949      	ldr	r1, [pc, #292]	@ (80029f0 <HAL_RCC_OscConfig+0x34c>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe fc9c 	bl	800120c <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe fc97 	bl	800120c <HAL_GetTick>
 80028de:	0002      	movs	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1e3      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ec:	4b38      	ldr	r3, [pc, #224]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4013      	ands	r3, r2
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x236>
 80028f8:	e000      	b.n	80028fc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2208      	movs	r2, #8
 8002902:	4013      	ands	r3, r2
 8002904:	d047      	beq.n	8002996 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002906:	4b32      	ldr	r3, [pc, #200]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2238      	movs	r2, #56	@ 0x38
 800290c:	4013      	ands	r3, r2
 800290e:	2b18      	cmp	r3, #24
 8002910:	d10a      	bne.n	8002928 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002912:	4b2f      	ldr	r3, [pc, #188]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002916:	2202      	movs	r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d03c      	beq.n	8002996 <HAL_RCC_OscConfig+0x2f2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d138      	bne.n	8002996 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e1c5      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d019      	beq.n	8002964 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002930:	4b27      	ldr	r3, [pc, #156]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002932:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002934:	4b26      	ldr	r3, [pc, #152]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002936:	2101      	movs	r1, #1
 8002938:	430a      	orrs	r2, r1
 800293a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fc66 	bl	800120c <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002946:	f7fe fc61 	bl	800120c <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1ad      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002958:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 800295a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d0f1      	beq.n	8002946 <HAL_RCC_OscConfig+0x2a2>
 8002962:	e018      	b.n	8002996 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002964:	4b1a      	ldr	r3, [pc, #104]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 8002966:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002968:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 800296a:	2101      	movs	r1, #1
 800296c:	438a      	bics	r2, r1
 800296e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fc4c 	bl	800120c <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297a:	f7fe fc47 	bl	800120c <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e193      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800298c:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 800298e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002990:	2202      	movs	r2, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d1f1      	bne.n	800297a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2204      	movs	r2, #4
 800299c:	4013      	ands	r3, r2
 800299e:	d100      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2fe>
 80029a0:	e0c6      	b.n	8002b30 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a2:	231f      	movs	r3, #31
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029aa:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2238      	movs	r2, #56	@ 0x38
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d11e      	bne.n	80029f4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_RCC_OscConfig+0x32c>)
 80029b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d100      	bne.n	80029c2 <HAL_RCC_OscConfig+0x31e>
 80029c0:	e0b6      	b.n	8002b30 <HAL_RCC_OscConfig+0x48c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d000      	beq.n	80029cc <HAL_RCC_OscConfig+0x328>
 80029ca:	e0b1      	b.n	8002b30 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e171      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	fffeffff 	.word	0xfffeffff
 80029d8:	fffbffff 	.word	0xfffbffff
 80029dc:	ffff80ff 	.word	0xffff80ff
 80029e0:	ffffc7ff 	.word	0xffffc7ff
 80029e4:	00f42400 	.word	0x00f42400
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004
 80029f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029f4:	4bb1      	ldr	r3, [pc, #708]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 80029f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	055b      	lsls	r3, r3, #21
 80029fc:	4013      	ands	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_OscConfig+0x360>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x362>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d011      	beq.n	8002a2e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4bac      	ldr	r3, [pc, #688]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002a0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a0e:	4bab      	ldr	r3, [pc, #684]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002a10:	2180      	movs	r1, #128	@ 0x80
 8002a12:	0549      	lsls	r1, r1, #21
 8002a14:	430a      	orrs	r2, r1
 8002a16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a18:	4ba8      	ldr	r3, [pc, #672]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	055b      	lsls	r3, r3, #21
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a26:	231f      	movs	r3, #31
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a2e:	4ba4      	ldr	r3, [pc, #656]	@ (8002cc0 <HAL_RCC_OscConfig+0x61c>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4013      	ands	r3, r2
 8002a38:	d11a      	bne.n	8002a70 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a3a:	4ba1      	ldr	r3, [pc, #644]	@ (8002cc0 <HAL_RCC_OscConfig+0x61c>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4ba0      	ldr	r3, [pc, #640]	@ (8002cc0 <HAL_RCC_OscConfig+0x61c>)
 8002a40:	2180      	movs	r1, #128	@ 0x80
 8002a42:	0049      	lsls	r1, r1, #1
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fbe0 	bl	800120c <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fe fbdb 	bl	800120c <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e127      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a64:	4b96      	ldr	r3, [pc, #600]	@ (8002cc0 <HAL_RCC_OscConfig+0x61c>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2380      	movs	r3, #128	@ 0x80
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x3e2>
 8002a78:	4b90      	ldr	r3, [pc, #576]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002a7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	430a      	orrs	r2, r1
 8002a82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x41c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x404>
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002a90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a92:	4b8a      	ldr	r3, [pc, #552]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002a94:	2104      	movs	r1, #4
 8002a96:	430a      	orrs	r2, r1
 8002a98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a9a:	4b88      	ldr	r3, [pc, #544]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002a9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a9e:	4b87      	ldr	r3, [pc, #540]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x41c>
 8002aa8:	4b84      	ldr	r3, [pc, #528]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002aaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aac:	4b83      	ldr	r3, [pc, #524]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002aae:	2101      	movs	r1, #1
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ab4:	4b81      	ldr	r3, [pc, #516]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002ab6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ab8:	4b80      	ldr	r3, [pc, #512]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002aba:	2104      	movs	r1, #4
 8002abc:	438a      	bics	r2, r1
 8002abe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d014      	beq.n	8002af2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fba0 	bl	800120c <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad0:	e009      	b.n	8002ae6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7fe fb9b 	bl	800120c <HAL_GetTick>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	4a79      	ldr	r2, [pc, #484]	@ (8002cc4 <HAL_RCC_OscConfig+0x620>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0e6      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae6:	4b75      	ldr	r3, [pc, #468]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aea:	2202      	movs	r2, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x42e>
 8002af0:	e013      	b.n	8002b1a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe fb8b 	bl	800120c <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002afa:	e009      	b.n	8002b10 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7fe fb86 	bl	800120c <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	4a6f      	ldr	r2, [pc, #444]	@ (8002cc4 <HAL_RCC_OscConfig+0x620>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e0d1      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b10:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b14:	2202      	movs	r2, #2
 8002b16:	4013      	ands	r3, r2
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b1a:	231f      	movs	r3, #31
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b24:	4b65      	ldr	r3, [pc, #404]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b28:	4b64      	ldr	r3, [pc, #400]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002b2a:	4967      	ldr	r1, [pc, #412]	@ (8002cc8 <HAL_RCC_OscConfig+0x624>)
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d100      	bne.n	8002b3a <HAL_RCC_OscConfig+0x496>
 8002b38:	e0bb      	b.n	8002cb2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b3a:	4b60      	ldr	r3, [pc, #384]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2238      	movs	r2, #56	@ 0x38
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d100      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4a4>
 8002b46:	e07b      	b.n	8002c40 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d156      	bne.n	8002bfe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b50:	4b5a      	ldr	r3, [pc, #360]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b59      	ldr	r3, [pc, #356]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002b56:	495d      	ldr	r1, [pc, #372]	@ (8002ccc <HAL_RCC_OscConfig+0x628>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fb56 	bl	800120c <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b66:	f7fe fb51 	bl	800120c <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e09d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b78:	4b50      	ldr	r3, [pc, #320]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	049b      	lsls	r3, r3, #18
 8002b80:	4013      	ands	r3, r2
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b84:	4b4d      	ldr	r3, [pc, #308]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a51      	ldr	r2, [pc, #324]	@ (8002cd0 <HAL_RCC_OscConfig+0x62c>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	4b42      	ldr	r3, [pc, #264]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb8:	4b40      	ldr	r3, [pc, #256]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002bbe:	2180      	movs	r1, #128	@ 0x80
 8002bc0:	0449      	lsls	r1, r1, #17
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	4b3c      	ldr	r3, [pc, #240]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002bcc:	2180      	movs	r1, #128	@ 0x80
 8002bce:	0549      	lsls	r1, r1, #21
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fb1a 	bl	800120c <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bde:	f7fe fb15 	bl	800120c <HAL_GetTick>
 8002be2:	0002      	movs	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e061      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf0:	4b32      	ldr	r3, [pc, #200]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	2380      	movs	r3, #128	@ 0x80
 8002bf6:	049b      	lsls	r3, r3, #18
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x53a>
 8002bfc:	e059      	b.n	8002cb2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b2e      	ldr	r3, [pc, #184]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002c04:	4931      	ldr	r1, [pc, #196]	@ (8002ccc <HAL_RCC_OscConfig+0x628>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe faff 	bl	800120c <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fafa 	bl	800120c <HAL_GetTick>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e046      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c26:	4b25      	ldr	r3, [pc, #148]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	049b      	lsls	r3, r3, #18
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c32:	4b22      	ldr	r3, [pc, #136]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	4b21      	ldr	r3, [pc, #132]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002c38:	4926      	ldr	r1, [pc, #152]	@ (8002cd4 <HAL_RCC_OscConfig+0x630>)
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	e038      	b.n	8002cb2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e033      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <HAL_RCC_OscConfig+0x618>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2203      	movs	r2, #3
 8002c56:	401a      	ands	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d126      	bne.n	8002cae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2270      	movs	r2, #112	@ 0x70
 8002c64:	401a      	ands	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d11f      	bne.n	8002cae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	23fe      	movs	r3, #254	@ 0xfe
 8002c72:	01db      	lsls	r3, r3, #7
 8002c74:	401a      	ands	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d116      	bne.n	8002cae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	23f8      	movs	r3, #248	@ 0xf8
 8002c84:	039b      	lsls	r3, r3, #14
 8002c86:	401a      	ands	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d10e      	bne.n	8002cae <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	23e0      	movs	r3, #224	@ 0xe0
 8002c94:	051b      	lsls	r3, r3, #20
 8002c96:	401a      	ands	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	0f5b      	lsrs	r3, r3, #29
 8002ca4:	075a      	lsls	r2, r3, #29
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b008      	add	sp, #32
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	00001388 	.word	0x00001388
 8002cc8:	efffffff 	.word	0xefffffff
 8002ccc:	feffffff 	.word	0xfeffffff
 8002cd0:	11c1808c 	.word	0x11c1808c
 8002cd4:	eefefffc 	.word	0xeefefffc

08002cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0e9      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cec:	4b76      	ldr	r3, [pc, #472]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d91e      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b73      	ldr	r3, [pc, #460]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2207      	movs	r2, #7
 8002d00:	4393      	bics	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	4b70      	ldr	r3, [pc, #448]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d0c:	f7fe fa7e 	bl	800120c <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d14:	e009      	b.n	8002d2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d16:	f7fe fa79 	bl	800120c <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	4a6a      	ldr	r2, [pc, #424]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0ca      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d2a:	4b67      	ldr	r3, [pc, #412]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2207      	movs	r2, #7
 8002d30:	4013      	ands	r3, r2
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1ee      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d015      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2204      	movs	r2, #4
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d006      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d4c:	4b60      	ldr	r3, [pc, #384]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4b5f      	ldr	r3, [pc, #380]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d52:	21e0      	movs	r1, #224	@ 0xe0
 8002d54:	01c9      	lsls	r1, r1, #7
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1fc>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4b59      	ldr	r3, [pc, #356]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2201      	movs	r2, #1
 8002d74:	4013      	ands	r3, r2
 8002d76:	d057      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d80:	4b53      	ldr	r3, [pc, #332]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	029b      	lsls	r3, r3, #10
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d12b      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e097      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d98:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	049b      	lsls	r3, r3, #18
 8002da0:	4013      	ands	r3, r2
 8002da2:	d11f      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e08b      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db0:	4b47      	ldr	r3, [pc, #284]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4013      	ands	r3, r2
 8002dba:	d113      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e07f      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc8:	4b41      	ldr	r3, [pc, #260]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dcc:	2202      	movs	r2, #2
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d108      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e074      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e06d      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002de4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2207      	movs	r2, #7
 8002dea:	4393      	bics	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4b37      	ldr	r3, [pc, #220]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fe fa08 	bl	800120c <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e00:	e009      	b.n	8002e16 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e02:	f7fe fa03 	bl	800120c <HAL_GetTick>
 8002e06:	0002      	movs	r2, r0
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e054      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2238      	movs	r2, #56	@ 0x38
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1ec      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e28:	4b27      	ldr	r3, [pc, #156]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	4013      	ands	r3, r2
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d21e      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b24      	ldr	r3, [pc, #144]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	0019      	movs	r1, r3
 8002e40:	4b21      	ldr	r3, [pc, #132]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e48:	f7fe f9e0 	bl	800120c <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e50:	e009      	b.n	8002e66 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e52:	f7fe f9db 	bl	800120c <HAL_GetTick>
 8002e56:	0002      	movs	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ecc <HAL_RCC_ClockConfig+0x1f4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e02c      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e66:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1ee      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	4a15      	ldr	r2, [pc, #84]	@ (8002ed8 <HAL_RCC_ClockConfig+0x200>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e92:	f000 f829 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002e96:	0001      	movs	r1, r0
 8002e98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <HAL_RCC_ClockConfig+0x204>)
 8002ea4:	0092      	lsls	r2, r2, #2
 8002ea6:	58d3      	ldr	r3, [r2, r3]
 8002ea8:	221f      	movs	r2, #31
 8002eaa:	4013      	ands	r3, r2
 8002eac:	000a      	movs	r2, r1
 8002eae:	40da      	lsrs	r2, r3
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCC_ClockConfig+0x208>)
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCC_ClockConfig+0x20c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7fe f94b 	bl	8001154 <HAL_InitTick>
 8002ebe:	0003      	movs	r3, r0
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b004      	add	sp, #16
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40022000 	.word	0x40022000
 8002ecc:	00001388 	.word	0x00001388
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	fffff0ff 	.word	0xfffff0ff
 8002ed8:	ffff8fff 	.word	0xffff8fff
 8002edc:	0800689c 	.word	0x0800689c
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	20000004 	.word	0x20000004

08002ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eee:	4b3c      	ldr	r3, [pc, #240]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2238      	movs	r2, #56	@ 0x38
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d10f      	bne.n	8002f18 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ef8:	4b39      	ldr	r3, [pc, #228]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0adb      	lsrs	r3, r3, #11
 8002efe:	2207      	movs	r2, #7
 8002f00:	4013      	ands	r3, r2
 8002f02:	2201      	movs	r2, #1
 8002f04:	409a      	lsls	r2, r3
 8002f06:	0013      	movs	r3, r2
 8002f08:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f0a:	6839      	ldr	r1, [r7, #0]
 8002f0c:	4835      	ldr	r0, [pc, #212]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f0e:	f7fd f903 	bl	8000118 <__udivsi3>
 8002f12:	0003      	movs	r3, r0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	e05d      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f18:	4b31      	ldr	r3, [pc, #196]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2238      	movs	r2, #56	@ 0x38
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f24:	4b30      	ldr	r3, [pc, #192]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e054      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2238      	movs	r2, #56	@ 0x38
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b10      	cmp	r3, #16
 8002f34:	d138      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f36:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	2207      	movs	r2, #7
 8002f48:	4013      	ands	r3, r2
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d10d      	bne.n	8002f70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	4824      	ldr	r0, [pc, #144]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f58:	f7fd f8de 	bl	8000118 <__udivsi3>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	0019      	movs	r1, r3
 8002f60:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	227f      	movs	r2, #127	@ 0x7f
 8002f68:	4013      	ands	r3, r2
 8002f6a:	434b      	muls	r3, r1
 8002f6c:	617b      	str	r3, [r7, #20]
        break;
 8002f6e:	e00d      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	481c      	ldr	r0, [pc, #112]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f74:	f7fd f8d0 	bl	8000118 <__udivsi3>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	4b18      	ldr	r3, [pc, #96]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	227f      	movs	r2, #127	@ 0x7f
 8002f84:	4013      	ands	r3, r2
 8002f86:	434b      	muls	r3, r1
 8002f88:	617b      	str	r3, [r7, #20]
        break;
 8002f8a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0f5b      	lsrs	r3, r3, #29
 8002f92:	2207      	movs	r2, #7
 8002f94:	4013      	ands	r3, r2
 8002f96:	3301      	adds	r3, #1
 8002f98:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	6978      	ldr	r0, [r7, #20]
 8002f9e:	f7fd f8bb 	bl	8000118 <__udivsi3>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	e015      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2238      	movs	r2, #56	@ 0x38
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d103      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002fb4:	2380      	movs	r3, #128	@ 0x80
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fbc:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2238      	movs	r2, #56	@ 0x38
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b18      	cmp	r3, #24
 8002fc6:	d103      	bne.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fc8:	23fa      	movs	r3, #250	@ 0xfa
 8002fca:	01db      	lsls	r3, r3, #7
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	e001      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fd4:	693b      	ldr	r3, [r7, #16]
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b006      	add	sp, #24
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff0:	4b02      	ldr	r3, [pc, #8]	@ (8002ffc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	20000000 	.word	0x20000000

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003004:	f7ff fff2 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003008:	0004      	movs	r4, r0
 800300a:	f7ff fb3f 	bl	800268c <LL_RCC_GetAPB1Prescaler>
 800300e:	0003      	movs	r3, r0
 8003010:	0b1a      	lsrs	r2, r3, #12
 8003012:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003014:	0092      	lsls	r2, r2, #2
 8003016:	58d3      	ldr	r3, [r2, r3]
 8003018:	221f      	movs	r2, #31
 800301a:	4013      	ands	r3, r2
 800301c:	40dc      	lsrs	r4, r3
 800301e:	0023      	movs	r3, r4
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bdb0      	pop	{r4, r5, r7, pc}
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	080068dc 	.word	0x080068dc

0800302c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003034:	2313      	movs	r3, #19
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800303c:	2312      	movs	r3, #18
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	029b      	lsls	r3, r3, #10
 800304c:	4013      	ands	r3, r2
 800304e:	d100      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003050:	e0a3      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003052:	2011      	movs	r0, #17
 8003054:	183b      	adds	r3, r7, r0
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305a:	4bc3      	ldr	r3, [pc, #780]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800305c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800305e:	2380      	movs	r3, #128	@ 0x80
 8003060:	055b      	lsls	r3, r3, #21
 8003062:	4013      	ands	r3, r2
 8003064:	d110      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003066:	4bc0      	ldr	r3, [pc, #768]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800306a:	4bbf      	ldr	r3, [pc, #764]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800306c:	2180      	movs	r1, #128	@ 0x80
 800306e:	0549      	lsls	r1, r1, #21
 8003070:	430a      	orrs	r2, r1
 8003072:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003074:	4bbc      	ldr	r3, [pc, #752]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	055b      	lsls	r3, r3, #21
 800307c:	4013      	ands	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003082:	183b      	adds	r3, r7, r0
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003088:	4bb8      	ldr	r3, [pc, #736]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4bb7      	ldr	r3, [pc, #732]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800308e:	2180      	movs	r1, #128	@ 0x80
 8003090:	0049      	lsls	r1, r1, #1
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003096:	f7fe f8b9 	bl	800120c <HAL_GetTick>
 800309a:	0003      	movs	r3, r0
 800309c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800309e:	e00b      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7fe f8b4 	bl	800120c <HAL_GetTick>
 80030a4:	0002      	movs	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d904      	bls.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030ae:	2313      	movs	r3, #19
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	2203      	movs	r2, #3
 80030b4:	701a      	strb	r2, [r3, #0]
        break;
 80030b6:	e005      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b8:	4bac      	ldr	r3, [pc, #688]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4013      	ands	r3, r2
 80030c2:	d0ed      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030c4:	2313      	movs	r3, #19
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d154      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030ce:	4ba6      	ldr	r3, [pc, #664]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030d2:	23c0      	movs	r3, #192	@ 0xc0
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4013      	ands	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d019      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d014      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030ea:	4b9f      	ldr	r3, [pc, #636]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ee:	4aa0      	ldr	r2, [pc, #640]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030f8:	4b9b      	ldr	r3, [pc, #620]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030fa:	2180      	movs	r1, #128	@ 0x80
 80030fc:	0249      	lsls	r1, r1, #9
 80030fe:	430a      	orrs	r2, r1
 8003100:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003102:	4b99      	ldr	r3, [pc, #612]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003104:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003106:	4b98      	ldr	r3, [pc, #608]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003108:	499a      	ldr	r1, [pc, #616]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800310a:	400a      	ands	r2, r1
 800310c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800310e:	4b96      	ldr	r3, [pc, #600]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2201      	movs	r2, #1
 8003118:	4013      	ands	r3, r2
 800311a:	d016      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe f876 	bl	800120c <HAL_GetTick>
 8003120:	0003      	movs	r3, r0
 8003122:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003124:	e00c      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fe f871 	bl	800120c <HAL_GetTick>
 800312a:	0002      	movs	r2, r0
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	4a91      	ldr	r2, [pc, #580]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d904      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003136:	2313      	movs	r3, #19
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2203      	movs	r2, #3
 800313c:	701a      	strb	r2, [r3, #0]
            break;
 800313e:	e004      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	4b89      	ldr	r3, [pc, #548]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003144:	2202      	movs	r2, #2
 8003146:	4013      	ands	r3, r2
 8003148:	d0ed      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800314a:	2313      	movs	r3, #19
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003154:	4b84      	ldr	r3, [pc, #528]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	4a85      	ldr	r2, [pc, #532]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003162:	4b81      	ldr	r3, [pc, #516]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003164:	430a      	orrs	r2, r1
 8003166:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003168:	e00c      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800316a:	2312      	movs	r3, #18
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	2213      	movs	r2, #19
 8003170:	18ba      	adds	r2, r7, r2
 8003172:	7812      	ldrb	r2, [r2, #0]
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e005      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	2312      	movs	r3, #18
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2213      	movs	r2, #19
 800317e:	18ba      	adds	r2, r7, r2
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003184:	2311      	movs	r3, #17
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318e:	4b76      	ldr	r3, [pc, #472]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003190:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003192:	4b75      	ldr	r3, [pc, #468]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003194:	4979      	ldr	r1, [pc, #484]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003196:	400a      	ands	r2, r1
 8003198:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	4013      	ands	r3, r2
 80031a2:	d009      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a4:	4b70      	ldr	r3, [pc, #448]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	2203      	movs	r2, #3
 80031aa:	4393      	bics	r3, r2
 80031ac:	0019      	movs	r1, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b4:	430a      	orrs	r2, r1
 80031b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2202      	movs	r2, #2
 80031be:	4013      	ands	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031c2:	4b69      	ldr	r3, [pc, #420]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c6:	220c      	movs	r2, #12
 80031c8:	4393      	bics	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	4b65      	ldr	r3, [pc, #404]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031d2:	430a      	orrs	r2, r1
 80031d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2210      	movs	r2, #16
 80031dc:	4013      	ands	r3, r2
 80031de:	d009      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031e0:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e4:	4a66      	ldr	r2, [pc, #408]	@ (8003380 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031f0:	430a      	orrs	r2, r1
 80031f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	2380      	movs	r3, #128	@ 0x80
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003200:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003204:	4a5f      	ldr	r2, [pc, #380]	@ (8003384 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003206:	4013      	ands	r3, r2
 8003208:	0019      	movs	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	4b56      	ldr	r3, [pc, #344]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003210:	430a      	orrs	r2, r1
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4013      	ands	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003220:	4b51      	ldr	r3, [pc, #324]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003224:	4a58      	ldr	r2, [pc, #352]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003226:	4013      	ands	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	4b4e      	ldr	r3, [pc, #312]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003230:	430a      	orrs	r2, r1
 8003232:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2220      	movs	r2, #32
 800323a:	4013      	ands	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800323e:	4b4a      	ldr	r3, [pc, #296]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003242:	4a52      	ldr	r2, [pc, #328]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003244:	4013      	ands	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	4b46      	ldr	r3, [pc, #280]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800324e:	430a      	orrs	r2, r1
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	01db      	lsls	r3, r3, #7
 800325a:	4013      	ands	r3, r2
 800325c:	d015      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800325e:	4b42      	ldr	r3, [pc, #264]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	0899      	lsrs	r1, r3, #2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1a      	ldr	r2, [r3, #32]
 800326a:	4b3f      	ldr	r3, [pc, #252]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800326c:	430a      	orrs	r2, r1
 800326e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1a      	ldr	r2, [r3, #32]
 8003274:	2380      	movs	r3, #128	@ 0x80
 8003276:	05db      	lsls	r3, r3, #23
 8003278:	429a      	cmp	r2, r3
 800327a:	d106      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800327c:	4b3a      	ldr	r3, [pc, #232]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	4b39      	ldr	r3, [pc, #228]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003282:	2180      	movs	r1, #128	@ 0x80
 8003284:	0249      	lsls	r1, r1, #9
 8003286:	430a      	orrs	r2, r1
 8003288:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	031b      	lsls	r3, r3, #12
 8003292:	4013      	ands	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003296:	4b34      	ldr	r3, [pc, #208]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	2240      	movs	r2, #64	@ 0x40
 800329c:	4393      	bics	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032a4:	4b30      	ldr	r3, [pc, #192]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032a6:	430a      	orrs	r2, r1
 80032a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	039b      	lsls	r3, r3, #14
 80032b2:	4013      	ands	r3, r2
 80032b4:	d016      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	4a35      	ldr	r2, [pc, #212]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032bc:	4013      	ands	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032c4:	4b28      	ldr	r3, [pc, #160]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032c6:	430a      	orrs	r2, r1
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032ce:	2380      	movs	r3, #128	@ 0x80
 80032d0:	03db      	lsls	r3, r3, #15
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d106      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032d6:	4b24      	ldr	r3, [pc, #144]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	4b23      	ldr	r3, [pc, #140]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032dc:	2180      	movs	r1, #128	@ 0x80
 80032de:	0449      	lsls	r1, r1, #17
 80032e0:	430a      	orrs	r2, r1
 80032e2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2380      	movs	r3, #128	@ 0x80
 80032ea:	03db      	lsls	r3, r3, #15
 80032ec:	4013      	ands	r3, r2
 80032ee:	d016      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80032f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f4:	4a27      	ldr	r2, [pc, #156]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	0019      	movs	r1, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003300:	430a      	orrs	r2, r1
 8003302:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003308:	2380      	movs	r3, #128	@ 0x80
 800330a:	045b      	lsls	r3, r3, #17
 800330c:	429a      	cmp	r2, r3
 800330e:	d106      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003310:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	4b14      	ldr	r3, [pc, #80]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003316:	2180      	movs	r1, #128	@ 0x80
 8003318:	0449      	lsls	r1, r1, #17
 800331a:	430a      	orrs	r2, r1
 800331c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	2380      	movs	r3, #128	@ 0x80
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	4013      	ands	r3, r2
 8003328:	d016      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800332a:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800332c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332e:	4a1a      	ldr	r2, [pc, #104]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003330:	4013      	ands	r3, r2
 8003332:	0019      	movs	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800333a:	430a      	orrs	r2, r1
 800333c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	2380      	movs	r3, #128	@ 0x80
 8003344:	01db      	lsls	r3, r3, #7
 8003346:	429a      	cmp	r2, r3
 8003348:	d106      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800334a:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	0249      	lsls	r1, r1, #9
 8003354:	430a      	orrs	r2, r1
 8003356:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003358:	2312      	movs	r3, #18
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	781b      	ldrb	r3, [r3, #0]
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b006      	add	sp, #24
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
 8003370:	fffffcff 	.word	0xfffffcff
 8003374:	fffeffff 	.word	0xfffeffff
 8003378:	00001388 	.word	0x00001388
 800337c:	efffffff 	.word	0xefffffff
 8003380:	fffff3ff 	.word	0xfffff3ff
 8003384:	fff3ffff 	.word	0xfff3ffff
 8003388:	ffcfffff 	.word	0xffcfffff
 800338c:	ffffcfff 	.word	0xffffcfff
 8003390:	ffbfffff 	.word	0xffbfffff
 8003394:	feffffff 	.word	0xfeffffff
 8003398:	ffff3fff 	.word	0xffff3fff

0800339c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e04a      	b.n	8003444 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	223d      	movs	r2, #61	@ 0x3d
 80033b2:	5c9b      	ldrb	r3, [r3, r2]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d107      	bne.n	80033ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	223c      	movs	r2, #60	@ 0x3c
 80033be:	2100      	movs	r1, #0
 80033c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fd fd51 	bl	8000e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	223d      	movs	r2, #61	@ 0x3d
 80033ce:	2102      	movs	r1, #2
 80033d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	0019      	movs	r1, r3
 80033dc:	0010      	movs	r0, r2
 80033de:	f000 fb4f 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2248      	movs	r2, #72	@ 0x48
 80033e6:	2101      	movs	r1, #1
 80033e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	223e      	movs	r2, #62	@ 0x3e
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	223f      	movs	r2, #63	@ 0x3f
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2240      	movs	r2, #64	@ 0x40
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2241      	movs	r2, #65	@ 0x41
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2242      	movs	r2, #66	@ 0x42
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2243      	movs	r2, #67	@ 0x43
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2244      	movs	r2, #68	@ 0x44
 800341e:	2101      	movs	r1, #1
 8003420:	5499      	strb	r1, [r3, r2]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2245      	movs	r2, #69	@ 0x45
 8003426:	2101      	movs	r1, #1
 8003428:	5499      	strb	r1, [r3, r2]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2246      	movs	r2, #70	@ 0x46
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2247      	movs	r2, #71	@ 0x47
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223d      	movs	r2, #61	@ 0x3d
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b002      	add	sp, #8
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d108      	bne.n	800346e <HAL_TIM_PWM_Start+0x22>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	223e      	movs	r2, #62	@ 0x3e
 8003460:	5c9b      	ldrb	r3, [r3, r2]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	1e5a      	subs	r2, r3, #1
 8003468:	4193      	sbcs	r3, r2
 800346a:	b2db      	uxtb	r3, r3
 800346c:	e037      	b.n	80034de <HAL_TIM_PWM_Start+0x92>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d108      	bne.n	8003486 <HAL_TIM_PWM_Start+0x3a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	223f      	movs	r2, #63	@ 0x3f
 8003478:	5c9b      	ldrb	r3, [r3, r2]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	1e5a      	subs	r2, r3, #1
 8003480:	4193      	sbcs	r3, r2
 8003482:	b2db      	uxtb	r3, r3
 8003484:	e02b      	b.n	80034de <HAL_TIM_PWM_Start+0x92>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d108      	bne.n	800349e <HAL_TIM_PWM_Start+0x52>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2240      	movs	r2, #64	@ 0x40
 8003490:	5c9b      	ldrb	r3, [r3, r2]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	1e5a      	subs	r2, r3, #1
 8003498:	4193      	sbcs	r3, r2
 800349a:	b2db      	uxtb	r3, r3
 800349c:	e01f      	b.n	80034de <HAL_TIM_PWM_Start+0x92>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d108      	bne.n	80034b6 <HAL_TIM_PWM_Start+0x6a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2241      	movs	r2, #65	@ 0x41
 80034a8:	5c9b      	ldrb	r3, [r3, r2]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	1e5a      	subs	r2, r3, #1
 80034b0:	4193      	sbcs	r3, r2
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	e013      	b.n	80034de <HAL_TIM_PWM_Start+0x92>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d108      	bne.n	80034ce <HAL_TIM_PWM_Start+0x82>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2242      	movs	r2, #66	@ 0x42
 80034c0:	5c9b      	ldrb	r3, [r3, r2]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	1e5a      	subs	r2, r3, #1
 80034c8:	4193      	sbcs	r3, r2
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e007      	b.n	80034de <HAL_TIM_PWM_Start+0x92>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2243      	movs	r2, #67	@ 0x43
 80034d2:	5c9b      	ldrb	r3, [r3, r2]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	1e5a      	subs	r2, r3, #1
 80034da:	4193      	sbcs	r3, r2
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e08b      	b.n	80035fe <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <HAL_TIM_PWM_Start+0xaa>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	223e      	movs	r2, #62	@ 0x3e
 80034f0:	2102      	movs	r1, #2
 80034f2:	5499      	strb	r1, [r3, r2]
 80034f4:	e023      	b.n	800353e <HAL_TIM_PWM_Start+0xf2>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d104      	bne.n	8003506 <HAL_TIM_PWM_Start+0xba>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	223f      	movs	r2, #63	@ 0x3f
 8003500:	2102      	movs	r1, #2
 8003502:	5499      	strb	r1, [r3, r2]
 8003504:	e01b      	b.n	800353e <HAL_TIM_PWM_Start+0xf2>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d104      	bne.n	8003516 <HAL_TIM_PWM_Start+0xca>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2240      	movs	r2, #64	@ 0x40
 8003510:	2102      	movs	r1, #2
 8003512:	5499      	strb	r1, [r3, r2]
 8003514:	e013      	b.n	800353e <HAL_TIM_PWM_Start+0xf2>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Start+0xda>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2241      	movs	r2, #65	@ 0x41
 8003520:	2102      	movs	r1, #2
 8003522:	5499      	strb	r1, [r3, r2]
 8003524:	e00b      	b.n	800353e <HAL_TIM_PWM_Start+0xf2>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b10      	cmp	r3, #16
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start+0xea>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2242      	movs	r2, #66	@ 0x42
 8003530:	2102      	movs	r1, #2
 8003532:	5499      	strb	r1, [r3, r2]
 8003534:	e003      	b.n	800353e <HAL_TIM_PWM_Start+0xf2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2243      	movs	r2, #67	@ 0x43
 800353a:	2102      	movs	r1, #2
 800353c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6839      	ldr	r1, [r7, #0]
 8003544:	2201      	movs	r2, #1
 8003546:	0018      	movs	r0, r3
 8003548:	f000 fdec 	bl	8004124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2d      	ldr	r2, [pc, #180]	@ (8003608 <HAL_TIM_PWM_Start+0x1bc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_TIM_PWM_Start+0x128>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a2c      	ldr	r2, [pc, #176]	@ (800360c <HAL_TIM_PWM_Start+0x1c0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_TIM_PWM_Start+0x128>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2a      	ldr	r2, [pc, #168]	@ (8003610 <HAL_TIM_PWM_Start+0x1c4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_TIM_PWM_Start+0x128>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a29      	ldr	r2, [pc, #164]	@ (8003614 <HAL_TIM_PWM_Start+0x1c8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d101      	bne.n	8003578 <HAL_TIM_PWM_Start+0x12c>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_TIM_PWM_Start+0x12e>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2180      	movs	r1, #128	@ 0x80
 800358a:	0209      	lsls	r1, r1, #8
 800358c:	430a      	orrs	r2, r1
 800358e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1c      	ldr	r2, [pc, #112]	@ (8003608 <HAL_TIM_PWM_Start+0x1bc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00f      	beq.n	80035ba <HAL_TIM_PWM_Start+0x16e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	2380      	movs	r3, #128	@ 0x80
 80035a0:	05db      	lsls	r3, r3, #23
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d009      	beq.n	80035ba <HAL_TIM_PWM_Start+0x16e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003618 <HAL_TIM_PWM_Start+0x1cc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_TIM_PWM_Start+0x16e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a15      	ldr	r2, [pc, #84]	@ (800360c <HAL_TIM_PWM_Start+0x1c0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d116      	bne.n	80035e8 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a16      	ldr	r2, [pc, #88]	@ (800361c <HAL_TIM_PWM_Start+0x1d0>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d016      	beq.n	80035fa <HAL_TIM_PWM_Start+0x1ae>
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	2380      	movs	r3, #128	@ 0x80
 80035d0:	025b      	lsls	r3, r3, #9
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d011      	beq.n	80035fa <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e6:	e008      	b.n	80035fa <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e000      	b.n	80035fc <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b004      	add	sp, #16
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40014000 	.word	0x40014000
 8003610:	40014400 	.word	0x40014400
 8003614:	40014800 	.word	0x40014800
 8003618:	40000400 	.word	0x40000400
 800361c:	00010007 	.word	0x00010007

08003620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2202      	movs	r2, #2
 800363c:	4013      	ands	r3, r2
 800363e:	d021      	beq.n	8003684 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2202      	movs	r2, #2
 8003644:	4013      	ands	r3, r2
 8003646:	d01d      	beq.n	8003684 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2203      	movs	r2, #3
 800364e:	4252      	negs	r2, r2
 8003650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2203      	movs	r2, #3
 8003660:	4013      	ands	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	0018      	movs	r0, r3
 8003668:	f000 f9f2 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 800366c:	e007      	b.n	800367e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	0018      	movs	r0, r3
 8003672:	f000 f9e5 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0018      	movs	r0, r3
 800367a:	f000 f9f1 	bl	8003a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2204      	movs	r2, #4
 8003688:	4013      	ands	r3, r2
 800368a:	d022      	beq.n	80036d2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2204      	movs	r2, #4
 8003690:	4013      	ands	r3, r2
 8003692:	d01e      	beq.n	80036d2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2205      	movs	r2, #5
 800369a:	4252      	negs	r2, r2
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	23c0      	movs	r3, #192	@ 0xc0
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4013      	ands	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 f9cb 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 80036ba:	e007      	b.n	80036cc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 f9be 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f9ca 	bl	8003a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2208      	movs	r2, #8
 80036d6:	4013      	ands	r3, r2
 80036d8:	d021      	beq.n	800371e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2208      	movs	r2, #8
 80036de:	4013      	ands	r3, r2
 80036e0:	d01d      	beq.n	800371e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2209      	movs	r2, #9
 80036e8:	4252      	negs	r2, r2
 80036ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2204      	movs	r2, #4
 80036f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	2203      	movs	r2, #3
 80036fa:	4013      	ands	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	0018      	movs	r0, r3
 8003702:	f000 f9a5 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 8003706:	e007      	b.n	8003718 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	0018      	movs	r0, r3
 800370c:	f000 f998 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 f9a4 	bl	8003a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2210      	movs	r2, #16
 8003722:	4013      	ands	r3, r2
 8003724:	d022      	beq.n	800376c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2210      	movs	r2, #16
 800372a:	4013      	ands	r3, r2
 800372c:	d01e      	beq.n	800376c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2211      	movs	r2, #17
 8003734:	4252      	negs	r2, r2
 8003736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2208      	movs	r2, #8
 800373c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	23c0      	movs	r3, #192	@ 0xc0
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4013      	ands	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0018      	movs	r0, r3
 8003750:	f000 f97e 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 8003754:	e007      	b.n	8003766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0018      	movs	r0, r3
 800375a:	f000 f971 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f000 f97d 	bl	8003a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2201      	movs	r2, #1
 8003770:	4013      	ands	r3, r2
 8003772:	d00c      	beq.n	800378e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	4013      	ands	r3, r2
 800377a:	d008      	beq.n	800378e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2202      	movs	r2, #2
 8003782:	4252      	negs	r2, r2
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f000 f951 	bl	8003a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2280      	movs	r2, #128	@ 0x80
 8003792:	4013      	ands	r3, r2
 8003794:	d104      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	2380      	movs	r3, #128	@ 0x80
 800379a:	019b      	lsls	r3, r3, #6
 800379c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800379e:	d00b      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2280      	movs	r2, #128	@ 0x80
 80037a4:	4013      	ands	r3, r2
 80037a6:	d007      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003828 <HAL_TIM_IRQHandler+0x208>)
 80037ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 fdec 	bl	8004390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	2380      	movs	r3, #128	@ 0x80
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4013      	ands	r3, r2
 80037c0:	d00b      	beq.n	80037da <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2280      	movs	r2, #128	@ 0x80
 80037c6:	4013      	ands	r3, r2
 80037c8:	d007      	beq.n	80037da <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a17      	ldr	r2, [pc, #92]	@ (800382c <HAL_TIM_IRQHandler+0x20c>)
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 fde3 	bl	80043a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2240      	movs	r2, #64	@ 0x40
 80037de:	4013      	ands	r3, r2
 80037e0:	d00c      	beq.n	80037fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2240      	movs	r2, #64	@ 0x40
 80037e6:	4013      	ands	r3, r2
 80037e8:	d008      	beq.n	80037fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2241      	movs	r2, #65	@ 0x41
 80037f0:	4252      	negs	r2, r2
 80037f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f000 f93a 	bl	8003a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2220      	movs	r2, #32
 8003800:	4013      	ands	r3, r2
 8003802:	d00c      	beq.n	800381e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	4013      	ands	r3, r2
 800380a:	d008      	beq.n	800381e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2221      	movs	r2, #33	@ 0x21
 8003812:	4252      	negs	r2, r2
 8003814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f000 fdb1 	bl	8004380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	ffffdf7f 	.word	0xffffdf7f
 800382c:	fffffeff 	.word	0xfffffeff

08003830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800383c:	2317      	movs	r3, #23
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	223c      	movs	r2, #60	@ 0x3c
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x22>
 800384e:	2302      	movs	r3, #2
 8003850:	e0e5      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	223c      	movs	r2, #60	@ 0x3c
 8003856:	2101      	movs	r1, #1
 8003858:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b14      	cmp	r3, #20
 800385e:	d900      	bls.n	8003862 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003860:	e0d1      	b.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	009a      	lsls	r2, r3, #2
 8003866:	4b70      	ldr	r3, [pc, #448]	@ (8003a28 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003868:	18d3      	adds	r3, r2, r3
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	0011      	movs	r1, r2
 8003876:	0018      	movs	r0, r3
 8003878:	f000 f990 	bl	8003b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2108      	movs	r1, #8
 8003888:	430a      	orrs	r2, r1
 800388a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2104      	movs	r1, #4
 8003898:	438a      	bics	r2, r1
 800389a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6999      	ldr	r1, [r3, #24]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	619a      	str	r2, [r3, #24]
      break;
 80038ae:	e0af      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	0011      	movs	r1, r2
 80038b8:	0018      	movs	r0, r3
 80038ba:	f000 f9f9 	bl	8003cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2180      	movs	r1, #128	@ 0x80
 80038ca:	0109      	lsls	r1, r1, #4
 80038cc:	430a      	orrs	r2, r1
 80038ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4954      	ldr	r1, [pc, #336]	@ (8003a2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80038dc:	400a      	ands	r2, r1
 80038de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6999      	ldr	r1, [r3, #24]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	021a      	lsls	r2, r3, #8
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	619a      	str	r2, [r3, #24]
      break;
 80038f4:	e08c      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	0011      	movs	r1, r2
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 fa5a 	bl	8003db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2108      	movs	r1, #8
 8003910:	430a      	orrs	r2, r1
 8003912:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2104      	movs	r1, #4
 8003920:	438a      	bics	r2, r1
 8003922:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69d9      	ldr	r1, [r3, #28]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	61da      	str	r2, [r3, #28]
      break;
 8003936:	e06b      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	0011      	movs	r1, r2
 8003940:	0018      	movs	r0, r3
 8003942:	f000 fac1 	bl	8003ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2180      	movs	r1, #128	@ 0x80
 8003952:	0109      	lsls	r1, r1, #4
 8003954:	430a      	orrs	r2, r1
 8003956:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4932      	ldr	r1, [pc, #200]	@ (8003a2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003964:	400a      	ands	r2, r1
 8003966:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69d9      	ldr	r1, [r3, #28]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	021a      	lsls	r2, r3, #8
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	61da      	str	r2, [r3, #28]
      break;
 800397c:	e048      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	0011      	movs	r1, r2
 8003986:	0018      	movs	r0, r3
 8003988:	f000 fb08 	bl	8003f9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2108      	movs	r1, #8
 8003998:	430a      	orrs	r2, r1
 800399a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2104      	movs	r1, #4
 80039a8:	438a      	bics	r2, r1
 80039aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039be:	e027      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	0011      	movs	r1, r2
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 fb47 	bl	800405c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2180      	movs	r1, #128	@ 0x80
 80039da:	0109      	lsls	r1, r1, #4
 80039dc:	430a      	orrs	r2, r1
 80039de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4910      	ldr	r1, [pc, #64]	@ (8003a2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a04:	e004      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003a06:	2317      	movs	r3, #23
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
      break;
 8003a0e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	223c      	movs	r2, #60	@ 0x3c
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

  return status;
 8003a18:	2317      	movs	r3, #23
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	781b      	ldrb	r3, [r3, #0]
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b006      	add	sp, #24
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	080068fc 	.word	0x080068fc
 8003a2c:	fffffbff 	.word	0xfffffbff

08003a30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a38:	46c0      	nop			@ (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b002      	add	sp, #8
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a48:	46c0      	nop			@ (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a58:	46c0      	nop			@ (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b002      	add	sp, #8
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3b      	ldr	r2, [pc, #236]	@ (8003b80 <TIM_Base_SetConfig+0x100>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d008      	beq.n	8003aaa <TIM_Base_SetConfig+0x2a>
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	05db      	lsls	r3, r3, #23
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d003      	beq.n	8003aaa <TIM_Base_SetConfig+0x2a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a37      	ldr	r2, [pc, #220]	@ (8003b84 <TIM_Base_SetConfig+0x104>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d108      	bne.n	8003abc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2270      	movs	r2, #112	@ 0x70
 8003aae:	4393      	bics	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a30      	ldr	r2, [pc, #192]	@ (8003b80 <TIM_Base_SetConfig+0x100>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <TIM_Base_SetConfig+0x76>
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	2380      	movs	r3, #128	@ 0x80
 8003ac8:	05db      	lsls	r3, r3, #23
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d013      	beq.n	8003af6 <TIM_Base_SetConfig+0x76>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b84 <TIM_Base_SetConfig+0x104>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00f      	beq.n	8003af6 <TIM_Base_SetConfig+0x76>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b88 <TIM_Base_SetConfig+0x108>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <TIM_Base_SetConfig+0x76>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b8c <TIM_Base_SetConfig+0x10c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <TIM_Base_SetConfig+0x76>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a29      	ldr	r2, [pc, #164]	@ (8003b90 <TIM_Base_SetConfig+0x110>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_Base_SetConfig+0x76>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a28      	ldr	r2, [pc, #160]	@ (8003b94 <TIM_Base_SetConfig+0x114>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d108      	bne.n	8003b08 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a27      	ldr	r2, [pc, #156]	@ (8003b98 <TIM_Base_SetConfig+0x118>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2280      	movs	r2, #128	@ 0x80
 8003b0c:	4393      	bics	r3, r2
 8003b0e:	001a      	movs	r2, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a13      	ldr	r2, [pc, #76]	@ (8003b80 <TIM_Base_SetConfig+0x100>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00b      	beq.n	8003b4e <TIM_Base_SetConfig+0xce>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a14      	ldr	r2, [pc, #80]	@ (8003b8c <TIM_Base_SetConfig+0x10c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <TIM_Base_SetConfig+0xce>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a13      	ldr	r2, [pc, #76]	@ (8003b90 <TIM_Base_SetConfig+0x110>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_Base_SetConfig+0xce>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <TIM_Base_SetConfig+0x114>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d103      	bne.n	8003b56 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2201      	movs	r2, #1
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d106      	bne.n	8003b76 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	4393      	bics	r3, r2
 8003b70:	001a      	movs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	611a      	str	r2, [r3, #16]
  }
}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b004      	add	sp, #16
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40002000 	.word	0x40002000
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800
 8003b98:	fffffcff 	.word	0xfffffcff

08003b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	4393      	bics	r3, r2
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a32      	ldr	r2, [pc, #200]	@ (8003c94 <TIM_OC1_SetConfig+0xf8>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	4393      	bics	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2202      	movs	r2, #2
 8003be4:	4393      	bics	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a28      	ldr	r2, [pc, #160]	@ (8003c98 <TIM_OC1_SetConfig+0xfc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00b      	beq.n	8003c12 <TIM_OC1_SetConfig+0x76>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a27      	ldr	r2, [pc, #156]	@ (8003c9c <TIM_OC1_SetConfig+0x100>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d007      	beq.n	8003c12 <TIM_OC1_SetConfig+0x76>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a26      	ldr	r2, [pc, #152]	@ (8003ca0 <TIM_OC1_SetConfig+0x104>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d003      	beq.n	8003c12 <TIM_OC1_SetConfig+0x76>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a25      	ldr	r2, [pc, #148]	@ (8003ca4 <TIM_OC1_SetConfig+0x108>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10c      	bne.n	8003c2c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2208      	movs	r2, #8
 8003c16:	4393      	bics	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2204      	movs	r2, #4
 8003c28:	4393      	bics	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003c98 <TIM_OC1_SetConfig+0xfc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <TIM_OC1_SetConfig+0xb0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a19      	ldr	r2, [pc, #100]	@ (8003c9c <TIM_OC1_SetConfig+0x100>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <TIM_OC1_SetConfig+0xb0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a18      	ldr	r2, [pc, #96]	@ (8003ca0 <TIM_OC1_SetConfig+0x104>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_OC1_SetConfig+0xb0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a17      	ldr	r2, [pc, #92]	@ (8003ca4 <TIM_OC1_SetConfig+0x108>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d111      	bne.n	8003c70 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ca8 <TIM_OC1_SetConfig+0x10c>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4a15      	ldr	r2, [pc, #84]	@ (8003cac <TIM_OC1_SetConfig+0x110>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b006      	add	sp, #24
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	fffeff8f 	.word	0xfffeff8f
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40014400 	.word	0x40014400
 8003ca4:	40014800 	.word	0x40014800
 8003ca8:	fffffeff 	.word	0xfffffeff
 8003cac:	fffffdff 	.word	0xfffffdff

08003cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	4393      	bics	r3, r2
 8003cc8:	001a      	movs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8003d98 <TIM_OC2_SetConfig+0xe8>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8003d9c <TIM_OC2_SetConfig+0xec>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	4393      	bics	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a24      	ldr	r2, [pc, #144]	@ (8003da0 <TIM_OC2_SetConfig+0xf0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d10d      	bne.n	8003d2e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2280      	movs	r2, #128	@ 0x80
 8003d16:	4393      	bics	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2240      	movs	r2, #64	@ 0x40
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1b      	ldr	r2, [pc, #108]	@ (8003da0 <TIM_OC2_SetConfig+0xf0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00b      	beq.n	8003d4e <TIM_OC2_SetConfig+0x9e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1a      	ldr	r2, [pc, #104]	@ (8003da4 <TIM_OC2_SetConfig+0xf4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <TIM_OC2_SetConfig+0x9e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a19      	ldr	r2, [pc, #100]	@ (8003da8 <TIM_OC2_SetConfig+0xf8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d003      	beq.n	8003d4e <TIM_OC2_SetConfig+0x9e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a18      	ldr	r2, [pc, #96]	@ (8003dac <TIM_OC2_SetConfig+0xfc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d113      	bne.n	8003d76 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4a17      	ldr	r2, [pc, #92]	@ (8003db0 <TIM_OC2_SetConfig+0x100>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4a16      	ldr	r2, [pc, #88]	@ (8003db4 <TIM_OC2_SetConfig+0x104>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	621a      	str	r2, [r3, #32]
}
 8003d90:	46c0      	nop			@ (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b006      	add	sp, #24
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	feff8fff 	.word	0xfeff8fff
 8003d9c:	fffffcff 	.word	0xfffffcff
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40014400 	.word	0x40014400
 8003dac:	40014800 	.word	0x40014800
 8003db0:	fffffbff 	.word	0xfffffbff
 8003db4:	fffff7ff 	.word	0xfffff7ff

08003db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4a33      	ldr	r2, [pc, #204]	@ (8003e9c <TIM_OC3_SetConfig+0xe4>)
 8003dce:	401a      	ands	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea0 <TIM_OC3_SetConfig+0xe8>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2203      	movs	r2, #3
 8003dec:	4393      	bics	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4a29      	ldr	r2, [pc, #164]	@ (8003ea4 <TIM_OC3_SetConfig+0xec>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a25      	ldr	r2, [pc, #148]	@ (8003ea8 <TIM_OC3_SetConfig+0xf0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10d      	bne.n	8003e32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	4a24      	ldr	r2, [pc, #144]	@ (8003eac <TIM_OC3_SetConfig+0xf4>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4a20      	ldr	r2, [pc, #128]	@ (8003eb0 <TIM_OC3_SetConfig+0xf8>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1c      	ldr	r2, [pc, #112]	@ (8003ea8 <TIM_OC3_SetConfig+0xf0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00b      	beq.n	8003e52 <TIM_OC3_SetConfig+0x9a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb4 <TIM_OC3_SetConfig+0xfc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <TIM_OC3_SetConfig+0x9a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb8 <TIM_OC3_SetConfig+0x100>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d003      	beq.n	8003e52 <TIM_OC3_SetConfig+0x9a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ebc <TIM_OC3_SetConfig+0x104>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d113      	bne.n	8003e7a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4a1a      	ldr	r2, [pc, #104]	@ (8003ec0 <TIM_OC3_SetConfig+0x108>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4a19      	ldr	r2, [pc, #100]	@ (8003ec4 <TIM_OC3_SetConfig+0x10c>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	46c0      	nop			@ (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b006      	add	sp, #24
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	fffffeff 	.word	0xfffffeff
 8003ea0:	fffeff8f 	.word	0xfffeff8f
 8003ea4:	fffffdff 	.word	0xfffffdff
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	fffff7ff 	.word	0xfffff7ff
 8003eb0:	fffffbff 	.word	0xfffffbff
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	40014800 	.word	0x40014800
 8003ec0:	ffffefff 	.word	0xffffefff
 8003ec4:	ffffdfff 	.word	0xffffdfff

08003ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4a26      	ldr	r2, [pc, #152]	@ (8003f78 <TIM_OC4_SetConfig+0xb0>)
 8003ede:	401a      	ands	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a22      	ldr	r2, [pc, #136]	@ (8003f7c <TIM_OC4_SetConfig+0xb4>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a21      	ldr	r2, [pc, #132]	@ (8003f80 <TIM_OC4_SetConfig+0xb8>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003f84 <TIM_OC4_SetConfig+0xbc>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	031b      	lsls	r3, r3, #12
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a19      	ldr	r2, [pc, #100]	@ (8003f88 <TIM_OC4_SetConfig+0xc0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <TIM_OC4_SetConfig+0x78>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a18      	ldr	r2, [pc, #96]	@ (8003f8c <TIM_OC4_SetConfig+0xc4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d007      	beq.n	8003f40 <TIM_OC4_SetConfig+0x78>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a17      	ldr	r2, [pc, #92]	@ (8003f90 <TIM_OC4_SetConfig+0xc8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_OC4_SetConfig+0x78>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a16      	ldr	r2, [pc, #88]	@ (8003f94 <TIM_OC4_SetConfig+0xcc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d109      	bne.n	8003f54 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4a15      	ldr	r2, [pc, #84]	@ (8003f98 <TIM_OC4_SetConfig+0xd0>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b006      	add	sp, #24
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	ffffefff 	.word	0xffffefff
 8003f7c:	feff8fff 	.word	0xfeff8fff
 8003f80:	fffffcff 	.word	0xfffffcff
 8003f84:	ffffdfff 	.word	0xffffdfff
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800
 8003f98:	ffffbfff 	.word	0xffffbfff

08003f9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <TIM_OC5_SetConfig+0xa4>)
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <TIM_OC5_SetConfig+0xa8>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004048 <TIM_OC5_SetConfig+0xac>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a17      	ldr	r2, [pc, #92]	@ (800404c <TIM_OC5_SetConfig+0xb0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00b      	beq.n	800400a <TIM_OC5_SetConfig+0x6e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	@ (8004050 <TIM_OC5_SetConfig+0xb4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d007      	beq.n	800400a <TIM_OC5_SetConfig+0x6e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a15      	ldr	r2, [pc, #84]	@ (8004054 <TIM_OC5_SetConfig+0xb8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d003      	beq.n	800400a <TIM_OC5_SetConfig+0x6e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a14      	ldr	r2, [pc, #80]	@ (8004058 <TIM_OC5_SetConfig+0xbc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d109      	bne.n	800401e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	4a0c      	ldr	r2, [pc, #48]	@ (8004040 <TIM_OC5_SetConfig+0xa4>)
 800400e:	4013      	ands	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	621a      	str	r2, [r3, #32]
}
 8004038:	46c0      	nop			@ (mov r8, r8)
 800403a:	46bd      	mov	sp, r7
 800403c:	b006      	add	sp, #24
 800403e:	bd80      	pop	{r7, pc}
 8004040:	fffeffff 	.word	0xfffeffff
 8004044:	fffeff8f 	.word	0xfffeff8f
 8004048:	fffdffff 	.word	0xfffdffff
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40014000 	.word	0x40014000
 8004054:	40014400 	.word	0x40014400
 8004058:	40014800 	.word	0x40014800

0800405c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4a24      	ldr	r2, [pc, #144]	@ (8004104 <TIM_OC6_SetConfig+0xa8>)
 8004072:	401a      	ands	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a20      	ldr	r2, [pc, #128]	@ (8004108 <TIM_OC6_SetConfig+0xac>)
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4a1c      	ldr	r2, [pc, #112]	@ (800410c <TIM_OC6_SetConfig+0xb0>)
 800409c:	4013      	ands	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	051b      	lsls	r3, r3, #20
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a18      	ldr	r2, [pc, #96]	@ (8004110 <TIM_OC6_SetConfig+0xb4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00b      	beq.n	80040cc <TIM_OC6_SetConfig+0x70>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a17      	ldr	r2, [pc, #92]	@ (8004114 <TIM_OC6_SetConfig+0xb8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d007      	beq.n	80040cc <TIM_OC6_SetConfig+0x70>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a16      	ldr	r2, [pc, #88]	@ (8004118 <TIM_OC6_SetConfig+0xbc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <TIM_OC6_SetConfig+0x70>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a15      	ldr	r2, [pc, #84]	@ (800411c <TIM_OC6_SetConfig+0xc0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d109      	bne.n	80040e0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4a14      	ldr	r2, [pc, #80]	@ (8004120 <TIM_OC6_SetConfig+0xc4>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	029b      	lsls	r3, r3, #10
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b006      	add	sp, #24
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	ffefffff 	.word	0xffefffff
 8004108:	feff8fff 	.word	0xfeff8fff
 800410c:	ffdfffff 	.word	0xffdfffff
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40014000 	.word	0x40014000
 8004118:	40014400 	.word	0x40014400
 800411c:	40014800 	.word	0x40014800
 8004120:	fffbffff 	.word	0xfffbffff

08004124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	221f      	movs	r2, #31
 8004134:	4013      	ands	r3, r2
 8004136:	2201      	movs	r2, #1
 8004138:	409a      	lsls	r2, r3
 800413a:	0013      	movs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	43d2      	mvns	r2, r2
 8004146:	401a      	ands	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	211f      	movs	r1, #31
 8004154:	400b      	ands	r3, r1
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4099      	lsls	r1, r3
 800415a:	000b      	movs	r3, r1
 800415c:	431a      	orrs	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b006      	add	sp, #24
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	223c      	movs	r2, #60	@ 0x3c
 800417a:	5c9b      	ldrb	r3, [r3, r2]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004180:	2302      	movs	r3, #2
 8004182:	e055      	b.n	8004230 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	223c      	movs	r2, #60	@ 0x3c
 8004188:	2101      	movs	r1, #1
 800418a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	223d      	movs	r2, #61	@ 0x3d
 8004190:	2102      	movs	r1, #2
 8004192:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a23      	ldr	r2, [pc, #140]	@ (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d108      	bne.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4a22      	ldr	r2, [pc, #136]	@ (800423c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2270      	movs	r2, #112	@ 0x70
 80041c4:	4393      	bics	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00f      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	05db      	lsls	r3, r3, #23
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d009      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a12      	ldr	r2, [pc, #72]	@ (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a11      	ldr	r2, [pc, #68]	@ (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d10c      	bne.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2280      	movs	r2, #128	@ 0x80
 8004208:	4393      	bics	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	223d      	movs	r2, #61	@ 0x3d
 8004222:	2101      	movs	r1, #1
 8004224:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	223c      	movs	r2, #60	@ 0x3c
 800422a:	2100      	movs	r1, #0
 800422c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b004      	add	sp, #16
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40012c00 	.word	0x40012c00
 800423c:	ff0fffff 	.word	0xff0fffff
 8004240:	40000400 	.word	0x40000400
 8004244:	40014000 	.word	0x40014000

08004248 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	223c      	movs	r2, #60	@ 0x3c
 800425a:	5c9b      	ldrb	r3, [r3, r2]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004260:	2302      	movs	r3, #2
 8004262:	e06f      	b.n	8004344 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	223c      	movs	r2, #60	@ 0x3c
 8004268:	2101      	movs	r1, #1
 800426a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	22ff      	movs	r2, #255	@ 0xff
 8004270:	4393      	bics	r3, r2
 8004272:	001a      	movs	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a33      	ldr	r2, [pc, #204]	@ (800434c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004280:	401a      	ands	r2, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a30      	ldr	r2, [pc, #192]	@ (8004350 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800428e:	401a      	ands	r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4a2e      	ldr	r2, [pc, #184]	@ (8004354 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800429c:	401a      	ands	r2, r3
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004358 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80042aa:	401a      	ands	r2, r3
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a29      	ldr	r2, [pc, #164]	@ (800435c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80042b8:	401a      	ands	r2, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a26      	ldr	r2, [pc, #152]	@ (8004360 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80042c6:	401a      	ands	r2, r3
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a24      	ldr	r2, [pc, #144]	@ (8004364 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80042d4:	401a      	ands	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a21      	ldr	r2, [pc, #132]	@ (8004368 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80042e4:	401a      	ands	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1e      	ldr	r2, [pc, #120]	@ (800436c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d11c      	bne.n	8004332 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004370 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80042fc:	401a      	ands	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004302:	051b      	lsls	r3, r3, #20
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a1a      	ldr	r2, [pc, #104]	@ (8004374 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800430c:	401a      	ands	r2, r3
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a17      	ldr	r2, [pc, #92]	@ (8004378 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800431a:	401a      	ands	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a15      	ldr	r2, [pc, #84]	@ (800437c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004328:	401a      	ands	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	223c      	movs	r2, #60	@ 0x3c
 800433e:	2100      	movs	r1, #0
 8004340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b004      	add	sp, #16
 800434a:	bd80      	pop	{r7, pc}
 800434c:	fffffcff 	.word	0xfffffcff
 8004350:	fffffbff 	.word	0xfffffbff
 8004354:	fffff7ff 	.word	0xfffff7ff
 8004358:	ffffefff 	.word	0xffffefff
 800435c:	ffffdfff 	.word	0xffffdfff
 8004360:	ffffbfff 	.word	0xffffbfff
 8004364:	fff0ffff 	.word	0xfff0ffff
 8004368:	efffffff 	.word	0xefffffff
 800436c:	40012c00 	.word	0x40012c00
 8004370:	ff0fffff 	.word	0xff0fffff
 8004374:	feffffff 	.word	0xfeffffff
 8004378:	fdffffff 	.word	0xfdffffff
 800437c:	dfffffff 	.word	0xdfffffff

08004380 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004388:	46c0      	nop			@ (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b002      	add	sp, #8
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004398:	46c0      	nop			@ (mov r8, r8)
 800439a:	46bd      	mov	sp, r7
 800439c:	b002      	add	sp, #8
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b002      	add	sp, #8
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e046      	b.n	8004450 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2288      	movs	r2, #136	@ 0x88
 80043c6:	589b      	ldr	r3, [r3, r2]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2284      	movs	r2, #132	@ 0x84
 80043d0:	2100      	movs	r1, #0
 80043d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	0018      	movs	r0, r3
 80043d8:	f7fc fe12 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2288      	movs	r2, #136	@ 0x88
 80043e0:	2124      	movs	r1, #36	@ 0x24
 80043e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2101      	movs	r1, #1
 80043f0:	438a      	bics	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 fc00 	bl	8004c04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	0018      	movs	r0, r3
 8004408:	f000 f93e 	bl	8004688 <UART_SetConfig>
 800440c:	0003      	movs	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e01c      	b.n	8004450 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	490d      	ldr	r1, [pc, #52]	@ (8004458 <HAL_UART_Init+0xa8>)
 8004422:	400a      	ands	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	212a      	movs	r1, #42	@ 0x2a
 8004432:	438a      	bics	r2, r1
 8004434:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2101      	movs	r1, #1
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0018      	movs	r0, r3
 800444a:	f000 fc8f 	bl	8004d6c <UART_CheckIdleState>
 800444e:	0003      	movs	r3, r0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}
 8004458:	ffffb7ff 	.word	0xffffb7ff

0800445c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	@ 0x28
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	1dbb      	adds	r3, r7, #6
 800446a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2288      	movs	r2, #136	@ 0x88
 8004470:	589b      	ldr	r3, [r3, r2]
 8004472:	2b20      	cmp	r3, #32
 8004474:	d000      	beq.n	8004478 <HAL_UART_Transmit+0x1c>
 8004476:	e090      	b.n	800459a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_UART_Transmit+0x2a>
 800447e:	1dbb      	adds	r3, r7, #6
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e088      	b.n	800459c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	015b      	lsls	r3, r3, #5
 8004492:	429a      	cmp	r2, r3
 8004494:	d109      	bne.n	80044aa <HAL_UART_Transmit+0x4e>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d105      	bne.n	80044aa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2201      	movs	r2, #1
 80044a2:	4013      	ands	r3, r2
 80044a4:	d001      	beq.n	80044aa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e078      	b.n	800459c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2290      	movs	r2, #144	@ 0x90
 80044ae:	2100      	movs	r1, #0
 80044b0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2288      	movs	r2, #136	@ 0x88
 80044b6:	2121      	movs	r1, #33	@ 0x21
 80044b8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ba:	f7fc fea7 	bl	800120c <HAL_GetTick>
 80044be:	0003      	movs	r3, r0
 80044c0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1dba      	adds	r2, r7, #6
 80044c6:	2154      	movs	r1, #84	@ 0x54
 80044c8:	8812      	ldrh	r2, [r2, #0]
 80044ca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1dba      	adds	r2, r7, #6
 80044d0:	2156      	movs	r1, #86	@ 0x56
 80044d2:	8812      	ldrh	r2, [r2, #0]
 80044d4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	015b      	lsls	r3, r3, #5
 80044de:	429a      	cmp	r2, r3
 80044e0:	d108      	bne.n	80044f4 <HAL_UART_Transmit+0x98>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e003      	b.n	80044fc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044fc:	e030      	b.n	8004560 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	0013      	movs	r3, r2
 8004508:	2200      	movs	r2, #0
 800450a:	2180      	movs	r1, #128	@ 0x80
 800450c:	f000 fcd8 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004510:	1e03      	subs	r3, r0, #0
 8004512:	d005      	beq.n	8004520 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2288      	movs	r2, #136	@ 0x88
 8004518:	2120      	movs	r1, #32
 800451a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e03d      	b.n	800459c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	001a      	movs	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	05d2      	lsls	r2, r2, #23
 8004532:	0dd2      	lsrs	r2, r2, #23
 8004534:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	3302      	adds	r3, #2
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	e007      	b.n	800454e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	3301      	adds	r3, #1
 800454c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2256      	movs	r2, #86	@ 0x56
 8004552:	5a9b      	ldrh	r3, [r3, r2]
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b299      	uxth	r1, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2256      	movs	r2, #86	@ 0x56
 800455e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2256      	movs	r2, #86	@ 0x56
 8004564:	5a9b      	ldrh	r3, [r3, r2]
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1c8      	bne.n	80044fe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	0013      	movs	r3, r2
 8004576:	2200      	movs	r2, #0
 8004578:	2140      	movs	r1, #64	@ 0x40
 800457a:	f000 fca1 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 800457e:	1e03      	subs	r3, r0, #0
 8004580:	d005      	beq.n	800458e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2288      	movs	r2, #136	@ 0x88
 8004586:	2120      	movs	r1, #32
 8004588:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e006      	b.n	800459c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2288      	movs	r2, #136	@ 0x88
 8004592:	2120      	movs	r1, #32
 8004594:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	0018      	movs	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	b008      	add	sp, #32
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	1dbb      	adds	r3, r7, #6
 80045b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	228c      	movs	r2, #140	@ 0x8c
 80045b6:	589b      	ldr	r3, [r3, r2]
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d14a      	bne.n	8004652 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_UART_Receive_IT+0x26>
 80045c2:	1dbb      	adds	r3, r7, #6
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e042      	b.n	8004654 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	2380      	movs	r3, #128	@ 0x80
 80045d4:	015b      	lsls	r3, r3, #5
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d109      	bne.n	80045ee <HAL_UART_Receive_IT+0x4a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d105      	bne.n	80045ee <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2201      	movs	r2, #1
 80045e6:	4013      	ands	r3, r2
 80045e8:	d001      	beq.n	80045ee <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e032      	b.n	8004654 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a18      	ldr	r2, [pc, #96]	@ (800465c <HAL_UART_Receive_IT+0xb8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d020      	beq.n	8004640 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	2380      	movs	r3, #128	@ 0x80
 8004606:	041b      	lsls	r3, r3, #16
 8004608:	4013      	ands	r3, r2
 800460a:	d019      	beq.n	8004640 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460c:	f3ef 8310 	mrs	r3, PRIMASK
 8004610:	613b      	str	r3, [r7, #16]
  return(result);
 8004612:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004614:	61fb      	str	r3, [r7, #28]
 8004616:	2301      	movs	r3, #1
 8004618:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f383 8810 	msr	PRIMASK, r3
}
 8004620:	46c0      	nop			@ (mov r8, r8)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2180      	movs	r1, #128	@ 0x80
 800462e:	04c9      	lsls	r1, r1, #19
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	f383 8810 	msr	PRIMASK, r3
}
 800463e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004640:	1dbb      	adds	r3, r7, #6
 8004642:	881a      	ldrh	r2, [r3, #0]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	0018      	movs	r0, r3
 800464a:	f000 fca9 	bl	8004fa0 <UART_Start_Receive_IT>
 800464e:	0003      	movs	r3, r0
 8004650:	e000      	b.n	8004654 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	b008      	add	sp, #32
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40008000 	.word	0x40008000

08004660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	000a      	movs	r2, r1
 800467a:	1cbb      	adds	r3, r7, #2
 800467c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b002      	add	sp, #8
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004688:	b5b0      	push	{r4, r5, r7, lr}
 800468a:	b090      	sub	sp, #64	@ 0x40
 800468c:	af00      	add	r7, sp, #0
 800468e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004690:	231a      	movs	r3, #26
 8004692:	2220      	movs	r2, #32
 8004694:	189b      	adds	r3, r3, r2
 8004696:	19db      	adds	r3, r3, r7
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4aaf      	ldr	r2, [pc, #700]	@ (8004978 <UART_SetConfig+0x2f0>)
 80046bc:	4013      	ands	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4aaa      	ldr	r2, [pc, #680]	@ (800497c <UART_SetConfig+0x2f4>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	0018      	movs	r0, r3
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	68d9      	ldr	r1, [r3, #12]
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	0003      	movs	r3, r0
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4aa4      	ldr	r2, [pc, #656]	@ (8004980 <UART_SetConfig+0x2f8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046fa:	4313      	orrs	r3, r2
 80046fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4a9f      	ldr	r2, [pc, #636]	@ (8004984 <UART_SetConfig+0x2fc>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004710:	430b      	orrs	r3, r1
 8004712:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471a:	220f      	movs	r2, #15
 800471c:	4393      	bics	r3, r2
 800471e:	0018      	movs	r0, r3
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	0003      	movs	r3, r0
 800472a:	430b      	orrs	r3, r1
 800472c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a95      	ldr	r2, [pc, #596]	@ (8004988 <UART_SetConfig+0x300>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d131      	bne.n	800479c <UART_SetConfig+0x114>
 8004738:	4b94      	ldr	r3, [pc, #592]	@ (800498c <UART_SetConfig+0x304>)
 800473a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473c:	2203      	movs	r2, #3
 800473e:	4013      	ands	r3, r2
 8004740:	2b03      	cmp	r3, #3
 8004742:	d01d      	beq.n	8004780 <UART_SetConfig+0xf8>
 8004744:	d823      	bhi.n	800478e <UART_SetConfig+0x106>
 8004746:	2b02      	cmp	r3, #2
 8004748:	d00c      	beq.n	8004764 <UART_SetConfig+0xdc>
 800474a:	d820      	bhi.n	800478e <UART_SetConfig+0x106>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <UART_SetConfig+0xce>
 8004750:	2b01      	cmp	r3, #1
 8004752:	d00e      	beq.n	8004772 <UART_SetConfig+0xea>
 8004754:	e01b      	b.n	800478e <UART_SetConfig+0x106>
 8004756:	231b      	movs	r3, #27
 8004758:	2220      	movs	r2, #32
 800475a:	189b      	adds	r3, r3, r2
 800475c:	19db      	adds	r3, r3, r7
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e0b4      	b.n	80048ce <UART_SetConfig+0x246>
 8004764:	231b      	movs	r3, #27
 8004766:	2220      	movs	r2, #32
 8004768:	189b      	adds	r3, r3, r2
 800476a:	19db      	adds	r3, r3, r7
 800476c:	2202      	movs	r2, #2
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e0ad      	b.n	80048ce <UART_SetConfig+0x246>
 8004772:	231b      	movs	r3, #27
 8004774:	2220      	movs	r2, #32
 8004776:	189b      	adds	r3, r3, r2
 8004778:	19db      	adds	r3, r3, r7
 800477a:	2204      	movs	r2, #4
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	e0a6      	b.n	80048ce <UART_SetConfig+0x246>
 8004780:	231b      	movs	r3, #27
 8004782:	2220      	movs	r2, #32
 8004784:	189b      	adds	r3, r3, r2
 8004786:	19db      	adds	r3, r3, r7
 8004788:	2208      	movs	r2, #8
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e09f      	b.n	80048ce <UART_SetConfig+0x246>
 800478e:	231b      	movs	r3, #27
 8004790:	2220      	movs	r2, #32
 8004792:	189b      	adds	r3, r3, r2
 8004794:	19db      	adds	r3, r3, r7
 8004796:	2210      	movs	r2, #16
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	e098      	b.n	80048ce <UART_SetConfig+0x246>
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a7b      	ldr	r2, [pc, #492]	@ (8004990 <UART_SetConfig+0x308>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d131      	bne.n	800480a <UART_SetConfig+0x182>
 80047a6:	4b79      	ldr	r3, [pc, #484]	@ (800498c <UART_SetConfig+0x304>)
 80047a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047aa:	220c      	movs	r2, #12
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	d01d      	beq.n	80047ee <UART_SetConfig+0x166>
 80047b2:	d823      	bhi.n	80047fc <UART_SetConfig+0x174>
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d00c      	beq.n	80047d2 <UART_SetConfig+0x14a>
 80047b8:	d820      	bhi.n	80047fc <UART_SetConfig+0x174>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <UART_SetConfig+0x13c>
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d00e      	beq.n	80047e0 <UART_SetConfig+0x158>
 80047c2:	e01b      	b.n	80047fc <UART_SetConfig+0x174>
 80047c4:	231b      	movs	r3, #27
 80047c6:	2220      	movs	r2, #32
 80047c8:	189b      	adds	r3, r3, r2
 80047ca:	19db      	adds	r3, r3, r7
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e07d      	b.n	80048ce <UART_SetConfig+0x246>
 80047d2:	231b      	movs	r3, #27
 80047d4:	2220      	movs	r2, #32
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	19db      	adds	r3, r3, r7
 80047da:	2202      	movs	r2, #2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e076      	b.n	80048ce <UART_SetConfig+0x246>
 80047e0:	231b      	movs	r3, #27
 80047e2:	2220      	movs	r2, #32
 80047e4:	189b      	adds	r3, r3, r2
 80047e6:	19db      	adds	r3, r3, r7
 80047e8:	2204      	movs	r2, #4
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e06f      	b.n	80048ce <UART_SetConfig+0x246>
 80047ee:	231b      	movs	r3, #27
 80047f0:	2220      	movs	r2, #32
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	19db      	adds	r3, r3, r7
 80047f6:	2208      	movs	r2, #8
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	e068      	b.n	80048ce <UART_SetConfig+0x246>
 80047fc:	231b      	movs	r3, #27
 80047fe:	2220      	movs	r2, #32
 8004800:	189b      	adds	r3, r3, r2
 8004802:	19db      	adds	r3, r3, r7
 8004804:	2210      	movs	r2, #16
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e061      	b.n	80048ce <UART_SetConfig+0x246>
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a61      	ldr	r2, [pc, #388]	@ (8004994 <UART_SetConfig+0x30c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d106      	bne.n	8004822 <UART_SetConfig+0x19a>
 8004814:	231b      	movs	r3, #27
 8004816:	2220      	movs	r2, #32
 8004818:	189b      	adds	r3, r3, r2
 800481a:	19db      	adds	r3, r3, r7
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e055      	b.n	80048ce <UART_SetConfig+0x246>
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a5c      	ldr	r2, [pc, #368]	@ (8004998 <UART_SetConfig+0x310>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d106      	bne.n	800483a <UART_SetConfig+0x1b2>
 800482c:	231b      	movs	r3, #27
 800482e:	2220      	movs	r2, #32
 8004830:	189b      	adds	r3, r3, r2
 8004832:	19db      	adds	r3, r3, r7
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e049      	b.n	80048ce <UART_SetConfig+0x246>
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a50      	ldr	r2, [pc, #320]	@ (8004980 <UART_SetConfig+0x2f8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d13e      	bne.n	80048c2 <UART_SetConfig+0x23a>
 8004844:	4b51      	ldr	r3, [pc, #324]	@ (800498c <UART_SetConfig+0x304>)
 8004846:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004848:	23c0      	movs	r3, #192	@ 0xc0
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	4013      	ands	r3, r2
 800484e:	22c0      	movs	r2, #192	@ 0xc0
 8004850:	0112      	lsls	r2, r2, #4
 8004852:	4293      	cmp	r3, r2
 8004854:	d027      	beq.n	80048a6 <UART_SetConfig+0x21e>
 8004856:	22c0      	movs	r2, #192	@ 0xc0
 8004858:	0112      	lsls	r2, r2, #4
 800485a:	4293      	cmp	r3, r2
 800485c:	d82a      	bhi.n	80048b4 <UART_SetConfig+0x22c>
 800485e:	2280      	movs	r2, #128	@ 0x80
 8004860:	0112      	lsls	r2, r2, #4
 8004862:	4293      	cmp	r3, r2
 8004864:	d011      	beq.n	800488a <UART_SetConfig+0x202>
 8004866:	2280      	movs	r2, #128	@ 0x80
 8004868:	0112      	lsls	r2, r2, #4
 800486a:	4293      	cmp	r3, r2
 800486c:	d822      	bhi.n	80048b4 <UART_SetConfig+0x22c>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d004      	beq.n	800487c <UART_SetConfig+0x1f4>
 8004872:	2280      	movs	r2, #128	@ 0x80
 8004874:	00d2      	lsls	r2, r2, #3
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <UART_SetConfig+0x210>
 800487a:	e01b      	b.n	80048b4 <UART_SetConfig+0x22c>
 800487c:	231b      	movs	r3, #27
 800487e:	2220      	movs	r2, #32
 8004880:	189b      	adds	r3, r3, r2
 8004882:	19db      	adds	r3, r3, r7
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e021      	b.n	80048ce <UART_SetConfig+0x246>
 800488a:	231b      	movs	r3, #27
 800488c:	2220      	movs	r2, #32
 800488e:	189b      	adds	r3, r3, r2
 8004890:	19db      	adds	r3, r3, r7
 8004892:	2202      	movs	r2, #2
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e01a      	b.n	80048ce <UART_SetConfig+0x246>
 8004898:	231b      	movs	r3, #27
 800489a:	2220      	movs	r2, #32
 800489c:	189b      	adds	r3, r3, r2
 800489e:	19db      	adds	r3, r3, r7
 80048a0:	2204      	movs	r2, #4
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	e013      	b.n	80048ce <UART_SetConfig+0x246>
 80048a6:	231b      	movs	r3, #27
 80048a8:	2220      	movs	r2, #32
 80048aa:	189b      	adds	r3, r3, r2
 80048ac:	19db      	adds	r3, r3, r7
 80048ae:	2208      	movs	r2, #8
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e00c      	b.n	80048ce <UART_SetConfig+0x246>
 80048b4:	231b      	movs	r3, #27
 80048b6:	2220      	movs	r2, #32
 80048b8:	189b      	adds	r3, r3, r2
 80048ba:	19db      	adds	r3, r3, r7
 80048bc:	2210      	movs	r2, #16
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	e005      	b.n	80048ce <UART_SetConfig+0x246>
 80048c2:	231b      	movs	r3, #27
 80048c4:	2220      	movs	r2, #32
 80048c6:	189b      	adds	r3, r3, r2
 80048c8:	19db      	adds	r3, r3, r7
 80048ca:	2210      	movs	r2, #16
 80048cc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004980 <UART_SetConfig+0x2f8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d000      	beq.n	80048da <UART_SetConfig+0x252>
 80048d8:	e0a9      	b.n	8004a2e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048da:	231b      	movs	r3, #27
 80048dc:	2220      	movs	r2, #32
 80048de:	189b      	adds	r3, r3, r2
 80048e0:	19db      	adds	r3, r3, r7
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d015      	beq.n	8004914 <UART_SetConfig+0x28c>
 80048e8:	dc18      	bgt.n	800491c <UART_SetConfig+0x294>
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d00d      	beq.n	800490a <UART_SetConfig+0x282>
 80048ee:	dc15      	bgt.n	800491c <UART_SetConfig+0x294>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <UART_SetConfig+0x272>
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d005      	beq.n	8004904 <UART_SetConfig+0x27c>
 80048f8:	e010      	b.n	800491c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048fa:	f7fe fb81 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 80048fe:	0003      	movs	r3, r0
 8004900:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004902:	e014      	b.n	800492e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004904:	4b25      	ldr	r3, [pc, #148]	@ (800499c <UART_SetConfig+0x314>)
 8004906:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004908:	e011      	b.n	800492e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490a:	f7fe faed 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 800490e:	0003      	movs	r3, r0
 8004910:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004912:	e00c      	b.n	800492e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800491a:	e008      	b.n	800492e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004920:	231a      	movs	r3, #26
 8004922:	2220      	movs	r2, #32
 8004924:	189b      	adds	r3, r3, r2
 8004926:	19db      	adds	r3, r3, r7
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
        break;
 800492c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800492e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004930:	2b00      	cmp	r3, #0
 8004932:	d100      	bne.n	8004936 <UART_SetConfig+0x2ae>
 8004934:	e14b      	b.n	8004bce <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800493a:	4b19      	ldr	r3, [pc, #100]	@ (80049a0 <UART_SetConfig+0x318>)
 800493c:	0052      	lsls	r2, r2, #1
 800493e:	5ad3      	ldrh	r3, [r2, r3]
 8004940:	0019      	movs	r1, r3
 8004942:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004944:	f7fb fbe8 	bl	8000118 <__udivsi3>
 8004948:	0003      	movs	r3, r0
 800494a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	0013      	movs	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	189b      	adds	r3, r3, r2
 8004956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004958:	429a      	cmp	r2, r3
 800495a:	d305      	bcc.n	8004968 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004964:	429a      	cmp	r2, r3
 8004966:	d91d      	bls.n	80049a4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004968:	231a      	movs	r3, #26
 800496a:	2220      	movs	r2, #32
 800496c:	189b      	adds	r3, r3, r2
 800496e:	19db      	adds	r3, r3, r7
 8004970:	2201      	movs	r2, #1
 8004972:	701a      	strb	r2, [r3, #0]
 8004974:	e12b      	b.n	8004bce <UART_SetConfig+0x546>
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	cfff69f3 	.word	0xcfff69f3
 800497c:	ffffcfff 	.word	0xffffcfff
 8004980:	40008000 	.word	0x40008000
 8004984:	11fff4ff 	.word	0x11fff4ff
 8004988:	40013800 	.word	0x40013800
 800498c:	40021000 	.word	0x40021000
 8004990:	40004400 	.word	0x40004400
 8004994:	40004800 	.word	0x40004800
 8004998:	40004c00 	.word	0x40004c00
 800499c:	00f42400 	.word	0x00f42400
 80049a0:	08006950 	.word	0x08006950
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049b0:	4b92      	ldr	r3, [pc, #584]	@ (8004bfc <UART_SetConfig+0x574>)
 80049b2:	0052      	lsls	r2, r2, #1
 80049b4:	5ad3      	ldrh	r3, [r2, r3]
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	69b8      	ldr	r0, [r7, #24]
 80049c2:	69f9      	ldr	r1, [r7, #28]
 80049c4:	f7fb fd1e 	bl	8000404 <__aeabi_uldivmod>
 80049c8:	0002      	movs	r2, r0
 80049ca:	000b      	movs	r3, r1
 80049cc:	0e11      	lsrs	r1, r2, #24
 80049ce:	021d      	lsls	r5, r3, #8
 80049d0:	430d      	orrs	r5, r1
 80049d2:	0214      	lsls	r4, r2, #8
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	1900      	adds	r0, r0, r4
 80049e6:	4169      	adcs	r1, r5
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f7fb fd05 	bl	8000404 <__aeabi_uldivmod>
 80049fa:	0002      	movs	r2, r0
 80049fc:	000b      	movs	r3, r1
 80049fe:	0013      	movs	r3, r2
 8004a00:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a04:	23c0      	movs	r3, #192	@ 0xc0
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d309      	bcc.n	8004a20 <UART_SetConfig+0x398>
 8004a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a0e:	2380      	movs	r3, #128	@ 0x80
 8004a10:	035b      	lsls	r3, r3, #13
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d204      	bcs.n	8004a20 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	e0d6      	b.n	8004bce <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004a20:	231a      	movs	r3, #26
 8004a22:	2220      	movs	r2, #32
 8004a24:	189b      	adds	r3, r3, r2
 8004a26:	19db      	adds	r3, r3, r7
 8004a28:	2201      	movs	r2, #1
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	e0cf      	b.n	8004bce <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d000      	beq.n	8004a3c <UART_SetConfig+0x3b4>
 8004a3a:	e070      	b.n	8004b1e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004a3c:	231b      	movs	r3, #27
 8004a3e:	2220      	movs	r2, #32
 8004a40:	189b      	adds	r3, r3, r2
 8004a42:	19db      	adds	r3, r3, r7
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d015      	beq.n	8004a76 <UART_SetConfig+0x3ee>
 8004a4a:	dc18      	bgt.n	8004a7e <UART_SetConfig+0x3f6>
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d00d      	beq.n	8004a6c <UART_SetConfig+0x3e4>
 8004a50:	dc15      	bgt.n	8004a7e <UART_SetConfig+0x3f6>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <UART_SetConfig+0x3d4>
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d005      	beq.n	8004a66 <UART_SetConfig+0x3de>
 8004a5a:	e010      	b.n	8004a7e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a5c:	f7fe fad0 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004a60:	0003      	movs	r3, r0
 8004a62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a64:	e014      	b.n	8004a90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a66:	4b66      	ldr	r3, [pc, #408]	@ (8004c00 <UART_SetConfig+0x578>)
 8004a68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a6a:	e011      	b.n	8004a90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a6c:	f7fe fa3c 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8004a70:	0003      	movs	r3, r0
 8004a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a74:	e00c      	b.n	8004a90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a76:	2380      	movs	r3, #128	@ 0x80
 8004a78:	021b      	lsls	r3, r3, #8
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a7c:	e008      	b.n	8004a90 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004a82:	231a      	movs	r3, #26
 8004a84:	2220      	movs	r2, #32
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	19db      	adds	r3, r3, r7
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
        break;
 8004a8e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d100      	bne.n	8004a98 <UART_SetConfig+0x410>
 8004a96:	e09a      	b.n	8004bce <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a9c:	4b57      	ldr	r3, [pc, #348]	@ (8004bfc <UART_SetConfig+0x574>)
 8004a9e:	0052      	lsls	r2, r2, #1
 8004aa0:	5ad3      	ldrh	r3, [r2, r3]
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004aa6:	f7fb fb37 	bl	8000118 <__udivsi3>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	005a      	lsls	r2, r3, #1
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	18d2      	adds	r2, r2, r3
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	0019      	movs	r1, r3
 8004abc:	0010      	movs	r0, r2
 8004abe:	f7fb fb2b 	bl	8000118 <__udivsi3>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac8:	2b0f      	cmp	r3, #15
 8004aca:	d921      	bls.n	8004b10 <UART_SetConfig+0x488>
 8004acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ace:	2380      	movs	r3, #128	@ 0x80
 8004ad0:	025b      	lsls	r3, r3, #9
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d21c      	bcs.n	8004b10 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	200e      	movs	r0, #14
 8004adc:	2420      	movs	r4, #32
 8004ade:	1903      	adds	r3, r0, r4
 8004ae0:	19db      	adds	r3, r3, r7
 8004ae2:	210f      	movs	r1, #15
 8004ae4:	438a      	bics	r2, r1
 8004ae6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2207      	movs	r2, #7
 8004af0:	4013      	ands	r3, r2
 8004af2:	b299      	uxth	r1, r3
 8004af4:	1903      	adds	r3, r0, r4
 8004af6:	19db      	adds	r3, r3, r7
 8004af8:	1902      	adds	r2, r0, r4
 8004afa:	19d2      	adds	r2, r2, r7
 8004afc:	8812      	ldrh	r2, [r2, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	1902      	adds	r2, r0, r4
 8004b08:	19d2      	adds	r2, r2, r7
 8004b0a:	8812      	ldrh	r2, [r2, #0]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	e05e      	b.n	8004bce <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004b10:	231a      	movs	r3, #26
 8004b12:	2220      	movs	r2, #32
 8004b14:	189b      	adds	r3, r3, r2
 8004b16:	19db      	adds	r3, r3, r7
 8004b18:	2201      	movs	r2, #1
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e057      	b.n	8004bce <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b1e:	231b      	movs	r3, #27
 8004b20:	2220      	movs	r2, #32
 8004b22:	189b      	adds	r3, r3, r2
 8004b24:	19db      	adds	r3, r3, r7
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d015      	beq.n	8004b58 <UART_SetConfig+0x4d0>
 8004b2c:	dc18      	bgt.n	8004b60 <UART_SetConfig+0x4d8>
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d00d      	beq.n	8004b4e <UART_SetConfig+0x4c6>
 8004b32:	dc15      	bgt.n	8004b60 <UART_SetConfig+0x4d8>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <UART_SetConfig+0x4b6>
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d005      	beq.n	8004b48 <UART_SetConfig+0x4c0>
 8004b3c:	e010      	b.n	8004b60 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b3e:	f7fe fa5f 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004b42:	0003      	movs	r3, r0
 8004b44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b46:	e014      	b.n	8004b72 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b48:	4b2d      	ldr	r3, [pc, #180]	@ (8004c00 <UART_SetConfig+0x578>)
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b4c:	e011      	b.n	8004b72 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7fe f9cb 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8004b52:	0003      	movs	r3, r0
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b56:	e00c      	b.n	8004b72 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b58:	2380      	movs	r3, #128	@ 0x80
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b5e:	e008      	b.n	8004b72 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004b64:	231a      	movs	r3, #26
 8004b66:	2220      	movs	r2, #32
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	19db      	adds	r3, r3, r7
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
        break;
 8004b70:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d02a      	beq.n	8004bce <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bfc <UART_SetConfig+0x574>)
 8004b7e:	0052      	lsls	r2, r2, #1
 8004b80:	5ad3      	ldrh	r3, [r2, r3]
 8004b82:	0019      	movs	r1, r3
 8004b84:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004b86:	f7fb fac7 	bl	8000118 <__udivsi3>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	001a      	movs	r2, r3
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	085b      	lsrs	r3, r3, #1
 8004b94:	18d2      	adds	r2, r2, r3
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	0019      	movs	r1, r3
 8004b9c:	0010      	movs	r0, r2
 8004b9e:	f7fb fabb 	bl	8000118 <__udivsi3>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	2b0f      	cmp	r3, #15
 8004baa:	d90a      	bls.n	8004bc2 <UART_SetConfig+0x53a>
 8004bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bae:	2380      	movs	r3, #128	@ 0x80
 8004bb0:	025b      	lsls	r3, r3, #9
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d205      	bcs.n	8004bc2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60da      	str	r2, [r3, #12]
 8004bc0:	e005      	b.n	8004bce <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc2:	231a      	movs	r3, #26
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	19db      	adds	r3, r3, r7
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	226a      	movs	r2, #106	@ 0x6a
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	2268      	movs	r2, #104	@ 0x68
 8004bda:	2101      	movs	r1, #1
 8004bdc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	2200      	movs	r2, #0
 8004be2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	2200      	movs	r2, #0
 8004be8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004bea:	231a      	movs	r3, #26
 8004bec:	2220      	movs	r2, #32
 8004bee:	189b      	adds	r3, r3, r2
 8004bf0:	19db      	adds	r3, r3, r7
 8004bf2:	781b      	ldrb	r3, [r3, #0]
}
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b010      	add	sp, #64	@ 0x40
 8004bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8004bfc:	08006950 	.word	0x08006950
 8004c00:	00f42400 	.word	0x00f42400

08004c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	2208      	movs	r2, #8
 8004c12:	4013      	ands	r3, r2
 8004c14:	d00b      	beq.n	8004c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8004d48 <UART_AdvFeatureConfig+0x144>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	0019      	movs	r1, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c32:	2201      	movs	r2, #1
 8004c34:	4013      	ands	r3, r2
 8004c36:	d00b      	beq.n	8004c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4a43      	ldr	r2, [pc, #268]	@ (8004d4c <UART_AdvFeatureConfig+0x148>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	0019      	movs	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	2202      	movs	r2, #2
 8004c56:	4013      	ands	r3, r2
 8004c58:	d00b      	beq.n	8004c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a3b      	ldr	r2, [pc, #236]	@ (8004d50 <UART_AdvFeatureConfig+0x14c>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	2204      	movs	r2, #4
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4a34      	ldr	r2, [pc, #208]	@ (8004d54 <UART_AdvFeatureConfig+0x150>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	0019      	movs	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	2210      	movs	r2, #16
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8004d58 <UART_AdvFeatureConfig+0x154>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	0019      	movs	r1, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cba:	2220      	movs	r2, #32
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d00b      	beq.n	8004cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4a25      	ldr	r2, [pc, #148]	@ (8004d5c <UART_AdvFeatureConfig+0x158>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	0019      	movs	r1, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	2240      	movs	r2, #64	@ 0x40
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d01d      	beq.n	8004d1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d60 <UART_AdvFeatureConfig+0x15c>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	0019      	movs	r1, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	035b      	lsls	r3, r3, #13
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d10b      	bne.n	8004d1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4a15      	ldr	r2, [pc, #84]	@ (8004d64 <UART_AdvFeatureConfig+0x160>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	2280      	movs	r2, #128	@ 0x80
 8004d24:	4013      	ands	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d68 <UART_AdvFeatureConfig+0x164>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]
  }
}
 8004d40:	46c0      	nop			@ (mov r8, r8)
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b002      	add	sp, #8
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	ffff7fff 	.word	0xffff7fff
 8004d4c:	fffdffff 	.word	0xfffdffff
 8004d50:	fffeffff 	.word	0xfffeffff
 8004d54:	fffbffff 	.word	0xfffbffff
 8004d58:	ffffefff 	.word	0xffffefff
 8004d5c:	ffffdfff 	.word	0xffffdfff
 8004d60:	ffefffff 	.word	0xffefffff
 8004d64:	ff9fffff 	.word	0xff9fffff
 8004d68:	fff7ffff 	.word	0xfff7ffff

08004d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b092      	sub	sp, #72	@ 0x48
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2290      	movs	r2, #144	@ 0x90
 8004d78:	2100      	movs	r1, #0
 8004d7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d7c:	f7fc fa46 	bl	800120c <HAL_GetTick>
 8004d80:	0003      	movs	r3, r0
 8004d82:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d12d      	bne.n	8004dee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d94:	2280      	movs	r2, #128	@ 0x80
 8004d96:	0391      	lsls	r1, r2, #14
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4a47      	ldr	r2, [pc, #284]	@ (8004eb8 <UART_CheckIdleState+0x14c>)
 8004d9c:	9200      	str	r2, [sp, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f000 f88e 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004da4:	1e03      	subs	r3, r0, #0
 8004da6:	d022      	beq.n	8004dee <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004db0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004db2:	2301      	movs	r3, #1
 8004db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	f383 8810 	msr	PRIMASK, r3
}
 8004dbc:	46c0      	nop			@ (mov r8, r8)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2180      	movs	r1, #128	@ 0x80
 8004dca:	438a      	bics	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd4:	f383 8810 	msr	PRIMASK, r3
}
 8004dd8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2288      	movs	r2, #136	@ 0x88
 8004dde:	2120      	movs	r1, #32
 8004de0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2284      	movs	r2, #132	@ 0x84
 8004de6:	2100      	movs	r1, #0
 8004de8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e060      	b.n	8004eb0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2204      	movs	r2, #4
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d146      	bne.n	8004e8a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfe:	2280      	movs	r2, #128	@ 0x80
 8004e00:	03d1      	lsls	r1, r2, #15
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb8 <UART_CheckIdleState+0x14c>)
 8004e06:	9200      	str	r2, [sp, #0]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f000 f859 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004e0e:	1e03      	subs	r3, r0, #0
 8004e10:	d03b      	beq.n	8004e8a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e12:	f3ef 8310 	mrs	r3, PRIMASK
 8004e16:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e18:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f383 8810 	msr	PRIMASK, r3
}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4922      	ldr	r1, [pc, #136]	@ (8004ebc <UART_CheckIdleState+0x150>)
 8004e34:	400a      	ands	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f383 8810 	msr	PRIMASK, r3
}
 8004e42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e44:	f3ef 8310 	mrs	r3, PRIMASK
 8004e48:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e4e:	2301      	movs	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f383 8810 	msr	PRIMASK, r3
}
 8004e58:	46c0      	nop			@ (mov r8, r8)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2101      	movs	r1, #1
 8004e66:	438a      	bics	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	f383 8810 	msr	PRIMASK, r3
}
 8004e74:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	228c      	movs	r2, #140	@ 0x8c
 8004e7a:	2120      	movs	r1, #32
 8004e7c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2284      	movs	r2, #132	@ 0x84
 8004e82:	2100      	movs	r1, #0
 8004e84:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e012      	b.n	8004eb0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2288      	movs	r2, #136	@ 0x88
 8004e8e:	2120      	movs	r1, #32
 8004e90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	228c      	movs	r2, #140	@ 0x8c
 8004e96:	2120      	movs	r1, #32
 8004e98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2284      	movs	r2, #132	@ 0x84
 8004eaa:	2100      	movs	r1, #0
 8004eac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b010      	add	sp, #64	@ 0x40
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	01ffffff 	.word	0x01ffffff
 8004ebc:	fffffedf 	.word	0xfffffedf

08004ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	1dfb      	adds	r3, r7, #7
 8004ece:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed0:	e051      	b.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	d04e      	beq.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed8:	f7fc f998 	bl	800120c <HAL_GetTick>
 8004edc:	0002      	movs	r2, r0
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d302      	bcc.n	8004eee <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e051      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	4013      	ands	r3, r2
 8004efc:	d03b      	beq.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b80      	cmp	r3, #128	@ 0x80
 8004f02:	d038      	beq.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b40      	cmp	r3, #64	@ 0x40
 8004f08:	d035      	beq.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	2208      	movs	r2, #8
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d111      	bne.n	8004f3c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 f960 	bl	80051e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2290      	movs	r2, #144	@ 0x90
 8004f2c:	2108      	movs	r1, #8
 8004f2e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2284      	movs	r2, #132	@ 0x84
 8004f34:	2100      	movs	r1, #0
 8004f36:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e02c      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	2380      	movs	r3, #128	@ 0x80
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	401a      	ands	r2, r3
 8004f48:	2380      	movs	r3, #128	@ 0x80
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d112      	bne.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2280      	movs	r2, #128	@ 0x80
 8004f56:	0112      	lsls	r2, r2, #4
 8004f58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f000 f943 	bl	80051e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2290      	movs	r2, #144	@ 0x90
 8004f66:	2120      	movs	r1, #32
 8004f68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2284      	movs	r2, #132	@ 0x84
 8004f6e:	2100      	movs	r1, #0
 8004f70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e00f      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	425a      	negs	r2, r3
 8004f86:	4153      	adcs	r3, r2
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	001a      	movs	r2, r3
 8004f8c:	1dfb      	adds	r3, r7, #7
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d09e      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	0018      	movs	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b004      	add	sp, #16
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b098      	sub	sp, #96	@ 0x60
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	1dbb      	adds	r3, r7, #6
 8004fac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	1dba      	adds	r2, r7, #6
 8004fb8:	215c      	movs	r1, #92	@ 0x5c
 8004fba:	8812      	ldrh	r2, [r2, #0]
 8004fbc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1dba      	adds	r2, r7, #6
 8004fc2:	215e      	movs	r1, #94	@ 0x5e
 8004fc4:	8812      	ldrh	r2, [r2, #0]
 8004fc6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	2380      	movs	r3, #128	@ 0x80
 8004fd4:	015b      	lsls	r3, r3, #5
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d10d      	bne.n	8004ff6 <UART_Start_Receive_IT+0x56>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d104      	bne.n	8004fec <UART_Start_Receive_IT+0x4c>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2260      	movs	r2, #96	@ 0x60
 8004fe6:	497b      	ldr	r1, [pc, #492]	@ (80051d4 <UART_Start_Receive_IT+0x234>)
 8004fe8:	5299      	strh	r1, [r3, r2]
 8004fea:	e02e      	b.n	800504a <UART_Start_Receive_IT+0xaa>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2260      	movs	r2, #96	@ 0x60
 8004ff0:	21ff      	movs	r1, #255	@ 0xff
 8004ff2:	5299      	strh	r1, [r3, r2]
 8004ff4:	e029      	b.n	800504a <UART_Start_Receive_IT+0xaa>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10d      	bne.n	800501a <UART_Start_Receive_IT+0x7a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <UART_Start_Receive_IT+0x70>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2260      	movs	r2, #96	@ 0x60
 800500a:	21ff      	movs	r1, #255	@ 0xff
 800500c:	5299      	strh	r1, [r3, r2]
 800500e:	e01c      	b.n	800504a <UART_Start_Receive_IT+0xaa>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2260      	movs	r2, #96	@ 0x60
 8005014:	217f      	movs	r1, #127	@ 0x7f
 8005016:	5299      	strh	r1, [r3, r2]
 8005018:	e017      	b.n	800504a <UART_Start_Receive_IT+0xaa>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	2380      	movs	r3, #128	@ 0x80
 8005020:	055b      	lsls	r3, r3, #21
 8005022:	429a      	cmp	r2, r3
 8005024:	d10d      	bne.n	8005042 <UART_Start_Receive_IT+0xa2>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d104      	bne.n	8005038 <UART_Start_Receive_IT+0x98>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2260      	movs	r2, #96	@ 0x60
 8005032:	217f      	movs	r1, #127	@ 0x7f
 8005034:	5299      	strh	r1, [r3, r2]
 8005036:	e008      	b.n	800504a <UART_Start_Receive_IT+0xaa>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2260      	movs	r2, #96	@ 0x60
 800503c:	213f      	movs	r1, #63	@ 0x3f
 800503e:	5299      	strh	r1, [r3, r2]
 8005040:	e003      	b.n	800504a <UART_Start_Receive_IT+0xaa>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2260      	movs	r2, #96	@ 0x60
 8005046:	2100      	movs	r1, #0
 8005048:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2290      	movs	r2, #144	@ 0x90
 800504e:	2100      	movs	r1, #0
 8005050:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	228c      	movs	r2, #140	@ 0x8c
 8005056:	2122      	movs	r1, #34	@ 0x22
 8005058:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505a:	f3ef 8310 	mrs	r3, PRIMASK
 800505e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8005060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005064:	2301      	movs	r3, #1
 8005066:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506a:	f383 8810 	msr	PRIMASK, r3
}
 800506e:	46c0      	nop			@ (mov r8, r8)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2101      	movs	r1, #1
 800507c:	430a      	orrs	r2, r1
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005082:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005086:	f383 8810 	msr	PRIMASK, r3
}
 800508a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005090:	2380      	movs	r3, #128	@ 0x80
 8005092:	059b      	lsls	r3, r3, #22
 8005094:	429a      	cmp	r2, r3
 8005096:	d150      	bne.n	800513a <UART_Start_Receive_IT+0x19a>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2268      	movs	r2, #104	@ 0x68
 800509c:	5a9b      	ldrh	r3, [r3, r2]
 800509e:	1dba      	adds	r2, r7, #6
 80050a0:	8812      	ldrh	r2, [r2, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d349      	bcc.n	800513a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	2380      	movs	r3, #128	@ 0x80
 80050ac:	015b      	lsls	r3, r3, #5
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d107      	bne.n	80050c2 <UART_Start_Receive_IT+0x122>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4a46      	ldr	r2, [pc, #280]	@ (80051d8 <UART_Start_Receive_IT+0x238>)
 80050be:	675a      	str	r2, [r3, #116]	@ 0x74
 80050c0:	e002      	b.n	80050c8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a45      	ldr	r2, [pc, #276]	@ (80051dc <UART_Start_Receive_IT+0x23c>)
 80050c6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d019      	beq.n	8005104 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d0:	f3ef 8310 	mrs	r3, PRIMASK
 80050d4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80050d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050da:	2301      	movs	r3, #1
 80050dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	46c0      	nop			@ (mov r8, r8)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2180      	movs	r1, #128	@ 0x80
 80050f2:	0049      	lsls	r1, r1, #1
 80050f4:	430a      	orrs	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050fe:	f383 8810 	msr	PRIMASK, r3
}
 8005102:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005104:	f3ef 8310 	mrs	r3, PRIMASK
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800510c:	657b      	str	r3, [r7, #84]	@ 0x54
 800510e:	2301      	movs	r3, #1
 8005110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	f383 8810 	msr	PRIMASK, r3
}
 8005118:	46c0      	nop			@ (mov r8, r8)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2180      	movs	r1, #128	@ 0x80
 8005126:	0549      	lsls	r1, r1, #21
 8005128:	430a      	orrs	r2, r1
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800512e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005132:	f383 8810 	msr	PRIMASK, r3
}
 8005136:	46c0      	nop			@ (mov r8, r8)
 8005138:	e047      	b.n	80051ca <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	2380      	movs	r3, #128	@ 0x80
 8005140:	015b      	lsls	r3, r3, #5
 8005142:	429a      	cmp	r2, r3
 8005144:	d107      	bne.n	8005156 <UART_Start_Receive_IT+0x1b6>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d103      	bne.n	8005156 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4a23      	ldr	r2, [pc, #140]	@ (80051e0 <UART_Start_Receive_IT+0x240>)
 8005152:	675a      	str	r2, [r3, #116]	@ 0x74
 8005154:	e002      	b.n	800515c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a22      	ldr	r2, [pc, #136]	@ (80051e4 <UART_Start_Receive_IT+0x244>)
 800515a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d019      	beq.n	8005198 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005164:	f3ef 8310 	mrs	r3, PRIMASK
 8005168:	61fb      	str	r3, [r7, #28]
  return(result);
 800516a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800516c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800516e:	2301      	movs	r3, #1
 8005170:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	f383 8810 	msr	PRIMASK, r3
}
 8005178:	46c0      	nop			@ (mov r8, r8)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2190      	movs	r1, #144	@ 0x90
 8005186:	0049      	lsls	r1, r1, #1
 8005188:	430a      	orrs	r2, r1
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	f383 8810 	msr	PRIMASK, r3
}
 8005196:	e018      	b.n	80051ca <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005198:	f3ef 8310 	mrs	r3, PRIMASK
 800519c:	613b      	str	r3, [r7, #16]
  return(result);
 800519e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80051a2:	2301      	movs	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f383 8810 	msr	PRIMASK, r3
}
 80051ac:	46c0      	nop			@ (mov r8, r8)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2120      	movs	r1, #32
 80051ba:	430a      	orrs	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f383 8810 	msr	PRIMASK, r3
}
 80051c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	0018      	movs	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b018      	add	sp, #96	@ 0x60
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	000001ff 	.word	0x000001ff
 80051d8:	0800597d 	.word	0x0800597d
 80051dc:	0800563d 	.word	0x0800563d
 80051e0:	08005479 	.word	0x08005479
 80051e4:	080052b5 	.word	0x080052b5

080051e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08e      	sub	sp, #56	@ 0x38
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f0:	f3ef 8310 	mrs	r3, PRIMASK
 80051f4:	617b      	str	r3, [r7, #20]
  return(result);
 80051f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fa:	2301      	movs	r3, #1
 80051fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f383 8810 	msr	PRIMASK, r3
}
 8005204:	46c0      	nop			@ (mov r8, r8)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4926      	ldr	r1, [pc, #152]	@ (80052ac <UART_EndRxTransfer+0xc4>)
 8005212:	400a      	ands	r2, r1
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f383 8810 	msr	PRIMASK, r3
}
 8005220:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005222:	f3ef 8310 	mrs	r3, PRIMASK
 8005226:	623b      	str	r3, [r7, #32]
  return(result);
 8005228:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800522a:	633b      	str	r3, [r7, #48]	@ 0x30
 800522c:	2301      	movs	r3, #1
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	f383 8810 	msr	PRIMASK, r3
}
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	491b      	ldr	r1, [pc, #108]	@ (80052b0 <UART_EndRxTransfer+0xc8>)
 8005244:	400a      	ands	r2, r1
 8005246:	609a      	str	r2, [r3, #8]
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	f383 8810 	msr	PRIMASK, r3
}
 8005252:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d118      	bne.n	800528e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800525c:	f3ef 8310 	mrs	r3, PRIMASK
 8005260:	60bb      	str	r3, [r7, #8]
  return(result);
 8005262:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005266:	2301      	movs	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f383 8810 	msr	PRIMASK, r3
}
 8005270:	46c0      	nop			@ (mov r8, r8)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2110      	movs	r1, #16
 800527e:	438a      	bics	r2, r1
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f383 8810 	msr	PRIMASK, r3
}
 800528c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	228c      	movs	r2, #140	@ 0x8c
 8005292:	2120      	movs	r1, #32
 8005294:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b00e      	add	sp, #56	@ 0x38
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	fffffedf 	.word	0xfffffedf
 80052b0:	effffffe 	.word	0xeffffffe

080052b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b094      	sub	sp, #80	@ 0x50
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052bc:	204e      	movs	r0, #78	@ 0x4e
 80052be:	183b      	adds	r3, r7, r0
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	2160      	movs	r1, #96	@ 0x60
 80052c4:	5a52      	ldrh	r2, [r2, r1]
 80052c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	228c      	movs	r2, #140	@ 0x8c
 80052cc:	589b      	ldr	r3, [r3, r2]
 80052ce:	2b22      	cmp	r3, #34	@ 0x22
 80052d0:	d000      	beq.n	80052d4 <UART_RxISR_8BIT+0x20>
 80052d2:	e0bf      	b.n	8005454 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052da:	214c      	movs	r1, #76	@ 0x4c
 80052dc:	187b      	adds	r3, r7, r1
 80052de:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052e0:	187b      	adds	r3, r7, r1
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	183b      	adds	r3, r7, r0
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b2d9      	uxtb	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f0:	400a      	ands	r2, r1
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	225e      	movs	r2, #94	@ 0x5e
 8005304:	5a9b      	ldrh	r3, [r3, r2]
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b299      	uxth	r1, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	225e      	movs	r2, #94	@ 0x5e
 8005310:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	225e      	movs	r2, #94	@ 0x5e
 8005316:	5a9b      	ldrh	r3, [r3, r2]
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d000      	beq.n	8005320 <UART_RxISR_8BIT+0x6c>
 800531e:	e0a1      	b.n	8005464 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005320:	f3ef 8310 	mrs	r3, PRIMASK
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005328:	64bb      	str	r3, [r7, #72]	@ 0x48
 800532a:	2301      	movs	r3, #1
 800532c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	f383 8810 	msr	PRIMASK, r3
}
 8005334:	46c0      	nop			@ (mov r8, r8)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	494a      	ldr	r1, [pc, #296]	@ (800546c <UART_RxISR_8BIT+0x1b8>)
 8005342:	400a      	ands	r2, r1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534c:	f383 8810 	msr	PRIMASK, r3
}
 8005350:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005352:	f3ef 8310 	mrs	r3, PRIMASK
 8005356:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	647b      	str	r3, [r7, #68]	@ 0x44
 800535c:	2301      	movs	r3, #1
 800535e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005362:	f383 8810 	msr	PRIMASK, r3
}
 8005366:	46c0      	nop			@ (mov r8, r8)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2101      	movs	r1, #1
 8005374:	438a      	bics	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800537a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	228c      	movs	r2, #140	@ 0x8c
 8005388:	2120      	movs	r1, #32
 800538a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a34      	ldr	r2, [pc, #208]	@ (8005470 <UART_RxISR_8BIT+0x1bc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01f      	beq.n	80053e2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	4013      	ands	r3, r2
 80053ae:	d018      	beq.n	80053e2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b0:	f3ef 8310 	mrs	r3, PRIMASK
 80053b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80053b6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80053ba:	2301      	movs	r3, #1
 80053bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f383 8810 	msr	PRIMASK, r3
}
 80053c4:	46c0      	nop			@ (mov r8, r8)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4928      	ldr	r1, [pc, #160]	@ (8005474 <UART_RxISR_8BIT+0x1c0>)
 80053d2:	400a      	ands	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	f383 8810 	msr	PRIMASK, r3
}
 80053e0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d12f      	bne.n	800544a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f0:	f3ef 8310 	mrs	r3, PRIMASK
 80053f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80053f6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053fa:	2301      	movs	r3, #1
 80053fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f383 8810 	msr	PRIMASK, r3
}
 8005404:	46c0      	nop			@ (mov r8, r8)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2110      	movs	r1, #16
 8005412:	438a      	bics	r2, r1
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005418:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f383 8810 	msr	PRIMASK, r3
}
 8005420:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	2210      	movs	r2, #16
 800542a:	4013      	ands	r3, r2
 800542c:	2b10      	cmp	r3, #16
 800542e:	d103      	bne.n	8005438 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2210      	movs	r2, #16
 8005436:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	225c      	movs	r2, #92	@ 0x5c
 800543c:	5a9a      	ldrh	r2, [r3, r2]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	0011      	movs	r1, r2
 8005442:	0018      	movs	r0, r3
 8005444:	f7ff f914 	bl	8004670 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005448:	e00c      	b.n	8005464 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	0018      	movs	r0, r3
 800544e:	f7fb fa1f 	bl	8000890 <HAL_UART_RxCpltCallback>
}
 8005452:	e007      	b.n	8005464 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2108      	movs	r1, #8
 8005460:	430a      	orrs	r2, r1
 8005462:	619a      	str	r2, [r3, #24]
}
 8005464:	46c0      	nop			@ (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	b014      	add	sp, #80	@ 0x50
 800546a:	bd80      	pop	{r7, pc}
 800546c:	fffffedf 	.word	0xfffffedf
 8005470:	40008000 	.word	0x40008000
 8005474:	fbffffff 	.word	0xfbffffff

08005478 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b094      	sub	sp, #80	@ 0x50
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005480:	204e      	movs	r0, #78	@ 0x4e
 8005482:	183b      	adds	r3, r7, r0
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	2160      	movs	r1, #96	@ 0x60
 8005488:	5a52      	ldrh	r2, [r2, r1]
 800548a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	228c      	movs	r2, #140	@ 0x8c
 8005490:	589b      	ldr	r3, [r3, r2]
 8005492:	2b22      	cmp	r3, #34	@ 0x22
 8005494:	d000      	beq.n	8005498 <UART_RxISR_16BIT+0x20>
 8005496:	e0bf      	b.n	8005618 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800549e:	214c      	movs	r1, #76	@ 0x4c
 80054a0:	187b      	adds	r3, r7, r1
 80054a2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80054aa:	187b      	adds	r3, r7, r1
 80054ac:	183a      	adds	r2, r7, r0
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	8812      	ldrh	r2, [r2, #0]
 80054b2:	4013      	ands	r3, r2
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054be:	1c9a      	adds	r2, r3, #2
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	225e      	movs	r2, #94	@ 0x5e
 80054c8:	5a9b      	ldrh	r3, [r3, r2]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b299      	uxth	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	225e      	movs	r2, #94	@ 0x5e
 80054d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	225e      	movs	r2, #94	@ 0x5e
 80054da:	5a9b      	ldrh	r3, [r3, r2]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d000      	beq.n	80054e4 <UART_RxISR_16BIT+0x6c>
 80054e2:	e0a1      	b.n	8005628 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e4:	f3ef 8310 	mrs	r3, PRIMASK
 80054e8:	623b      	str	r3, [r7, #32]
  return(result);
 80054ea:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ee:	2301      	movs	r3, #1
 80054f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	f383 8810 	msr	PRIMASK, r3
}
 80054f8:	46c0      	nop			@ (mov r8, r8)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	494a      	ldr	r1, [pc, #296]	@ (8005630 <UART_RxISR_16BIT+0x1b8>)
 8005506:	400a      	ands	r2, r1
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800550c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005510:	f383 8810 	msr	PRIMASK, r3
}
 8005514:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005516:	f3ef 8310 	mrs	r3, PRIMASK
 800551a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005520:	2301      	movs	r3, #1
 8005522:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005526:	f383 8810 	msr	PRIMASK, r3
}
 800552a:	46c0      	nop			@ (mov r8, r8)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2101      	movs	r1, #1
 8005538:	438a      	bics	r2, r1
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800553e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005542:	f383 8810 	msr	PRIMASK, r3
}
 8005546:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	228c      	movs	r2, #140	@ 0x8c
 800554c:	2120      	movs	r1, #32
 800554e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a34      	ldr	r2, [pc, #208]	@ (8005634 <UART_RxISR_16BIT+0x1bc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01f      	beq.n	80055a6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	2380      	movs	r3, #128	@ 0x80
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	4013      	ands	r3, r2
 8005572:	d018      	beq.n	80055a6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005574:	f3ef 8310 	mrs	r3, PRIMASK
 8005578:	617b      	str	r3, [r7, #20]
  return(result);
 800557a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800557c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800557e:	2301      	movs	r3, #1
 8005580:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f383 8810 	msr	PRIMASK, r3
}
 8005588:	46c0      	nop			@ (mov r8, r8)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4928      	ldr	r1, [pc, #160]	@ (8005638 <UART_RxISR_16BIT+0x1c0>)
 8005596:	400a      	ands	r2, r1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800559c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f383 8810 	msr	PRIMASK, r3
}
 80055a4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d12f      	bne.n	800560e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b4:	f3ef 8310 	mrs	r3, PRIMASK
 80055b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80055ba:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055be:	2301      	movs	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f383 8810 	msr	PRIMASK, r3
}
 80055c8:	46c0      	nop			@ (mov r8, r8)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2110      	movs	r1, #16
 80055d6:	438a      	bics	r2, r1
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f383 8810 	msr	PRIMASK, r3
}
 80055e4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	2210      	movs	r2, #16
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d103      	bne.n	80055fc <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2210      	movs	r2, #16
 80055fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	225c      	movs	r2, #92	@ 0x5c
 8005600:	5a9a      	ldrh	r2, [r3, r2]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	0011      	movs	r1, r2
 8005606:	0018      	movs	r0, r3
 8005608:	f7ff f832 	bl	8004670 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800560c:	e00c      	b.n	8005628 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0018      	movs	r0, r3
 8005612:	f7fb f93d 	bl	8000890 <HAL_UART_RxCpltCallback>
}
 8005616:	e007      	b.n	8005628 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2108      	movs	r1, #8
 8005624:	430a      	orrs	r2, r1
 8005626:	619a      	str	r2, [r3, #24]
}
 8005628:	46c0      	nop			@ (mov r8, r8)
 800562a:	46bd      	mov	sp, r7
 800562c:	b014      	add	sp, #80	@ 0x50
 800562e:	bd80      	pop	{r7, pc}
 8005630:	fffffedf 	.word	0xfffffedf
 8005634:	40008000 	.word	0x40008000
 8005638:	fbffffff 	.word	0xfbffffff

0800563c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b0a0      	sub	sp, #128	@ 0x80
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005644:	237a      	movs	r3, #122	@ 0x7a
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	2160      	movs	r1, #96	@ 0x60
 800564c:	5a52      	ldrh	r2, [r2, r1]
 800564e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	228c      	movs	r2, #140	@ 0x8c
 800566c:	589b      	ldr	r3, [r3, r2]
 800566e:	2b22      	cmp	r3, #34	@ 0x22
 8005670:	d000      	beq.n	8005674 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005672:	e16a      	b.n	800594a <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005674:	236e      	movs	r3, #110	@ 0x6e
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	2168      	movs	r1, #104	@ 0x68
 800567c:	5a52      	ldrh	r2, [r2, r1]
 800567e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005680:	e111      	b.n	80058a6 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005688:	216c      	movs	r1, #108	@ 0x6c
 800568a:	187b      	adds	r3, r7, r1
 800568c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800568e:	187b      	adds	r3, r7, r1
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b2da      	uxtb	r2, r3
 8005694:	237a      	movs	r3, #122	@ 0x7a
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b2d9      	uxtb	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a0:	400a      	ands	r2, r1
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	225e      	movs	r2, #94	@ 0x5e
 80056b4:	5a9b      	ldrh	r3, [r3, r2]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b299      	uxth	r1, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	225e      	movs	r2, #94	@ 0x5e
 80056c0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056cc:	2207      	movs	r2, #7
 80056ce:	4013      	ands	r3, r2
 80056d0:	d049      	beq.n	8005766 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056d4:	2201      	movs	r2, #1
 80056d6:	4013      	ands	r3, r2
 80056d8:	d010      	beq.n	80056fc <UART_RxISR_8BIT_FIFOEN+0xc0>
 80056da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80056dc:	2380      	movs	r3, #128	@ 0x80
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4013      	ands	r3, r2
 80056e2:	d00b      	beq.n	80056fc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2201      	movs	r2, #1
 80056ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2290      	movs	r2, #144	@ 0x90
 80056f0:	589b      	ldr	r3, [r3, r2]
 80056f2:	2201      	movs	r2, #1
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2190      	movs	r1, #144	@ 0x90
 80056fa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056fe:	2202      	movs	r2, #2
 8005700:	4013      	ands	r3, r2
 8005702:	d00f      	beq.n	8005724 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005704:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005706:	2201      	movs	r2, #1
 8005708:	4013      	ands	r3, r2
 800570a:	d00b      	beq.n	8005724 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2202      	movs	r2, #2
 8005712:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2290      	movs	r2, #144	@ 0x90
 8005718:	589b      	ldr	r3, [r3, r2]
 800571a:	2204      	movs	r2, #4
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2190      	movs	r1, #144	@ 0x90
 8005722:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005724:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005726:	2204      	movs	r2, #4
 8005728:	4013      	ands	r3, r2
 800572a:	d00f      	beq.n	800574c <UART_RxISR_8BIT_FIFOEN+0x110>
 800572c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800572e:	2201      	movs	r2, #1
 8005730:	4013      	ands	r3, r2
 8005732:	d00b      	beq.n	800574c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2204      	movs	r2, #4
 800573a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2290      	movs	r2, #144	@ 0x90
 8005740:	589b      	ldr	r3, [r3, r2]
 8005742:	2202      	movs	r2, #2
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2190      	movs	r1, #144	@ 0x90
 800574a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2290      	movs	r2, #144	@ 0x90
 8005750:	589b      	ldr	r3, [r3, r2]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0018      	movs	r0, r3
 800575a:	f7fe ff81 	bl	8004660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2290      	movs	r2, #144	@ 0x90
 8005762:	2100      	movs	r1, #0
 8005764:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	225e      	movs	r2, #94	@ 0x5e
 800576a:	5a9b      	ldrh	r3, [r3, r2]
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d000      	beq.n	8005774 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005772:	e098      	b.n	80058a6 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005774:	f3ef 8310 	mrs	r3, PRIMASK
 8005778:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800577e:	2301      	movs	r3, #1
 8005780:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005784:	f383 8810 	msr	PRIMASK, r3
}
 8005788:	46c0      	nop			@ (mov r8, r8)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4973      	ldr	r1, [pc, #460]	@ (8005964 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005796:	400a      	ands	r2, r1
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800579c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a0:	f383 8810 	msr	PRIMASK, r3
}
 80057a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a6:	f3ef 8310 	mrs	r3, PRIMASK
 80057aa:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80057ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80057b0:	2301      	movs	r3, #1
 80057b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057b6:	f383 8810 	msr	PRIMASK, r3
}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4968      	ldr	r1, [pc, #416]	@ (8005968 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80057c8:	400a      	ands	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]
 80057cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057d2:	f383 8810 	msr	PRIMASK, r3
}
 80057d6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	228c      	movs	r2, #140	@ 0x8c
 80057dc:	2120      	movs	r1, #32
 80057de:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a5e      	ldr	r2, [pc, #376]	@ (800596c <UART_RxISR_8BIT_FIFOEN+0x330>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d01f      	beq.n	8005836 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	2380      	movs	r3, #128	@ 0x80
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	4013      	ands	r3, r2
 8005802:	d018      	beq.n	8005836 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005804:	f3ef 8310 	mrs	r3, PRIMASK
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800580a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800580c:	663b      	str	r3, [r7, #96]	@ 0x60
 800580e:	2301      	movs	r3, #1
 8005810:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	f383 8810 	msr	PRIMASK, r3
}
 8005818:	46c0      	nop			@ (mov r8, r8)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4952      	ldr	r1, [pc, #328]	@ (8005970 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8005826:	400a      	ands	r2, r1
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800582c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800582e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005830:	f383 8810 	msr	PRIMASK, r3
}
 8005834:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d12f      	bne.n	800589e <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005844:	f3ef 8310 	mrs	r3, PRIMASK
 8005848:	623b      	str	r3, [r7, #32]
  return(result);
 800584a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800584e:	2301      	movs	r3, #1
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	f383 8810 	msr	PRIMASK, r3
}
 8005858:	46c0      	nop			@ (mov r8, r8)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2110      	movs	r1, #16
 8005866:	438a      	bics	r2, r1
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800586c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800586e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005870:	f383 8810 	msr	PRIMASK, r3
}
 8005874:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	2210      	movs	r2, #16
 800587e:	4013      	ands	r3, r2
 8005880:	2b10      	cmp	r3, #16
 8005882:	d103      	bne.n	800588c <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2210      	movs	r2, #16
 800588a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	225c      	movs	r2, #92	@ 0x5c
 8005890:	5a9a      	ldrh	r2, [r3, r2]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	0011      	movs	r1, r2
 8005896:	0018      	movs	r0, r3
 8005898:	f7fe feea 	bl	8004670 <HAL_UARTEx_RxEventCallback>
 800589c:	e003      	b.n	80058a6 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f7fa fff5 	bl	8000890 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058a6:	236e      	movs	r3, #110	@ 0x6e
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <UART_RxISR_8BIT_FIFOEN+0x27e>
 80058b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058b2:	2220      	movs	r2, #32
 80058b4:	4013      	ands	r3, r2
 80058b6:	d000      	beq.n	80058ba <UART_RxISR_8BIT_FIFOEN+0x27e>
 80058b8:	e6e3      	b.n	8005682 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058ba:	205a      	movs	r0, #90	@ 0x5a
 80058bc:	183b      	adds	r3, r7, r0
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	215e      	movs	r1, #94	@ 0x5e
 80058c2:	5a52      	ldrh	r2, [r2, r1]
 80058c4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058c6:	0001      	movs	r1, r0
 80058c8:	187b      	adds	r3, r7, r1
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d044      	beq.n	800595a <UART_RxISR_8BIT_FIFOEN+0x31e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2268      	movs	r2, #104	@ 0x68
 80058d4:	5a9b      	ldrh	r3, [r3, r2]
 80058d6:	187a      	adds	r2, r7, r1
 80058d8:	8812      	ldrh	r2, [r2, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d23d      	bcs.n	800595a <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058de:	f3ef 8310 	mrs	r3, PRIMASK
 80058e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058e4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80058e8:	2301      	movs	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f383 8810 	msr	PRIMASK, r3
}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	491d      	ldr	r1, [pc, #116]	@ (8005974 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8005900:	400a      	ands	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f383 8810 	msr	PRIMASK, r3
}
 800590e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a19      	ldr	r2, [pc, #100]	@ (8005978 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8005914:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005916:	f3ef 8310 	mrs	r3, PRIMASK
 800591a:	617b      	str	r3, [r7, #20]
  return(result);
 800591c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800591e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005920:	2301      	movs	r3, #1
 8005922:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f383 8810 	msr	PRIMASK, r3
}
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2120      	movs	r1, #32
 8005938:	430a      	orrs	r2, r1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800593e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f383 8810 	msr	PRIMASK, r3
}
 8005946:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005948:	e007      	b.n	800595a <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2108      	movs	r1, #8
 8005956:	430a      	orrs	r2, r1
 8005958:	619a      	str	r2, [r3, #24]
}
 800595a:	46c0      	nop			@ (mov r8, r8)
 800595c:	46bd      	mov	sp, r7
 800595e:	b020      	add	sp, #128	@ 0x80
 8005960:	bd80      	pop	{r7, pc}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	fffffeff 	.word	0xfffffeff
 8005968:	effffffe 	.word	0xeffffffe
 800596c:	40008000 	.word	0x40008000
 8005970:	fbffffff 	.word	0xfbffffff
 8005974:	efffffff 	.word	0xefffffff
 8005978:	080052b5 	.word	0x080052b5

0800597c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b0a2      	sub	sp, #136	@ 0x88
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005984:	2382      	movs	r3, #130	@ 0x82
 8005986:	18fb      	adds	r3, r7, r3
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	2160      	movs	r1, #96	@ 0x60
 800598c:	5a52      	ldrh	r2, [r2, r1]
 800598e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	2284      	movs	r2, #132	@ 0x84
 8005998:	18ba      	adds	r2, r7, r2
 800599a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	228c      	movs	r2, #140	@ 0x8c
 80059b0:	589b      	ldr	r3, [r3, r2]
 80059b2:	2b22      	cmp	r3, #34	@ 0x22
 80059b4:	d000      	beq.n	80059b8 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80059b6:	e174      	b.n	8005ca2 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80059b8:	2376      	movs	r3, #118	@ 0x76
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	2168      	movs	r1, #104	@ 0x68
 80059c0:	5a52      	ldrh	r2, [r2, r1]
 80059c2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059c4:	e119      	b.n	8005bfa <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059cc:	2174      	movs	r1, #116	@ 0x74
 80059ce:	187b      	adds	r3, r7, r1
 80059d0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d6:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80059d8:	187b      	adds	r3, r7, r1
 80059da:	2282      	movs	r2, #130	@ 0x82
 80059dc:	18ba      	adds	r2, r7, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	8812      	ldrh	r2, [r2, #0]
 80059e2:	4013      	ands	r3, r2
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	225e      	movs	r2, #94	@ 0x5e
 80059f8:	5a9b      	ldrh	r3, [r3, r2]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b299      	uxth	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	225e      	movs	r2, #94	@ 0x5e
 8005a04:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	2184      	movs	r1, #132	@ 0x84
 8005a0e:	187a      	adds	r2, r7, r1
 8005a10:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a12:	187b      	adds	r3, r7, r1
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2207      	movs	r2, #7
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d04e      	beq.n	8005aba <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a1c:	187b      	adds	r3, r7, r1
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2201      	movs	r2, #1
 8005a22:	4013      	ands	r3, r2
 8005a24:	d010      	beq.n	8005a48 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005a26:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a28:	2380      	movs	r3, #128	@ 0x80
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d00b      	beq.n	8005a48 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2201      	movs	r2, #1
 8005a36:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2290      	movs	r2, #144	@ 0x90
 8005a3c:	589b      	ldr	r3, [r3, r2]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2190      	movs	r1, #144	@ 0x90
 8005a46:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a48:	2384      	movs	r3, #132	@ 0x84
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	4013      	ands	r3, r2
 8005a52:	d00f      	beq.n	8005a74 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a56:	2201      	movs	r2, #1
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2202      	movs	r2, #2
 8005a62:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2290      	movs	r2, #144	@ 0x90
 8005a68:	589b      	ldr	r3, [r3, r2]
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2190      	movs	r1, #144	@ 0x90
 8005a72:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a74:	2384      	movs	r3, #132	@ 0x84
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d00f      	beq.n	8005aa0 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a82:	2201      	movs	r2, #1
 8005a84:	4013      	ands	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2290      	movs	r2, #144	@ 0x90
 8005a94:	589b      	ldr	r3, [r3, r2]
 8005a96:	2202      	movs	r2, #2
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2190      	movs	r1, #144	@ 0x90
 8005a9e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2290      	movs	r2, #144	@ 0x90
 8005aa4:	589b      	ldr	r3, [r3, r2]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	0018      	movs	r0, r3
 8005aae:	f7fe fdd7 	bl	8004660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2290      	movs	r2, #144	@ 0x90
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	225e      	movs	r2, #94	@ 0x5e
 8005abe:	5a9b      	ldrh	r3, [r3, r2]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d000      	beq.n	8005ac8 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005ac6:	e098      	b.n	8005bfa <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8005acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad8:	f383 8810 	msr	PRIMASK, r3
}
 8005adc:	46c0      	nop			@ (mov r8, r8)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4974      	ldr	r1, [pc, #464]	@ (8005cbc <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005aea:	400a      	ands	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005af0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005af4:	f383 8810 	msr	PRIMASK, r3
}
 8005af8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afa:	f3ef 8310 	mrs	r3, PRIMASK
 8005afe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b04:	2301      	movs	r3, #1
 8005b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0a:	f383 8810 	msr	PRIMASK, r3
}
 8005b0e:	46c0      	nop			@ (mov r8, r8)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4969      	ldr	r1, [pc, #420]	@ (8005cc0 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005b1c:	400a      	ands	r2, r1
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b22:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b26:	f383 8810 	msr	PRIMASK, r3
}
 8005b2a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	228c      	movs	r2, #140	@ 0x8c
 8005b30:	2120      	movs	r1, #32
 8005b32:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a5f      	ldr	r2, [pc, #380]	@ (8005cc4 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01f      	beq.n	8005b8a <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	2380      	movs	r3, #128	@ 0x80
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	4013      	ands	r3, r2
 8005b56:	d018      	beq.n	8005b8a <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b58:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b60:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b62:	2301      	movs	r3, #1
 8005b64:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b68:	f383 8810 	msr	PRIMASK, r3
}
 8005b6c:	46c0      	nop			@ (mov r8, r8)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4953      	ldr	r1, [pc, #332]	@ (8005cc8 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	f383 8810 	msr	PRIMASK, r3
}
 8005b88:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d12f      	bne.n	8005bf2 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b98:	f3ef 8310 	mrs	r3, PRIMASK
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba8:	f383 8810 	msr	PRIMASK, r3
}
 8005bac:	46c0      	nop			@ (mov r8, r8)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2110      	movs	r1, #16
 8005bba:	438a      	bics	r2, r1
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc4:	f383 8810 	msr	PRIMASK, r3
}
 8005bc8:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	2210      	movs	r2, #16
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b10      	cmp	r3, #16
 8005bd6:	d103      	bne.n	8005be0 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2210      	movs	r2, #16
 8005bde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	225c      	movs	r2, #92	@ 0x5c
 8005be4:	5a9a      	ldrh	r2, [r3, r2]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	0011      	movs	r1, r2
 8005bea:	0018      	movs	r0, r3
 8005bec:	f7fe fd40 	bl	8004670 <HAL_UARTEx_RxEventCallback>
 8005bf0:	e003      	b.n	8005bfa <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f7fa fe4b 	bl	8000890 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005bfa:	2376      	movs	r3, #118	@ 0x76
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005c04:	2384      	movs	r3, #132	@ 0x84
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d000      	beq.n	8005c12 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005c10:	e6d9      	b.n	80059c6 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c12:	205e      	movs	r0, #94	@ 0x5e
 8005c14:	183b      	adds	r3, r7, r0
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	215e      	movs	r1, #94	@ 0x5e
 8005c1a:	5a52      	ldrh	r2, [r2, r1]
 8005c1c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c1e:	0001      	movs	r1, r0
 8005c20:	187b      	adds	r3, r7, r1
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d044      	beq.n	8005cb2 <UART_RxISR_16BIT_FIFOEN+0x336>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2268      	movs	r2, #104	@ 0x68
 8005c2c:	5a9b      	ldrh	r3, [r3, r2]
 8005c2e:	187a      	adds	r2, r7, r1
 8005c30:	8812      	ldrh	r2, [r2, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d23d      	bcs.n	8005cb2 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c36:	f3ef 8310 	mrs	r3, PRIMASK
 8005c3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c40:	2301      	movs	r3, #1
 8005c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f383 8810 	msr	PRIMASK, r3
}
 8005c4a:	46c0      	nop			@ (mov r8, r8)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	491d      	ldr	r1, [pc, #116]	@ (8005ccc <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005c58:	400a      	ands	r2, r1
 8005c5a:	609a      	str	r2, [r3, #8]
 8005c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f383 8810 	msr	PRIMASK, r3
}
 8005c66:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a19      	ldr	r2, [pc, #100]	@ (8005cd0 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005c6c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c72:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c74:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c76:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f383 8810 	msr	PRIMASK, r3
}
 8005c82:	46c0      	nop			@ (mov r8, r8)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2120      	movs	r1, #32
 8005c90:	430a      	orrs	r2, r1
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	f383 8810 	msr	PRIMASK, r3
}
 8005c9e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ca0:	e007      	b.n	8005cb2 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699a      	ldr	r2, [r3, #24]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2108      	movs	r1, #8
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	619a      	str	r2, [r3, #24]
}
 8005cb2:	46c0      	nop			@ (mov r8, r8)
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b022      	add	sp, #136	@ 0x88
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	fffffeff 	.word	0xfffffeff
 8005cc0:	effffffe 	.word	0xeffffffe
 8005cc4:	40008000 	.word	0x40008000
 8005cc8:	fbffffff 	.word	0xfbffffff
 8005ccc:	efffffff 	.word	0xefffffff
 8005cd0:	08005479 	.word	0x08005479

08005cd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2284      	movs	r2, #132	@ 0x84
 8005ce0:	5c9b      	ldrb	r3, [r3, r2]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_UARTEx_DisableFifoMode+0x16>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e027      	b.n	8005d3a <HAL_UARTEx_DisableFifoMode+0x66>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2284      	movs	r2, #132	@ 0x84
 8005cee:	2101      	movs	r1, #1
 8005cf0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2288      	movs	r2, #136	@ 0x88
 8005cf6:	2124      	movs	r1, #36	@ 0x24
 8005cf8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	438a      	bics	r2, r1
 8005d10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a0b      	ldr	r2, [pc, #44]	@ (8005d44 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2288      	movs	r2, #136	@ 0x88
 8005d2c:	2120      	movs	r1, #32
 8005d2e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2284      	movs	r2, #132	@ 0x84
 8005d34:	2100      	movs	r1, #0
 8005d36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b004      	add	sp, #16
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	dfffffff 	.word	0xdfffffff

08005d48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2284      	movs	r2, #132	@ 0x84
 8005d56:	5c9b      	ldrb	r3, [r3, r2]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e02e      	b.n	8005dbe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2284      	movs	r2, #132	@ 0x84
 8005d64:	2101      	movs	r1, #1
 8005d66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2288      	movs	r2, #136	@ 0x88
 8005d6c:	2124      	movs	r1, #36	@ 0x24
 8005d6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2101      	movs	r1, #1
 8005d84:	438a      	bics	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	08d9      	lsrs	r1, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f000 f854 	bl	8005e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2288      	movs	r2, #136	@ 0x88
 8005db0:	2120      	movs	r1, #32
 8005db2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2284      	movs	r2, #132	@ 0x84
 8005db8:	2100      	movs	r1, #0
 8005dba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b004      	add	sp, #16
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2284      	movs	r2, #132	@ 0x84
 8005dd6:	5c9b      	ldrb	r3, [r3, r2]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e02f      	b.n	8005e40 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2284      	movs	r2, #132	@ 0x84
 8005de4:	2101      	movs	r1, #1
 8005de6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2288      	movs	r2, #136	@ 0x88
 8005dec:	2124      	movs	r1, #36	@ 0x24
 8005dee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2101      	movs	r1, #1
 8005e04:	438a      	bics	r2, r1
 8005e06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8005e48 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	0019      	movs	r1, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	0018      	movs	r0, r3
 8005e22:	f000 f813 	bl	8005e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2288      	movs	r2, #136	@ 0x88
 8005e32:	2120      	movs	r1, #32
 8005e34:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2284      	movs	r2, #132	@ 0x84
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	0018      	movs	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b004      	add	sp, #16
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	f1ffffff 	.word	0xf1ffffff

08005e4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d108      	bne.n	8005e6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	226a      	movs	r2, #106	@ 0x6a
 8005e60:	2101      	movs	r1, #1
 8005e62:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2268      	movs	r2, #104	@ 0x68
 8005e68:	2101      	movs	r1, #1
 8005e6a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e6c:	e043      	b.n	8005ef6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e6e:	260f      	movs	r6, #15
 8005e70:	19bb      	adds	r3, r7, r6
 8005e72:	2208      	movs	r2, #8
 8005e74:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e76:	200e      	movs	r0, #14
 8005e78:	183b      	adds	r3, r7, r0
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	0e5b      	lsrs	r3, r3, #25
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	240d      	movs	r4, #13
 8005e8a:	193b      	adds	r3, r7, r4
 8005e8c:	2107      	movs	r1, #7
 8005e8e:	400a      	ands	r2, r1
 8005e90:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	0f5b      	lsrs	r3, r3, #29
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	250c      	movs	r5, #12
 8005e9e:	197b      	adds	r3, r7, r5
 8005ea0:	2107      	movs	r1, #7
 8005ea2:	400a      	ands	r2, r1
 8005ea4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ea6:	183b      	adds	r3, r7, r0
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	197a      	adds	r2, r7, r5
 8005eac:	7812      	ldrb	r2, [r2, #0]
 8005eae:	4914      	ldr	r1, [pc, #80]	@ (8005f00 <UARTEx_SetNbDataToProcess+0xb4>)
 8005eb0:	5c8a      	ldrb	r2, [r1, r2]
 8005eb2:	435a      	muls	r2, r3
 8005eb4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005eb6:	197b      	adds	r3, r7, r5
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	4a12      	ldr	r2, [pc, #72]	@ (8005f04 <UARTEx_SetNbDataToProcess+0xb8>)
 8005ebc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ebe:	0019      	movs	r1, r3
 8005ec0:	f7fa f9b4 	bl	800022c <__divsi3>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	b299      	uxth	r1, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	226a      	movs	r2, #106	@ 0x6a
 8005ecc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ece:	19bb      	adds	r3, r7, r6
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	193a      	adds	r2, r7, r4
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	490a      	ldr	r1, [pc, #40]	@ (8005f00 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ed8:	5c8a      	ldrb	r2, [r1, r2]
 8005eda:	435a      	muls	r2, r3
 8005edc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ede:	193b      	adds	r3, r7, r4
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	4a08      	ldr	r2, [pc, #32]	@ (8005f04 <UARTEx_SetNbDataToProcess+0xb8>)
 8005ee4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ee6:	0019      	movs	r1, r3
 8005ee8:	f7fa f9a0 	bl	800022c <__divsi3>
 8005eec:	0003      	movs	r3, r0
 8005eee:	b299      	uxth	r1, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2268      	movs	r2, #104	@ 0x68
 8005ef4:	5299      	strh	r1, [r3, r2]
}
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b005      	add	sp, #20
 8005efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005efe:	46c0      	nop			@ (mov r8, r8)
 8005f00:	08006968 	.word	0x08006968
 8005f04:	08006970 	.word	0x08006970

08005f08 <_vsniprintf_r>:
 8005f08:	b530      	push	{r4, r5, lr}
 8005f0a:	0005      	movs	r5, r0
 8005f0c:	0014      	movs	r4, r2
 8005f0e:	0008      	movs	r0, r1
 8005f10:	001a      	movs	r2, r3
 8005f12:	b09b      	sub	sp, #108	@ 0x6c
 8005f14:	2c00      	cmp	r4, #0
 8005f16:	da05      	bge.n	8005f24 <_vsniprintf_r+0x1c>
 8005f18:	238b      	movs	r3, #139	@ 0x8b
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	4240      	negs	r0, r0
 8005f20:	b01b      	add	sp, #108	@ 0x6c
 8005f22:	bd30      	pop	{r4, r5, pc}
 8005f24:	2382      	movs	r3, #130	@ 0x82
 8005f26:	4669      	mov	r1, sp
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	818b      	strh	r3, [r1, #12]
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	9000      	str	r0, [sp, #0]
 8005f30:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f32:	9004      	str	r0, [sp, #16]
 8005f34:	428c      	cmp	r4, r1
 8005f36:	d000      	beq.n	8005f3a <_vsniprintf_r+0x32>
 8005f38:	1e61      	subs	r1, r4, #1
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	9102      	str	r1, [sp, #8]
 8005f3e:	9105      	str	r1, [sp, #20]
 8005f40:	4669      	mov	r1, sp
 8005f42:	425b      	negs	r3, r3
 8005f44:	81cb      	strh	r3, [r1, #14]
 8005f46:	0028      	movs	r0, r5
 8005f48:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005f4a:	f000 f9a7 	bl	800629c <_svfiprintf_r>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	da01      	bge.n	8005f56 <_vsniprintf_r+0x4e>
 8005f52:	238b      	movs	r3, #139	@ 0x8b
 8005f54:	602b      	str	r3, [r5, #0]
 8005f56:	2c00      	cmp	r4, #0
 8005f58:	d0e2      	beq.n	8005f20 <_vsniprintf_r+0x18>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	9b00      	ldr	r3, [sp, #0]
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	e7de      	b.n	8005f20 <_vsniprintf_r+0x18>
	...

08005f64 <vsniprintf>:
 8005f64:	b513      	push	{r0, r1, r4, lr}
 8005f66:	4c04      	ldr	r4, [pc, #16]	@ (8005f78 <vsniprintf+0x14>)
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	0013      	movs	r3, r2
 8005f6c:	000a      	movs	r2, r1
 8005f6e:	0001      	movs	r1, r0
 8005f70:	6820      	ldr	r0, [r4, #0]
 8005f72:	f7ff ffc9 	bl	8005f08 <_vsniprintf_r>
 8005f76:	bd16      	pop	{r1, r2, r4, pc}
 8005f78:	2000000c 	.word	0x2000000c

08005f7c <memset>:
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	1882      	adds	r2, r0, r2
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d100      	bne.n	8005f86 <memset+0xa>
 8005f84:	4770      	bx	lr
 8005f86:	7019      	strb	r1, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	e7f9      	b.n	8005f80 <memset+0x4>

08005f8c <__errno>:
 8005f8c:	4b01      	ldr	r3, [pc, #4]	@ (8005f94 <__errno+0x8>)
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	4770      	bx	lr
 8005f92:	46c0      	nop			@ (mov r8, r8)
 8005f94:	2000000c 	.word	0x2000000c

08005f98 <__libc_init_array>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	2600      	movs	r6, #0
 8005f9c:	4c0c      	ldr	r4, [pc, #48]	@ (8005fd0 <__libc_init_array+0x38>)
 8005f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd4 <__libc_init_array+0x3c>)
 8005fa0:	1b64      	subs	r4, r4, r5
 8005fa2:	10a4      	asrs	r4, r4, #2
 8005fa4:	42a6      	cmp	r6, r4
 8005fa6:	d109      	bne.n	8005fbc <__libc_init_array+0x24>
 8005fa8:	2600      	movs	r6, #0
 8005faa:	f000 fc61 	bl	8006870 <_init>
 8005fae:	4c0a      	ldr	r4, [pc, #40]	@ (8005fd8 <__libc_init_array+0x40>)
 8005fb0:	4d0a      	ldr	r5, [pc, #40]	@ (8005fdc <__libc_init_array+0x44>)
 8005fb2:	1b64      	subs	r4, r4, r5
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	42a6      	cmp	r6, r4
 8005fb8:	d105      	bne.n	8005fc6 <__libc_init_array+0x2e>
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	00b3      	lsls	r3, r6, #2
 8005fbe:	58eb      	ldr	r3, [r5, r3]
 8005fc0:	4798      	blx	r3
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__libc_init_array+0xc>
 8005fc6:	00b3      	lsls	r3, r6, #2
 8005fc8:	58eb      	ldr	r3, [r5, r3]
 8005fca:	4798      	blx	r3
 8005fcc:	3601      	adds	r6, #1
 8005fce:	e7f2      	b.n	8005fb6 <__libc_init_array+0x1e>
 8005fd0:	080069b4 	.word	0x080069b4
 8005fd4:	080069b4 	.word	0x080069b4
 8005fd8:	080069bc 	.word	0x080069bc
 8005fdc:	080069b4 	.word	0x080069b4

08005fe0 <__retarget_lock_acquire_recursive>:
 8005fe0:	4770      	bx	lr

08005fe2 <__retarget_lock_release_recursive>:
 8005fe2:	4770      	bx	lr

08005fe4 <_free_r>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	0005      	movs	r5, r0
 8005fe8:	1e0c      	subs	r4, r1, #0
 8005fea:	d010      	beq.n	800600e <_free_r+0x2a>
 8005fec:	3c04      	subs	r4, #4
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da00      	bge.n	8005ff6 <_free_r+0x12>
 8005ff4:	18e4      	adds	r4, r4, r3
 8005ff6:	0028      	movs	r0, r5
 8005ff8:	f000 f8e0 	bl	80061bc <__malloc_lock>
 8005ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8006074 <_free_r+0x90>)
 8005ffe:	6813      	ldr	r3, [r2, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <_free_r+0x2c>
 8006004:	6063      	str	r3, [r4, #4]
 8006006:	6014      	str	r4, [r2, #0]
 8006008:	0028      	movs	r0, r5
 800600a:	f000 f8df 	bl	80061cc <__malloc_unlock>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	42a3      	cmp	r3, r4
 8006012:	d908      	bls.n	8006026 <_free_r+0x42>
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	1821      	adds	r1, r4, r0
 8006018:	428b      	cmp	r3, r1
 800601a:	d1f3      	bne.n	8006004 <_free_r+0x20>
 800601c:	6819      	ldr	r1, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	1809      	adds	r1, r1, r0
 8006022:	6021      	str	r1, [r4, #0]
 8006024:	e7ee      	b.n	8006004 <_free_r+0x20>
 8006026:	001a      	movs	r2, r3
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <_free_r+0x4e>
 800602e:	42a3      	cmp	r3, r4
 8006030:	d9f9      	bls.n	8006026 <_free_r+0x42>
 8006032:	6811      	ldr	r1, [r2, #0]
 8006034:	1850      	adds	r0, r2, r1
 8006036:	42a0      	cmp	r0, r4
 8006038:	d10b      	bne.n	8006052 <_free_r+0x6e>
 800603a:	6820      	ldr	r0, [r4, #0]
 800603c:	1809      	adds	r1, r1, r0
 800603e:	1850      	adds	r0, r2, r1
 8006040:	6011      	str	r1, [r2, #0]
 8006042:	4283      	cmp	r3, r0
 8006044:	d1e0      	bne.n	8006008 <_free_r+0x24>
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	1841      	adds	r1, r0, r1
 800604c:	6011      	str	r1, [r2, #0]
 800604e:	6053      	str	r3, [r2, #4]
 8006050:	e7da      	b.n	8006008 <_free_r+0x24>
 8006052:	42a0      	cmp	r0, r4
 8006054:	d902      	bls.n	800605c <_free_r+0x78>
 8006056:	230c      	movs	r3, #12
 8006058:	602b      	str	r3, [r5, #0]
 800605a:	e7d5      	b.n	8006008 <_free_r+0x24>
 800605c:	6820      	ldr	r0, [r4, #0]
 800605e:	1821      	adds	r1, r4, r0
 8006060:	428b      	cmp	r3, r1
 8006062:	d103      	bne.n	800606c <_free_r+0x88>
 8006064:	6819      	ldr	r1, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	1809      	adds	r1, r1, r0
 800606a:	6021      	str	r1, [r4, #0]
 800606c:	6063      	str	r3, [r4, #4]
 800606e:	6054      	str	r4, [r2, #4]
 8006070:	e7ca      	b.n	8006008 <_free_r+0x24>
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	20000328 	.word	0x20000328

08006078 <sbrk_aligned>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	4e0f      	ldr	r6, [pc, #60]	@ (80060b8 <sbrk_aligned+0x40>)
 800607c:	000d      	movs	r5, r1
 800607e:	6831      	ldr	r1, [r6, #0]
 8006080:	0004      	movs	r4, r0
 8006082:	2900      	cmp	r1, #0
 8006084:	d102      	bne.n	800608c <sbrk_aligned+0x14>
 8006086:	f000 fb95 	bl	80067b4 <_sbrk_r>
 800608a:	6030      	str	r0, [r6, #0]
 800608c:	0029      	movs	r1, r5
 800608e:	0020      	movs	r0, r4
 8006090:	f000 fb90 	bl	80067b4 <_sbrk_r>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d103      	bne.n	80060a0 <sbrk_aligned+0x28>
 8006098:	2501      	movs	r5, #1
 800609a:	426d      	negs	r5, r5
 800609c:	0028      	movs	r0, r5
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	2303      	movs	r3, #3
 80060a2:	1cc5      	adds	r5, r0, #3
 80060a4:	439d      	bics	r5, r3
 80060a6:	42a8      	cmp	r0, r5
 80060a8:	d0f8      	beq.n	800609c <sbrk_aligned+0x24>
 80060aa:	1a29      	subs	r1, r5, r0
 80060ac:	0020      	movs	r0, r4
 80060ae:	f000 fb81 	bl	80067b4 <_sbrk_r>
 80060b2:	3001      	adds	r0, #1
 80060b4:	d1f2      	bne.n	800609c <sbrk_aligned+0x24>
 80060b6:	e7ef      	b.n	8006098 <sbrk_aligned+0x20>
 80060b8:	20000324 	.word	0x20000324

080060bc <_malloc_r>:
 80060bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060be:	2203      	movs	r2, #3
 80060c0:	1ccb      	adds	r3, r1, #3
 80060c2:	4393      	bics	r3, r2
 80060c4:	3308      	adds	r3, #8
 80060c6:	0005      	movs	r5, r0
 80060c8:	001f      	movs	r7, r3
 80060ca:	2b0c      	cmp	r3, #12
 80060cc:	d234      	bcs.n	8006138 <_malloc_r+0x7c>
 80060ce:	270c      	movs	r7, #12
 80060d0:	42b9      	cmp	r1, r7
 80060d2:	d833      	bhi.n	800613c <_malloc_r+0x80>
 80060d4:	0028      	movs	r0, r5
 80060d6:	f000 f871 	bl	80061bc <__malloc_lock>
 80060da:	4e37      	ldr	r6, [pc, #220]	@ (80061b8 <_malloc_r+0xfc>)
 80060dc:	6833      	ldr	r3, [r6, #0]
 80060de:	001c      	movs	r4, r3
 80060e0:	2c00      	cmp	r4, #0
 80060e2:	d12f      	bne.n	8006144 <_malloc_r+0x88>
 80060e4:	0039      	movs	r1, r7
 80060e6:	0028      	movs	r0, r5
 80060e8:	f7ff ffc6 	bl	8006078 <sbrk_aligned>
 80060ec:	0004      	movs	r4, r0
 80060ee:	1c43      	adds	r3, r0, #1
 80060f0:	d15f      	bne.n	80061b2 <_malloc_r+0xf6>
 80060f2:	6834      	ldr	r4, [r6, #0]
 80060f4:	9400      	str	r4, [sp, #0]
 80060f6:	9b00      	ldr	r3, [sp, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d14a      	bne.n	8006192 <_malloc_r+0xd6>
 80060fc:	2c00      	cmp	r4, #0
 80060fe:	d052      	beq.n	80061a6 <_malloc_r+0xea>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	0028      	movs	r0, r5
 8006104:	18e3      	adds	r3, r4, r3
 8006106:	9900      	ldr	r1, [sp, #0]
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	f000 fb53 	bl	80067b4 <_sbrk_r>
 800610e:	9b01      	ldr	r3, [sp, #4]
 8006110:	4283      	cmp	r3, r0
 8006112:	d148      	bne.n	80061a6 <_malloc_r+0xea>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	0028      	movs	r0, r5
 8006118:	1aff      	subs	r7, r7, r3
 800611a:	0039      	movs	r1, r7
 800611c:	f7ff ffac 	bl	8006078 <sbrk_aligned>
 8006120:	3001      	adds	r0, #1
 8006122:	d040      	beq.n	80061a6 <_malloc_r+0xea>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	19db      	adds	r3, r3, r7
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	6833      	ldr	r3, [r6, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	2a00      	cmp	r2, #0
 8006130:	d133      	bne.n	800619a <_malloc_r+0xde>
 8006132:	9b00      	ldr	r3, [sp, #0]
 8006134:	6033      	str	r3, [r6, #0]
 8006136:	e019      	b.n	800616c <_malloc_r+0xb0>
 8006138:	2b00      	cmp	r3, #0
 800613a:	dac9      	bge.n	80060d0 <_malloc_r+0x14>
 800613c:	230c      	movs	r3, #12
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	2000      	movs	r0, #0
 8006142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006144:	6821      	ldr	r1, [r4, #0]
 8006146:	1bc9      	subs	r1, r1, r7
 8006148:	d420      	bmi.n	800618c <_malloc_r+0xd0>
 800614a:	290b      	cmp	r1, #11
 800614c:	d90a      	bls.n	8006164 <_malloc_r+0xa8>
 800614e:	19e2      	adds	r2, r4, r7
 8006150:	6027      	str	r7, [r4, #0]
 8006152:	42a3      	cmp	r3, r4
 8006154:	d104      	bne.n	8006160 <_malloc_r+0xa4>
 8006156:	6032      	str	r2, [r6, #0]
 8006158:	6863      	ldr	r3, [r4, #4]
 800615a:	6011      	str	r1, [r2, #0]
 800615c:	6053      	str	r3, [r2, #4]
 800615e:	e005      	b.n	800616c <_malloc_r+0xb0>
 8006160:	605a      	str	r2, [r3, #4]
 8006162:	e7f9      	b.n	8006158 <_malloc_r+0x9c>
 8006164:	6862      	ldr	r2, [r4, #4]
 8006166:	42a3      	cmp	r3, r4
 8006168:	d10e      	bne.n	8006188 <_malloc_r+0xcc>
 800616a:	6032      	str	r2, [r6, #0]
 800616c:	0028      	movs	r0, r5
 800616e:	f000 f82d 	bl	80061cc <__malloc_unlock>
 8006172:	0020      	movs	r0, r4
 8006174:	2207      	movs	r2, #7
 8006176:	300b      	adds	r0, #11
 8006178:	1d23      	adds	r3, r4, #4
 800617a:	4390      	bics	r0, r2
 800617c:	1ac2      	subs	r2, r0, r3
 800617e:	4298      	cmp	r0, r3
 8006180:	d0df      	beq.n	8006142 <_malloc_r+0x86>
 8006182:	1a1b      	subs	r3, r3, r0
 8006184:	50a3      	str	r3, [r4, r2]
 8006186:	e7dc      	b.n	8006142 <_malloc_r+0x86>
 8006188:	605a      	str	r2, [r3, #4]
 800618a:	e7ef      	b.n	800616c <_malloc_r+0xb0>
 800618c:	0023      	movs	r3, r4
 800618e:	6864      	ldr	r4, [r4, #4]
 8006190:	e7a6      	b.n	80060e0 <_malloc_r+0x24>
 8006192:	9c00      	ldr	r4, [sp, #0]
 8006194:	6863      	ldr	r3, [r4, #4]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	e7ad      	b.n	80060f6 <_malloc_r+0x3a>
 800619a:	001a      	movs	r2, r3
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	42a3      	cmp	r3, r4
 80061a0:	d1fb      	bne.n	800619a <_malloc_r+0xde>
 80061a2:	2300      	movs	r3, #0
 80061a4:	e7da      	b.n	800615c <_malloc_r+0xa0>
 80061a6:	230c      	movs	r3, #12
 80061a8:	0028      	movs	r0, r5
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	f000 f80e 	bl	80061cc <__malloc_unlock>
 80061b0:	e7c6      	b.n	8006140 <_malloc_r+0x84>
 80061b2:	6007      	str	r7, [r0, #0]
 80061b4:	e7da      	b.n	800616c <_malloc_r+0xb0>
 80061b6:	46c0      	nop			@ (mov r8, r8)
 80061b8:	20000328 	.word	0x20000328

080061bc <__malloc_lock>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	4802      	ldr	r0, [pc, #8]	@ (80061c8 <__malloc_lock+0xc>)
 80061c0:	f7ff ff0e 	bl	8005fe0 <__retarget_lock_acquire_recursive>
 80061c4:	bd10      	pop	{r4, pc}
 80061c6:	46c0      	nop			@ (mov r8, r8)
 80061c8:	20000320 	.word	0x20000320

080061cc <__malloc_unlock>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	4802      	ldr	r0, [pc, #8]	@ (80061d8 <__malloc_unlock+0xc>)
 80061d0:	f7ff ff07 	bl	8005fe2 <__retarget_lock_release_recursive>
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	46c0      	nop			@ (mov r8, r8)
 80061d8:	20000320 	.word	0x20000320

080061dc <__ssputs_r>:
 80061dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061de:	688e      	ldr	r6, [r1, #8]
 80061e0:	b085      	sub	sp, #20
 80061e2:	001f      	movs	r7, r3
 80061e4:	000c      	movs	r4, r1
 80061e6:	680b      	ldr	r3, [r1, #0]
 80061e8:	9002      	str	r0, [sp, #8]
 80061ea:	9203      	str	r2, [sp, #12]
 80061ec:	42be      	cmp	r6, r7
 80061ee:	d830      	bhi.n	8006252 <__ssputs_r+0x76>
 80061f0:	210c      	movs	r1, #12
 80061f2:	5e62      	ldrsh	r2, [r4, r1]
 80061f4:	2190      	movs	r1, #144	@ 0x90
 80061f6:	00c9      	lsls	r1, r1, #3
 80061f8:	420a      	tst	r2, r1
 80061fa:	d028      	beq.n	800624e <__ssputs_r+0x72>
 80061fc:	2003      	movs	r0, #3
 80061fe:	6921      	ldr	r1, [r4, #16]
 8006200:	1a5b      	subs	r3, r3, r1
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	6963      	ldr	r3, [r4, #20]
 8006206:	4343      	muls	r3, r0
 8006208:	9801      	ldr	r0, [sp, #4]
 800620a:	0fdd      	lsrs	r5, r3, #31
 800620c:	18ed      	adds	r5, r5, r3
 800620e:	1c7b      	adds	r3, r7, #1
 8006210:	181b      	adds	r3, r3, r0
 8006212:	106d      	asrs	r5, r5, #1
 8006214:	42ab      	cmp	r3, r5
 8006216:	d900      	bls.n	800621a <__ssputs_r+0x3e>
 8006218:	001d      	movs	r5, r3
 800621a:	0552      	lsls	r2, r2, #21
 800621c:	d528      	bpl.n	8006270 <__ssputs_r+0x94>
 800621e:	0029      	movs	r1, r5
 8006220:	9802      	ldr	r0, [sp, #8]
 8006222:	f7ff ff4b 	bl	80060bc <_malloc_r>
 8006226:	1e06      	subs	r6, r0, #0
 8006228:	d02c      	beq.n	8006284 <__ssputs_r+0xa8>
 800622a:	9a01      	ldr	r2, [sp, #4]
 800622c:	6921      	ldr	r1, [r4, #16]
 800622e:	f000 fade 	bl	80067ee <memcpy>
 8006232:	89a2      	ldrh	r2, [r4, #12]
 8006234:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <__ssputs_r+0xbc>)
 8006236:	401a      	ands	r2, r3
 8006238:	2380      	movs	r3, #128	@ 0x80
 800623a:	4313      	orrs	r3, r2
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	6126      	str	r6, [r4, #16]
 8006242:	18f6      	adds	r6, r6, r3
 8006244:	6026      	str	r6, [r4, #0]
 8006246:	003e      	movs	r6, r7
 8006248:	6165      	str	r5, [r4, #20]
 800624a:	1aed      	subs	r5, r5, r3
 800624c:	60a5      	str	r5, [r4, #8]
 800624e:	42be      	cmp	r6, r7
 8006250:	d900      	bls.n	8006254 <__ssputs_r+0x78>
 8006252:	003e      	movs	r6, r7
 8006254:	0032      	movs	r2, r6
 8006256:	9903      	ldr	r1, [sp, #12]
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	f000 fa99 	bl	8006790 <memmove>
 800625e:	2000      	movs	r0, #0
 8006260:	68a3      	ldr	r3, [r4, #8]
 8006262:	1b9b      	subs	r3, r3, r6
 8006264:	60a3      	str	r3, [r4, #8]
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	199b      	adds	r3, r3, r6
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	b005      	add	sp, #20
 800626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006270:	002a      	movs	r2, r5
 8006272:	9802      	ldr	r0, [sp, #8]
 8006274:	f000 fac4 	bl	8006800 <_realloc_r>
 8006278:	1e06      	subs	r6, r0, #0
 800627a:	d1e0      	bne.n	800623e <__ssputs_r+0x62>
 800627c:	6921      	ldr	r1, [r4, #16]
 800627e:	9802      	ldr	r0, [sp, #8]
 8006280:	f7ff feb0 	bl	8005fe4 <_free_r>
 8006284:	230c      	movs	r3, #12
 8006286:	2001      	movs	r0, #1
 8006288:	9a02      	ldr	r2, [sp, #8]
 800628a:	4240      	negs	r0, r0
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	89a2      	ldrh	r2, [r4, #12]
 8006290:	3334      	adds	r3, #52	@ 0x34
 8006292:	4313      	orrs	r3, r2
 8006294:	81a3      	strh	r3, [r4, #12]
 8006296:	e7e9      	b.n	800626c <__ssputs_r+0x90>
 8006298:	fffffb7f 	.word	0xfffffb7f

0800629c <_svfiprintf_r>:
 800629c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629e:	b0a1      	sub	sp, #132	@ 0x84
 80062a0:	9003      	str	r0, [sp, #12]
 80062a2:	001d      	movs	r5, r3
 80062a4:	898b      	ldrh	r3, [r1, #12]
 80062a6:	000f      	movs	r7, r1
 80062a8:	0016      	movs	r6, r2
 80062aa:	061b      	lsls	r3, r3, #24
 80062ac:	d511      	bpl.n	80062d2 <_svfiprintf_r+0x36>
 80062ae:	690b      	ldr	r3, [r1, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10e      	bne.n	80062d2 <_svfiprintf_r+0x36>
 80062b4:	2140      	movs	r1, #64	@ 0x40
 80062b6:	f7ff ff01 	bl	80060bc <_malloc_r>
 80062ba:	6038      	str	r0, [r7, #0]
 80062bc:	6138      	str	r0, [r7, #16]
 80062be:	2800      	cmp	r0, #0
 80062c0:	d105      	bne.n	80062ce <_svfiprintf_r+0x32>
 80062c2:	230c      	movs	r3, #12
 80062c4:	9a03      	ldr	r2, [sp, #12]
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	2001      	movs	r0, #1
 80062ca:	4240      	negs	r0, r0
 80062cc:	e0cf      	b.n	800646e <_svfiprintf_r+0x1d2>
 80062ce:	2340      	movs	r3, #64	@ 0x40
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	2300      	movs	r3, #0
 80062d4:	ac08      	add	r4, sp, #32
 80062d6:	6163      	str	r3, [r4, #20]
 80062d8:	3320      	adds	r3, #32
 80062da:	7663      	strb	r3, [r4, #25]
 80062dc:	3310      	adds	r3, #16
 80062de:	76a3      	strb	r3, [r4, #26]
 80062e0:	9507      	str	r5, [sp, #28]
 80062e2:	0035      	movs	r5, r6
 80062e4:	782b      	ldrb	r3, [r5, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <_svfiprintf_r+0x52>
 80062ea:	2b25      	cmp	r3, #37	@ 0x25
 80062ec:	d148      	bne.n	8006380 <_svfiprintf_r+0xe4>
 80062ee:	1bab      	subs	r3, r5, r6
 80062f0:	9305      	str	r3, [sp, #20]
 80062f2:	42b5      	cmp	r5, r6
 80062f4:	d00b      	beq.n	800630e <_svfiprintf_r+0x72>
 80062f6:	0032      	movs	r2, r6
 80062f8:	0039      	movs	r1, r7
 80062fa:	9803      	ldr	r0, [sp, #12]
 80062fc:	f7ff ff6e 	bl	80061dc <__ssputs_r>
 8006300:	3001      	adds	r0, #1
 8006302:	d100      	bne.n	8006306 <_svfiprintf_r+0x6a>
 8006304:	e0ae      	b.n	8006464 <_svfiprintf_r+0x1c8>
 8006306:	6963      	ldr	r3, [r4, #20]
 8006308:	9a05      	ldr	r2, [sp, #20]
 800630a:	189b      	adds	r3, r3, r2
 800630c:	6163      	str	r3, [r4, #20]
 800630e:	782b      	ldrb	r3, [r5, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d100      	bne.n	8006316 <_svfiprintf_r+0x7a>
 8006314:	e0a6      	b.n	8006464 <_svfiprintf_r+0x1c8>
 8006316:	2201      	movs	r2, #1
 8006318:	2300      	movs	r3, #0
 800631a:	4252      	negs	r2, r2
 800631c:	6062      	str	r2, [r4, #4]
 800631e:	a904      	add	r1, sp, #16
 8006320:	3254      	adds	r2, #84	@ 0x54
 8006322:	1852      	adds	r2, r2, r1
 8006324:	1c6e      	adds	r6, r5, #1
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	60e3      	str	r3, [r4, #12]
 800632a:	60a3      	str	r3, [r4, #8]
 800632c:	7013      	strb	r3, [r2, #0]
 800632e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006330:	4b54      	ldr	r3, [pc, #336]	@ (8006484 <_svfiprintf_r+0x1e8>)
 8006332:	2205      	movs	r2, #5
 8006334:	0018      	movs	r0, r3
 8006336:	7831      	ldrb	r1, [r6, #0]
 8006338:	9305      	str	r3, [sp, #20]
 800633a:	f000 fa4d 	bl	80067d8 <memchr>
 800633e:	1c75      	adds	r5, r6, #1
 8006340:	2800      	cmp	r0, #0
 8006342:	d11f      	bne.n	8006384 <_svfiprintf_r+0xe8>
 8006344:	6822      	ldr	r2, [r4, #0]
 8006346:	06d3      	lsls	r3, r2, #27
 8006348:	d504      	bpl.n	8006354 <_svfiprintf_r+0xb8>
 800634a:	2353      	movs	r3, #83	@ 0x53
 800634c:	a904      	add	r1, sp, #16
 800634e:	185b      	adds	r3, r3, r1
 8006350:	2120      	movs	r1, #32
 8006352:	7019      	strb	r1, [r3, #0]
 8006354:	0713      	lsls	r3, r2, #28
 8006356:	d504      	bpl.n	8006362 <_svfiprintf_r+0xc6>
 8006358:	2353      	movs	r3, #83	@ 0x53
 800635a:	a904      	add	r1, sp, #16
 800635c:	185b      	adds	r3, r3, r1
 800635e:	212b      	movs	r1, #43	@ 0x2b
 8006360:	7019      	strb	r1, [r3, #0]
 8006362:	7833      	ldrb	r3, [r6, #0]
 8006364:	2b2a      	cmp	r3, #42	@ 0x2a
 8006366:	d016      	beq.n	8006396 <_svfiprintf_r+0xfa>
 8006368:	0035      	movs	r5, r6
 800636a:	2100      	movs	r1, #0
 800636c:	200a      	movs	r0, #10
 800636e:	68e3      	ldr	r3, [r4, #12]
 8006370:	782a      	ldrb	r2, [r5, #0]
 8006372:	1c6e      	adds	r6, r5, #1
 8006374:	3a30      	subs	r2, #48	@ 0x30
 8006376:	2a09      	cmp	r2, #9
 8006378:	d950      	bls.n	800641c <_svfiprintf_r+0x180>
 800637a:	2900      	cmp	r1, #0
 800637c:	d111      	bne.n	80063a2 <_svfiprintf_r+0x106>
 800637e:	e017      	b.n	80063b0 <_svfiprintf_r+0x114>
 8006380:	3501      	adds	r5, #1
 8006382:	e7af      	b.n	80062e4 <_svfiprintf_r+0x48>
 8006384:	9b05      	ldr	r3, [sp, #20]
 8006386:	6822      	ldr	r2, [r4, #0]
 8006388:	1ac0      	subs	r0, r0, r3
 800638a:	2301      	movs	r3, #1
 800638c:	4083      	lsls	r3, r0
 800638e:	4313      	orrs	r3, r2
 8006390:	002e      	movs	r6, r5
 8006392:	6023      	str	r3, [r4, #0]
 8006394:	e7cc      	b.n	8006330 <_svfiprintf_r+0x94>
 8006396:	9b07      	ldr	r3, [sp, #28]
 8006398:	1d19      	adds	r1, r3, #4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	9107      	str	r1, [sp, #28]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	db01      	blt.n	80063a6 <_svfiprintf_r+0x10a>
 80063a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063a4:	e004      	b.n	80063b0 <_svfiprintf_r+0x114>
 80063a6:	425b      	negs	r3, r3
 80063a8:	60e3      	str	r3, [r4, #12]
 80063aa:	2302      	movs	r3, #2
 80063ac:	4313      	orrs	r3, r2
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	782b      	ldrb	r3, [r5, #0]
 80063b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80063b4:	d10c      	bne.n	80063d0 <_svfiprintf_r+0x134>
 80063b6:	786b      	ldrb	r3, [r5, #1]
 80063b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80063ba:	d134      	bne.n	8006426 <_svfiprintf_r+0x18a>
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	3502      	adds	r5, #2
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	9207      	str	r2, [sp, #28]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	da01      	bge.n	80063ce <_svfiprintf_r+0x132>
 80063ca:	2301      	movs	r3, #1
 80063cc:	425b      	negs	r3, r3
 80063ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d0:	4e2d      	ldr	r6, [pc, #180]	@ (8006488 <_svfiprintf_r+0x1ec>)
 80063d2:	2203      	movs	r2, #3
 80063d4:	0030      	movs	r0, r6
 80063d6:	7829      	ldrb	r1, [r5, #0]
 80063d8:	f000 f9fe 	bl	80067d8 <memchr>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d006      	beq.n	80063ee <_svfiprintf_r+0x152>
 80063e0:	2340      	movs	r3, #64	@ 0x40
 80063e2:	1b80      	subs	r0, r0, r6
 80063e4:	4083      	lsls	r3, r0
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	3501      	adds	r5, #1
 80063ea:	4313      	orrs	r3, r2
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	7829      	ldrb	r1, [r5, #0]
 80063f0:	2206      	movs	r2, #6
 80063f2:	4826      	ldr	r0, [pc, #152]	@ (800648c <_svfiprintf_r+0x1f0>)
 80063f4:	1c6e      	adds	r6, r5, #1
 80063f6:	7621      	strb	r1, [r4, #24]
 80063f8:	f000 f9ee 	bl	80067d8 <memchr>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d038      	beq.n	8006472 <_svfiprintf_r+0x1d6>
 8006400:	4b23      	ldr	r3, [pc, #140]	@ (8006490 <_svfiprintf_r+0x1f4>)
 8006402:	2b00      	cmp	r3, #0
 8006404:	d122      	bne.n	800644c <_svfiprintf_r+0x1b0>
 8006406:	2207      	movs	r2, #7
 8006408:	9b07      	ldr	r3, [sp, #28]
 800640a:	3307      	adds	r3, #7
 800640c:	4393      	bics	r3, r2
 800640e:	3308      	adds	r3, #8
 8006410:	9307      	str	r3, [sp, #28]
 8006412:	6963      	ldr	r3, [r4, #20]
 8006414:	9a04      	ldr	r2, [sp, #16]
 8006416:	189b      	adds	r3, r3, r2
 8006418:	6163      	str	r3, [r4, #20]
 800641a:	e762      	b.n	80062e2 <_svfiprintf_r+0x46>
 800641c:	4343      	muls	r3, r0
 800641e:	0035      	movs	r5, r6
 8006420:	2101      	movs	r1, #1
 8006422:	189b      	adds	r3, r3, r2
 8006424:	e7a4      	b.n	8006370 <_svfiprintf_r+0xd4>
 8006426:	2300      	movs	r3, #0
 8006428:	200a      	movs	r0, #10
 800642a:	0019      	movs	r1, r3
 800642c:	3501      	adds	r5, #1
 800642e:	6063      	str	r3, [r4, #4]
 8006430:	782a      	ldrb	r2, [r5, #0]
 8006432:	1c6e      	adds	r6, r5, #1
 8006434:	3a30      	subs	r2, #48	@ 0x30
 8006436:	2a09      	cmp	r2, #9
 8006438:	d903      	bls.n	8006442 <_svfiprintf_r+0x1a6>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0c8      	beq.n	80063d0 <_svfiprintf_r+0x134>
 800643e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006440:	e7c6      	b.n	80063d0 <_svfiprintf_r+0x134>
 8006442:	4341      	muls	r1, r0
 8006444:	0035      	movs	r5, r6
 8006446:	2301      	movs	r3, #1
 8006448:	1889      	adds	r1, r1, r2
 800644a:	e7f1      	b.n	8006430 <_svfiprintf_r+0x194>
 800644c:	aa07      	add	r2, sp, #28
 800644e:	9200      	str	r2, [sp, #0]
 8006450:	0021      	movs	r1, r4
 8006452:	003a      	movs	r2, r7
 8006454:	4b0f      	ldr	r3, [pc, #60]	@ (8006494 <_svfiprintf_r+0x1f8>)
 8006456:	9803      	ldr	r0, [sp, #12]
 8006458:	e000      	b.n	800645c <_svfiprintf_r+0x1c0>
 800645a:	bf00      	nop
 800645c:	9004      	str	r0, [sp, #16]
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	3301      	adds	r3, #1
 8006462:	d1d6      	bne.n	8006412 <_svfiprintf_r+0x176>
 8006464:	89bb      	ldrh	r3, [r7, #12]
 8006466:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006468:	065b      	lsls	r3, r3, #25
 800646a:	d500      	bpl.n	800646e <_svfiprintf_r+0x1d2>
 800646c:	e72c      	b.n	80062c8 <_svfiprintf_r+0x2c>
 800646e:	b021      	add	sp, #132	@ 0x84
 8006470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006472:	aa07      	add	r2, sp, #28
 8006474:	9200      	str	r2, [sp, #0]
 8006476:	0021      	movs	r1, r4
 8006478:	003a      	movs	r2, r7
 800647a:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <_svfiprintf_r+0x1f8>)
 800647c:	9803      	ldr	r0, [sp, #12]
 800647e:	f000 f87b 	bl	8006578 <_printf_i>
 8006482:	e7eb      	b.n	800645c <_svfiprintf_r+0x1c0>
 8006484:	08006978 	.word	0x08006978
 8006488:	0800697e 	.word	0x0800697e
 800648c:	08006982 	.word	0x08006982
 8006490:	00000000 	.word	0x00000000
 8006494:	080061dd 	.word	0x080061dd

08006498 <_printf_common>:
 8006498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800649a:	0016      	movs	r6, r2
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	688a      	ldr	r2, [r1, #8]
 80064a0:	690b      	ldr	r3, [r1, #16]
 80064a2:	000c      	movs	r4, r1
 80064a4:	9000      	str	r0, [sp, #0]
 80064a6:	4293      	cmp	r3, r2
 80064a8:	da00      	bge.n	80064ac <_printf_common+0x14>
 80064aa:	0013      	movs	r3, r2
 80064ac:	0022      	movs	r2, r4
 80064ae:	6033      	str	r3, [r6, #0]
 80064b0:	3243      	adds	r2, #67	@ 0x43
 80064b2:	7812      	ldrb	r2, [r2, #0]
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	d001      	beq.n	80064bc <_printf_common+0x24>
 80064b8:	3301      	adds	r3, #1
 80064ba:	6033      	str	r3, [r6, #0]
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	069b      	lsls	r3, r3, #26
 80064c0:	d502      	bpl.n	80064c8 <_printf_common+0x30>
 80064c2:	6833      	ldr	r3, [r6, #0]
 80064c4:	3302      	adds	r3, #2
 80064c6:	6033      	str	r3, [r6, #0]
 80064c8:	6822      	ldr	r2, [r4, #0]
 80064ca:	2306      	movs	r3, #6
 80064cc:	0015      	movs	r5, r2
 80064ce:	401d      	ands	r5, r3
 80064d0:	421a      	tst	r2, r3
 80064d2:	d027      	beq.n	8006524 <_printf_common+0x8c>
 80064d4:	0023      	movs	r3, r4
 80064d6:	3343      	adds	r3, #67	@ 0x43
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	1e5a      	subs	r2, r3, #1
 80064dc:	4193      	sbcs	r3, r2
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	0692      	lsls	r2, r2, #26
 80064e2:	d430      	bmi.n	8006546 <_printf_common+0xae>
 80064e4:	0022      	movs	r2, r4
 80064e6:	9901      	ldr	r1, [sp, #4]
 80064e8:	9800      	ldr	r0, [sp, #0]
 80064ea:	9d08      	ldr	r5, [sp, #32]
 80064ec:	3243      	adds	r2, #67	@ 0x43
 80064ee:	47a8      	blx	r5
 80064f0:	3001      	adds	r0, #1
 80064f2:	d025      	beq.n	8006540 <_printf_common+0xa8>
 80064f4:	2206      	movs	r2, #6
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	2500      	movs	r5, #0
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d105      	bne.n	800650c <_printf_common+0x74>
 8006500:	6833      	ldr	r3, [r6, #0]
 8006502:	68e5      	ldr	r5, [r4, #12]
 8006504:	1aed      	subs	r5, r5, r3
 8006506:	43eb      	mvns	r3, r5
 8006508:	17db      	asrs	r3, r3, #31
 800650a:	401d      	ands	r5, r3
 800650c:	68a3      	ldr	r3, [r4, #8]
 800650e:	6922      	ldr	r2, [r4, #16]
 8006510:	4293      	cmp	r3, r2
 8006512:	dd01      	ble.n	8006518 <_printf_common+0x80>
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	18ed      	adds	r5, r5, r3
 8006518:	2600      	movs	r6, #0
 800651a:	42b5      	cmp	r5, r6
 800651c:	d120      	bne.n	8006560 <_printf_common+0xc8>
 800651e:	2000      	movs	r0, #0
 8006520:	e010      	b.n	8006544 <_printf_common+0xac>
 8006522:	3501      	adds	r5, #1
 8006524:	68e3      	ldr	r3, [r4, #12]
 8006526:	6832      	ldr	r2, [r6, #0]
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	42ab      	cmp	r3, r5
 800652c:	ddd2      	ble.n	80064d4 <_printf_common+0x3c>
 800652e:	0022      	movs	r2, r4
 8006530:	2301      	movs	r3, #1
 8006532:	9901      	ldr	r1, [sp, #4]
 8006534:	9800      	ldr	r0, [sp, #0]
 8006536:	9f08      	ldr	r7, [sp, #32]
 8006538:	3219      	adds	r2, #25
 800653a:	47b8      	blx	r7
 800653c:	3001      	adds	r0, #1
 800653e:	d1f0      	bne.n	8006522 <_printf_common+0x8a>
 8006540:	2001      	movs	r0, #1
 8006542:	4240      	negs	r0, r0
 8006544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006546:	2030      	movs	r0, #48	@ 0x30
 8006548:	18e1      	adds	r1, r4, r3
 800654a:	3143      	adds	r1, #67	@ 0x43
 800654c:	7008      	strb	r0, [r1, #0]
 800654e:	0021      	movs	r1, r4
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	3145      	adds	r1, #69	@ 0x45
 8006554:	7809      	ldrb	r1, [r1, #0]
 8006556:	18a2      	adds	r2, r4, r2
 8006558:	3243      	adds	r2, #67	@ 0x43
 800655a:	3302      	adds	r3, #2
 800655c:	7011      	strb	r1, [r2, #0]
 800655e:	e7c1      	b.n	80064e4 <_printf_common+0x4c>
 8006560:	0022      	movs	r2, r4
 8006562:	2301      	movs	r3, #1
 8006564:	9901      	ldr	r1, [sp, #4]
 8006566:	9800      	ldr	r0, [sp, #0]
 8006568:	9f08      	ldr	r7, [sp, #32]
 800656a:	321a      	adds	r2, #26
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	d0e6      	beq.n	8006540 <_printf_common+0xa8>
 8006572:	3601      	adds	r6, #1
 8006574:	e7d1      	b.n	800651a <_printf_common+0x82>
	...

08006578 <_printf_i>:
 8006578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657a:	b08b      	sub	sp, #44	@ 0x2c
 800657c:	9206      	str	r2, [sp, #24]
 800657e:	000a      	movs	r2, r1
 8006580:	3243      	adds	r2, #67	@ 0x43
 8006582:	9307      	str	r3, [sp, #28]
 8006584:	9005      	str	r0, [sp, #20]
 8006586:	9203      	str	r2, [sp, #12]
 8006588:	7e0a      	ldrb	r2, [r1, #24]
 800658a:	000c      	movs	r4, r1
 800658c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800658e:	2a78      	cmp	r2, #120	@ 0x78
 8006590:	d809      	bhi.n	80065a6 <_printf_i+0x2e>
 8006592:	2a62      	cmp	r2, #98	@ 0x62
 8006594:	d80b      	bhi.n	80065ae <_printf_i+0x36>
 8006596:	2a00      	cmp	r2, #0
 8006598:	d100      	bne.n	800659c <_printf_i+0x24>
 800659a:	e0ba      	b.n	8006712 <_printf_i+0x19a>
 800659c:	497a      	ldr	r1, [pc, #488]	@ (8006788 <_printf_i+0x210>)
 800659e:	9104      	str	r1, [sp, #16]
 80065a0:	2a58      	cmp	r2, #88	@ 0x58
 80065a2:	d100      	bne.n	80065a6 <_printf_i+0x2e>
 80065a4:	e08e      	b.n	80066c4 <_printf_i+0x14c>
 80065a6:	0025      	movs	r5, r4
 80065a8:	3542      	adds	r5, #66	@ 0x42
 80065aa:	702a      	strb	r2, [r5, #0]
 80065ac:	e022      	b.n	80065f4 <_printf_i+0x7c>
 80065ae:	0010      	movs	r0, r2
 80065b0:	3863      	subs	r0, #99	@ 0x63
 80065b2:	2815      	cmp	r0, #21
 80065b4:	d8f7      	bhi.n	80065a6 <_printf_i+0x2e>
 80065b6:	f7f9 fda5 	bl	8000104 <__gnu_thumb1_case_shi>
 80065ba:	0016      	.short	0x0016
 80065bc:	fff6001f 	.word	0xfff6001f
 80065c0:	fff6fff6 	.word	0xfff6fff6
 80065c4:	001ffff6 	.word	0x001ffff6
 80065c8:	fff6fff6 	.word	0xfff6fff6
 80065cc:	fff6fff6 	.word	0xfff6fff6
 80065d0:	0036009f 	.word	0x0036009f
 80065d4:	fff6007e 	.word	0xfff6007e
 80065d8:	00b0fff6 	.word	0x00b0fff6
 80065dc:	0036fff6 	.word	0x0036fff6
 80065e0:	fff6fff6 	.word	0xfff6fff6
 80065e4:	0082      	.short	0x0082
 80065e6:	0025      	movs	r5, r4
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	3542      	adds	r5, #66	@ 0x42
 80065ec:	1d11      	adds	r1, r2, #4
 80065ee:	6019      	str	r1, [r3, #0]
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	702b      	strb	r3, [r5, #0]
 80065f4:	2301      	movs	r3, #1
 80065f6:	e09e      	b.n	8006736 <_printf_i+0x1be>
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	6809      	ldr	r1, [r1, #0]
 80065fc:	1d02      	adds	r2, r0, #4
 80065fe:	060d      	lsls	r5, r1, #24
 8006600:	d50b      	bpl.n	800661a <_printf_i+0xa2>
 8006602:	6806      	ldr	r6, [r0, #0]
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	2e00      	cmp	r6, #0
 8006608:	da03      	bge.n	8006612 <_printf_i+0x9a>
 800660a:	232d      	movs	r3, #45	@ 0x2d
 800660c:	9a03      	ldr	r2, [sp, #12]
 800660e:	4276      	negs	r6, r6
 8006610:	7013      	strb	r3, [r2, #0]
 8006612:	4b5d      	ldr	r3, [pc, #372]	@ (8006788 <_printf_i+0x210>)
 8006614:	270a      	movs	r7, #10
 8006616:	9304      	str	r3, [sp, #16]
 8006618:	e018      	b.n	800664c <_printf_i+0xd4>
 800661a:	6806      	ldr	r6, [r0, #0]
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	0649      	lsls	r1, r1, #25
 8006620:	d5f1      	bpl.n	8006606 <_printf_i+0x8e>
 8006622:	b236      	sxth	r6, r6
 8006624:	e7ef      	b.n	8006606 <_printf_i+0x8e>
 8006626:	6808      	ldr	r0, [r1, #0]
 8006628:	6819      	ldr	r1, [r3, #0]
 800662a:	c940      	ldmia	r1!, {r6}
 800662c:	0605      	lsls	r5, r0, #24
 800662e:	d402      	bmi.n	8006636 <_printf_i+0xbe>
 8006630:	0640      	lsls	r0, r0, #25
 8006632:	d500      	bpl.n	8006636 <_printf_i+0xbe>
 8006634:	b2b6      	uxth	r6, r6
 8006636:	6019      	str	r1, [r3, #0]
 8006638:	4b53      	ldr	r3, [pc, #332]	@ (8006788 <_printf_i+0x210>)
 800663a:	270a      	movs	r7, #10
 800663c:	9304      	str	r3, [sp, #16]
 800663e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006640:	d100      	bne.n	8006644 <_printf_i+0xcc>
 8006642:	3f02      	subs	r7, #2
 8006644:	0023      	movs	r3, r4
 8006646:	2200      	movs	r2, #0
 8006648:	3343      	adds	r3, #67	@ 0x43
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	60a3      	str	r3, [r4, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	db06      	blt.n	8006662 <_printf_i+0xea>
 8006654:	2104      	movs	r1, #4
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	9d03      	ldr	r5, [sp, #12]
 800665a:	438a      	bics	r2, r1
 800665c:	6022      	str	r2, [r4, #0]
 800665e:	4333      	orrs	r3, r6
 8006660:	d00c      	beq.n	800667c <_printf_i+0x104>
 8006662:	9d03      	ldr	r5, [sp, #12]
 8006664:	0030      	movs	r0, r6
 8006666:	0039      	movs	r1, r7
 8006668:	f7f9 fddc 	bl	8000224 <__aeabi_uidivmod>
 800666c:	9b04      	ldr	r3, [sp, #16]
 800666e:	3d01      	subs	r5, #1
 8006670:	5c5b      	ldrb	r3, [r3, r1]
 8006672:	702b      	strb	r3, [r5, #0]
 8006674:	0033      	movs	r3, r6
 8006676:	0006      	movs	r6, r0
 8006678:	429f      	cmp	r7, r3
 800667a:	d9f3      	bls.n	8006664 <_printf_i+0xec>
 800667c:	2f08      	cmp	r7, #8
 800667e:	d109      	bne.n	8006694 <_printf_i+0x11c>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	07db      	lsls	r3, r3, #31
 8006684:	d506      	bpl.n	8006694 <_printf_i+0x11c>
 8006686:	6862      	ldr	r2, [r4, #4]
 8006688:	6923      	ldr	r3, [r4, #16]
 800668a:	429a      	cmp	r2, r3
 800668c:	dc02      	bgt.n	8006694 <_printf_i+0x11c>
 800668e:	2330      	movs	r3, #48	@ 0x30
 8006690:	3d01      	subs	r5, #1
 8006692:	702b      	strb	r3, [r5, #0]
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	1b5b      	subs	r3, r3, r5
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	9b07      	ldr	r3, [sp, #28]
 800669c:	0021      	movs	r1, r4
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	9805      	ldr	r0, [sp, #20]
 80066a2:	9b06      	ldr	r3, [sp, #24]
 80066a4:	aa09      	add	r2, sp, #36	@ 0x24
 80066a6:	f7ff fef7 	bl	8006498 <_printf_common>
 80066aa:	3001      	adds	r0, #1
 80066ac:	d148      	bne.n	8006740 <_printf_i+0x1c8>
 80066ae:	2001      	movs	r0, #1
 80066b0:	4240      	negs	r0, r0
 80066b2:	b00b      	add	sp, #44	@ 0x2c
 80066b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b6:	2220      	movs	r2, #32
 80066b8:	6809      	ldr	r1, [r1, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	6022      	str	r2, [r4, #0]
 80066be:	2278      	movs	r2, #120	@ 0x78
 80066c0:	4932      	ldr	r1, [pc, #200]	@ (800678c <_printf_i+0x214>)
 80066c2:	9104      	str	r1, [sp, #16]
 80066c4:	0021      	movs	r1, r4
 80066c6:	3145      	adds	r1, #69	@ 0x45
 80066c8:	700a      	strb	r2, [r1, #0]
 80066ca:	6819      	ldr	r1, [r3, #0]
 80066cc:	6822      	ldr	r2, [r4, #0]
 80066ce:	c940      	ldmia	r1!, {r6}
 80066d0:	0610      	lsls	r0, r2, #24
 80066d2:	d402      	bmi.n	80066da <_printf_i+0x162>
 80066d4:	0650      	lsls	r0, r2, #25
 80066d6:	d500      	bpl.n	80066da <_printf_i+0x162>
 80066d8:	b2b6      	uxth	r6, r6
 80066da:	6019      	str	r1, [r3, #0]
 80066dc:	07d3      	lsls	r3, r2, #31
 80066de:	d502      	bpl.n	80066e6 <_printf_i+0x16e>
 80066e0:	2320      	movs	r3, #32
 80066e2:	4313      	orrs	r3, r2
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	2e00      	cmp	r6, #0
 80066e8:	d001      	beq.n	80066ee <_printf_i+0x176>
 80066ea:	2710      	movs	r7, #16
 80066ec:	e7aa      	b.n	8006644 <_printf_i+0xcc>
 80066ee:	2220      	movs	r2, #32
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	4393      	bics	r3, r2
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	e7f8      	b.n	80066ea <_printf_i+0x172>
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	680d      	ldr	r5, [r1, #0]
 80066fc:	1d10      	adds	r0, r2, #4
 80066fe:	6949      	ldr	r1, [r1, #20]
 8006700:	6018      	str	r0, [r3, #0]
 8006702:	6813      	ldr	r3, [r2, #0]
 8006704:	062e      	lsls	r6, r5, #24
 8006706:	d501      	bpl.n	800670c <_printf_i+0x194>
 8006708:	6019      	str	r1, [r3, #0]
 800670a:	e002      	b.n	8006712 <_printf_i+0x19a>
 800670c:	066d      	lsls	r5, r5, #25
 800670e:	d5fb      	bpl.n	8006708 <_printf_i+0x190>
 8006710:	8019      	strh	r1, [r3, #0]
 8006712:	2300      	movs	r3, #0
 8006714:	9d03      	ldr	r5, [sp, #12]
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	e7bf      	b.n	800669a <_printf_i+0x122>
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	1d11      	adds	r1, r2, #4
 800671e:	6019      	str	r1, [r3, #0]
 8006720:	6815      	ldr	r5, [r2, #0]
 8006722:	2100      	movs	r1, #0
 8006724:	0028      	movs	r0, r5
 8006726:	6862      	ldr	r2, [r4, #4]
 8006728:	f000 f856 	bl	80067d8 <memchr>
 800672c:	2800      	cmp	r0, #0
 800672e:	d001      	beq.n	8006734 <_printf_i+0x1bc>
 8006730:	1b40      	subs	r0, r0, r5
 8006732:	6060      	str	r0, [r4, #4]
 8006734:	6863      	ldr	r3, [r4, #4]
 8006736:	6123      	str	r3, [r4, #16]
 8006738:	2300      	movs	r3, #0
 800673a:	9a03      	ldr	r2, [sp, #12]
 800673c:	7013      	strb	r3, [r2, #0]
 800673e:	e7ac      	b.n	800669a <_printf_i+0x122>
 8006740:	002a      	movs	r2, r5
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	9906      	ldr	r1, [sp, #24]
 8006746:	9805      	ldr	r0, [sp, #20]
 8006748:	9d07      	ldr	r5, [sp, #28]
 800674a:	47a8      	blx	r5
 800674c:	3001      	adds	r0, #1
 800674e:	d0ae      	beq.n	80066ae <_printf_i+0x136>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	079b      	lsls	r3, r3, #30
 8006754:	d415      	bmi.n	8006782 <_printf_i+0x20a>
 8006756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006758:	68e0      	ldr	r0, [r4, #12]
 800675a:	4298      	cmp	r0, r3
 800675c:	daa9      	bge.n	80066b2 <_printf_i+0x13a>
 800675e:	0018      	movs	r0, r3
 8006760:	e7a7      	b.n	80066b2 <_printf_i+0x13a>
 8006762:	0022      	movs	r2, r4
 8006764:	2301      	movs	r3, #1
 8006766:	9906      	ldr	r1, [sp, #24]
 8006768:	9805      	ldr	r0, [sp, #20]
 800676a:	9e07      	ldr	r6, [sp, #28]
 800676c:	3219      	adds	r2, #25
 800676e:	47b0      	blx	r6
 8006770:	3001      	adds	r0, #1
 8006772:	d09c      	beq.n	80066ae <_printf_i+0x136>
 8006774:	3501      	adds	r5, #1
 8006776:	68e3      	ldr	r3, [r4, #12]
 8006778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	42ab      	cmp	r3, r5
 800677e:	dcf0      	bgt.n	8006762 <_printf_i+0x1ea>
 8006780:	e7e9      	b.n	8006756 <_printf_i+0x1de>
 8006782:	2500      	movs	r5, #0
 8006784:	e7f7      	b.n	8006776 <_printf_i+0x1fe>
 8006786:	46c0      	nop			@ (mov r8, r8)
 8006788:	08006989 	.word	0x08006989
 800678c:	0800699a 	.word	0x0800699a

08006790 <memmove>:
 8006790:	b510      	push	{r4, lr}
 8006792:	4288      	cmp	r0, r1
 8006794:	d902      	bls.n	800679c <memmove+0xc>
 8006796:	188b      	adds	r3, r1, r2
 8006798:	4298      	cmp	r0, r3
 800679a:	d308      	bcc.n	80067ae <memmove+0x1e>
 800679c:	2300      	movs	r3, #0
 800679e:	429a      	cmp	r2, r3
 80067a0:	d007      	beq.n	80067b2 <memmove+0x22>
 80067a2:	5ccc      	ldrb	r4, [r1, r3]
 80067a4:	54c4      	strb	r4, [r0, r3]
 80067a6:	3301      	adds	r3, #1
 80067a8:	e7f9      	b.n	800679e <memmove+0xe>
 80067aa:	5c8b      	ldrb	r3, [r1, r2]
 80067ac:	5483      	strb	r3, [r0, r2]
 80067ae:	3a01      	subs	r2, #1
 80067b0:	d2fb      	bcs.n	80067aa <memmove+0x1a>
 80067b2:	bd10      	pop	{r4, pc}

080067b4 <_sbrk_r>:
 80067b4:	2300      	movs	r3, #0
 80067b6:	b570      	push	{r4, r5, r6, lr}
 80067b8:	4d06      	ldr	r5, [pc, #24]	@ (80067d4 <_sbrk_r+0x20>)
 80067ba:	0004      	movs	r4, r0
 80067bc:	0008      	movs	r0, r1
 80067be:	602b      	str	r3, [r5, #0]
 80067c0:	f7fa fa7e 	bl	8000cc0 <_sbrk>
 80067c4:	1c43      	adds	r3, r0, #1
 80067c6:	d103      	bne.n	80067d0 <_sbrk_r+0x1c>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d000      	beq.n	80067d0 <_sbrk_r+0x1c>
 80067ce:	6023      	str	r3, [r4, #0]
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
 80067d2:	46c0      	nop			@ (mov r8, r8)
 80067d4:	2000031c 	.word	0x2000031c

080067d8 <memchr>:
 80067d8:	b2c9      	uxtb	r1, r1
 80067da:	1882      	adds	r2, r0, r2
 80067dc:	4290      	cmp	r0, r2
 80067de:	d101      	bne.n	80067e4 <memchr+0xc>
 80067e0:	2000      	movs	r0, #0
 80067e2:	4770      	bx	lr
 80067e4:	7803      	ldrb	r3, [r0, #0]
 80067e6:	428b      	cmp	r3, r1
 80067e8:	d0fb      	beq.n	80067e2 <memchr+0xa>
 80067ea:	3001      	adds	r0, #1
 80067ec:	e7f6      	b.n	80067dc <memchr+0x4>

080067ee <memcpy>:
 80067ee:	2300      	movs	r3, #0
 80067f0:	b510      	push	{r4, lr}
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d100      	bne.n	80067f8 <memcpy+0xa>
 80067f6:	bd10      	pop	{r4, pc}
 80067f8:	5ccc      	ldrb	r4, [r1, r3]
 80067fa:	54c4      	strb	r4, [r0, r3]
 80067fc:	3301      	adds	r3, #1
 80067fe:	e7f8      	b.n	80067f2 <memcpy+0x4>

08006800 <_realloc_r>:
 8006800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006802:	0006      	movs	r6, r0
 8006804:	000c      	movs	r4, r1
 8006806:	0015      	movs	r5, r2
 8006808:	2900      	cmp	r1, #0
 800680a:	d105      	bne.n	8006818 <_realloc_r+0x18>
 800680c:	0011      	movs	r1, r2
 800680e:	f7ff fc55 	bl	80060bc <_malloc_r>
 8006812:	0004      	movs	r4, r0
 8006814:	0020      	movs	r0, r4
 8006816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006818:	2a00      	cmp	r2, #0
 800681a:	d103      	bne.n	8006824 <_realloc_r+0x24>
 800681c:	f7ff fbe2 	bl	8005fe4 <_free_r>
 8006820:	002c      	movs	r4, r5
 8006822:	e7f7      	b.n	8006814 <_realloc_r+0x14>
 8006824:	f000 f81c 	bl	8006860 <_malloc_usable_size_r>
 8006828:	0007      	movs	r7, r0
 800682a:	4285      	cmp	r5, r0
 800682c:	d802      	bhi.n	8006834 <_realloc_r+0x34>
 800682e:	0843      	lsrs	r3, r0, #1
 8006830:	42ab      	cmp	r3, r5
 8006832:	d3ef      	bcc.n	8006814 <_realloc_r+0x14>
 8006834:	0029      	movs	r1, r5
 8006836:	0030      	movs	r0, r6
 8006838:	f7ff fc40 	bl	80060bc <_malloc_r>
 800683c:	9001      	str	r0, [sp, #4]
 800683e:	2800      	cmp	r0, #0
 8006840:	d101      	bne.n	8006846 <_realloc_r+0x46>
 8006842:	9c01      	ldr	r4, [sp, #4]
 8006844:	e7e6      	b.n	8006814 <_realloc_r+0x14>
 8006846:	002a      	movs	r2, r5
 8006848:	42bd      	cmp	r5, r7
 800684a:	d900      	bls.n	800684e <_realloc_r+0x4e>
 800684c:	003a      	movs	r2, r7
 800684e:	0021      	movs	r1, r4
 8006850:	9801      	ldr	r0, [sp, #4]
 8006852:	f7ff ffcc 	bl	80067ee <memcpy>
 8006856:	0021      	movs	r1, r4
 8006858:	0030      	movs	r0, r6
 800685a:	f7ff fbc3 	bl	8005fe4 <_free_r>
 800685e:	e7f0      	b.n	8006842 <_realloc_r+0x42>

08006860 <_malloc_usable_size_r>:
 8006860:	1f0b      	subs	r3, r1, #4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	1f18      	subs	r0, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	da01      	bge.n	800686e <_malloc_usable_size_r+0xe>
 800686a:	580b      	ldr	r3, [r1, r0]
 800686c:	18c0      	adds	r0, r0, r3
 800686e:	4770      	bx	lr

08006870 <_init>:
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	46c0      	nop			@ (mov r8, r8)
 8006874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006876:	bc08      	pop	{r3}
 8006878:	469e      	mov	lr, r3
 800687a:	4770      	bx	lr

0800687c <_fini>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr
